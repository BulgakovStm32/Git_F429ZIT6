
f429zit6_proba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e758  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b74  0800e908  0800e908  0001e908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801147c  0801147c  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801147c  0801147c  0002147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011484  08011484  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011484  08011484  00021484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011488  08011488  00021488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801148c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064ac  20000078  08011504  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20006524  08011504  00036524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a22c  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052ed  00000000  00000000  0005a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a8  00000000  00000000  0005f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  00060970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f15e  00000000  00000000  00061c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001eb12  00000000  00000000  00090db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea71d  00000000  00000000  000af8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00199fe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ac  00000000  00000000  0019a060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e8f0 	.word	0x0800e8f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800e8f0 	.word	0x0800e8f0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t i2c_Buf[16] = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fc73 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f88f 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f97d 	bl	80008a8 <MX_GPIO_Init>
  //MX_LWIP_Init();
  MX_I2C3_Init();
 80005ae:	f000 f93b 	bl	8000828 <MX_I2C3_Init>
  MX_I2C2_Init();
 80005b2:	f000 f8f9 	bl	80007a8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //****************************************************
  //Работа с I2C.
  //Включение питания разъемов I2C_IMU и I2C.
  HAL_GPIO_WritePin(I2C_PWR_EN_GPIO_Port, I2C_PWR_EN_Pin, SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2108      	movs	r1, #8
 80005ba:	483c      	ldr	r0, [pc, #240]	; (80006ac <main+0x11c>)
 80005bc:	f002 f8c8 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fcd5 	bl	8000f70 <HAL_Delay>

  I2C_Init(I2C3); //иннициализация I2C_IMU(I2C3).
 80005c6:	483a      	ldr	r0, [pc, #232]	; (80006b0 <main+0x120>)
 80005c8:	f00d f8fa 	bl	800d7c0 <I2C_Init>
  I2C_Init(I2C2); //иннициализация I2C.
 80005cc:	4839      	ldr	r0, [pc, #228]	; (80006b4 <main+0x124>)
 80005ce:	f00d f8f7 	bl	800d7c0 <I2C_Init>
  //****************************************************
  //Работа с Ethernet.
  //Включение питания Ethernet.
  HAL_GPIO_WritePin(LAN_PWR_EN_GPIO_Port, LAN_PWR_EN_Pin, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	4837      	ldr	r0, [pc, #220]	; (80006b8 <main+0x128>)
 80005da:	f002 f8b9 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005de:	2064      	movs	r0, #100	; 0x64
 80005e0:	f000 fcc6 	bl	8000f70 <HAL_Delay>

  //Сброс LAN8742A.
  HAL_GPIO_WritePin(LAN_nRST_GPIO_Port, LAN_nRST_Pin, RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2108      	movs	r1, #8
 80005e8:	4834      	ldr	r0, [pc, #208]	; (80006bc <main+0x12c>)
 80005ea:	f002 f8b1 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80005ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f2:	f000 fcbd 	bl	8000f70 <HAL_Delay>
  HAL_GPIO_WritePin(LAN_nRST_GPIO_Port, LAN_nRST_Pin, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2108      	movs	r1, #8
 80005fa:	4830      	ldr	r0, [pc, #192]	; (80006bc <main+0x12c>)
 80005fc:	f002 f8a8 	bl	8002750 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000604:	f000 fcb4 	bl	8000f70 <HAL_Delay>


  MX_LWIP_Init();//инициализация LwIP.
 8000608:	f002 ff28 	bl	800345c <MX_LWIP_Init>
  // httpd_init();  //
  //****************************************************
  //Управление питанием JETSON.
  HAL_GPIO_WritePin(JETSON_PWR_EN_GPIO_Port, JETSON_PWR_EN_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2102      	movs	r1, #2
 8000610:	482b      	ldr	r0, [pc, #172]	; (80006c0 <main+0x130>)
 8000612:	f002 f89d 	bl	8002750 <HAL_GPIO_WritePin>

  //****************************************************
   //Управление питанием LIDAR.
   HAL_GPIO_WritePin(LIDAR_PWR_EN_GPIO_Port, LIDAR_PWR_EN_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061c:	4826      	ldr	r0, [pc, #152]	; (80006b8 <main+0x128>)
 800061e:	f002 f897 	bl	8002750 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//********************************************************************************
	HAL_Delay(50);
 8000622:	2032      	movs	r0, #50	; 0x32
 8000624:	f000 fca4 	bl	8000f70 <HAL_Delay>
	//HAL_GPIO_TogglePin(JETSON_PWR_EN_GPIO_Port, JETSON_PWR_EN_Pin);

	//********************************************
	//проверка работы светодиодов.и
	//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000628:	2120      	movs	r1, #32
 800062a:	4824      	ldr	r0, [pc, #144]	; (80006bc <main+0x12c>)
 800062c:	f002 f8a9 	bl	8002782 <HAL_GPIO_TogglePin>

	//********************************************
	//Проверка работы портов I2C.
	I2C_StartAndSendDeviceAddr(I2C3, (0x39 << 1));
 8000630:	2172      	movs	r1, #114	; 0x72
 8000632:	481f      	ldr	r0, [pc, #124]	; (80006b0 <main+0x120>)
 8000634:	f00d f8fe 	bl	800d834 <I2C_StartAndSendDeviceAddr>
	I2C_Stop(I2C3);
 8000638:	481d      	ldr	r0, [pc, #116]	; (80006b0 <main+0x120>)
 800063a:	f00d f95e 	bl	800d8fa <I2C_Stop>

	I2C_StartAndSendDeviceAddr(I2C2, (0x39 << 1));
 800063e:	2172      	movs	r1, #114	; 0x72
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <main+0x124>)
 8000642:	f00d f8f7 	bl	800d834 <I2C_StartAndSendDeviceAddr>
	I2C_Stop(I2C2);
 8000646:	481b      	ldr	r0, [pc, #108]	; (80006b4 <main+0x124>)
 8000648:	f00d f957 	bl	800d8fa <I2C_Stop>
	//********************************************
	//Управление вентиляторами.
	HAL_GPIO_TogglePin(FAN1_EN_GPIO_Port, FAN1_EN_Pin);
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	481d      	ldr	r0, [pc, #116]	; (80006c4 <main+0x134>)
 8000650:	f002 f897 	bl	8002782 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FAN2_EN_GPIO_Port, FAN2_EN_Pin);
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <main+0x134>)
 8000658:	f002 f893 	bl	8002782 <HAL_GPIO_TogglePin>
	//********************************************
	//Управление светодиодом PWR.
	//HAL_GPIO_TogglePin(PWR_BUT_LED_GPIO_Port, PWR_BUT_LED_Pin);

	if(!HAL_GPIO_ReadPin(PWR_BUT_GPIO_Port, PWR_BUT_Pin)) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800065c:	2101      	movs	r1, #1
 800065e:	4817      	ldr	r0, [pc, #92]	; (80006bc <main+0x12c>)
 8000660:	f002 f85e 	bl	8002720 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d105      	bne.n	8000676 <main+0xe6>
 800066a:	2201      	movs	r2, #1
 800066c:	2110      	movs	r1, #16
 800066e:	4813      	ldr	r0, [pc, #76]	; (80006bc <main+0x12c>)
 8000670:	f002 f86e 	bl	8002750 <HAL_GPIO_WritePin>
 8000674:	e004      	b.n	8000680 <main+0xf0>
	else 												  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	4810      	ldr	r0, [pc, #64]	; (80006bc <main+0x12c>)
 800067c:	f002 f868 	bl	8002750 <HAL_GPIO_WritePin>
	//****************************************************
   //Управление питанием LIDAR.
   if(Blink(INTERVAL_1000_mS)) HAL_GPIO_WritePin(LIDAR_PWR_EN_GPIO_Port, LIDAR_PWR_EN_Pin, SET);
 8000680:	2004      	movs	r0, #4
 8000682:	f00d f881 	bl	800d788 <Blink>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d006      	beq.n	800069a <main+0x10a>
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <main+0x128>)
 8000694:	f002 f85c 	bl	8002750 <HAL_GPIO_WritePin>
 8000698:	e005      	b.n	80006a6 <main+0x116>
   else						   HAL_GPIO_WritePin(LIDAR_PWR_EN_GPIO_Port, LIDAR_PWR_EN_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <main+0x128>)
 80006a2:	f002 f855 	bl	8002750 <HAL_GPIO_WritePin>

   //****************************************************
	//Работа с LWIP.
	MX_LWIP_Process();
 80006a6:	f003 f80b 	bl	80036c0 <MX_LWIP_Process>
	HAL_Delay(50);
 80006aa:	e7ba      	b.n	8000622 <main+0x92>
 80006ac:	40020800 	.word	0x40020800
 80006b0:	40005c00 	.word	0x40005c00
 80006b4:	40005800 	.word	0x40005800
 80006b8:	40020400 	.word	0x40020400
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40020c00 	.word	0x40020c00

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f00d f9e2 	bl	800daa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <SystemClock_Config+0xd8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <SystemClock_Config+0xd8>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xd8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xdc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <SystemClock_Config+0xdc>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xdc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800073c:	23b4      	movs	r3, #180	; 0xb4
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fa37 	bl	8002bc0 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9ba 	bl	8000ad0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800075c:	f002 f9e0 	bl	8002b20 <HAL_PWREx_EnableOverDrive>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000766:	f000 f9b3 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2105      	movs	r1, #5
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fc89 	bl	80030a0 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000794:	f000 f99c 	bl	8000ad0 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_I2C2_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_I2C2_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_I2C2_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <MX_I2C2_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_I2C2_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_I2C2_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_I2C2_Init+0x74>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_I2C2_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C2_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_I2C2_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_I2C2_Init+0x74>)
 80007e6:	f001 ffe7 	bl	80027b8 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f96e 	bl	8000ad0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f4:	2100      	movs	r1, #0
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_I2C2_Init+0x74>)
 80007f8:	f002 f916 	bl	8002a28 <HAL_I2CEx_ConfigAnalogFilter>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000802:	f000 f965 	bl	8000ad0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_I2C2_Init+0x74>)
 800080a:	f002 f949 	bl	8002aa0 <HAL_I2CEx_ConfigDigitalFilter>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000814:	f000 f95c 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000274 	.word	0x20000274
 8000820:	40005800 	.word	0x40005800
 8000824:	000186a0 	.word	0x000186a0

08000828 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_I2C3_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_I2C3_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_I2C3_Init+0x74>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <MX_I2C3_Init+0x7c>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_I2C3_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_I2C3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_I2C3_Init+0x74>)
 8000846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_I2C3_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C3_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_I2C3_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C3_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_I2C3_Init+0x74>)
 8000866:	f001 ffa7 	bl	80027b8 <HAL_I2C_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000870:	f000 f92e 	bl	8000ad0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000874:	2110      	movs	r1, #16
 8000876:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_I2C3_Init+0x74>)
 8000878:	f002 f8d6 	bl	8002a28 <HAL_I2CEx_ConfigAnalogFilter>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000882:	f000 f925 	bl	8000ad0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_I2C3_Init+0x74>)
 800088a:	f002 f909 	bl	8002aa0 <HAL_I2CEx_ConfigDigitalFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000894:	f000 f91c 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000220 	.word	0x20000220
 80008a0:	40005c00 	.word	0x40005c00
 80008a4:	000186a0 	.word	0x000186a0

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
 80008c2:	4b7d      	ldr	r3, [pc, #500]	; (8000ab8 <MX_GPIO_Init+0x210>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a7c      	ldr	r2, [pc, #496]	; (8000ab8 <MX_GPIO_Init+0x210>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b7a      	ldr	r3, [pc, #488]	; (8000ab8 <MX_GPIO_Init+0x210>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	623b      	str	r3, [r7, #32]
 80008d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
 80008de:	4b76      	ldr	r3, [pc, #472]	; (8000ab8 <MX_GPIO_Init+0x210>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a75      	ldr	r2, [pc, #468]	; (8000ab8 <MX_GPIO_Init+0x210>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b73      	ldr	r3, [pc, #460]	; (8000ab8 <MX_GPIO_Init+0x210>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	61fb      	str	r3, [r7, #28]
 80008f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	4b6f      	ldr	r3, [pc, #444]	; (8000ab8 <MX_GPIO_Init+0x210>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a6e      	ldr	r2, [pc, #440]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b6c      	ldr	r3, [pc, #432]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	4b68      	ldr	r3, [pc, #416]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a67      	ldr	r2, [pc, #412]	; (8000ab8 <MX_GPIO_Init+0x210>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b65      	ldr	r3, [pc, #404]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a60      	ldr	r2, [pc, #384]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b5e      	ldr	r3, [pc, #376]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b5a      	ldr	r3, [pc, #360]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a59      	ldr	r2, [pc, #356]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b57      	ldr	r3, [pc, #348]	; (8000ab8 <MX_GPIO_Init+0x210>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b53      	ldr	r3, [pc, #332]	; (8000ab8 <MX_GPIO_Init+0x210>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a52      	ldr	r2, [pc, #328]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b50      	ldr	r3, [pc, #320]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a4b      	ldr	r2, [pc, #300]	; (8000ab8 <MX_GPIO_Init+0x210>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0310 	and.w	r3, r3, #16
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_PWR_EN_GPIO_Port, I2C_PWR_EN_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2108      	movs	r1, #8
 80009a2:	4846      	ldr	r0, [pc, #280]	; (8000abc <MX_GPIO_Init+0x214>)
 80009a4:	f001 fed4 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LAN_nRST_Pin|LED2_Pin|LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2178      	movs	r1, #120	; 0x78
 80009ac:	4844      	ldr	r0, [pc, #272]	; (8000ac0 <MX_GPIO_Init+0x218>)
 80009ae:	f001 fecf 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LAN_PWR_EN_Pin|USB_PWR_EN_Pin|LIDAR_PWR_EN_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 80009b8:	4842      	ldr	r0, [pc, #264]	; (8000ac4 <MX_GPIO_Init+0x21c>)
 80009ba:	f001 fec9 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FAN1_EN_Pin|FAN2_EN_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	21c0      	movs	r1, #192	; 0xc0
 80009c2:	4841      	ldr	r0, [pc, #260]	; (8000ac8 <MX_GPIO_Init+0x220>)
 80009c4:	f001 fec4 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JETSON_PWR_EN_GPIO_Port, JETSON_PWR_EN_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2102      	movs	r1, #2
 80009cc:	483f      	ldr	r0, [pc, #252]	; (8000acc <MX_GPIO_Init+0x224>)
 80009ce:	f001 febf 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : I2C_PWR_EN_Pin */
  GPIO_InitStruct.Pin = I2C_PWR_EN_Pin;
 80009d2:	2308      	movs	r3, #8
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(I2C_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	4834      	ldr	r0, [pc, #208]	; (8000abc <MX_GPIO_Init+0x214>)
 80009ea:	f001 fcef 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_BUT_Pin */
  GPIO_InitStruct.Pin = PWR_BUT_Pin;
 80009ee:	2301      	movs	r3, #1
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PWR_BUT_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	482f      	ldr	r0, [pc, #188]	; (8000ac0 <MX_GPIO_Init+0x218>)
 8000a02:	f001 fce3 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_nRST_Pin */
  GPIO_InitStruct.Pin = LAN_nRST_Pin;
 8000a06:	2308      	movs	r3, #8
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2302      	movs	r3, #2
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAN_nRST_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4828      	ldr	r0, [pc, #160]	; (8000ac0 <MX_GPIO_Init+0x218>)
 8000a1e:	f001 fcd5 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin PA6 */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GPIO_PIN_6;
 8000a22:	2370      	movs	r3, #112	; 0x70
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4821      	ldr	r0, [pc, #132]	; (8000ac0 <MX_GPIO_Init+0x218>)
 8000a3a:	f001 fcc7 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LAN_PWR_EN_Pin USB_PWR_EN_Pin LIDAR_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LAN_PWR_EN_Pin|USB_PWR_EN_Pin|LIDAR_PWR_EN_Pin;
 8000a3e:	f44f 5348 	mov.w	r3, #12800	; 0x3200
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_GPIO_Init+0x21c>)
 8000a58:	f001 fcb8 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <MX_GPIO_Init+0x220>)
 8000a72:	f001 fcab 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN1_EN_Pin FAN2_EN_Pin */
  GPIO_InitStruct.Pin = FAN1_EN_Pin|FAN2_EN_Pin;
 8000a76:	23c0      	movs	r3, #192	; 0xc0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <MX_GPIO_Init+0x220>)
 8000a8e:	f001 fc9d 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : JETSON_PWR_EN_Pin */
  GPIO_InitStruct.Pin = JETSON_PWR_EN_Pin;
 8000a92:	2302      	movs	r3, #2
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(JETSON_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <MX_GPIO_Init+0x224>)
 8000aaa:	f001 fc8f 	bl	80023cc <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3738      	adds	r7, #56	; 0x38
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020c00 	.word	0x40020c00
 8000acc:	40021000 	.word	0x40021000

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <Error_Handler+0x6>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a42      	ldr	r2, [pc, #264]	; (8000c50 <HAL_I2C_MspInit+0x128>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12c      	bne.n	8000ba4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	4b41      	ldr	r3, [pc, #260]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a40      	ldr	r2, [pc, #256]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b66:	2303      	movs	r3, #3
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b76:	2304      	movs	r3, #4
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4835      	ldr	r0, [pc, #212]	; (8000c58 <HAL_I2C_MspInit+0x130>)
 8000b82:	f001 fc23 	bl	80023cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ba2:	e050      	b.n	8000c46 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a2c      	ldr	r2, [pc, #176]	; (8000c5c <HAL_I2C_MspInit+0x134>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d14b      	bne.n	8000c46 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a20      	ldr	r2, [pc, #128]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4817      	ldr	r0, [pc, #92]	; (8000c60 <HAL_I2C_MspInit+0x138>)
 8000c04:	f001 fbe2 	bl	80023cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0e:	2312      	movs	r3, #18
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <HAL_I2C_MspInit+0x13c>)
 8000c26:	f001 fbd1 	bl	80023cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_I2C_MspInit+0x12c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	; 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40005800 	.word	0x40005800
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40021400 	.word	0x40021400
 8000c5c:	40005c00 	.word	0x40005c00
 8000c60:	40020800 	.word	0x40020800
 8000c64:	40020000 	.word	0x40020000

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	Blink_Loop();
 8000cb4:	f00c fce4 	bl	800d680 <Blink_Loop>


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f93a 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	e00a      	b.n	8000ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cd2:	f3af 8000 	nop.w
 8000cd6:	4601      	mov	r1, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	b2ca      	uxtb	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbf0      	blt.n	8000cd2 <_read+0x12>
	}

return len;
 8000cf0:	687b      	ldr	r3, [r7, #4]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e009      	b.n	8000d20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbf1      	blt.n	8000d0c <_write+0x12>
	}
	return len;
 8000d28:	687b      	ldr	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_close>:

int _close(int file)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
	return -1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_isatty>:

int _isatty(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	return 1;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d205      	bcs.n	8000dd8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <_sbrk+0x6c>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	e009      	b.n	8000dec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <_sbrk+0x64>)
 8000de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	20030000 	.word	0x20030000
 8000dfc:	00004000 	.word	0x00004000
 8000e00:	20000094 	.word	0x20000094
 8000e04:	20006528 	.word	0x20006528
 8000e08:	20006520 	.word	0x20006520

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <SystemInit+0x28>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <SystemInit+0x28>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SystemInit+0x28>)
 8000e22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e26:	609a      	str	r2, [r3, #8]
#endif
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
  ldr  r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e58:	f842 3b04 	str.w	r3, [r2], #4

08000e5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e62:	f7ff ffd3 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f00c fddd 	bl	800da24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fb91 	bl	8000590 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e70:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e74:	0801148c 	.word	0x0801148c
  ldr  r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e7c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000e80:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000e84:	20006524 	.word	0x20006524

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f92f 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fe0a 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f939 	bl	8001166 <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f90f 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	200002c8 	.word	0x200002c8

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200002c8 	.word	0x200002c8

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_Delay+0x40>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff47 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff5c 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffb0 	bl	80010d4 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001190:	4baa      	ldr	r3, [pc, #680]	; (800143c <HAL_ETH_Init+0x2bc>)
 8001192:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e185      	b.n	80014b2 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d106      	bne.n	80011c0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f002 fa8c 	bl	80036d8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	4b9e      	ldr	r3, [pc, #632]	; (8001440 <HAL_ETH_Init+0x2c0>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	4a9d      	ldr	r2, [pc, #628]	; (8001440 <HAL_ETH_Init+0x2c0>)
 80011ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ce:	6453      	str	r3, [r2, #68]	; 0x44
 80011d0:	4b9b      	ldr	r3, [pc, #620]	; (8001440 <HAL_ETH_Init+0x2c0>)
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011dc:	4b99      	ldr	r3, [pc, #612]	; (8001444 <HAL_ETH_Init+0x2c4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a98      	ldr	r2, [pc, #608]	; (8001444 <HAL_ETH_Init+0x2c4>)
 80011e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011e6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011e8:	4b96      	ldr	r3, [pc, #600]	; (8001444 <HAL_ETH_Init+0x2c4>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4994      	ldr	r1, [pc, #592]	; (8001444 <HAL_ETH_Init+0x2c4>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f042 0201 	orr.w	r2, r2, #1
 8001208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800120c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800120e:	f7ff fea3 	bl	8000f58 <HAL_GetTick>
 8001212:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001214:	e011      	b.n	800123a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001216:	f7ff fe9f 	bl	8000f58 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001224:	d909      	bls.n	800123a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2203      	movs	r2, #3
 800122a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e13b      	b.n	80014b2 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1e4      	bne.n	8001216 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f023 031c 	bic.w	r3, r3, #28
 800125a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800125c:	f002 f8de 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8001260:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4a78      	ldr	r2, [pc, #480]	; (8001448 <HAL_ETH_Init+0x2c8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d908      	bls.n	800127c <HAL_ETH_Init+0xfc>
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4a77      	ldr	r2, [pc, #476]	; (800144c <HAL_ETH_Init+0x2cc>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d804      	bhi.n	800127c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	e027      	b.n	80012cc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	4a73      	ldr	r2, [pc, #460]	; (800144c <HAL_ETH_Init+0x2cc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d908      	bls.n	8001296 <HAL_ETH_Init+0x116>
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	4a72      	ldr	r2, [pc, #456]	; (8001450 <HAL_ETH_Init+0x2d0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d804      	bhi.n	8001296 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f043 030c 	orr.w	r3, r3, #12
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	e01a      	b.n	80012cc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4a6d      	ldr	r2, [pc, #436]	; (8001450 <HAL_ETH_Init+0x2d0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d903      	bls.n	80012a6 <HAL_ETH_Init+0x126>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4a6c      	ldr	r2, [pc, #432]	; (8001454 <HAL_ETH_Init+0x2d4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d911      	bls.n	80012ca <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4a6a      	ldr	r2, [pc, #424]	; (8001454 <HAL_ETH_Init+0x2d4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d908      	bls.n	80012c0 <HAL_ETH_Init+0x140>
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	4a69      	ldr	r2, [pc, #420]	; (8001458 <HAL_ETH_Init+0x2d8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d804      	bhi.n	80012c0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e005      	b.n	80012cc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f043 0310 	orr.w	r3, r3, #16
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	e000      	b.n	80012cc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80012ca:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80012d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012d8:	2100      	movs	r1, #0
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fb9a 	bl	8001a14 <HAL_ETH_WritePHYRegister>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80012ea:	6939      	ldr	r1, [r7, #16]
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fd4f 	bl	8001d90 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0d9      	b.n	80014b2 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012fe:	20ff      	movs	r0, #255	; 0xff
 8001300:	f7ff fe36 	bl	8000f70 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80a7 	beq.w	800145c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800130e:	f7ff fe23 	bl	8000f58 <HAL_GetTick>
 8001312:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	461a      	mov	r2, r3
 800131a:	2101      	movs	r1, #1
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fb11 	bl	8001944 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001322:	f7ff fe19 	bl	8000f58 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001330:	4293      	cmp	r3, r2
 8001332:	d90f      	bls.n	8001354 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001338:	6939      	ldr	r1, [r7, #16]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fd28 	bl	8001d90 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0ae      	b.n	80014b2 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0da      	beq.n	8001314 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800135e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001362:	2100      	movs	r1, #0
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fb55 	bl	8001a14 <HAL_ETH_WritePHYRegister>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fd0a 	bl	8001d90 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001384:	2301      	movs	r3, #1
 8001386:	e094      	b.n	80014b2 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff fde6 	bl	8000f58 <HAL_GetTick>
 800138c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	461a      	mov	r2, r3
 8001394:	2101      	movs	r1, #1
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fad4 	bl	8001944 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800139c:	f7ff fddc 	bl	8000f58 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d90f      	bls.n	80013ce <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013b2:	6939      	ldr	r1, [r7, #16]
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 fceb 	bl	8001d90 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e071      	b.n	80014b2 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0da      	beq.n	800138e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	461a      	mov	r2, r3
 80013de:	211f      	movs	r1, #31
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 faaf 	bl	8001944 <HAL_ETH_ReadPHYRegister>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013f0:	6939      	ldr	r1, [r7, #16]
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fccc 	bl	8001d90 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001400:	2301      	movs	r3, #1
 8001402:	e056      	b.n	80014b2 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d004      	beq.n	8001418 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	e002      	b.n	800141e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	e037      	b.n	80014a0 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	e032      	b.n	80014a0 <HAL_ETH_Init+0x320>
 800143a:	bf00      	nop
 800143c:	03938700 	.word	0x03938700
 8001440:	40023800 	.word	0x40023800
 8001444:	40013800 	.word	0x40013800
 8001448:	01312cff 	.word	0x01312cff
 800144c:	02160ebf 	.word	0x02160ebf
 8001450:	039386ff 	.word	0x039386ff
 8001454:	05f5e0ff 	.word	0x05f5e0ff
 8001458:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	08db      	lsrs	r3, r3, #3
 8001462:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800146c:	4313      	orrs	r3, r2
 800146e:	b29b      	uxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 facd 	bl	8001a14 <HAL_ETH_WritePHYRegister>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001484:	6939      	ldr	r1, [r7, #16]
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fc82 	bl	8001d90 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e00c      	b.n	80014b2 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001498:	f640 70ff 	movw	r0, #4095	; 0xfff
 800149c:	f7ff fd68 	bl	8000f70 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80014a0:	6939      	ldr	r1, [r7, #16]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fc74 	bl	8001d90 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop

080014bc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_ETH_DMATxDescListInit+0x20>
 80014d8:	2302      	movs	r3, #2
 80014da:	e052      	b.n	8001582 <HAL_ETH_DMATxDescListInit+0xc6>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	e030      	b.n	800155a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	015b      	lsls	r3, r3, #5
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	4413      	add	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001508:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	461a      	mov	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d105      	bne.n	8001532 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	3b01      	subs	r3, #1
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	d208      	bcs.n	800154e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3301      	adds	r3, #1
 8001540:	015b      	lsls	r3, r3, #5
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	4413      	add	r3, r2
 8001546:	461a      	mov	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	e002      	b.n	8001554 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d3ca      	bcc.n	80014f8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	3310      	adds	r3, #16
 800156e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800158e:	b480      	push	{r7}
 8001590:	b087      	sub	sp, #28
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_ETH_DMARxDescListInit+0x20>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e056      	b.n	800165c <HAL_ETH_DMARxDescListInit+0xce>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2202      	movs	r2, #2
 80015ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e034      	b.n	8001634 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	015b      	lsls	r3, r3, #5
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4413      	add	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015da:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015e2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	461a      	mov	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	429a      	cmp	r2, r3
 8001614:	d208      	bcs.n	8001628 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	015b      	lsls	r3, r3, #5
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	4413      	add	r3, r2
 8001620:	461a      	mov	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	e002      	b.n	800162e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d3c6      	bcc.n	80015ca <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001646:	330c      	adds	r3, #12
 8001648:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_ETH_TransmitFrame+0x24>
 8001688:	2302      	movs	r3, #2
 800168a:	e0cd      	b.n	8001828 <HAL_ETH_TransmitFrame+0x1c0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0b8      	b.n	8001828 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da09      	bge.n	80016d4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2212      	movs	r2, #18
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0a9      	b.n	8001828 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016da:	4293      	cmp	r3, r2
 80016dc:	d915      	bls.n	800170a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	4a54      	ldr	r2, [pc, #336]	; (8001834 <HAL_ETH_TransmitFrame+0x1cc>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0a9b      	lsrs	r3, r3, #10
 80016e8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	4b51      	ldr	r3, [pc, #324]	; (8001834 <HAL_ETH_TransmitFrame+0x1cc>)
 80016ee:	fba3 1302 	umull	r1, r3, r3, r2
 80016f2:	0a9b      	lsrs	r3, r3, #10
 80016f4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e001      	b.n	800170e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800170a:	2301      	movs	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d11c      	bne.n	800174e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001722:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800172e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800173e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	461a      	mov	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
 800174c:	e04b      	b.n	80017e6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	e044      	b.n	80017de <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001762:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d107      	bne.n	800177a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001778:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001782:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3b01      	subs	r3, #1
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	429a      	cmp	r2, r3
 800178c:	d116      	bne.n	80017bc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800179c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	4a25      	ldr	r2, [pc, #148]	; (8001838 <HAL_ETH_TransmitFrame+0x1d0>)
 80017a2:	fb02 f203 	mul.w	r2, r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80017ae:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017ba:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ca:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	461a      	mov	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	3301      	adds	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3b6      	bcc.n	8001754 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ee:	3314      	adds	r3, #20
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00d      	beq.n	8001816 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001802:	3314      	adds	r3, #20
 8001804:	2204      	movs	r2, #4
 8001806:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001810:	3304      	adds	r3, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	ac02b00b 	.word	0xac02b00b
 8001838:	fffffa0c 	.word	0xfffffa0c

0800183c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_ETH_GetReceivedFrame+0x1a>
 8001852:	2302      	movs	r3, #2
 8001854:	e070      	b.n	8001938 <HAL_ETH_GetReceivedFrame+0xfc>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2202      	movs	r2, #2
 8001862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db5a      	blt.n	8001926 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d030      	beq.n	80018e0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	2b01      	cmp	r3, #1
 800188e:	d103      	bne.n	8001898 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018ac:	3b04      	subs	r3, #4
 80018ae:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	e02b      	b.n	8001938 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d010      	beq.n	8001910 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
 800190e:	e00a      	b.n	8001926 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	460b      	mov	r3, r1
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b82      	cmp	r3, #130	; 0x82
 8001964:	d101      	bne.n	800196a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001966:	2302      	movs	r3, #2
 8001968:	e050      	b.n	8001a0c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2282      	movs	r2, #130	; 0x82
 800196e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 031c 	and.w	r3, r3, #28
 8001980:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8a1b      	ldrh	r3, [r3, #16]
 8001986:	02db      	lsls	r3, r3, #11
 8001988:	b29b      	uxth	r3, r3
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001990:	897b      	ldrh	r3, [r7, #10]
 8001992:	019b      	lsls	r3, r3, #6
 8001994:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	4313      	orrs	r3, r2
 800199c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f023 0302 	bic.w	r3, r3, #2
 80019a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019b6:	f7ff facf 	bl	8000f58 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019bc:	e015      	b.n	80019ea <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80019be:	f7ff facb 	bl	8000f58 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d309      	bcc.n	80019e2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e014      	b.n	8001a0c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1e4      	bne.n	80019be <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b42      	cmp	r3, #66	; 0x42
 8001a34:	d101      	bne.n	8001a3a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
 8001a38:	e04e      	b.n	8001ad8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2242      	movs	r2, #66	; 0x42
 8001a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 031c 	and.w	r3, r3, #28
 8001a50:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8a1b      	ldrh	r3, [r3, #16]
 8001a56:	02db      	lsls	r3, r3, #11
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a60:	897b      	ldrh	r3, [r7, #10]
 8001a62:	019b      	lsls	r3, r3, #6
 8001a64:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a90:	f7ff fa62 	bl	8000f58 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a96:	e015      	b.n	8001ac4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a98:	f7ff fa5e 	bl	8000f58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d309      	bcc.n	8001abc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e00d      	b.n	8001ad8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1e4      	bne.n	8001a98 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_ETH_Start+0x16>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e01f      	b.n	8001b36 <HAL_ETH_Start+0x56>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fb44 	bl	8002194 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 fb7b 	bl	8002208 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fc12 	bl	800233c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fbaf 	bl	800227c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fbdc 	bl	80022dc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_ETH_Stop+0x16>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e01f      	b.n	8001b94 <HAL_ETH_Stop+0x56>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fba1 	bl	80022ac <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fbce 	bl	800230c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 fb66 	bl	8002242 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fbe0 	bl	800233c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fb26 	bl	80021ce <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d101      	bne.n	8001bb8 <HAL_ETH_ConfigMAC+0x1c>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e0e4      	b.n	8001d82 <HAL_ETH_ConfigMAC+0x1e6>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80b1 	beq.w	8001d32 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4b6c      	ldr	r3, [pc, #432]	; (8001d8c <HAL_ETH_ConfigMAC+0x1f0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001be8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001bee:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001bf4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001bfa:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001c00:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001c06:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001c0c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001c12:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001c18:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001c1e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001c24:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001c2a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f7ff f994 	bl	8000f70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c58:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c5e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c64:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001c6a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001c70:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001c76:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001c82:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c84:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7ff f96e 	bl	8000f70 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ca4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cae:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ccc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001cd2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001cd8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001cde:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ce4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff f937 	bl	8000f70 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff f924 	bl	8000f70 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	61da      	str	r2, [r3, #28]
 8001d30:	e01e      	b.n	8001d70 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d40:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f7ff f904 	bl	8000f70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	ff20810f 	.word	0xff20810f

08001d90 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0b0      	sub	sp, #192	; 0xc0
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dac:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001db4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dda:	663b      	str	r3, [r7, #96]	; 0x60
 8001ddc:	e001      	b.n	8001de2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dec:	2300      	movs	r3, #0
 8001dee:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001dfc:	2340      	movs	r3, #64	; 0x40
 8001dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e68:	4bac      	ldr	r3, [pc, #688]	; (800211c <ETH_MACDMAConfig+0x38c>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e74:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e78:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e7c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e82:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e86:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e8a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001e90:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e94:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e98:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e9c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ea0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001ea4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001ea6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eb8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff f853 	bl	8000f70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ed4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ed8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001eda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001edc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001ee2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001ee8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001eea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001eee:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001ef4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ef8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f00:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f02:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f7ff f82e 	bl	8000f70 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f1c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f26:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f30:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f40:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f44:	4013      	ands	r3, r2
 8001f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f4e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f54:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f5a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f60:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f66:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f6c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f80:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f7fe ffef 	bl	8000f70 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f9a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f9c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001fa0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7fe ffda 	bl	8000f70 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fce:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001fd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fd8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001fea:	2304      	movs	r3, #4
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ffa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002004:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800200a:	2300      	movs	r3, #0
 800200c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800200e:	2300      	movs	r3, #0
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	3318      	adds	r3, #24
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002022:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002026:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <ETH_MACDMAConfig+0x390>)
 8002028:	4013      	ands	r3, r2
 800202a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800202e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002030:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002032:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002034:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002036:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002038:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800203a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800203c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800203e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002040:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002042:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002044:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002046:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800204a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800204e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002050:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002062:	3318      	adds	r3, #24
 8002064:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002068:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002072:	3318      	adds	r3, #24
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800207a:	2001      	movs	r0, #1
 800207c:	f7fe ff78 	bl	8000f70 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	3318      	adds	r3, #24
 800208a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800208e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002094:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002098:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800209c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80020a0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80020a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80020a6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80020a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80020aa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7fe ff51 	bl	8000f70 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020da:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10f      	bne.n	8002104 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ec:	331c      	adds	r3, #28
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002100:	331c      	adds	r3, #28
 8002102:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	461a      	mov	r2, r3
 800210a:	2100      	movs	r1, #0
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f809 	bl	8002124 <ETH_MACAddressConfig>
}
 8002112:	bf00      	nop
 8002114:	37c0      	adds	r7, #192	; 0xc0
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	ff20810f 	.word	0xff20810f
 8002120:	f8de3f23 	.word	0xf8de3f23

08002124 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3305      	adds	r3, #5
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	3204      	adds	r2, #4
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <ETH_MACAddressConfig+0x68>)
 8002146:	4413      	add	r3, r2
 8002148:	461a      	mov	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3303      	adds	r3, #3
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	061a      	lsls	r2, r3, #24
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3302      	adds	r3, #2
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3301      	adds	r3, #1
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	4313      	orrs	r3, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <ETH_MACAddressConfig+0x6c>)
 8002176:	4413      	add	r3, r2
 8002178:	461a      	mov	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	6013      	str	r3, [r2, #0]
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40028040 	.word	0x40028040
 8002190:	40028044 	.word	0x40028044

08002194 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0208 	orr.w	r2, r2, #8
 80021ae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f000 f8e9 	bl	8002390 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f000 f8cc 	bl	8002390 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]
}
 8002200:	bf00      	nop
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0204 	orr.w	r2, r2, #4
 8002222:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800222c:	2001      	movs	r0, #1
 800222e:	f000 f8af 	bl	8002390 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	601a      	str	r2, [r3, #0]
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0204 	bic.w	r2, r2, #4
 800225c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002266:	2001      	movs	r0, #1
 8002268:	f000 f892 	bl	8002390 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	601a      	str	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228c:	3318      	adds	r3, #24
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229c:	3318      	adds	r3, #24
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022bc:	3318      	adds	r3, #24
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022cc:	3318      	adds	r3, #24
 80022ce:	601a      	str	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ec:	3318      	adds	r3, #24
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0202 	orr.w	r2, r2, #2
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	3318      	adds	r3, #24
 80022fe:	601a      	str	r2, [r3, #0]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231c:	3318      	adds	r3, #24
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0202 	bic.w	r2, r2, #2
 8002328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232c:	3318      	adds	r3, #24
 800232e:	601a      	str	r2, [r3, #0]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002350:	3318      	adds	r3, #24
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800235c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002360:	3318      	adds	r3, #24
 8002362:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236c:	3318      	adds	r3, #24
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002372:	2001      	movs	r0, #1
 8002374:	f000 f80c 	bl	8002390 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002382:	3318      	adds	r3, #24
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <ETH_Delay+0x34>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <ETH_Delay+0x38>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0a5b      	lsrs	r3, r3, #9
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80023ac:	bf00      	nop
  } 
  while (Delay --);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	60fa      	str	r2, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <ETH_Delay+0x1c>
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	20000000 	.word	0x20000000
 80023c8:	10624dd3 	.word	0x10624dd3

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e177      	b.n	80026d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	f040 8166 	bne.w	80026d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d00b      	beq.n	8002426 <HAL_GPIO_Init+0x5a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800241a:	2b11      	cmp	r3, #17
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b12      	cmp	r3, #18
 8002424:	d130      	bne.n	8002488 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 0201 	and.w	r2, r3, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0xfc>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b12      	cmp	r3, #18
 80024c6:	d123      	bne.n	8002510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	08da      	lsrs	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3208      	adds	r2, #8
 80024d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3208      	adds	r2, #8
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80c0 	beq.w	80026d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b65      	ldr	r3, [pc, #404]	; (80026ec <HAL_GPIO_Init+0x320>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a64      	ldr	r2, [pc, #400]	; (80026ec <HAL_GPIO_Init+0x320>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b62      	ldr	r3, [pc, #392]	; (80026ec <HAL_GPIO_Init+0x320>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256e:	4a60      	ldr	r2, [pc, #384]	; (80026f0 <HAL_GPIO_Init+0x324>)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	220f      	movs	r2, #15
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a57      	ldr	r2, [pc, #348]	; (80026f4 <HAL_GPIO_Init+0x328>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d037      	beq.n	800260a <HAL_GPIO_Init+0x23e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <HAL_GPIO_Init+0x32c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d031      	beq.n	8002606 <HAL_GPIO_Init+0x23a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a55      	ldr	r2, [pc, #340]	; (80026fc <HAL_GPIO_Init+0x330>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02b      	beq.n	8002602 <HAL_GPIO_Init+0x236>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a54      	ldr	r2, [pc, #336]	; (8002700 <HAL_GPIO_Init+0x334>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d025      	beq.n	80025fe <HAL_GPIO_Init+0x232>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a53      	ldr	r2, [pc, #332]	; (8002704 <HAL_GPIO_Init+0x338>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01f      	beq.n	80025fa <HAL_GPIO_Init+0x22e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_GPIO_Init+0x33c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d019      	beq.n	80025f6 <HAL_GPIO_Init+0x22a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a51      	ldr	r2, [pc, #324]	; (800270c <HAL_GPIO_Init+0x340>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0x226>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a50      	ldr	r2, [pc, #320]	; (8002710 <HAL_GPIO_Init+0x344>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_GPIO_Init+0x222>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_GPIO_Init+0x348>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <HAL_GPIO_Init+0x21e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_GPIO_Init+0x34c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_GPIO_Init+0x21a>
 80025e2:	2309      	movs	r3, #9
 80025e4:	e012      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025e6:	230a      	movs	r3, #10
 80025e8:	e010      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025ea:	2308      	movs	r3, #8
 80025ec:	e00e      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025ee:	2307      	movs	r3, #7
 80025f0:	e00c      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025f2:	2306      	movs	r3, #6
 80025f4:	e00a      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025f6:	2305      	movs	r3, #5
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x240>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x240>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x240>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x240>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4934      	ldr	r1, [pc, #208]	; (80026f0 <HAL_GPIO_Init+0x324>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800262a:	4b3c      	ldr	r3, [pc, #240]	; (800271c <HAL_GPIO_Init+0x350>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800264e:	4a33      	ldr	r2, [pc, #204]	; (800271c <HAL_GPIO_Init+0x350>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002654:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_GPIO_Init+0x350>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002678:	4a28      	ldr	r2, [pc, #160]	; (800271c <HAL_GPIO_Init+0x350>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267e:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_GPIO_Init+0x350>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_GPIO_Init+0x350>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a8:	4b1c      	ldr	r3, [pc, #112]	; (800271c <HAL_GPIO_Init+0x350>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <HAL_GPIO_Init+0x350>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f ae84 	bls.w	80023e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	3724      	adds	r7, #36	; 0x24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40021000 	.word	0x40021000
 8002708:	40021400 	.word	0x40021400
 800270c:	40021800 	.word	0x40021800
 8002710:	40021c00 	.word	0x40021c00
 8002714:	40022000 	.word	0x40022000
 8002718:	40022400 	.word	0x40022400
 800271c:	40013c00 	.word	0x40013c00

08002720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e001      	b.n	8002742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	401a      	ands	r2, r3
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	429a      	cmp	r2, r3
 800279a:	d104      	bne.n	80027a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	041a      	lsls	r2, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80027a4:	e002      	b.n	80027ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	619a      	str	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e11f      	b.n	8002a0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe f9a2 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800280a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800281a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800281c:	f000 fe0a 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8002820:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a7b      	ldr	r2, [pc, #492]	; (8002a14 <HAL_I2C_Init+0x25c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d807      	bhi.n	800283c <HAL_I2C_Init+0x84>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a7a      	ldr	r2, [pc, #488]	; (8002a18 <HAL_I2C_Init+0x260>)
 8002830:	4293      	cmp	r3, r2
 8002832:	bf94      	ite	ls
 8002834:	2301      	movls	r3, #1
 8002836:	2300      	movhi	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e006      	b.n	800284a <HAL_I2C_Init+0x92>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4a77      	ldr	r2, [pc, #476]	; (8002a1c <HAL_I2C_Init+0x264>)
 8002840:	4293      	cmp	r3, r2
 8002842:	bf94      	ite	ls
 8002844:	2301      	movls	r3, #1
 8002846:	2300      	movhi	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0db      	b.n	8002a0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a72      	ldr	r2, [pc, #456]	; (8002a20 <HAL_I2C_Init+0x268>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	0c9b      	lsrs	r3, r3, #18
 800285c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a64      	ldr	r2, [pc, #400]	; (8002a14 <HAL_I2C_Init+0x25c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d802      	bhi.n	800288c <HAL_I2C_Init+0xd4>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3301      	adds	r3, #1
 800288a:	e009      	b.n	80028a0 <HAL_I2C_Init+0xe8>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	4a63      	ldr	r2, [pc, #396]	; (8002a24 <HAL_I2C_Init+0x26c>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	3301      	adds	r3, #1
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4956      	ldr	r1, [pc, #344]	; (8002a14 <HAL_I2C_Init+0x25c>)
 80028bc:	428b      	cmp	r3, r1
 80028be:	d80d      	bhi.n	80028dc <HAL_I2C_Init+0x124>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e59      	subs	r1, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	bf38      	it	cc
 80028d8:	2304      	movcc	r3, #4
 80028da:	e04f      	b.n	800297c <HAL_I2C_Init+0x1c4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d111      	bne.n	8002908 <HAL_I2C_Init+0x150>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1e58      	subs	r0, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	440b      	add	r3, r1
 80028f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e012      	b.n	800292e <HAL_I2C_Init+0x176>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	0099      	lsls	r1, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Init+0x17e>
 8002932:	2301      	movs	r3, #1
 8002934:	e022      	b.n	800297c <HAL_I2C_Init+0x1c4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10e      	bne.n	800295c <HAL_I2C_Init+0x1a4>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e58      	subs	r0, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	440b      	add	r3, r1
 800294c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002950:	3301      	adds	r3, #1
 8002952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295a:	e00f      	b.n	800297c <HAL_I2C_Init+0x1c4>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e58      	subs	r0, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	0099      	lsls	r1, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	6809      	ldr	r1, [r1, #0]
 8002980:	4313      	orrs	r3, r2
 8002982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6911      	ldr	r1, [r2, #16]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68d2      	ldr	r2, [r2, #12]
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	000186a0 	.word	0x000186a0
 8002a18:	001e847f 	.word	0x001e847f
 8002a1c:	003d08ff 	.word	0x003d08ff
 8002a20:	431bde83 	.word	0x431bde83
 8002a24:	10624dd3 	.word	0x10624dd3

08002a28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d129      	bne.n	8002a92 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2224      	movs	r2, #36	; 0x24
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0210 	bic.w	r2, r2, #16
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e000      	b.n	8002a94 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002a92:	2302      	movs	r3, #2
  }
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d12a      	bne.n	8002b10 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2224      	movs	r2, #36	; 0x24
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002ada:	89fb      	ldrh	r3, [r7, #14]
 8002adc:	f023 030f 	bic.w	r3, r3, #15
 8002ae0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	89fa      	ldrh	r2, [r7, #14]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a1f      	ldr	r2, [pc, #124]	; (8002bb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b4c:	f7fe fa04 	bl	8000f58 <HAL_GetTick>
 8002b50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b52:	e009      	b.n	8002b68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b54:	f7fe fa00 	bl	8000f58 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b62:	d901      	bls.n	8002b68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e01f      	b.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d1ee      	bne.n	8002b54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b7c:	f7fe f9ec 	bl	8000f58 <HAL_GetTick>
 8002b80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b82:	e009      	b.n	8002b98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b84:	f7fe f9e8 	bl	8000f58 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b92:	d901      	bls.n	8002b98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e007      	b.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	420e0040 	.word	0x420e0040
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	420e0044 	.word	0x420e0044

08002bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e25b      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d075      	beq.n	8002cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bde:	4ba3      	ldr	r3, [pc, #652]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d00c      	beq.n	8002c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bea:	4ba0      	ldr	r3, [pc, #640]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d112      	bne.n	8002c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf6:	4b9d      	ldr	r3, [pc, #628]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c02:	d10b      	bne.n	8002c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c04:	4b99      	ldr	r3, [pc, #612]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d05b      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x108>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d157      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e236      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c24:	d106      	bne.n	8002c34 <HAL_RCC_OscConfig+0x74>
 8002c26:	4b91      	ldr	r3, [pc, #580]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a90      	ldr	r2, [pc, #576]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e01d      	b.n	8002c70 <HAL_RCC_OscConfig+0xb0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x98>
 8002c3e:	4b8b      	ldr	r3, [pc, #556]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a8a      	ldr	r2, [pc, #552]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a87      	ldr	r2, [pc, #540]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCC_OscConfig+0xb0>
 8002c58:	4b84      	ldr	r3, [pc, #528]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a83      	ldr	r2, [pc, #524]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a80      	ldr	r2, [pc, #512]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe f96e 	bl	8000f58 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fe f96a 	bl	8000f58 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1fb      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b76      	ldr	r3, [pc, #472]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xc0>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe f95a 	bl	8000f58 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe f956 	bl	8000f58 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1e7      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	4b6c      	ldr	r3, [pc, #432]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xe8>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d063      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd6:	4b65      	ldr	r3, [pc, #404]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce2:	4b62      	ldr	r3, [pc, #392]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d11c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cee:	4b5f      	ldr	r3, [pc, #380]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfa:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x152>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d001      	beq.n	8002d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e1bb      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4952      	ldr	r1, [pc, #328]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	e03a      	b.n	8002d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d020      	beq.n	8002d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d30:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <HAL_RCC_OscConfig+0x2b0>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe f90f 	bl	8000f58 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3e:	f7fe f90b 	bl	8000f58 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e19c      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	4b46      	ldr	r3, [pc, #280]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5c:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4940      	ldr	r1, [pc, #256]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
 8002d70:	e015      	b.n	8002d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d72:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <HAL_RCC_OscConfig+0x2b0>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f8ee 	bl	8000f58 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d80:	f7fe f8ea 	bl	8000f58 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e17b      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d030      	beq.n	8002e0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d016      	beq.n	8002de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db2:	4b30      	ldr	r3, [pc, #192]	; (8002e74 <HAL_RCC_OscConfig+0x2b4>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe f8ce 	bl	8000f58 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe f8ca 	bl	8000f58 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e15b      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x200>
 8002dde:	e015      	b.n	8002e0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de0:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCC_OscConfig+0x2b4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe f8b7 	bl	8000f58 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dee:	f7fe f8b3 	bl	8000f58 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e144      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a0 	beq.w	8002f5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_OscConfig+0x2b8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d121      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_RCC_OscConfig+0x2b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <HAL_RCC_OscConfig+0x2b8>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fe f879 	bl	8000f58 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e011      	b.n	8002e8e <HAL_RCC_OscConfig+0x2ce>
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	42470000 	.word	0x42470000
 8002e74:	42470e80 	.word	0x42470e80
 8002e78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7c:	f7fe f86c 	bl	8000f58 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0fd      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b81      	ldr	r3, [pc, #516]	; (8003094 <HAL_RCC_OscConfig+0x4d4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x2f0>
 8002ea2:	4b7d      	ldr	r3, [pc, #500]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a7c      	ldr	r2, [pc, #496]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	e01c      	b.n	8002eea <HAL_RCC_OscConfig+0x32a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x312>
 8002eb8:	4b77      	ldr	r3, [pc, #476]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a76      	ldr	r2, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	4b74      	ldr	r3, [pc, #464]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a73      	ldr	r2, [pc, #460]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0x32a>
 8002ed2:	4b71      	ldr	r3, [pc, #452]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a70      	ldr	r2, [pc, #448]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	4b6e      	ldr	r3, [pc, #440]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a6d      	ldr	r2, [pc, #436]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fe f831 	bl	8000f58 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe f82d 	bl	8000f58 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0bc      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	4b61      	ldr	r3, [pc, #388]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ee      	beq.n	8002efa <HAL_RCC_OscConfig+0x33a>
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f81b 	bl	8000f58 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe f817 	bl	8000f58 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e0a6      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3c:	4b56      	ldr	r3, [pc, #344]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b52      	ldr	r3, [pc, #328]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a51      	ldr	r2, [pc, #324]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8092 	beq.w	8003088 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f64:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d05c      	beq.n	800302a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d141      	bne.n	8002ffc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b48      	ldr	r3, [pc, #288]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fd ffeb 	bl	8000f58 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fd ffe7 	bl	8000f58 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e078      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	019b      	lsls	r3, r3, #6
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	4933      	ldr	r1, [pc, #204]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fce:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fd ffc0 	bl	8000f58 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fd ffbc 	bl	8000f58 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e04d      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x41c>
 8002ffa:	e045      	b.n	8003088 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffc:	4b27      	ldr	r3, [pc, #156]	; (800309c <HAL_RCC_OscConfig+0x4dc>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fd ffa9 	bl	8000f58 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300a:	f7fd ffa5 	bl	8000f58 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e036      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301c:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x44a>
 8003028:	e02e      	b.n	8003088 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e029      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_RCC_OscConfig+0x4d8>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	429a      	cmp	r2, r3
 8003048:	d11c      	bne.n	8003084 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d115      	bne.n	8003084 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003064:	4293      	cmp	r3, r2
 8003066:	d10d      	bne.n	8003084 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d106      	bne.n	8003084 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40007000 	.word	0x40007000
 8003098:	40023800 	.word	0x40023800
 800309c:	42470060 	.word	0x42470060

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0cc      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d90c      	bls.n	80030dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d044      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d119      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e067      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4934      	ldr	r1, [pc, #208]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fd fee2 	bl	8000f58 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fd fede 	bl	8000f58 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d20c      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003226:	f000 f821 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800322a:	4601      	mov	r1, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	5cd3      	ldrb	r3, [r2, r3]
 800323a:	fa21 f303 	lsr.w	r3, r1, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fe42 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00
 800325c:	40023800 	.word	0x40023800
 8003260:	080112e8 	.word	0x080112e8
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	2300      	movs	r3, #0
 800327c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b04      	cmp	r3, #4
 800328c:	d007      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x32>
 800328e:	2b08      	cmp	r3, #8
 8003290:	d008      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x38>
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 80b4 	bne.w	8003400 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003298:	4b5e      	ldr	r3, [pc, #376]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800329a:	60bb      	str	r3, [r7, #8]
       break;
 800329c:	e0b3      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329e:	4b5e      	ldr	r3, [pc, #376]	; (8003418 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80032a0:	60bb      	str	r3, [r7, #8]
      break;
 80032a2:	e0b0      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a4:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ae:	4b58      	ldr	r3, [pc, #352]	; (8003410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d04a      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ba:	4b55      	ldr	r3, [pc, #340]	; (8003410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	099b      	lsrs	r3, r3, #6
 80032c0:	f04f 0400 	mov.w	r4, #0
 80032c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	ea03 0501 	and.w	r5, r3, r1
 80032d0:	ea04 0602 	and.w	r6, r4, r2
 80032d4:	4629      	mov	r1, r5
 80032d6:	4632      	mov	r2, r6
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	f04f 0400 	mov.w	r4, #0
 80032e0:	0154      	lsls	r4, r2, #5
 80032e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032e6:	014b      	lsls	r3, r1, #5
 80032e8:	4619      	mov	r1, r3
 80032ea:	4622      	mov	r2, r4
 80032ec:	1b49      	subs	r1, r1, r5
 80032ee:	eb62 0206 	sbc.w	r2, r2, r6
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f04f 0400 	mov.w	r4, #0
 80032fa:	0194      	lsls	r4, r2, #6
 80032fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003300:	018b      	lsls	r3, r1, #6
 8003302:	1a5b      	subs	r3, r3, r1
 8003304:	eb64 0402 	sbc.w	r4, r4, r2
 8003308:	f04f 0100 	mov.w	r1, #0
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	00e2      	lsls	r2, r4, #3
 8003312:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003316:	00d9      	lsls	r1, r3, #3
 8003318:	460b      	mov	r3, r1
 800331a:	4614      	mov	r4, r2
 800331c:	195b      	adds	r3, r3, r5
 800331e:	eb44 0406 	adc.w	r4, r4, r6
 8003322:	f04f 0100 	mov.w	r1, #0
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	0262      	lsls	r2, r4, #9
 800332c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003330:	0259      	lsls	r1, r3, #9
 8003332:	460b      	mov	r3, r1
 8003334:	4614      	mov	r4, r2
 8003336:	4618      	mov	r0, r3
 8003338:	4621      	mov	r1, r4
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f04f 0400 	mov.w	r4, #0
 8003340:	461a      	mov	r2, r3
 8003342:	4623      	mov	r3, r4
 8003344:	f7fc ffa4 	bl	8000290 <__aeabi_uldivmod>
 8003348:	4603      	mov	r3, r0
 800334a:	460c      	mov	r4, r1
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e049      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003350:	4b2f      	ldr	r3, [pc, #188]	; (8003410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	f04f 0400 	mov.w	r4, #0
 800335a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	ea03 0501 	and.w	r5, r3, r1
 8003366:	ea04 0602 	and.w	r6, r4, r2
 800336a:	4629      	mov	r1, r5
 800336c:	4632      	mov	r2, r6
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	f04f 0400 	mov.w	r4, #0
 8003376:	0154      	lsls	r4, r2, #5
 8003378:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800337c:	014b      	lsls	r3, r1, #5
 800337e:	4619      	mov	r1, r3
 8003380:	4622      	mov	r2, r4
 8003382:	1b49      	subs	r1, r1, r5
 8003384:	eb62 0206 	sbc.w	r2, r2, r6
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	f04f 0400 	mov.w	r4, #0
 8003390:	0194      	lsls	r4, r2, #6
 8003392:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003396:	018b      	lsls	r3, r1, #6
 8003398:	1a5b      	subs	r3, r3, r1
 800339a:	eb64 0402 	sbc.w	r4, r4, r2
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	00e2      	lsls	r2, r4, #3
 80033a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033ac:	00d9      	lsls	r1, r3, #3
 80033ae:	460b      	mov	r3, r1
 80033b0:	4614      	mov	r4, r2
 80033b2:	195b      	adds	r3, r3, r5
 80033b4:	eb44 0406 	adc.w	r4, r4, r6
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	02a2      	lsls	r2, r4, #10
 80033c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033c6:	0299      	lsls	r1, r3, #10
 80033c8:	460b      	mov	r3, r1
 80033ca:	4614      	mov	r4, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	4621      	mov	r1, r4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f04f 0400 	mov.w	r4, #0
 80033d6:	461a      	mov	r2, r3
 80033d8:	4623      	mov	r3, r4
 80033da:	f7fc ff59 	bl	8000290 <__aeabi_uldivmod>
 80033de:	4603      	mov	r3, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	0c1b      	lsrs	r3, r3, #16
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	3301      	adds	r3, #1
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	60bb      	str	r3, [r7, #8]
      break;
 80033fe:	e002      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003402:	60bb      	str	r3, [r7, #8]
      break;
 8003404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003406:	68bb      	ldr	r3, [r7, #8]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003410:	40023800 	.word	0x40023800
 8003414:	00f42400 	.word	0x00f42400
 8003418:	007a1200 	.word	0x007a1200

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_RCC_GetHCLKFreq+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000000 	.word	0x20000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003438:	f7ff fff0 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800343c:	4601      	mov	r1, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0a9b      	lsrs	r3, r3, #10
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4a03      	ldr	r2, [pc, #12]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	080112f8 	.word	0x080112f8

0800345c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003462:	4b8d      	ldr	r3, [pc, #564]	; (8003698 <MX_LWIP_Init+0x23c>)
 8003464:	22c0      	movs	r2, #192	; 0xc0
 8003466:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003468:	4b8b      	ldr	r3, [pc, #556]	; (8003698 <MX_LWIP_Init+0x23c>)
 800346a:	22a8      	movs	r2, #168	; 0xa8
 800346c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 800346e:	4b8a      	ldr	r3, [pc, #552]	; (8003698 <MX_LWIP_Init+0x23c>)
 8003470:	2264      	movs	r2, #100	; 0x64
 8003472:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 8003474:	4b88      	ldr	r3, [pc, #544]	; (8003698 <MX_LWIP_Init+0x23c>)
 8003476:	2232      	movs	r2, #50	; 0x32
 8003478:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800347a:	4b88      	ldr	r3, [pc, #544]	; (800369c <MX_LWIP_Init+0x240>)
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003480:	4b86      	ldr	r3, [pc, #536]	; (800369c <MX_LWIP_Init+0x240>)
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003486:	4b85      	ldr	r3, [pc, #532]	; (800369c <MX_LWIP_Init+0x240>)
 8003488:	22ff      	movs	r2, #255	; 0xff
 800348a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800348c:	4b83      	ldr	r3, [pc, #524]	; (800369c <MX_LWIP_Init+0x240>)
 800348e:	2200      	movs	r2, #0
 8003490:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003492:	4b83      	ldr	r3, [pc, #524]	; (80036a0 <MX_LWIP_Init+0x244>)
 8003494:	22c0      	movs	r2, #192	; 0xc0
 8003496:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003498:	4b81      	ldr	r3, [pc, #516]	; (80036a0 <MX_LWIP_Init+0x244>)
 800349a:	22a8      	movs	r2, #168	; 0xa8
 800349c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800349e:	4b80      	ldr	r3, [pc, #512]	; (80036a0 <MX_LWIP_Init+0x244>)
 80034a0:	2264      	movs	r2, #100	; 0x64
 80034a2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80034a4:	4b7e      	ldr	r3, [pc, #504]	; (80036a0 <MX_LWIP_Init+0x244>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80034aa:	f000 fcc5 	bl	8003e38 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80034ae:	4b7a      	ldr	r3, [pc, #488]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	061a      	lsls	r2, r3, #24
 80034b4:	4b78      	ldr	r3, [pc, #480]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	431a      	orrs	r2, r3
 80034bc:	4b76      	ldr	r3, [pc, #472]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034be:	789b      	ldrb	r3, [r3, #2]
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	4313      	orrs	r3, r2
 80034c4:	4a74      	ldr	r2, [pc, #464]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034c6:	78d2      	ldrb	r2, [r2, #3]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	061a      	lsls	r2, r3, #24
 80034cc:	4b72      	ldr	r3, [pc, #456]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	0619      	lsls	r1, r3, #24
 80034d2:	4b71      	ldr	r3, [pc, #452]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	4319      	orrs	r1, r3
 80034da:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034dc:	789b      	ldrb	r3, [r3, #2]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	430b      	orrs	r3, r1
 80034e2:	496d      	ldr	r1, [pc, #436]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034e4:	78c9      	ldrb	r1, [r1, #3]
 80034e6:	430b      	orrs	r3, r1
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034ee:	431a      	orrs	r2, r3
 80034f0:	4b69      	ldr	r3, [pc, #420]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	0619      	lsls	r1, r3, #24
 80034f6:	4b68      	ldr	r3, [pc, #416]	; (8003698 <MX_LWIP_Init+0x23c>)
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	4319      	orrs	r1, r3
 80034fe:	4b66      	ldr	r3, [pc, #408]	; (8003698 <MX_LWIP_Init+0x23c>)
 8003500:	789b      	ldrb	r3, [r3, #2]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	430b      	orrs	r3, r1
 8003506:	4964      	ldr	r1, [pc, #400]	; (8003698 <MX_LWIP_Init+0x23c>)
 8003508:	78c9      	ldrb	r1, [r1, #3]
 800350a:	430b      	orrs	r3, r1
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003512:	431a      	orrs	r2, r3
 8003514:	4b60      	ldr	r3, [pc, #384]	; (8003698 <MX_LWIP_Init+0x23c>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	0619      	lsls	r1, r3, #24
 800351a:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <MX_LWIP_Init+0x23c>)
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	4319      	orrs	r1, r3
 8003522:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <MX_LWIP_Init+0x23c>)
 8003524:	789b      	ldrb	r3, [r3, #2]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	430b      	orrs	r3, r1
 800352a:	495b      	ldr	r1, [pc, #364]	; (8003698 <MX_LWIP_Init+0x23c>)
 800352c:	78c9      	ldrb	r1, [r1, #3]
 800352e:	430b      	orrs	r3, r1
 8003530:	0e1b      	lsrs	r3, r3, #24
 8003532:	4313      	orrs	r3, r2
 8003534:	4a5b      	ldr	r2, [pc, #364]	; (80036a4 <MX_LWIP_Init+0x248>)
 8003536:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003538:	4b58      	ldr	r3, [pc, #352]	; (800369c <MX_LWIP_Init+0x240>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	061a      	lsls	r2, r3, #24
 800353e:	4b57      	ldr	r3, [pc, #348]	; (800369c <MX_LWIP_Init+0x240>)
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	431a      	orrs	r2, r3
 8003546:	4b55      	ldr	r3, [pc, #340]	; (800369c <MX_LWIP_Init+0x240>)
 8003548:	789b      	ldrb	r3, [r3, #2]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	4313      	orrs	r3, r2
 800354e:	4a53      	ldr	r2, [pc, #332]	; (800369c <MX_LWIP_Init+0x240>)
 8003550:	78d2      	ldrb	r2, [r2, #3]
 8003552:	4313      	orrs	r3, r2
 8003554:	061a      	lsls	r2, r3, #24
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <MX_LWIP_Init+0x240>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	0619      	lsls	r1, r3, #24
 800355c:	4b4f      	ldr	r3, [pc, #316]	; (800369c <MX_LWIP_Init+0x240>)
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	4319      	orrs	r1, r3
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <MX_LWIP_Init+0x240>)
 8003566:	789b      	ldrb	r3, [r3, #2]
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	430b      	orrs	r3, r1
 800356c:	494b      	ldr	r1, [pc, #300]	; (800369c <MX_LWIP_Init+0x240>)
 800356e:	78c9      	ldrb	r1, [r1, #3]
 8003570:	430b      	orrs	r3, r1
 8003572:	021b      	lsls	r3, r3, #8
 8003574:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003578:	431a      	orrs	r2, r3
 800357a:	4b48      	ldr	r3, [pc, #288]	; (800369c <MX_LWIP_Init+0x240>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	0619      	lsls	r1, r3, #24
 8003580:	4b46      	ldr	r3, [pc, #280]	; (800369c <MX_LWIP_Init+0x240>)
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	4319      	orrs	r1, r3
 8003588:	4b44      	ldr	r3, [pc, #272]	; (800369c <MX_LWIP_Init+0x240>)
 800358a:	789b      	ldrb	r3, [r3, #2]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	430b      	orrs	r3, r1
 8003590:	4942      	ldr	r1, [pc, #264]	; (800369c <MX_LWIP_Init+0x240>)
 8003592:	78c9      	ldrb	r1, [r1, #3]
 8003594:	430b      	orrs	r3, r1
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800359c:	431a      	orrs	r2, r3
 800359e:	4b3f      	ldr	r3, [pc, #252]	; (800369c <MX_LWIP_Init+0x240>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	0619      	lsls	r1, r3, #24
 80035a4:	4b3d      	ldr	r3, [pc, #244]	; (800369c <MX_LWIP_Init+0x240>)
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	4319      	orrs	r1, r3
 80035ac:	4b3b      	ldr	r3, [pc, #236]	; (800369c <MX_LWIP_Init+0x240>)
 80035ae:	789b      	ldrb	r3, [r3, #2]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	430b      	orrs	r3, r1
 80035b4:	4939      	ldr	r1, [pc, #228]	; (800369c <MX_LWIP_Init+0x240>)
 80035b6:	78c9      	ldrb	r1, [r1, #3]
 80035b8:	430b      	orrs	r3, r1
 80035ba:	0e1b      	lsrs	r3, r3, #24
 80035bc:	4313      	orrs	r3, r2
 80035be:	4a3a      	ldr	r2, [pc, #232]	; (80036a8 <MX_LWIP_Init+0x24c>)
 80035c0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <MX_LWIP_Init+0x244>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	061a      	lsls	r2, r3, #24
 80035c8:	4b35      	ldr	r3, [pc, #212]	; (80036a0 <MX_LWIP_Init+0x244>)
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <MX_LWIP_Init+0x244>)
 80035d2:	789b      	ldrb	r3, [r3, #2]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	4313      	orrs	r3, r2
 80035d8:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <MX_LWIP_Init+0x244>)
 80035da:	78d2      	ldrb	r2, [r2, #3]
 80035dc:	4313      	orrs	r3, r2
 80035de:	061a      	lsls	r2, r3, #24
 80035e0:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <MX_LWIP_Init+0x244>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	0619      	lsls	r1, r3, #24
 80035e6:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <MX_LWIP_Init+0x244>)
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	4319      	orrs	r1, r3
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <MX_LWIP_Init+0x244>)
 80035f0:	789b      	ldrb	r3, [r3, #2]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	430b      	orrs	r3, r1
 80035f6:	492a      	ldr	r1, [pc, #168]	; (80036a0 <MX_LWIP_Init+0x244>)
 80035f8:	78c9      	ldrb	r1, [r1, #3]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003602:	431a      	orrs	r2, r3
 8003604:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <MX_LWIP_Init+0x244>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	0619      	lsls	r1, r3, #24
 800360a:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <MX_LWIP_Init+0x244>)
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	041b      	lsls	r3, r3, #16
 8003610:	4319      	orrs	r1, r3
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <MX_LWIP_Init+0x244>)
 8003614:	789b      	ldrb	r3, [r3, #2]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	430b      	orrs	r3, r1
 800361a:	4921      	ldr	r1, [pc, #132]	; (80036a0 <MX_LWIP_Init+0x244>)
 800361c:	78c9      	ldrb	r1, [r1, #3]
 800361e:	430b      	orrs	r3, r1
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003626:	431a      	orrs	r2, r3
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <MX_LWIP_Init+0x244>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	0619      	lsls	r1, r3, #24
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <MX_LWIP_Init+0x244>)
 8003630:	785b      	ldrb	r3, [r3, #1]
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	4319      	orrs	r1, r3
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <MX_LWIP_Init+0x244>)
 8003638:	789b      	ldrb	r3, [r3, #2]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	430b      	orrs	r3, r1
 800363e:	4918      	ldr	r1, [pc, #96]	; (80036a0 <MX_LWIP_Init+0x244>)
 8003640:	78c9      	ldrb	r1, [r1, #3]
 8003642:	430b      	orrs	r3, r1
 8003644:	0e1b      	lsrs	r3, r3, #24
 8003646:	4313      	orrs	r3, r2
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <MX_LWIP_Init+0x250>)
 800364a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800364c:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <MX_LWIP_Init+0x254>)
 800364e:	9302      	str	r3, [sp, #8]
 8003650:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <MX_LWIP_Init+0x258>)
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	2300      	movs	r3, #0
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <MX_LWIP_Init+0x250>)
 800365a:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <MX_LWIP_Init+0x24c>)
 800365c:	4911      	ldr	r1, [pc, #68]	; (80036a4 <MX_LWIP_Init+0x248>)
 800365e:	4816      	ldr	r0, [pc, #88]	; (80036b8 <MX_LWIP_Init+0x25c>)
 8003660:	f001 f890 	bl	8004784 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003664:	4814      	ldr	r0, [pc, #80]	; (80036b8 <MX_LWIP_Init+0x25c>)
 8003666:	f001 fa3f 	bl	8004ae8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800366a:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <MX_LWIP_Init+0x25c>)
 800366c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800367c:	480e      	ldr	r0, [pc, #56]	; (80036b8 <MX_LWIP_Init+0x25c>)
 800367e:	f001 fa43 	bl	8004b08 <netif_set_up>
 8003682:	e002      	b.n	800368a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003684:	480c      	ldr	r0, [pc, #48]	; (80036b8 <MX_LWIP_Init+0x25c>)
 8003686:	f001 faab 	bl	8004be0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800368a:	490c      	ldr	r1, [pc, #48]	; (80036bc <MX_LWIP_Init+0x260>)
 800368c:	480a      	ldr	r0, [pc, #40]	; (80036b8 <MX_LWIP_Init+0x25c>)
 800368e:	f001 fad9 	bl	8004c44 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	2000030c 	.word	0x2000030c
 800369c:	20000308 	.word	0x20000308
 80036a0:	200002cc 	.word	0x200002cc
 80036a4:	20000304 	.word	0x20000304
 80036a8:	20000310 	.word	0x20000310
 80036ac:	20000314 	.word	0x20000314
 80036b0:	0800d4d5 	.word	0x0800d4d5
 80036b4:	08003c65 	.word	0x08003c65
 80036b8:	200002d0 	.word	0x200002d0
 80036bc:	08003cd1 	.word	0x08003cd1

080036c0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80036c4:	4803      	ldr	r0, [pc, #12]	; (80036d4 <MX_LWIP_Process+0x14>)
 80036c6:	f000 faad 	bl	8003c24 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80036ca:	f007 fb23 	bl	800ad14 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200002d0 	.word	0x200002d0

080036d8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a46      	ldr	r2, [pc, #280]	; (8003810 <HAL_ETH_MspInit+0x138>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	f040 8085 	bne.w	8003806 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80036fc:	2300      	movs	r3, #0
 80036fe:	623b      	str	r3, [r7, #32]
 8003700:	4b44      	ldr	r3, [pc, #272]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4a43      	ldr	r2, [pc, #268]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 8003706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800370a:	6313      	str	r3, [r2, #48]	; 0x30
 800370c:	4b41      	ldr	r3, [pc, #260]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	623b      	str	r3, [r7, #32]
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	4a3c      	ldr	r2, [pc, #240]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 8003722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003726:	6313      	str	r3, [r2, #48]	; 0x30
 8003728:	4b3a      	ldr	r3, [pc, #232]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	4a35      	ldr	r2, [pc, #212]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 800373e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003742:	6313      	str	r3, [r2, #48]	; 0x30
 8003744:	4b33      	ldr	r3, [pc, #204]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	4b2f      	ldr	r3, [pc, #188]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 800375a:	f043 0304 	orr.w	r3, r3, #4
 800375e:	6313      	str	r3, [r2, #48]	; 0x30
 8003760:	4b2c      	ldr	r3, [pc, #176]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	4b28      	ldr	r3, [pc, #160]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6313      	str	r3, [r2, #48]	; 0x30
 800377c:	4b25      	ldr	r3, [pc, #148]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	4a20      	ldr	r2, [pc, #128]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 8003792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003796:	6313      	str	r3, [r2, #48]	; 0x30
 8003798:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <HAL_ETH_MspInit+0x13c>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80037a4:	2332      	movs	r3, #50	; 0x32
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a8:	2302      	movs	r3, #2
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b0:	2303      	movs	r3, #3
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037b4:	230b      	movs	r3, #11
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037bc:	4619      	mov	r1, r3
 80037be:	4816      	ldr	r0, [pc, #88]	; (8003818 <HAL_ETH_MspInit+0x140>)
 80037c0:	f7fe fe04 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80037c4:	2386      	movs	r3, #134	; 0x86
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d0:	2303      	movs	r3, #3
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037d4:	230b      	movs	r3, #11
 80037d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037dc:	4619      	mov	r1, r3
 80037de:	480f      	ldr	r0, [pc, #60]	; (800381c <HAL_ETH_MspInit+0x144>)
 80037e0:	f7fe fdf4 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80037e4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ea:	2302      	movs	r3, #2
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f2:	2303      	movs	r3, #3
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037f6:	230b      	movs	r3, #11
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fe:	4619      	mov	r1, r3
 8003800:	4807      	ldr	r0, [pc, #28]	; (8003820 <HAL_ETH_MspInit+0x148>)
 8003802:	f7fe fde3 	bl	80023cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003806:	bf00      	nop
 8003808:	3738      	adds	r7, #56	; 0x38
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40028000 	.word	0x40028000
 8003814:	40023800 	.word	0x40023800
 8003818:	40020800 	.word	0x40020800
 800381c:	40020000 	.word	0x40020000
 8003820:	40021800 	.word	0x40021800

08003824 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003830:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <low_level_init+0x144>)
 8003832:	4a4e      	ldr	r2, [pc, #312]	; (800396c <low_level_init+0x148>)
 8003834:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003836:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <low_level_init+0x144>)
 8003838:	2201      	movs	r2, #1
 800383a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800383c:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <low_level_init+0x144>)
 800383e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003842:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003844:	4b48      	ldr	r3, [pc, #288]	; (8003968 <low_level_init+0x144>)
 8003846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800384a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800384c:	4b46      	ldr	r3, [pc, #280]	; (8003968 <low_level_init+0x144>)
 800384e:	2200      	movs	r2, #0
 8003850:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003852:	2300      	movs	r3, #0
 8003854:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800385a:	23e1      	movs	r3, #225	; 0xe1
 800385c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x01;
 800385e:	2301      	movs	r3, #1
 8003860:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x23;
 8003862:	2323      	movs	r3, #35	; 0x23
 8003864:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x45;
 8003866:	2345      	movs	r3, #69	; 0x45
 8003868:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800386a:	4a3f      	ldr	r2, [pc, #252]	; (8003968 <low_level_init+0x144>)
 800386c:	f107 0308 	add.w	r3, r7, #8
 8003870:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003872:	4b3d      	ldr	r3, [pc, #244]	; (8003968 <low_level_init+0x144>)
 8003874:	2200      	movs	r2, #0
 8003876:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003878:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <low_level_init+0x144>)
 800387a:	2200      	movs	r2, #0
 800387c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800387e:	4b3a      	ldr	r3, [pc, #232]	; (8003968 <low_level_init+0x144>)
 8003880:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003884:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003886:	4838      	ldr	r0, [pc, #224]	; (8003968 <low_level_init+0x144>)
 8003888:	f7fd fc7a 	bl	8001180 <HAL_ETH_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800389c:	f043 0304 	orr.w	r3, r3, #4
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80038a8:	2304      	movs	r3, #4
 80038aa:	4a31      	ldr	r2, [pc, #196]	; (8003970 <low_level_init+0x14c>)
 80038ac:	4931      	ldr	r1, [pc, #196]	; (8003974 <low_level_init+0x150>)
 80038ae:	482e      	ldr	r0, [pc, #184]	; (8003968 <low_level_init+0x144>)
 80038b0:	f7fd fe04 	bl	80014bc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80038b4:	2304      	movs	r3, #4
 80038b6:	4a30      	ldr	r2, [pc, #192]	; (8003978 <low_level_init+0x154>)
 80038b8:	4930      	ldr	r1, [pc, #192]	; (800397c <low_level_init+0x158>)
 80038ba:	482b      	ldr	r0, [pc, #172]	; (8003968 <low_level_init+0x144>)
 80038bc:	f7fd fe67 	bl	800158e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2206      	movs	r2, #6
 80038c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80038c8:	4b27      	ldr	r3, [pc, #156]	; (8003968 <low_level_init+0x144>)
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80038d4:	4b24      	ldr	r3, [pc, #144]	; (8003968 <low_level_init+0x144>)
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	785a      	ldrb	r2, [r3, #1]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80038e0:	4b21      	ldr	r3, [pc, #132]	; (8003968 <low_level_init+0x144>)
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	789a      	ldrb	r2, [r3, #2]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <low_level_init+0x144>)
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	78da      	ldrb	r2, [r3, #3]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <low_level_init+0x144>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	791a      	ldrb	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003904:	4b18      	ldr	r3, [pc, #96]	; (8003968 <low_level_init+0x144>)
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	795a      	ldrb	r2, [r3, #5]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003916:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800391e:	f043 030a 	orr.w	r3, r3, #10
 8003922:	b2da      	uxtb	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800392a:	480f      	ldr	r0, [pc, #60]	; (8003968 <low_level_init+0x144>)
 800392c:	f7fe f8d8 	bl	8001ae0 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003930:	f107 0310 	add.w	r3, r7, #16
 8003934:	461a      	mov	r2, r3
 8003936:	211d      	movs	r1, #29
 8003938:	480b      	ldr	r0, [pc, #44]	; (8003968 <low_level_init+0x144>)
 800393a:	f7fe f803 	bl	8001944 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f043 030b 	orr.w	r3, r3, #11
 8003944:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	461a      	mov	r2, r3
 800394a:	211d      	movs	r1, #29
 800394c:	4806      	ldr	r0, [pc, #24]	; (8003968 <low_level_init+0x144>)
 800394e:	f7fe f861 	bl	8001a14 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003952:	f107 0310 	add.w	r3, r7, #16
 8003956:	461a      	mov	r2, r3
 8003958:	211d      	movs	r1, #29
 800395a:	4803      	ldr	r0, [pc, #12]	; (8003968 <low_level_init+0x144>)
 800395c:	f7fd fff2 	bl	8001944 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003960:	bf00      	nop
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20001be8 	.word	0x20001be8
 800396c:	40028000 	.word	0x40028000
 8003970:	20001c30 	.word	0x20001c30
 8003974:	20000318 	.word	0x20000318
 8003978:	20000398 	.word	0x20000398
 800397c:	20001b68 	.word	0x20001b68

08003980 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800398a:	4b4b      	ldr	r3, [pc, #300]	; (8003ab8 <low_level_output+0x138>)
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80039a2:	4b45      	ldr	r3, [pc, #276]	; (8003ab8 <low_level_output+0x138>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	e05a      	b.n	8003a68 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da03      	bge.n	80039c2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80039ba:	23f8      	movs	r3, #248	; 0xf8
 80039bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80039c0:	e05c      	b.n	8003a7c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	895b      	ldrh	r3, [r3, #10]
 80039c6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80039cc:	e02f      	b.n	8003a2e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	18d0      	adds	r0, r2, r3
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	18d1      	adds	r1, r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80039e2:	3304      	adds	r3, #4
 80039e4:	461a      	mov	r2, r3
 80039e6:	f00a f850 	bl	800da8a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	da03      	bge.n	8003a00 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80039f8:	23f8      	movs	r3, #248	; 0xf8
 80039fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80039fe:	e03d      	b.n	8003a7c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003a10:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a1c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a28:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d8c8      	bhi.n	80039ce <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	18d0      	adds	r0, r2, r3
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4413      	add	r3, r2
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f00a f81c 	bl	800da8a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1a1      	bne.n	80039b2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003a6e:	6979      	ldr	r1, [r7, #20]
 8003a70:	4811      	ldr	r0, [pc, #68]	; (8003ab8 <low_level_output+0x138>)
 8003a72:	f7fd fdf9 	bl	8001668 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <low_level_output+0x138>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a84:	3314      	adds	r3, #20
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <low_level_output+0x138>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a98:	3314      	adds	r3, #20
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <low_level_output+0x138>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003aac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3728      	adds	r7, #40	; 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20001be8 	.word	0x20001be8

08003abc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08c      	sub	sp, #48	; 0x30
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003ae0:	484f      	ldr	r0, [pc, #316]	; (8003c20 <low_level_input+0x164>)
 8003ae2:	f7fd feab 	bl	800183c <HAL_ETH_GetReceivedFrame>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <low_level_input+0x34>

    return NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e092      	b.n	8003c16 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003af0:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <low_level_input+0x164>)
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003af6:	4b4a      	ldr	r3, [pc, #296]	; (8003c20 <low_level_input+0x164>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003afc:	89fb      	ldrh	r3, [r7, #14]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003b02:	89fb      	ldrh	r3, [r7, #14]
 8003b04:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003b08:	4619      	mov	r1, r3
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f001 f936 	bl	8004d7c <pbuf_alloc>
 8003b10:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d04b      	beq.n	8003bb0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003b18:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <low_level_input+0x164>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b26:	e040      	b.n	8003baa <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	895b      	ldrh	r3, [r3, #10]
 8003b2c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003b32:	e021      	b.n	8003b78 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	18d0      	adds	r0, r2, r3
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	18d1      	adds	r1, r2, r3
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003b48:	3304      	adds	r3, #4
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f009 ff9d 	bl	800da8a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4413      	add	r3, r2
 8003b62:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003b66:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003b72:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d8d6      	bhi.n	8003b34 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	18d0      	adds	r0, r2, r3
 8003b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4619      	mov	r1, r3
 8003b98:	f009 ff77 	bl	800da8a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1bb      	bne.n	8003b28 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <low_level_input+0x164>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	e00b      	b.n	8003bd4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <low_level_input+0x164>)
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d3ee      	bcc.n	8003bbc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <low_level_input+0x164>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003be4:	4b0e      	ldr	r3, [pc, #56]	; (8003c20 <low_level_input+0x164>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bec:	3314      	adds	r3, #20
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <low_level_input+0x164>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c00:	3314      	adds	r3, #20
 8003c02:	2280      	movs	r2, #128	; 0x80
 8003c04:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <low_level_input+0x164>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0e:	3308      	adds	r3, #8
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3730      	adds	r7, #48	; 0x30
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20001be8 	.word	0x20001be8

08003c24 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ff45 	bl	8003abc <low_level_input>
 8003c32:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d010      	beq.n	8003c5c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	4798      	blx	r3
 8003c44:	4603      	mov	r3, r0
 8003c46:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003c48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f001 fb73 	bl	800533c <pbuf_free>
    p = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e000      	b.n	8003c5e <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003c5c:	bf00      	nop
  }
}
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <ethernetif_init+0x1c>
 8003c72:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <ethernetif_init+0x48>)
 8003c74:	f240 2207 	movw	r2, #519	; 0x207
 8003c78:	490d      	ldr	r1, [pc, #52]	; (8003cb0 <ethernetif_init+0x4c>)
 8003c7a:	480e      	ldr	r0, [pc, #56]	; (8003cb4 <ethernetif_init+0x50>)
 8003c7c:	f009 ff18 	bl	800dab0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2273      	movs	r2, #115	; 0x73
 8003c84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2274      	movs	r2, #116	; 0x74
 8003c8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <ethernetif_init+0x54>)
 8003c94:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <ethernetif_init+0x58>)
 8003c9a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff fdc1 	bl	8003824 <low_level_init>

  return ERR_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	0800e908 	.word	0x0800e908
 8003cb0:	0800e924 	.word	0x0800e924
 8003cb4:	0800e934 	.word	0x0800e934
 8003cb8:	0800b9a5 	.word	0x0800b9a5
 8003cbc:	08003981 	.word	0x08003981

08003cc0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003cc4:	f7fd f948 	bl	8000f58 <HAL_GetTick>
 8003cc8:	4603      	mov	r3, r0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d05d      	beq.n	8003dae <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003cf2:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03f      	beq.n	8003d7a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003cfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4830      	ldr	r0, [pc, #192]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d02:	f7fd fe87 	bl	8001a14 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003d06:	f7fd f927 	bl	8000f58 <HAL_GetTick>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	461a      	mov	r2, r3
 8003d14:	2101      	movs	r1, #1
 8003d16:	482b      	ldr	r0, [pc, #172]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d18:	f7fd fe14 	bl	8001944 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003d1c:	f7fd f91c 	bl	8000f58 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d2a:	d828      	bhi.n	8003d7e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0eb      	beq.n	8003d0e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	211f      	movs	r1, #31
 8003d3e:	4821      	ldr	r0, [pc, #132]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d40:	f7fd fe00 	bl	8001944 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	e002      	b.n	8003d5e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003d68:	4b16      	ldr	r3, [pc, #88]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	e016      	b.n	8003d9e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003d70:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	e011      	b.n	8003d9e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003d7a:	bf00      	nop
 8003d7c:	e000      	b.n	8003d80 <ethernetif_update_config+0xb0>
          goto error;
 8003d7e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003d90:	4313      	orrs	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	2100      	movs	r1, #0
 8003d98:	480a      	ldr	r0, [pc, #40]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003d9a:	f7fd fe3b 	bl	8001a14 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4808      	ldr	r0, [pc, #32]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003da2:	f7fd fefb 	bl	8001b9c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003da6:	4807      	ldr	r0, [pc, #28]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003da8:	f7fd fe9a 	bl	8001ae0 <HAL_ETH_Start>
 8003dac:	e002      	b.n	8003db4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003dae:	4805      	ldr	r0, [pc, #20]	; (8003dc4 <ethernetif_update_config+0xf4>)
 8003db0:	f7fd fec5 	bl	8001b3e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f807 	bl	8003dc8 <ethernetif_notify_conn_changed>
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20001be8 	.word	0x20001be8

08003dc8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	b21a      	sxth	r2, r3
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	b21b      	sxth	r3, r3
 8003df4:	4313      	orrs	r3, r2
 8003df6:	b21b      	sxth	r3, r3
 8003df8:	b29b      	uxth	r3, r3
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	061a      	lsls	r2, r3, #24
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	021b      	lsls	r3, r3, #8
 8003e16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0e1b      	lsrs	r3, r3, #24
 8003e2a:	4313      	orrs	r3, r2
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003e42:	f000 f8d5 	bl	8003ff0 <mem_init>
  memp_init();
 8003e46:	f000 fbdb 	bl	8004600 <memp_init>
  pbuf_init();
  netif_init();
 8003e4a:	f000 fc93 	bl	8004774 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003e4e:	f006 ffa3 	bl	800ad98 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003e52:	f001 fd01 	bl	8005858 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003e56:	f006 ff17 	bl	800ac88 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <ptr_to_mem+0x20>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	4413      	add	r3, r2
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000098 	.word	0x20000098

08003e88 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <mem_to_ptr+0x20>)
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	b29b      	uxth	r3, r3
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000098 	.word	0x20000098

08003eac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003eb4:	4b45      	ldr	r3, [pc, #276]	; (8003fcc <plug_holes+0x120>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d206      	bcs.n	8003ecc <plug_holes+0x20>
 8003ebe:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <plug_holes+0x124>)
 8003ec0:	f240 12df 	movw	r2, #479	; 0x1df
 8003ec4:	4943      	ldr	r1, [pc, #268]	; (8003fd4 <plug_holes+0x128>)
 8003ec6:	4844      	ldr	r0, [pc, #272]	; (8003fd8 <plug_holes+0x12c>)
 8003ec8:	f009 fdf2 	bl	800dab0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003ecc:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <plug_holes+0x130>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d306      	bcc.n	8003ee4 <plug_holes+0x38>
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <plug_holes+0x124>)
 8003ed8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003edc:	4940      	ldr	r1, [pc, #256]	; (8003fe0 <plug_holes+0x134>)
 8003ede:	483e      	ldr	r0, [pc, #248]	; (8003fd8 <plug_holes+0x12c>)
 8003ee0:	f009 fde6 	bl	800dab0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	791b      	ldrb	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d006      	beq.n	8003efa <plug_holes+0x4e>
 8003eec:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <plug_holes+0x124>)
 8003eee:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003ef2:	493c      	ldr	r1, [pc, #240]	; (8003fe4 <plug_holes+0x138>)
 8003ef4:	4838      	ldr	r0, [pc, #224]	; (8003fd8 <plug_holes+0x12c>)
 8003ef6:	f009 fddb 	bl	800dab0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f02:	d906      	bls.n	8003f12 <plug_holes+0x66>
 8003f04:	4b32      	ldr	r3, [pc, #200]	; (8003fd0 <plug_holes+0x124>)
 8003f06:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003f0a:	4937      	ldr	r1, [pc, #220]	; (8003fe8 <plug_holes+0x13c>)
 8003f0c:	4832      	ldr	r0, [pc, #200]	; (8003fd8 <plug_holes+0x12c>)
 8003f0e:	f009 fdcf 	bl	800dab0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ffa4 	bl	8003e64 <ptr_to_mem>
 8003f1c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d024      	beq.n	8003f70 <plug_holes+0xc4>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	791b      	ldrb	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d120      	bne.n	8003f70 <plug_holes+0xc4>
 8003f2e:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <plug_holes+0x130>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d01b      	beq.n	8003f70 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003f38:	4b2c      	ldr	r3, [pc, #176]	; (8003fec <plug_holes+0x140>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d102      	bne.n	8003f48 <plug_holes+0x9c>
      lfree = mem;
 8003f42:	4a2a      	ldr	r2, [pc, #168]	; (8003fec <plug_holes+0x140>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	881a      	ldrh	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f58:	d00a      	beq.n	8003f70 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff ff80 	bl	8003e64 <ptr_to_mem>
 8003f64:	4604      	mov	r4, r0
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ff8e 	bl	8003e88 <mem_to_ptr>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	885b      	ldrh	r3, [r3, #2]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff75 	bl	8003e64 <ptr_to_mem>
 8003f7a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d01f      	beq.n	8003fc4 <plug_holes+0x118>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	791b      	ldrb	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d11b      	bne.n	8003fc4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <plug_holes+0x140>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d102      	bne.n	8003f9c <plug_holes+0xf0>
      lfree = pmem;
 8003f96:	4a15      	ldr	r2, [pc, #84]	; (8003fec <plug_holes+0x140>)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003fac:	d00a      	beq.n	8003fc4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff56 	bl	8003e64 <ptr_to_mem>
 8003fb8:	4604      	mov	r4, r0
 8003fba:	68b8      	ldr	r0, [r7, #8]
 8003fbc:	f7ff ff64 	bl	8003e88 <mem_to_ptr>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd90      	pop	{r4, r7, pc}
 8003fcc:	20000098 	.word	0x20000098
 8003fd0:	0800e95c 	.word	0x0800e95c
 8003fd4:	0800e98c 	.word	0x0800e98c
 8003fd8:	0800e9a4 	.word	0x0800e9a4
 8003fdc:	2000009c 	.word	0x2000009c
 8003fe0:	0800e9cc 	.word	0x0800e9cc
 8003fe4:	0800e9e8 	.word	0x0800e9e8
 8003fe8:	0800ea04 	.word	0x0800ea04
 8003fec:	200000a0 	.word	0x200000a0

08003ff0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <mem_init+0x68>)
 8003ff8:	3303      	adds	r3, #3
 8003ffa:	f023 0303 	bic.w	r3, r3, #3
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b16      	ldr	r3, [pc, #88]	; (800405c <mem_init+0x6c>)
 8004002:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <mem_init+0x6c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004010:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800401e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004022:	f7ff ff1f 	bl	8003e64 <ptr_to_mem>
 8004026:	4602      	mov	r2, r0
 8004028:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <mem_init+0x70>)
 800402a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <mem_init+0x70>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <mem_init+0x70>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800403c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <mem_init+0x70>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004046:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <mem_init+0x6c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a05      	ldr	r2, [pc, #20]	; (8004064 <mem_init+0x74>)
 800404e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20003418 	.word	0x20003418
 800405c:	20000098 	.word	0x20000098
 8004060:	2000009c 	.word	0x2000009c
 8004064:	200000a0 	.word	0x200000a0

08004068 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff09 	bl	8003e88 <mem_to_ptr>
 8004076:	4603      	mov	r3, r0
 8004078:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fef0 	bl	8003e64 <ptr_to_mem>
 8004084:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	885b      	ldrh	r3, [r3, #2]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff feea 	bl	8003e64 <ptr_to_mem>
 8004090:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800409a:	d818      	bhi.n	80040ce <mem_link_valid+0x66>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	885b      	ldrh	r3, [r3, #2]
 80040a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80040a4:	d813      	bhi.n	80040ce <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80040aa:	8afa      	ldrh	r2, [r7, #22]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d004      	beq.n	80040ba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	8afa      	ldrh	r2, [r7, #22]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d109      	bne.n	80040ce <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <mem_link_valid+0x74>)
 80040bc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d006      	beq.n	80040d2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	885b      	ldrh	r3, [r3, #2]
 80040c8:	8afa      	ldrh	r2, [r7, #22]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d001      	beq.n	80040d2 <mem_link_valid+0x6a>
    return 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	e000      	b.n	80040d4 <mem_link_valid+0x6c>
  }
  return 1;
 80040d2:	2301      	movs	r3, #1
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	2000009c 	.word	0x2000009c

080040e0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d04c      	beq.n	8004188 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <mem_free+0xb0>)
 80040fa:	f240 2273 	movw	r2, #627	; 0x273
 80040fe:	4925      	ldr	r1, [pc, #148]	; (8004194 <mem_free+0xb4>)
 8004100:	4825      	ldr	r0, [pc, #148]	; (8004198 <mem_free+0xb8>)
 8004102:	f009 fcd5 	bl	800dab0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004106:	e040      	b.n	800418a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3b08      	subs	r3, #8
 800410c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <mem_free+0xbc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	429a      	cmp	r2, r3
 8004116:	d306      	bcc.n	8004126 <mem_free+0x46>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f103 020c 	add.w	r2, r3, #12
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <mem_free+0xc0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d907      	bls.n	8004136 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004126:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <mem_free+0xb0>)
 8004128:	f240 227f 	movw	r2, #639	; 0x27f
 800412c:	491d      	ldr	r1, [pc, #116]	; (80041a4 <mem_free+0xc4>)
 800412e:	481a      	ldr	r0, [pc, #104]	; (8004198 <mem_free+0xb8>)
 8004130:	f009 fcbe 	bl	800dab0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004134:	e029      	b.n	800418a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	791b      	ldrb	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d107      	bne.n	800414e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800413e:	4b14      	ldr	r3, [pc, #80]	; (8004190 <mem_free+0xb0>)
 8004140:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004144:	4918      	ldr	r1, [pc, #96]	; (80041a8 <mem_free+0xc8>)
 8004146:	4814      	ldr	r0, [pc, #80]	; (8004198 <mem_free+0xb8>)
 8004148:	f009 fcb2 	bl	800dab0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800414c:	e01d      	b.n	800418a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff ff8a 	bl	8004068 <mem_link_valid>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800415a:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <mem_free+0xb0>)
 800415c:	f240 2295 	movw	r2, #661	; 0x295
 8004160:	4912      	ldr	r1, [pc, #72]	; (80041ac <mem_free+0xcc>)
 8004162:	480d      	ldr	r0, [pc, #52]	; (8004198 <mem_free+0xb8>)
 8004164:	f009 fca4 	bl	800dab0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004168:	e00f      	b.n	800418a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <mem_free+0xd0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	429a      	cmp	r2, r3
 8004178:	d202      	bcs.n	8004180 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800417a:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <mem_free+0xd0>)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff fe93 	bl	8003eac <plug_holes>
 8004186:	e000      	b.n	800418a <mem_free+0xaa>
    return;
 8004188:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	0800e95c 	.word	0x0800e95c
 8004194:	0800ea30 	.word	0x0800ea30
 8004198:	0800e9a4 	.word	0x0800e9a4
 800419c:	20000098 	.word	0x20000098
 80041a0:	2000009c 	.word	0x2000009c
 80041a4:	0800ea54 	.word	0x0800ea54
 80041a8:	0800ea70 	.word	0x0800ea70
 80041ac:	0800ea98 	.word	0x0800ea98
 80041b0:	200000a0 	.word	0x200000a0

080041b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	3303      	adds	r3, #3
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80041cc:	8bfb      	ldrh	r3, [r7, #30]
 80041ce:	2b0b      	cmp	r3, #11
 80041d0:	d801      	bhi.n	80041d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80041d2:	230c      	movs	r3, #12
 80041d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80041d6:	8bfb      	ldrh	r3, [r7, #30]
 80041d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80041dc:	d803      	bhi.n	80041e6 <mem_trim+0x32>
 80041de:	8bfa      	ldrh	r2, [r7, #30]
 80041e0:	887b      	ldrh	r3, [r7, #2]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d201      	bcs.n	80041ea <mem_trim+0x36>
    return NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e0cc      	b.n	8004384 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80041ea:	4b68      	ldr	r3, [pc, #416]	; (800438c <mem_trim+0x1d8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d304      	bcc.n	80041fe <mem_trim+0x4a>
 80041f4:	4b66      	ldr	r3, [pc, #408]	; (8004390 <mem_trim+0x1dc>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d306      	bcc.n	800420c <mem_trim+0x58>
 80041fe:	4b65      	ldr	r3, [pc, #404]	; (8004394 <mem_trim+0x1e0>)
 8004200:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004204:	4964      	ldr	r1, [pc, #400]	; (8004398 <mem_trim+0x1e4>)
 8004206:	4865      	ldr	r0, [pc, #404]	; (800439c <mem_trim+0x1e8>)
 8004208:	f009 fc52 	bl	800dab0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800420c:	4b5f      	ldr	r3, [pc, #380]	; (800438c <mem_trim+0x1d8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d304      	bcc.n	8004220 <mem_trim+0x6c>
 8004216:	4b5e      	ldr	r3, [pc, #376]	; (8004390 <mem_trim+0x1dc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d301      	bcc.n	8004224 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	e0af      	b.n	8004384 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3b08      	subs	r3, #8
 8004228:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800422a:	69b8      	ldr	r0, [r7, #24]
 800422c:	f7ff fe2c 	bl	8003e88 <mem_to_ptr>
 8004230:	4603      	mov	r3, r0
 8004232:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	881a      	ldrh	r2, [r3, #0]
 8004238:	8afb      	ldrh	r3, [r7, #22]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b08      	subs	r3, #8
 8004240:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004242:	8bfa      	ldrh	r2, [r7, #30]
 8004244:	8abb      	ldrh	r3, [r7, #20]
 8004246:	429a      	cmp	r2, r3
 8004248:	d906      	bls.n	8004258 <mem_trim+0xa4>
 800424a:	4b52      	ldr	r3, [pc, #328]	; (8004394 <mem_trim+0x1e0>)
 800424c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004250:	4953      	ldr	r1, [pc, #332]	; (80043a0 <mem_trim+0x1ec>)
 8004252:	4852      	ldr	r0, [pc, #328]	; (800439c <mem_trim+0x1e8>)
 8004254:	f009 fc2c 	bl	800dab0 <iprintf>
  if (newsize > size) {
 8004258:	8bfa      	ldrh	r2, [r7, #30]
 800425a:	8abb      	ldrh	r3, [r7, #20]
 800425c:	429a      	cmp	r2, r3
 800425e:	d901      	bls.n	8004264 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	e08f      	b.n	8004384 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004264:	8bfa      	ldrh	r2, [r7, #30]
 8004266:	8abb      	ldrh	r3, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	d101      	bne.n	8004270 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	e089      	b.n	8004384 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fdf5 	bl	8003e64 <ptr_to_mem>
 800427a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	791b      	ldrb	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d13f      	bne.n	8004304 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800428c:	d106      	bne.n	800429c <mem_trim+0xe8>
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <mem_trim+0x1e0>)
 8004290:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004294:	4943      	ldr	r1, [pc, #268]	; (80043a4 <mem_trim+0x1f0>)
 8004296:	4841      	ldr	r0, [pc, #260]	; (800439c <mem_trim+0x1e8>)
 8004298:	f009 fc0a 	bl	800dab0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80042a2:	8afa      	ldrh	r2, [r7, #22]
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	4413      	add	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3308      	adds	r3, #8
 80042ac:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80042ae:	4b3e      	ldr	r3, [pc, #248]	; (80043a8 <mem_trim+0x1f4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d106      	bne.n	80042c6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80042b8:	89fb      	ldrh	r3, [r7, #14]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fdd2 	bl	8003e64 <ptr_to_mem>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b39      	ldr	r3, [pc, #228]	; (80043a8 <mem_trim+0x1f4>)
 80042c4:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80042c6:	89fb      	ldrh	r3, [r7, #14]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fdcb 	bl	8003e64 <ptr_to_mem>
 80042ce:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2200      	movs	r2, #0
 80042d4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	89ba      	ldrh	r2, [r7, #12]
 80042da:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	8afa      	ldrh	r2, [r7, #22]
 80042e0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	89fa      	ldrh	r2, [r7, #14]
 80042e6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80042f0:	d047      	beq.n	8004382 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fdb4 	bl	8003e64 <ptr_to_mem>
 80042fc:	4602      	mov	r2, r0
 80042fe:	89fb      	ldrh	r3, [r7, #14]
 8004300:	8053      	strh	r3, [r2, #2]
 8004302:	e03e      	b.n	8004382 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004304:	8bfb      	ldrh	r3, [r7, #30]
 8004306:	f103 0214 	add.w	r2, r3, #20
 800430a:	8abb      	ldrh	r3, [r7, #20]
 800430c:	429a      	cmp	r2, r3
 800430e:	d838      	bhi.n	8004382 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004310:	8afa      	ldrh	r2, [r7, #22]
 8004312:	8bfb      	ldrh	r3, [r7, #30]
 8004314:	4413      	add	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	3308      	adds	r3, #8
 800431a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004324:	d106      	bne.n	8004334 <mem_trim+0x180>
 8004326:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <mem_trim+0x1e0>)
 8004328:	f240 3216 	movw	r2, #790	; 0x316
 800432c:	491d      	ldr	r1, [pc, #116]	; (80043a4 <mem_trim+0x1f0>)
 800432e:	481b      	ldr	r0, [pc, #108]	; (800439c <mem_trim+0x1e8>)
 8004330:	f009 fbbe 	bl	800dab0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004334:	89fb      	ldrh	r3, [r7, #14]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fd94 	bl	8003e64 <ptr_to_mem>
 800433c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800433e:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <mem_trim+0x1f4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	429a      	cmp	r2, r3
 8004346:	d202      	bcs.n	800434e <mem_trim+0x19a>
      lfree = mem2;
 8004348:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <mem_trim+0x1f4>)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2200      	movs	r2, #0
 8004352:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	881a      	ldrh	r2, [r3, #0]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	8afa      	ldrh	r2, [r7, #22]
 8004360:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	89fa      	ldrh	r2, [r7, #14]
 8004366:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004370:	d007      	beq.n	8004382 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fd74 	bl	8003e64 <ptr_to_mem>
 800437c:	4602      	mov	r2, r0
 800437e:	89fb      	ldrh	r3, [r7, #14]
 8004380:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004382:	687b      	ldr	r3, [r7, #4]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000098 	.word	0x20000098
 8004390:	2000009c 	.word	0x2000009c
 8004394:	0800e95c 	.word	0x0800e95c
 8004398:	0800eacc 	.word	0x0800eacc
 800439c:	0800e9a4 	.word	0x0800e9a4
 80043a0:	0800eae4 	.word	0x0800eae4
 80043a4:	0800eb04 	.word	0x0800eb04
 80043a8:	200000a0 	.word	0x200000a0

080043ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <mem_malloc+0x14>
    return NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	e0d9      	b.n	8004574 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	3303      	adds	r3, #3
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80043cc:	8bbb      	ldrh	r3, [r7, #28]
 80043ce:	2b0b      	cmp	r3, #11
 80043d0:	d801      	bhi.n	80043d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80043d2:	230c      	movs	r3, #12
 80043d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80043d6:	8bbb      	ldrh	r3, [r7, #28]
 80043d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043dc:	d803      	bhi.n	80043e6 <mem_malloc+0x3a>
 80043de:	8bba      	ldrh	r2, [r7, #28]
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d201      	bcs.n	80043ea <mem_malloc+0x3e>
    return NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e0c4      	b.n	8004574 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80043ea:	4b64      	ldr	r3, [pc, #400]	; (800457c <mem_malloc+0x1d0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fd4a 	bl	8003e88 <mem_to_ptr>
 80043f4:	4603      	mov	r3, r0
 80043f6:	83fb      	strh	r3, [r7, #30]
 80043f8:	e0b4      	b.n	8004564 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80043fa:	8bfb      	ldrh	r3, [r7, #30]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fd31 	bl	8003e64 <ptr_to_mem>
 8004402:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	791b      	ldrb	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 80a4 	bne.w	8004556 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	8bfb      	ldrh	r3, [r7, #30]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f1a3 0208 	sub.w	r2, r3, #8
 800441c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800441e:	429a      	cmp	r2, r3
 8004420:	f0c0 8099 	bcc.w	8004556 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	8bfb      	ldrh	r3, [r7, #30]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f1a3 0208 	sub.w	r2, r3, #8
 8004432:	8bbb      	ldrh	r3, [r7, #28]
 8004434:	3314      	adds	r3, #20
 8004436:	429a      	cmp	r2, r3
 8004438:	d333      	bcc.n	80044a2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800443a:	8bfa      	ldrh	r2, [r7, #30]
 800443c:	8bbb      	ldrh	r3, [r7, #28]
 800443e:	4413      	add	r3, r2
 8004440:	b29b      	uxth	r3, r3
 8004442:	3308      	adds	r3, #8
 8004444:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004446:	8a7b      	ldrh	r3, [r7, #18]
 8004448:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800444c:	d106      	bne.n	800445c <mem_malloc+0xb0>
 800444e:	4b4c      	ldr	r3, [pc, #304]	; (8004580 <mem_malloc+0x1d4>)
 8004450:	f240 3287 	movw	r2, #903	; 0x387
 8004454:	494b      	ldr	r1, [pc, #300]	; (8004584 <mem_malloc+0x1d8>)
 8004456:	484c      	ldr	r0, [pc, #304]	; (8004588 <mem_malloc+0x1dc>)
 8004458:	f009 fb2a 	bl	800dab0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800445c:	8a7b      	ldrh	r3, [r7, #18]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fd00 	bl	8003e64 <ptr_to_mem>
 8004464:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8bfa      	ldrh	r2, [r7, #30]
 8004478:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	8a7a      	ldrh	r2, [r7, #18]
 800447e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2201      	movs	r2, #1
 8004484:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800448e:	d00b      	beq.n	80044a8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fce5 	bl	8003e64 <ptr_to_mem>
 800449a:	4602      	mov	r2, r0
 800449c:	8a7b      	ldrh	r3, [r7, #18]
 800449e:	8053      	strh	r3, [r2, #2]
 80044a0:	e002      	b.n	80044a8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2201      	movs	r2, #1
 80044a6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80044a8:	4b34      	ldr	r3, [pc, #208]	; (800457c <mem_malloc+0x1d0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d127      	bne.n	8004502 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80044b2:	4b32      	ldr	r3, [pc, #200]	; (800457c <mem_malloc+0x1d0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80044b8:	e005      	b.n	80044c6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fcd0 	bl	8003e64 <ptr_to_mem>
 80044c4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	791b      	ldrb	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <mem_malloc+0x12c>
 80044ce:	4b2f      	ldr	r3, [pc, #188]	; (800458c <mem_malloc+0x1e0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1f0      	bne.n	80044ba <mem_malloc+0x10e>
          }
          lfree = cur;
 80044d8:	4a28      	ldr	r2, [pc, #160]	; (800457c <mem_malloc+0x1d0>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <mem_malloc+0x1d0>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b2a      	ldr	r3, [pc, #168]	; (800458c <mem_malloc+0x1e0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d00b      	beq.n	8004502 <mem_malloc+0x156>
 80044ea:	4b24      	ldr	r3, [pc, #144]	; (800457c <mem_malloc+0x1d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	791b      	ldrb	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <mem_malloc+0x156>
 80044f4:	4b22      	ldr	r3, [pc, #136]	; (8004580 <mem_malloc+0x1d4>)
 80044f6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80044fa:	4925      	ldr	r1, [pc, #148]	; (8004590 <mem_malloc+0x1e4>)
 80044fc:	4822      	ldr	r0, [pc, #136]	; (8004588 <mem_malloc+0x1dc>)
 80044fe:	f009 fad7 	bl	800dab0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004502:	8bba      	ldrh	r2, [r7, #28]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4413      	add	r3, r2
 8004508:	3308      	adds	r3, #8
 800450a:	4a20      	ldr	r2, [pc, #128]	; (800458c <mem_malloc+0x1e0>)
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	4293      	cmp	r3, r2
 8004510:	d906      	bls.n	8004520 <mem_malloc+0x174>
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <mem_malloc+0x1d4>)
 8004514:	f240 32ba 	movw	r2, #954	; 0x3ba
 8004518:	491e      	ldr	r1, [pc, #120]	; (8004594 <mem_malloc+0x1e8>)
 800451a:	481b      	ldr	r0, [pc, #108]	; (8004588 <mem_malloc+0x1dc>)
 800451c:	f009 fac8 	bl	800dab0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <mem_malloc+0x18c>
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <mem_malloc+0x1d4>)
 800452c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8004530:	4919      	ldr	r1, [pc, #100]	; (8004598 <mem_malloc+0x1ec>)
 8004532:	4815      	ldr	r0, [pc, #84]	; (8004588 <mem_malloc+0x1dc>)
 8004534:	f009 fabc 	bl	800dab0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d006      	beq.n	8004550 <mem_malloc+0x1a4>
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <mem_malloc+0x1d4>)
 8004544:	f240 32be 	movw	r2, #958	; 0x3be
 8004548:	4914      	ldr	r1, [pc, #80]	; (800459c <mem_malloc+0x1f0>)
 800454a:	480f      	ldr	r0, [pc, #60]	; (8004588 <mem_malloc+0x1dc>)
 800454c:	f009 fab0 	bl	800dab0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	3308      	adds	r3, #8
 8004554:	e00e      	b.n	8004574 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004556:	8bfb      	ldrh	r3, [r7, #30]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fc83 	bl	8003e64 <ptr_to_mem>
 800455e:	4603      	mov	r3, r0
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004564:	8bfa      	ldrh	r2, [r7, #30]
 8004566:	8bbb      	ldrh	r3, [r7, #28]
 8004568:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800456c:	429a      	cmp	r2, r3
 800456e:	f4ff af44 	bcc.w	80043fa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	200000a0 	.word	0x200000a0
 8004580:	0800e95c 	.word	0x0800e95c
 8004584:	0800eb04 	.word	0x0800eb04
 8004588:	0800e9a4 	.word	0x0800e9a4
 800458c:	2000009c 	.word	0x2000009c
 8004590:	0800eb18 	.word	0x0800eb18
 8004594:	0800eb34 	.word	0x0800eb34
 8004598:	0800eb64 	.word	0x0800eb64
 800459c:	0800eb94 	.word	0x0800eb94

080045a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	3303      	adds	r3, #3
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e011      	b.n	80045e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4413      	add	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	885b      	ldrh	r3, [r3, #2]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4293      	cmp	r3, r2
 80045f0:	dbe7      	blt.n	80045c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004606:	2300      	movs	r3, #0
 8004608:	80fb      	strh	r3, [r7, #6]
 800460a:	e009      	b.n	8004620 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	4a08      	ldr	r2, [pc, #32]	; (8004630 <memp_init+0x30>)
 8004610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff ffc3 	bl	80045a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	3301      	adds	r3, #1
 800461e:	80fb      	strh	r3, [r7, #6]
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	2b08      	cmp	r3, #8
 8004624:	d9f2      	bls.n	800460c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	0801136c 	.word	0x0801136c

08004634 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d012      	beq.n	8004670 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <do_memp_malloc_pool+0x38>
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <do_memp_malloc_pool+0x48>)
 8004660:	f240 1219 	movw	r2, #281	; 0x119
 8004664:	4906      	ldr	r1, [pc, #24]	; (8004680 <do_memp_malloc_pool+0x4c>)
 8004666:	4807      	ldr	r0, [pc, #28]	; (8004684 <do_memp_malloc_pool+0x50>)
 8004668:	f009 fa22 	bl	800dab0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	e000      	b.n	8004672 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	0800ebb8 	.word	0x0800ebb8
 8004680:	0800ebe8 	.word	0x0800ebe8
 8004684:	0800ec0c 	.word	0x0800ec0c

08004688 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2b08      	cmp	r3, #8
 8004696:	d908      	bls.n	80046aa <memp_malloc+0x22>
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <memp_malloc+0x3c>)
 800469a:	f240 1257 	movw	r2, #343	; 0x157
 800469e:	490a      	ldr	r1, [pc, #40]	; (80046c8 <memp_malloc+0x40>)
 80046a0:	480a      	ldr	r0, [pc, #40]	; (80046cc <memp_malloc+0x44>)
 80046a2:	f009 fa05 	bl	800dab0 <iprintf>
 80046a6:	2300      	movs	r3, #0
 80046a8:	e008      	b.n	80046bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	4a08      	ldr	r2, [pc, #32]	; (80046d0 <memp_malloc+0x48>)
 80046ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ffbe 	bl	8004634 <do_memp_malloc_pool>
 80046b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80046ba:	68fb      	ldr	r3, [r7, #12]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	0800ebb8 	.word	0x0800ebb8
 80046c8:	0800ec48 	.word	0x0800ec48
 80046cc:	0800ec0c 	.word	0x0800ec0c
 80046d0:	0801136c 	.word	0x0801136c

080046d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <do_memp_free_pool+0x22>
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <do_memp_free_pool+0x40>)
 80046ea:	f240 126d 	movw	r2, #365	; 0x16d
 80046ee:	490a      	ldr	r1, [pc, #40]	; (8004718 <do_memp_free_pool+0x44>)
 80046f0:	480a      	ldr	r0, [pc, #40]	; (800471c <do_memp_free_pool+0x48>)
 80046f2:	f009 f9dd 	bl	800dab0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	0800ebb8 	.word	0x0800ebb8
 8004718:	0800ec68 	.word	0x0800ec68
 800471c:	0800ec0c 	.word	0x0800ec0c

08004720 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	2b08      	cmp	r3, #8
 8004730:	d907      	bls.n	8004742 <memp_free+0x22>
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <memp_free+0x44>)
 8004734:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004738:	490b      	ldr	r1, [pc, #44]	; (8004768 <memp_free+0x48>)
 800473a:	480c      	ldr	r0, [pc, #48]	; (800476c <memp_free+0x4c>)
 800473c:	f009 f9b8 	bl	800dab0 <iprintf>
 8004740:	e00c      	b.n	800475c <memp_free+0x3c>

  if (mem == NULL) {
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <memp_free+0x50>)
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff ffbe 	bl	80046d4 <do_memp_free_pool>
 8004758:	e000      	b.n	800475c <memp_free+0x3c>
    return;
 800475a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	0800ebb8 	.word	0x0800ebb8
 8004768:	0800ec88 	.word	0x0800ec88
 800476c:	0800ec0c 	.word	0x0800ec0c
 8004770:	0801136c 	.word	0x0801136c

08004774 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d108      	bne.n	80047aa <netif_add+0x26>
 8004798:	4b57      	ldr	r3, [pc, #348]	; (80048f8 <netif_add+0x174>)
 800479a:	f240 1227 	movw	r2, #295	; 0x127
 800479e:	4957      	ldr	r1, [pc, #348]	; (80048fc <netif_add+0x178>)
 80047a0:	4857      	ldr	r0, [pc, #348]	; (8004900 <netif_add+0x17c>)
 80047a2:	f009 f985 	bl	800dab0 <iprintf>
 80047a6:	2300      	movs	r3, #0
 80047a8:	e0a2      	b.n	80048f0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d108      	bne.n	80047c2 <netif_add+0x3e>
 80047b0:	4b51      	ldr	r3, [pc, #324]	; (80048f8 <netif_add+0x174>)
 80047b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80047b6:	4953      	ldr	r1, [pc, #332]	; (8004904 <netif_add+0x180>)
 80047b8:	4851      	ldr	r0, [pc, #324]	; (8004900 <netif_add+0x17c>)
 80047ba:	f009 f979 	bl	800dab0 <iprintf>
 80047be:	2300      	movs	r3, #0
 80047c0:	e096      	b.n	80048f0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80047c8:	4b4f      	ldr	r3, [pc, #316]	; (8004908 <netif_add+0x184>)
 80047ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80047d2:	4b4d      	ldr	r3, [pc, #308]	; (8004908 <netif_add+0x184>)
 80047d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80047dc:	4b4a      	ldr	r3, [pc, #296]	; (8004908 <netif_add+0x184>)
 80047de:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a45      	ldr	r2, [pc, #276]	; (800490c <netif_add+0x188>)
 80047f6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a3a      	ldr	r2, [r7, #32]
 8004810:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004812:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <netif_add+0x18c>)
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004820:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f913 	bl	8004a54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	4798      	blx	r3
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <netif_add+0xba>
    return NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	e058      	b.n	80048f0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004844:	2bff      	cmp	r3, #255	; 0xff
 8004846:	d103      	bne.n	8004850 <netif_add+0xcc>
        netif->num = 0;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004854:	4b2f      	ldr	r3, [pc, #188]	; (8004914 <netif_add+0x190>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e02b      	b.n	80048b4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	429a      	cmp	r2, r3
 8004862:	d106      	bne.n	8004872 <netif_add+0xee>
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <netif_add+0x174>)
 8004866:	f240 128b 	movw	r2, #395	; 0x18b
 800486a:	492b      	ldr	r1, [pc, #172]	; (8004918 <netif_add+0x194>)
 800486c:	4824      	ldr	r0, [pc, #144]	; (8004900 <netif_add+0x17c>)
 800486e:	f009 f91f 	bl	800dab0 <iprintf>
        num_netifs++;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	3301      	adds	r3, #1
 8004876:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2bff      	cmp	r3, #255	; 0xff
 800487c:	dd06      	ble.n	800488c <netif_add+0x108>
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <netif_add+0x174>)
 8004880:	f240 128d 	movw	r2, #397	; 0x18d
 8004884:	4925      	ldr	r1, [pc, #148]	; (800491c <netif_add+0x198>)
 8004886:	481e      	ldr	r0, [pc, #120]	; (8004900 <netif_add+0x17c>)
 8004888:	f009 f912 	bl	800dab0 <iprintf>
        if (netif2->num == netif->num) {
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004898:	429a      	cmp	r2, r3
 800489a:	d108      	bne.n	80048ae <netif_add+0x12a>
          netif->num++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048a2:	3301      	adds	r3, #1
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80048ac:	e005      	b.n	80048ba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1d0      	bne.n	800485c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1be      	bne.n	800483e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048c6:	2bfe      	cmp	r3, #254	; 0xfe
 80048c8:	d103      	bne.n	80048d2 <netif_add+0x14e>
    netif_num = 0;
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <netif_add+0x18c>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	e006      	b.n	80048e0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048d8:	3301      	adds	r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <netif_add+0x18c>)
 80048de:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <netif_add+0x190>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80048e8:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <netif_add+0x190>)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80048ee:	68fb      	ldr	r3, [r7, #12]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	0800eca4 	.word	0x0800eca4
 80048fc:	0800ed38 	.word	0x0800ed38
 8004900:	0800ecf4 	.word	0x0800ecf4
 8004904:	0800ed54 	.word	0x0800ed54
 8004908:	080113d0 	.word	0x080113d0
 800490c:	08004c67 	.word	0x08004c67
 8004910:	200000c8 	.word	0x200000c8
 8004914:	200064f4 	.word	0x200064f4
 8004918:	0800ed78 	.word	0x0800ed78
 800491c:	0800ed8c 	.word	0x0800ed8c

08004920 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f002 facf 	bl	8006ed0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f006 fbb9 	bl	800b0ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <netif_do_set_ipaddr+0x20>
 8004956:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <netif_do_set_ipaddr+0x88>)
 8004958:	f240 12cb 	movw	r2, #459	; 0x1cb
 800495c:	491c      	ldr	r1, [pc, #112]	; (80049d0 <netif_do_set_ipaddr+0x8c>)
 800495e:	481d      	ldr	r0, [pc, #116]	; (80049d4 <netif_do_set_ipaddr+0x90>)
 8004960:	f009 f8a6 	bl	800dab0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <netif_do_set_ipaddr+0x34>
 800496a:	4b18      	ldr	r3, [pc, #96]	; (80049cc <netif_do_set_ipaddr+0x88>)
 800496c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004970:	4917      	ldr	r1, [pc, #92]	; (80049d0 <netif_do_set_ipaddr+0x8c>)
 8004972:	4818      	ldr	r0, [pc, #96]	; (80049d4 <netif_do_set_ipaddr+0x90>)
 8004974:	f009 f89c 	bl	800dab0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3304      	adds	r3, #4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d01c      	beq.n	80049c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3304      	adds	r3, #4
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004996:	f107 0314 	add.w	r3, r7, #20
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ffbf 	bl	8004920 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <netif_do_set_ipaddr+0x6a>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	e000      	b.n	80049b0 <netif_do_set_ipaddr+0x6c>
 80049ae:	2300      	movs	r3, #0
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80049b4:	2101      	movs	r1, #1
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f8d2 	bl	8004b60 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	0800eca4 	.word	0x0800eca4
 80049d0:	0800edbc 	.word	0x0800edbc
 80049d4:	0800ecf4 	.word	0x0800ecf4

080049d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3308      	adds	r3, #8
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d00a      	beq.n	8004a08 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <netif_do_set_netmask+0x26>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	e000      	b.n	8004a00 <netif_do_set_netmask+0x28>
 80049fe:	2300      	movs	r3, #0
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d00a      	beq.n	8004a46 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <netif_do_set_gw+0x26>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	e000      	b.n	8004a3e <netif_do_set_gw+0x28>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004a70:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <netif_set_addr+0x90>)
 8004a72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <netif_set_addr+0x90>)
 8004a7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004a84:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <netif_set_addr+0x90>)
 8004a86:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <netif_set_addr+0x42>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <netif_set_addr+0x46>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <netif_set_addr+0x48>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004aa4:	f107 0310 	add.w	r3, r7, #16
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff ff49 	bl	8004944 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff ff8e 	bl	80049d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f7ff ffa8 	bl	8004a16 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004acc:	f107 0310 	add.w	r3, r7, #16
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ff35 	bl	8004944 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004ada:	bf00      	nop
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	080113d0 	.word	0x080113d0

08004ae8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004af0:	4a04      	ldr	r2, [pc, #16]	; (8004b04 <netif_set_default+0x1c>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	200064f8 	.word	0x200064f8

08004b08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <netif_set_up+0x1e>
 8004b16:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <netif_set_up+0x4c>)
 8004b18:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004b1c:	490e      	ldr	r1, [pc, #56]	; (8004b58 <netif_set_up+0x50>)
 8004b1e:	480f      	ldr	r0, [pc, #60]	; (8004b5c <netif_set_up+0x54>)
 8004b20:	f008 ffc6 	bl	800dab0 <iprintf>
 8004b24:	e013      	b.n	8004b4e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10c      	bne.n	8004b4e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004b46:	2103      	movs	r1, #3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f809 	bl	8004b60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	0800eca4 	.word	0x0800eca4
 8004b58:	0800ee2c 	.word	0x0800ee2c
 8004b5c:	0800ecf4 	.word	0x0800ecf4

08004b60 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <netif_issue_reports+0x20>
 8004b72:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <netif_issue_reports+0x74>)
 8004b74:	f240 326d 	movw	r2, #877	; 0x36d
 8004b78:	4917      	ldr	r1, [pc, #92]	; (8004bd8 <netif_issue_reports+0x78>)
 8004b7a:	4818      	ldr	r0, [pc, #96]	; (8004bdc <netif_issue_reports+0x7c>)
 8004b7c:	f008 ff98 	bl	800dab0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01e      	beq.n	8004bcc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b94:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d017      	beq.n	8004bcc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d013      	beq.n	8004bce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00e      	beq.n	8004bce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f007 f9db 	bl	800bf80 <etharp_request>
 8004bca:	e000      	b.n	8004bce <netif_issue_reports+0x6e>
    return;
 8004bcc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	0800eca4 	.word	0x0800eca4
 8004bd8:	0800ee48 	.word	0x0800ee48
 8004bdc:	0800ecf4 	.word	0x0800ecf4

08004be0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d107      	bne.n	8004bfe <netif_set_down+0x1e>
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <netif_set_down+0x58>)
 8004bf0:	f240 329b 	movw	r2, #923	; 0x39b
 8004bf4:	4911      	ldr	r1, [pc, #68]	; (8004c3c <netif_set_down+0x5c>)
 8004bf6:	4812      	ldr	r0, [pc, #72]	; (8004c40 <netif_set_down+0x60>)
 8004bf8:	f008 ff5a 	bl	800dab0 <iprintf>
 8004bfc:	e019      	b.n	8004c32 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d012      	beq.n	8004c32 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f006 fd65 	bl	800b6fc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	0800eca4 	.word	0x0800eca4
 8004c3c:	0800ee6c 	.word	0x0800ee6c
 8004c40:	0800ecf4 	.word	0x0800ecf4

08004c44 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	61da      	str	r2, [r3, #28]
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004c72:	f06f 030b 	mvn.w	r3, #11
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d013      	beq.n	8004cbc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004c94:	4b0d      	ldr	r3, [pc, #52]	; (8004ccc <netif_get_by_index+0x48>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e00c      	b.n	8004cb6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	79fa      	ldrb	r2, [r7, #7]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d101      	bne.n	8004cb0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	e006      	b.n	8004cbe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1ef      	bne.n	8004c9c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	200064f4 	.word	0x200064f4

08004cd0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <pbuf_free_ooseq+0x38>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <pbuf_free_ooseq+0x3c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	e00a      	b.n	8004cfa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f002 f92d 	bl	8006f4c <tcp_free_ooseq>
      return;
 8004cf2:	e005      	b.n	8004d00 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f1      	bne.n	8004ce4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200064fc 	.word	0x200064fc
 8004d0c:	20006504 	.word	0x20006504

08004d10 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <pbuf_pool_is_empty+0x14>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004d1a:	bf00      	nop
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	200064fc 	.word	0x200064fc

08004d28 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	4611      	mov	r1, r2
 8004d34:	461a      	mov	r2, r3
 8004d36:	460b      	mov	r3, r1
 8004d38:	80fb      	strh	r3, [r7, #6]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	88fa      	ldrh	r2, [r7, #6]
 8004d4e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	88ba      	ldrh	r2, [r7, #4]
 8004d54:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004d56:	8b3b      	ldrh	r3, [r7, #24]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	7f3a      	ldrb	r2, [r7, #28]
 8004d62:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	73da      	strb	r2, [r3, #15]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
 8004d86:	460b      	mov	r3, r1
 8004d88:	80bb      	strh	r3, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004d92:	887b      	ldrh	r3, [r7, #2]
 8004d94:	2b41      	cmp	r3, #65	; 0x41
 8004d96:	d00b      	beq.n	8004db0 <pbuf_alloc+0x34>
 8004d98:	2b41      	cmp	r3, #65	; 0x41
 8004d9a:	dc02      	bgt.n	8004da2 <pbuf_alloc+0x26>
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d007      	beq.n	8004db0 <pbuf_alloc+0x34>
 8004da0:	e0c2      	b.n	8004f28 <pbuf_alloc+0x1ac>
 8004da2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004da6:	d00b      	beq.n	8004dc0 <pbuf_alloc+0x44>
 8004da8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004dac:	d070      	beq.n	8004e90 <pbuf_alloc+0x114>
 8004dae:	e0bb      	b.n	8004f28 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004db0:	887a      	ldrh	r2, [r7, #2]
 8004db2:	88bb      	ldrh	r3, [r7, #4]
 8004db4:	4619      	mov	r1, r3
 8004db6:	2000      	movs	r0, #0
 8004db8:	f000 f8d2 	bl	8004f60 <pbuf_alloc_reference>
 8004dbc:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004dbe:	e0bd      	b.n	8004f3c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004dc8:	88bb      	ldrh	r3, [r7, #4]
 8004dca:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004dcc:	2008      	movs	r0, #8
 8004dce:	f7ff fc5b 	bl	8004688 <memp_malloc>
 8004dd2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8004dda:	f7ff ff99 	bl	8004d10 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <pbuf_alloc+0x6e>
            pbuf_free(p);
 8004de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004de6:	f000 faa9 	bl	800533c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e0a7      	b.n	8004f3e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004dee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004df0:	3303      	adds	r3, #3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f023 0303 	bic.w	r3, r3, #3
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	8b7a      	ldrh	r2, [r7, #26]
 8004e02:	4293      	cmp	r3, r2
 8004e04:	bf28      	it	cs
 8004e06:	4613      	movcs	r3, r2
 8004e08:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004e0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e0c:	3310      	adds	r3, #16
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	3303      	adds	r3, #3
 8004e14:	f023 0303 	bic.w	r3, r3, #3
 8004e18:	4618      	mov	r0, r3
 8004e1a:	89f9      	ldrh	r1, [r7, #14]
 8004e1c:	8b7a      	ldrh	r2, [r7, #26]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	887b      	ldrh	r3, [r7, #2]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	460b      	mov	r3, r1
 8004e28:	4601      	mov	r1, r0
 8004e2a:	6938      	ldr	r0, [r7, #16]
 8004e2c:	f7ff ff7c 	bl	8004d28 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d006      	beq.n	8004e4a <pbuf_alloc+0xce>
 8004e3c:	4b42      	ldr	r3, [pc, #264]	; (8004f48 <pbuf_alloc+0x1cc>)
 8004e3e:	f240 1201 	movw	r2, #257	; 0x101
 8004e42:	4942      	ldr	r1, [pc, #264]	; (8004f4c <pbuf_alloc+0x1d0>)
 8004e44:	4842      	ldr	r0, [pc, #264]	; (8004f50 <pbuf_alloc+0x1d4>)
 8004e46:	f008 fe33 	bl	800dab0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e4c:	3303      	adds	r3, #3
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8004e56:	d106      	bne.n	8004e66 <pbuf_alloc+0xea>
 8004e58:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <pbuf_alloc+0x1cc>)
 8004e5a:	f240 1203 	movw	r2, #259	; 0x103
 8004e5e:	493d      	ldr	r1, [pc, #244]	; (8004f54 <pbuf_alloc+0x1d8>)
 8004e60:	483b      	ldr	r0, [pc, #236]	; (8004f50 <pbuf_alloc+0x1d4>)
 8004e62:	f008 fe25 	bl	800dab0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e70:	e002      	b.n	8004e78 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004e7c:	8b7a      	ldrh	r2, [r7, #26]
 8004e7e:	89fb      	ldrh	r3, [r7, #14]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004e88:	8b7b      	ldrh	r3, [r7, #26]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d19e      	bne.n	8004dcc <pbuf_alloc+0x50>
      break;
 8004e8e:	e055      	b.n	8004f3c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e92:	3303      	adds	r3, #3
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	88bb      	ldrh	r3, [r7, #4]
 8004e9e:	3303      	adds	r3, #3
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004eac:	8b3b      	ldrh	r3, [r7, #24]
 8004eae:	3310      	adds	r3, #16
 8004eb0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004eb2:	8b3a      	ldrh	r2, [r7, #24]
 8004eb4:	88bb      	ldrh	r3, [r7, #4]
 8004eb6:	3303      	adds	r3, #3
 8004eb8:	f023 0303 	bic.w	r3, r3, #3
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d306      	bcc.n	8004ece <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004ec0:	8afa      	ldrh	r2, [r7, #22]
 8004ec2:	88bb      	ldrh	r3, [r7, #4]
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d201      	bcs.n	8004ed2 <pbuf_alloc+0x156>
        return NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e035      	b.n	8004f3e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004ed2:	8afb      	ldrh	r3, [r7, #22]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fa69 	bl	80043ac <mem_malloc>
 8004eda:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <pbuf_alloc+0x16a>
        return NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e02b      	b.n	8004f3e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004ee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ee8:	3310      	adds	r3, #16
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	4413      	add	r3, r2
 8004eee:	3303      	adds	r3, #3
 8004ef0:	f023 0303 	bic.w	r3, r3, #3
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	88b9      	ldrh	r1, [r7, #4]
 8004ef8:	88ba      	ldrh	r2, [r7, #4]
 8004efa:	2300      	movs	r3, #0
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	887b      	ldrh	r3, [r7, #2]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	460b      	mov	r3, r1
 8004f04:	4601      	mov	r1, r0
 8004f06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f08:	f7ff ff0e 	bl	8004d28 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d010      	beq.n	8004f3a <pbuf_alloc+0x1be>
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <pbuf_alloc+0x1cc>)
 8004f1a:	f240 1223 	movw	r2, #291	; 0x123
 8004f1e:	490e      	ldr	r1, [pc, #56]	; (8004f58 <pbuf_alloc+0x1dc>)
 8004f20:	480b      	ldr	r0, [pc, #44]	; (8004f50 <pbuf_alloc+0x1d4>)
 8004f22:	f008 fdc5 	bl	800dab0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004f26:	e008      	b.n	8004f3a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <pbuf_alloc+0x1cc>)
 8004f2a:	f240 1227 	movw	r2, #295	; 0x127
 8004f2e:	490b      	ldr	r1, [pc, #44]	; (8004f5c <pbuf_alloc+0x1e0>)
 8004f30:	4807      	ldr	r0, [pc, #28]	; (8004f50 <pbuf_alloc+0x1d4>)
 8004f32:	f008 fdbd 	bl	800dab0 <iprintf>
      return NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e001      	b.n	8004f3e <pbuf_alloc+0x1c2>
      break;
 8004f3a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3728      	adds	r7, #40	; 0x28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	0800eed4 	.word	0x0800eed4
 8004f4c:	0800ef04 	.word	0x0800ef04
 8004f50:	0800ef34 	.word	0x0800ef34
 8004f54:	0800ef5c 	.word	0x0800ef5c
 8004f58:	0800ef90 	.word	0x0800ef90
 8004f5c:	0800efbc 	.word	0x0800efbc

08004f60 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004f70:	883b      	ldrh	r3, [r7, #0]
 8004f72:	2b41      	cmp	r3, #65	; 0x41
 8004f74:	d009      	beq.n	8004f8a <pbuf_alloc_reference+0x2a>
 8004f76:	883b      	ldrh	r3, [r7, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d006      	beq.n	8004f8a <pbuf_alloc_reference+0x2a>
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <pbuf_alloc_reference+0x5c>)
 8004f7e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004f82:	490f      	ldr	r1, [pc, #60]	; (8004fc0 <pbuf_alloc_reference+0x60>)
 8004f84:	480f      	ldr	r0, [pc, #60]	; (8004fc4 <pbuf_alloc_reference+0x64>)
 8004f86:	f008 fd93 	bl	800dab0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004f8a:	2007      	movs	r0, #7
 8004f8c:	f7ff fb7c 	bl	8004688 <memp_malloc>
 8004f90:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e00b      	b.n	8004fb4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004f9c:	8879      	ldrh	r1, [r7, #2]
 8004f9e:	887a      	ldrh	r2, [r7, #2]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	883b      	ldrh	r3, [r7, #0]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff febb 	bl	8004d28 <pbuf_init_alloced_pbuf>
  return p;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	0800eed4 	.word	0x0800eed4
 8004fc0:	0800efd8 	.word	0x0800efd8
 8004fc4:	0800ef34 	.word	0x0800ef34

08004fc8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	81bb      	strh	r3, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004fe0:	8a7b      	ldrh	r3, [r7, #18]
 8004fe2:	3303      	adds	r3, #3
 8004fe4:	f023 0203 	bic.w	r2, r3, #3
 8004fe8:	89bb      	ldrh	r3, [r7, #12]
 8004fea:	441a      	add	r2, r3
 8004fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d901      	bls.n	8004ff6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e018      	b.n	8005028 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004ffc:	8a7b      	ldrh	r3, [r7, #18]
 8004ffe:	3303      	adds	r3, #3
 8005000:	f023 0303 	bic.w	r3, r3, #3
 8005004:	6a3a      	ldr	r2, [r7, #32]
 8005006:	4413      	add	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	e001      	b.n	8005010 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	89b9      	ldrh	r1, [r7, #12]
 8005014:	89ba      	ldrh	r2, [r7, #12]
 8005016:	2302      	movs	r3, #2
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	897b      	ldrh	r3, [r7, #10]
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	460b      	mov	r3, r1
 8005020:	6979      	ldr	r1, [r7, #20]
 8005022:	f7ff fe81 	bl	8004d28 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005026:	687b      	ldr	r3, [r7, #4]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <pbuf_realloc+0x20>
 8005042:	4b3a      	ldr	r3, [pc, #232]	; (800512c <pbuf_realloc+0xfc>)
 8005044:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005048:	4939      	ldr	r1, [pc, #228]	; (8005130 <pbuf_realloc+0x100>)
 800504a:	483a      	ldr	r0, [pc, #232]	; (8005134 <pbuf_realloc+0x104>)
 800504c:	f008 fd30 	bl	800dab0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	891b      	ldrh	r3, [r3, #8]
 8005054:	887a      	ldrh	r2, [r7, #2]
 8005056:	429a      	cmp	r2, r3
 8005058:	d264      	bcs.n	8005124 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	891a      	ldrh	r2, [r3, #8]
 800505e:	887b      	ldrh	r3, [r7, #2]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005064:	887b      	ldrh	r3, [r7, #2]
 8005066:	817b      	strh	r3, [r7, #10]
  q = p;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800506c:	e018      	b.n	80050a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	895b      	ldrh	r3, [r3, #10]
 8005072:	897a      	ldrh	r2, [r7, #10]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	891a      	ldrh	r2, [r3, #8]
 800507c:	893b      	ldrh	r3, [r7, #8]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <pbuf_realloc+0x70>
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <pbuf_realloc+0xfc>)
 8005094:	f240 12af 	movw	r2, #431	; 0x1af
 8005098:	4927      	ldr	r1, [pc, #156]	; (8005138 <pbuf_realloc+0x108>)
 800509a:	4826      	ldr	r0, [pc, #152]	; (8005134 <pbuf_realloc+0x104>)
 800509c:	f008 fd08 	bl	800dab0 <iprintf>
  while (rem_len > q->len) {
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	895b      	ldrh	r3, [r3, #10]
 80050a4:	897a      	ldrh	r2, [r7, #10]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d8e1      	bhi.n	800506e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	7b1b      	ldrb	r3, [r3, #12]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d122      	bne.n	80050fc <pbuf_realloc+0xcc>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	895b      	ldrh	r3, [r3, #10]
 80050ba:	897a      	ldrh	r2, [r7, #10]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d01d      	beq.n	80050fc <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	7b5b      	ldrb	r3, [r3, #13]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d117      	bne.n	80050fc <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	461a      	mov	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	897b      	ldrh	r3, [r7, #10]
 80050da:	4413      	add	r3, r2
 80050dc:	b29b      	uxth	r3, r3
 80050de:	4619      	mov	r1, r3
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff f867 	bl	80041b4 <mem_trim>
 80050e6:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <pbuf_realloc+0xcc>
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <pbuf_realloc+0xfc>)
 80050f0:	f240 12bd 	movw	r2, #445	; 0x1bd
 80050f4:	4911      	ldr	r1, [pc, #68]	; (800513c <pbuf_realloc+0x10c>)
 80050f6:	480f      	ldr	r0, [pc, #60]	; (8005134 <pbuf_realloc+0x104>)
 80050f8:	f008 fcda 	bl	800dab0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	897a      	ldrh	r2, [r7, #10]
 8005100:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	895a      	ldrh	r2, [r3, #10]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f910 	bl	800533c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e000      	b.n	8005126 <pbuf_realloc+0xf6>
    return;
 8005124:	bf00      	nop

}
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	0800eed4 	.word	0x0800eed4
 8005130:	0800efec 	.word	0x0800efec
 8005134:	0800ef34 	.word	0x0800ef34
 8005138:	0800f004 	.word	0x0800f004
 800513c:	0800f01c 	.word	0x0800f01c

08005140 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <pbuf_add_header_impl+0x22>
 8005154:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <pbuf_add_header_impl+0xc4>)
 8005156:	f240 12df 	movw	r2, #479	; 0x1df
 800515a:	492b      	ldr	r1, [pc, #172]	; (8005208 <pbuf_add_header_impl+0xc8>)
 800515c:	482b      	ldr	r0, [pc, #172]	; (800520c <pbuf_add_header_impl+0xcc>)
 800515e:	f008 fca7 	bl	800dab0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <pbuf_add_header_impl+0x30>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516e:	d301      	bcc.n	8005174 <pbuf_add_header_impl+0x34>
    return 1;
 8005170:	2301      	movs	r3, #1
 8005172:	e043      	b.n	80051fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <pbuf_add_header_impl+0x3e>
    return 0;
 800517a:	2300      	movs	r3, #0
 800517c:	e03e      	b.n	80051fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	891a      	ldrh	r2, [r3, #8]
 8005186:	8a7b      	ldrh	r3, [r7, #18]
 8005188:	4413      	add	r3, r2
 800518a:	b29b      	uxth	r3, r3
 800518c:	8a7a      	ldrh	r2, [r7, #18]
 800518e:	429a      	cmp	r2, r3
 8005190:	d901      	bls.n	8005196 <pbuf_add_header_impl+0x56>
    return 1;
 8005192:	2301      	movs	r3, #1
 8005194:	e032      	b.n	80051fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	7b1b      	ldrb	r3, [r3, #12]
 800519a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800519c:	8a3b      	ldrh	r3, [r7, #16]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	425b      	negs	r3, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3310      	adds	r3, #16
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d20d      	bcs.n	80051d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80051bc:	2301      	movs	r3, #1
 80051be:	e01d      	b.n	80051fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	425b      	negs	r3, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e001      	b.n	80051d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e011      	b.n	80051fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	895a      	ldrh	r2, [r3, #10]
 80051e2:	8a7b      	ldrh	r3, [r7, #18]
 80051e4:	4413      	add	r3, r2
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	891a      	ldrh	r2, [r3, #8]
 80051f0:	8a7b      	ldrh	r3, [r7, #18]
 80051f2:	4413      	add	r3, r2
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	811a      	strh	r2, [r3, #8]


  return 0;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	0800eed4 	.word	0x0800eed4
 8005208:	0800f038 	.word	0x0800f038
 800520c:	0800ef34 	.word	0x0800ef34

08005210 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800521a:	2200      	movs	r2, #0
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff ff8e 	bl	8005140 <pbuf_add_header_impl>
 8005224:	4603      	mov	r3, r0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <pbuf_remove_header+0x1e>
 8005240:	4b20      	ldr	r3, [pc, #128]	; (80052c4 <pbuf_remove_header+0x94>)
 8005242:	f240 224b 	movw	r2, #587	; 0x24b
 8005246:	4920      	ldr	r1, [pc, #128]	; (80052c8 <pbuf_remove_header+0x98>)
 8005248:	4820      	ldr	r0, [pc, #128]	; (80052cc <pbuf_remove_header+0x9c>)
 800524a:	f008 fc31 	bl	800dab0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <pbuf_remove_header+0x2c>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525a:	d301      	bcc.n	8005260 <pbuf_remove_header+0x30>
    return 1;
 800525c:	2301      	movs	r3, #1
 800525e:	e02c      	b.n	80052ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <pbuf_remove_header+0x3a>
    return 0;
 8005266:	2300      	movs	r3, #0
 8005268:	e027      	b.n	80052ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	895b      	ldrh	r3, [r3, #10]
 8005272:	89fa      	ldrh	r2, [r7, #14]
 8005274:	429a      	cmp	r2, r3
 8005276:	d908      	bls.n	800528a <pbuf_remove_header+0x5a>
 8005278:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <pbuf_remove_header+0x94>)
 800527a:	f240 2255 	movw	r2, #597	; 0x255
 800527e:	4914      	ldr	r1, [pc, #80]	; (80052d0 <pbuf_remove_header+0xa0>)
 8005280:	4812      	ldr	r0, [pc, #72]	; (80052cc <pbuf_remove_header+0x9c>)
 8005282:	f008 fc15 	bl	800dab0 <iprintf>
 8005286:	2301      	movs	r3, #1
 8005288:	e017      	b.n	80052ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	441a      	add	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	895a      	ldrh	r2, [r3, #10]
 80052a0:	89fb      	ldrh	r3, [r7, #14]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	891a      	ldrh	r2, [r3, #8]
 80052ae:	89fb      	ldrh	r3, [r7, #14]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	0800eed4 	.word	0x0800eed4
 80052c8:	0800f038 	.word	0x0800f038
 80052cc:	0800ef34 	.word	0x0800ef34
 80052d0:	0800f044 	.word	0x0800f044

080052d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
 80052e0:	4613      	mov	r3, r2
 80052e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80052e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	da08      	bge.n	80052fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80052ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052f0:	425b      	negs	r3, r3
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff ff9b 	bl	8005230 <pbuf_remove_header>
 80052fa:	4603      	mov	r3, r0
 80052fc:	e007      	b.n	800530e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80052fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005302:	787a      	ldrb	r2, [r7, #1]
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff ff1a 	bl	8005140 <pbuf_add_header_impl>
 800530c:	4603      	mov	r3, r0
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	460b      	mov	r3, r1
 8005320:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005322:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005326:	2201      	movs	r2, #1
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff ffd2 	bl	80052d4 <pbuf_header_impl>
 8005330:	4603      	mov	r3, r0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <pbuf_free+0x22>
 8005350:	4b38      	ldr	r3, [pc, #224]	; (8005434 <pbuf_free+0xf8>)
 8005352:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005356:	4938      	ldr	r1, [pc, #224]	; (8005438 <pbuf_free+0xfc>)
 8005358:	4838      	ldr	r0, [pc, #224]	; (800543c <pbuf_free+0x100>)
 800535a:	f008 fba9 	bl	800dab0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800535e:	2300      	movs	r3, #0
 8005360:	e063      	b.n	800542a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005366:	e05c      	b.n	8005422 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	7b9b      	ldrb	r3, [r3, #14]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <pbuf_free+0x42>
 8005370:	4b30      	ldr	r3, [pc, #192]	; (8005434 <pbuf_free+0xf8>)
 8005372:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005376:	4932      	ldr	r1, [pc, #200]	; (8005440 <pbuf_free+0x104>)
 8005378:	4830      	ldr	r0, [pc, #192]	; (800543c <pbuf_free+0x100>)
 800537a:	f008 fb99 	bl	800dab0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	7b9b      	ldrb	r3, [r3, #14]
 8005382:	3b01      	subs	r3, #1
 8005384:	b2da      	uxtb	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	739a      	strb	r2, [r3, #14]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	7b9b      	ldrb	r3, [r3, #14]
 800538e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005390:	7dbb      	ldrb	r3, [r7, #22]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d143      	bne.n	800541e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	7b1b      	ldrb	r3, [r3, #12]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7b5b      	ldrb	r3, [r3, #13]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d011      	beq.n	80053d6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <pbuf_free+0x90>
 80053be:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <pbuf_free+0xf8>)
 80053c0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80053c4:	491f      	ldr	r1, [pc, #124]	; (8005444 <pbuf_free+0x108>)
 80053c6:	481d      	ldr	r0, [pc, #116]	; (800543c <pbuf_free+0x100>)
 80053c8:	f008 fb72 	bl	800dab0 <iprintf>
        pc->custom_free_function(p);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3
 80053d4:	e01d      	b.n	8005412 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d104      	bne.n	80053e6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	2008      	movs	r0, #8
 80053e0:	f7ff f99e 	bl	8004720 <memp_free>
 80053e4:	e015      	b.n	8005412 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d104      	bne.n	80053f6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	2007      	movs	r0, #7
 80053f0:	f7ff f996 	bl	8004720 <memp_free>
 80053f4:	e00d      	b.n	8005412 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d103      	bne.n	8005404 <pbuf_free+0xc8>
          mem_free(p);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fe fe6f 	bl	80040e0 <mem_free>
 8005402:	e006      	b.n	8005412 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005404:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <pbuf_free+0xf8>)
 8005406:	f240 320f 	movw	r2, #783	; 0x30f
 800540a:	490f      	ldr	r1, [pc, #60]	; (8005448 <pbuf_free+0x10c>)
 800540c:	480b      	ldr	r0, [pc, #44]	; (800543c <pbuf_free+0x100>)
 800540e:	f008 fb4f 	bl	800dab0 <iprintf>
        }
      }
      count++;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	3301      	adds	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	e001      	b.n	8005422 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d19f      	bne.n	8005368 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005428:	7dfb      	ldrb	r3, [r7, #23]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	0800eed4 	.word	0x0800eed4
 8005438:	0800f038 	.word	0x0800f038
 800543c:	0800ef34 	.word	0x0800ef34
 8005440:	0800f064 	.word	0x0800f064
 8005444:	0800f07c 	.word	0x0800f07c
 8005448:	0800f0a0 	.word	0x0800f0a0

0800544c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005458:	e005      	b.n	8005466 <pbuf_clen+0x1a>
    ++len;
 800545a:	89fb      	ldrh	r3, [r7, #14]
 800545c:	3301      	adds	r3, #1
 800545e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f6      	bne.n	800545a <pbuf_clen+0xe>
  }
  return len;
 800546c:	89fb      	ldrh	r3, [r7, #14]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d010      	beq.n	80054ac <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	7b9b      	ldrb	r3, [r3, #14]
 800548e:	3301      	adds	r3, #1
 8005490:	b2da      	uxtb	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	7b9b      	ldrb	r3, [r3, #14]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <pbuf_ref+0x30>
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <pbuf_ref+0x38>)
 80054a0:	f240 3242 	movw	r2, #834	; 0x342
 80054a4:	4904      	ldr	r1, [pc, #16]	; (80054b8 <pbuf_ref+0x3c>)
 80054a6:	4805      	ldr	r0, [pc, #20]	; (80054bc <pbuf_ref+0x40>)
 80054a8:	f008 fb02 	bl	800dab0 <iprintf>
  }
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	0800eed4 	.word	0x0800eed4
 80054b8:	0800f0b4 	.word	0x0800f0b4
 80054bc:	0800ef34 	.word	0x0800ef34

080054c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <pbuf_cat+0x16>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <pbuf_cat+0x26>
 80054d6:	4b20      	ldr	r3, [pc, #128]	; (8005558 <pbuf_cat+0x98>)
 80054d8:	f240 325a 	movw	r2, #858	; 0x35a
 80054dc:	491f      	ldr	r1, [pc, #124]	; (800555c <pbuf_cat+0x9c>)
 80054de:	4820      	ldr	r0, [pc, #128]	; (8005560 <pbuf_cat+0xa0>)
 80054e0:	f008 fae6 	bl	800dab0 <iprintf>
 80054e4:	e034      	b.n	8005550 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e00a      	b.n	8005502 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	891a      	ldrh	r2, [r3, #8]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	891b      	ldrh	r3, [r3, #8]
 80054f4:	4413      	add	r3, r2
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	891a      	ldrh	r2, [r3, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	895b      	ldrh	r3, [r3, #10]
 8005512:	429a      	cmp	r2, r3
 8005514:	d006      	beq.n	8005524 <pbuf_cat+0x64>
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <pbuf_cat+0x98>)
 8005518:	f240 3262 	movw	r2, #866	; 0x362
 800551c:	4911      	ldr	r1, [pc, #68]	; (8005564 <pbuf_cat+0xa4>)
 800551e:	4810      	ldr	r0, [pc, #64]	; (8005560 <pbuf_cat+0xa0>)
 8005520:	f008 fac6 	bl	800dab0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <pbuf_cat+0x7a>
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <pbuf_cat+0x98>)
 800552e:	f240 3263 	movw	r2, #867	; 0x363
 8005532:	490d      	ldr	r1, [pc, #52]	; (8005568 <pbuf_cat+0xa8>)
 8005534:	480a      	ldr	r0, [pc, #40]	; (8005560 <pbuf_cat+0xa0>)
 8005536:	f008 fabb 	bl	800dab0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	891a      	ldrh	r2, [r3, #8]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	891b      	ldrh	r3, [r3, #8]
 8005542:	4413      	add	r3, r2
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	0800eed4 	.word	0x0800eed4
 800555c:	0800f0c8 	.word	0x0800f0c8
 8005560:	0800ef34 	.word	0x0800ef34
 8005564:	0800f100 	.word	0x0800f100
 8005568:	0800f130 	.word	0x0800f130

0800556c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <pbuf_copy+0x2a>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d005      	beq.n	8005596 <pbuf_copy+0x2a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	891a      	ldrh	r2, [r3, #8]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	891b      	ldrh	r3, [r3, #8]
 8005592:	429a      	cmp	r2, r3
 8005594:	d209      	bcs.n	80055aa <pbuf_copy+0x3e>
 8005596:	4b57      	ldr	r3, [pc, #348]	; (80056f4 <pbuf_copy+0x188>)
 8005598:	f240 32ca 	movw	r2, #970	; 0x3ca
 800559c:	4956      	ldr	r1, [pc, #344]	; (80056f8 <pbuf_copy+0x18c>)
 800559e:	4857      	ldr	r0, [pc, #348]	; (80056fc <pbuf_copy+0x190>)
 80055a0:	f008 fa86 	bl	800dab0 <iprintf>
 80055a4:	f06f 030f 	mvn.w	r3, #15
 80055a8:	e09f      	b.n	80056ea <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	895b      	ldrh	r3, [r3, #10]
 80055ae:	461a      	mov	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	895b      	ldrh	r3, [r3, #10]
 80055b8:	4619      	mov	r1, r3
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1acb      	subs	r3, r1, r3
 80055be:	429a      	cmp	r2, r3
 80055c0:	d306      	bcc.n	80055d0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	895b      	ldrh	r3, [r3, #10]
 80055c6:	461a      	mov	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e005      	b.n	80055dc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	895b      	ldrh	r3, [r3, #10]
 80055d4:	461a      	mov	r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	18d0      	adds	r0, r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4619      	mov	r1, r3
 80055f0:	f008 fa4b 	bl	800da8a <memcpy>
    offset_to += len;
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	895b      	ldrh	r3, [r3, #10]
 8005608:	461a      	mov	r2, r3
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	4293      	cmp	r3, r2
 800560e:	d906      	bls.n	800561e <pbuf_copy+0xb2>
 8005610:	4b38      	ldr	r3, [pc, #224]	; (80056f4 <pbuf_copy+0x188>)
 8005612:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005616:	493a      	ldr	r1, [pc, #232]	; (8005700 <pbuf_copy+0x194>)
 8005618:	4838      	ldr	r0, [pc, #224]	; (80056fc <pbuf_copy+0x190>)
 800561a:	f008 fa49 	bl	800dab0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	895b      	ldrh	r3, [r3, #10]
 8005622:	461a      	mov	r2, r3
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4293      	cmp	r3, r2
 8005628:	d906      	bls.n	8005638 <pbuf_copy+0xcc>
 800562a:	4b32      	ldr	r3, [pc, #200]	; (80056f4 <pbuf_copy+0x188>)
 800562c:	f240 32da 	movw	r2, #986	; 0x3da
 8005630:	4934      	ldr	r1, [pc, #208]	; (8005704 <pbuf_copy+0x198>)
 8005632:	4832      	ldr	r0, [pc, #200]	; (80056fc <pbuf_copy+0x190>)
 8005634:	f008 fa3c 	bl	800dab0 <iprintf>
    if (offset_from >= p_from->len) {
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	895b      	ldrh	r3, [r3, #10]
 800563c:	461a      	mov	r2, r3
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4293      	cmp	r3, r2
 8005642:	d304      	bcc.n	800564e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	895b      	ldrh	r3, [r3, #10]
 8005652:	461a      	mov	r2, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	4293      	cmp	r3, r2
 8005658:	d114      	bne.n	8005684 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10c      	bne.n	8005684 <pbuf_copy+0x118>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <pbuf_copy+0x118>
 8005670:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <pbuf_copy+0x188>)
 8005672:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005676:	4924      	ldr	r1, [pc, #144]	; (8005708 <pbuf_copy+0x19c>)
 8005678:	4820      	ldr	r0, [pc, #128]	; (80056fc <pbuf_copy+0x190>)
 800567a:	f008 fa19 	bl	800dab0 <iprintf>
 800567e:	f06f 030f 	mvn.w	r3, #15
 8005682:	e032      	b.n	80056ea <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d013      	beq.n	80056b2 <pbuf_copy+0x146>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	895a      	ldrh	r2, [r3, #10]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	891b      	ldrh	r3, [r3, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d10d      	bne.n	80056b2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <pbuf_copy+0x146>
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <pbuf_copy+0x188>)
 80056a0:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80056a4:	4919      	ldr	r1, [pc, #100]	; (800570c <pbuf_copy+0x1a0>)
 80056a6:	4815      	ldr	r0, [pc, #84]	; (80056fc <pbuf_copy+0x190>)
 80056a8:	f008 fa02 	bl	800dab0 <iprintf>
 80056ac:	f06f 0305 	mvn.w	r3, #5
 80056b0:	e01b      	b.n	80056ea <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d013      	beq.n	80056e0 <pbuf_copy+0x174>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	895a      	ldrh	r2, [r3, #10]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	891b      	ldrh	r3, [r3, #8]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d10d      	bne.n	80056e0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <pbuf_copy+0x174>
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <pbuf_copy+0x188>)
 80056ce:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80056d2:	490e      	ldr	r1, [pc, #56]	; (800570c <pbuf_copy+0x1a0>)
 80056d4:	4809      	ldr	r0, [pc, #36]	; (80056fc <pbuf_copy+0x190>)
 80056d6:	f008 f9eb 	bl	800dab0 <iprintf>
 80056da:	f06f 0305 	mvn.w	r3, #5
 80056de:	e004      	b.n	80056ea <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f47f af61 	bne.w	80055aa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	0800eed4 	.word	0x0800eed4
 80056f8:	0800f17c 	.word	0x0800f17c
 80056fc:	0800ef34 	.word	0x0800ef34
 8005700:	0800f1ac 	.word	0x0800f1ac
 8005704:	0800f1c4 	.word	0x0800f1c4
 8005708:	0800f1e0 	.word	0x0800f1e0
 800570c:	0800f1f0 	.word	0x0800f1f0

08005710 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4611      	mov	r1, r2
 800571c:	461a      	mov	r2, r3
 800571e:	460b      	mov	r3, r1
 8005720:	80fb      	strh	r3, [r7, #6]
 8005722:	4613      	mov	r3, r2
 8005724:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d108      	bne.n	8005746 <pbuf_copy_partial+0x36>
 8005734:	4b2b      	ldr	r3, [pc, #172]	; (80057e4 <pbuf_copy_partial+0xd4>)
 8005736:	f240 420a 	movw	r2, #1034	; 0x40a
 800573a:	492b      	ldr	r1, [pc, #172]	; (80057e8 <pbuf_copy_partial+0xd8>)
 800573c:	482b      	ldr	r0, [pc, #172]	; (80057ec <pbuf_copy_partial+0xdc>)
 800573e:	f008 f9b7 	bl	800dab0 <iprintf>
 8005742:	2300      	movs	r3, #0
 8005744:	e04a      	b.n	80057dc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d108      	bne.n	800575e <pbuf_copy_partial+0x4e>
 800574c:	4b25      	ldr	r3, [pc, #148]	; (80057e4 <pbuf_copy_partial+0xd4>)
 800574e:	f240 420b 	movw	r2, #1035	; 0x40b
 8005752:	4927      	ldr	r1, [pc, #156]	; (80057f0 <pbuf_copy_partial+0xe0>)
 8005754:	4825      	ldr	r0, [pc, #148]	; (80057ec <pbuf_copy_partial+0xdc>)
 8005756:	f008 f9ab 	bl	800dab0 <iprintf>
 800575a:	2300      	movs	r3, #0
 800575c:	e03e      	b.n	80057dc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	e034      	b.n	80057ce <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005764:	88bb      	ldrh	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <pbuf_copy_partial+0x70>
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	895b      	ldrh	r3, [r3, #10]
 800576e:	88ba      	ldrh	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d305      	bcc.n	8005780 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	895b      	ldrh	r3, [r3, #10]
 8005778:	88ba      	ldrh	r2, [r7, #4]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	80bb      	strh	r3, [r7, #4]
 800577e:	e023      	b.n	80057c8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	895a      	ldrh	r2, [r3, #10]
 8005784:	88bb      	ldrh	r3, [r7, #4]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800578a:	8b3a      	ldrh	r2, [r7, #24]
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	429a      	cmp	r2, r3
 8005790:	d901      	bls.n	8005796 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005796:	8b7b      	ldrh	r3, [r7, #26]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	18d0      	adds	r0, r2, r3
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	88bb      	ldrh	r3, [r7, #4]
 80057a2:	4413      	add	r3, r2
 80057a4:	8b3a      	ldrh	r2, [r7, #24]
 80057a6:	4619      	mov	r1, r3
 80057a8:	f008 f96f 	bl	800da8a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80057ac:	8afa      	ldrh	r2, [r7, #22]
 80057ae:	8b3b      	ldrh	r3, [r7, #24]
 80057b0:	4413      	add	r3, r2
 80057b2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80057b4:	8b7a      	ldrh	r2, [r7, #26]
 80057b6:	8b3b      	ldrh	r3, [r7, #24]
 80057b8:	4413      	add	r3, r2
 80057ba:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	8b3b      	ldrh	r3, [r7, #24]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <pbuf_copy_partial+0xca>
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1c4      	bne.n	8005764 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80057da:	8afb      	ldrh	r3, [r7, #22]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	0800eed4 	.word	0x0800eed4
 80057e8:	0800f21c 	.word	0x0800f21c
 80057ec:	0800ef34 	.word	0x0800ef34
 80057f0:	0800f23c 	.word	0x0800f23c

080057f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	603a      	str	r2, [r7, #0]
 80057fe:	71fb      	strb	r3, [r7, #7]
 8005800:	460b      	mov	r3, r1
 8005802:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	8919      	ldrh	r1, [r3, #8]
 8005808:	88ba      	ldrh	r2, [r7, #4]
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fab5 	bl	8004d7c <pbuf_alloc>
 8005812:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <pbuf_clone+0x2a>
    return NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	e011      	b.n	8005842 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fea3 	bl	800556c <pbuf_copy>
 8005826:	4603      	mov	r3, r0
 8005828:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800582a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d006      	beq.n	8005840 <pbuf_clone+0x4c>
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <pbuf_clone+0x58>)
 8005834:	f240 5224 	movw	r2, #1316	; 0x524
 8005838:	4905      	ldr	r1, [pc, #20]	; (8005850 <pbuf_clone+0x5c>)
 800583a:	4806      	ldr	r0, [pc, #24]	; (8005854 <pbuf_clone+0x60>)
 800583c:	f008 f938 	bl	800dab0 <iprintf>
  return q;
 8005840:	68fb      	ldr	r3, [r7, #12]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	0800eed4 	.word	0x0800eed4
 8005850:	0800f348 	.word	0x0800f348
 8005854:	0800ef34 	.word	0x0800ef34

08005858 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800585c:	f008 f940 	bl	800dae0 <rand>
 8005860:	4603      	mov	r3, r0
 8005862:	b29b      	uxth	r3, r3
 8005864:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005868:	b29b      	uxth	r3, r3
 800586a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800586e:	b29a      	uxth	r2, r3
 8005870:	4b01      	ldr	r3, [pc, #4]	; (8005878 <tcp_init+0x20>)
 8005872:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005874:	bf00      	nop
 8005876:	bd80      	pop	{r7, pc}
 8005878:	2000000a 	.word	0x2000000a

0800587c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7d1b      	ldrb	r3, [r3, #20]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <tcp_free+0x1c>
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <tcp_free+0x2c>)
 800588e:	22d4      	movs	r2, #212	; 0xd4
 8005890:	4906      	ldr	r1, [pc, #24]	; (80058ac <tcp_free+0x30>)
 8005892:	4807      	ldr	r0, [pc, #28]	; (80058b0 <tcp_free+0x34>)
 8005894:	f008 f90c 	bl	800dab0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	2001      	movs	r0, #1
 800589c:	f7fe ff40 	bl	8004720 <memp_free>
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	0800f3d4 	.word	0x0800f3d4
 80058ac:	0800f404 	.word	0x0800f404
 80058b0:	0800f418 	.word	0x0800f418

080058b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7d1b      	ldrb	r3, [r3, #20]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d105      	bne.n	80058d0 <tcp_free_listen+0x1c>
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <tcp_free_listen+0x2c>)
 80058c6:	22df      	movs	r2, #223	; 0xdf
 80058c8:	4906      	ldr	r1, [pc, #24]	; (80058e4 <tcp_free_listen+0x30>)
 80058ca:	4807      	ldr	r0, [pc, #28]	; (80058e8 <tcp_free_listen+0x34>)
 80058cc:	f008 f8f0 	bl	800dab0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	2002      	movs	r0, #2
 80058d4:	f7fe ff24 	bl	8004720 <memp_free>
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	0800f3d4 	.word	0x0800f3d4
 80058e4:	0800f440 	.word	0x0800f440
 80058e8:	0800f418 	.word	0x0800f418

080058ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80058f0:	f000 fe98 	bl	8006624 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80058f4:	4b07      	ldr	r3, [pc, #28]	; (8005914 <tcp_tmr+0x28>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <tcp_tmr+0x28>)
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	4b04      	ldr	r3, [pc, #16]	; (8005914 <tcp_tmr+0x28>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800590c:	f000 fb4c 	bl	8005fa8 <tcp_slowtmr>
  }
}
 8005910:	bf00      	nop
 8005912:	bd80      	pop	{r7, pc}
 8005914:	200000c9 	.word	0x200000c9

08005918 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <tcp_remove_listener+0x1c>
 8005928:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <tcp_remove_listener+0x48>)
 800592a:	22ff      	movs	r2, #255	; 0xff
 800592c:	490d      	ldr	r1, [pc, #52]	; (8005964 <tcp_remove_listener+0x4c>)
 800592e:	480e      	ldr	r0, [pc, #56]	; (8005968 <tcp_remove_listener+0x50>)
 8005930:	f008 f8be 	bl	800dab0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e00a      	b.n	8005950 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d102      	bne.n	800594a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f1      	bne.n	800593a <tcp_remove_listener+0x22>
    }
  }
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	0800f3d4 	.word	0x0800f3d4
 8005964:	0800f45c 	.word	0x0800f45c
 8005968:	0800f418 	.word	0x0800f418

0800596c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <tcp_listen_closed+0x1c>
 800597a:	4b14      	ldr	r3, [pc, #80]	; (80059cc <tcp_listen_closed+0x60>)
 800597c:	f240 1211 	movw	r2, #273	; 0x111
 8005980:	4913      	ldr	r1, [pc, #76]	; (80059d0 <tcp_listen_closed+0x64>)
 8005982:	4814      	ldr	r0, [pc, #80]	; (80059d4 <tcp_listen_closed+0x68>)
 8005984:	f008 f894 	bl	800dab0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	7d1b      	ldrb	r3, [r3, #20]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d006      	beq.n	800599e <tcp_listen_closed+0x32>
 8005990:	4b0e      	ldr	r3, [pc, #56]	; (80059cc <tcp_listen_closed+0x60>)
 8005992:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005996:	4910      	ldr	r1, [pc, #64]	; (80059d8 <tcp_listen_closed+0x6c>)
 8005998:	480e      	ldr	r0, [pc, #56]	; (80059d4 <tcp_listen_closed+0x68>)
 800599a:	f008 f889 	bl	800dab0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800599e:	2301      	movs	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e00b      	b.n	80059bc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80059a4:	4a0d      	ldr	r2, [pc, #52]	; (80059dc <tcp_listen_closed+0x70>)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff ffb1 	bl	8005918 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3301      	adds	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d9f0      	bls.n	80059a4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	0800f3d4 	.word	0x0800f3d4
 80059d0:	0800f484 	.word	0x0800f484
 80059d4:	0800f418 	.word	0x0800f418
 80059d8:	0800f490 	.word	0x0800f490
 80059dc:	080113a8 	.word	0x080113a8

080059e0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80059e0:	b5b0      	push	{r4, r5, r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af04      	add	r7, sp, #16
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <tcp_close_shutdown+0x20>
 80059f2:	4b61      	ldr	r3, [pc, #388]	; (8005b78 <tcp_close_shutdown+0x198>)
 80059f4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80059f8:	4960      	ldr	r1, [pc, #384]	; (8005b7c <tcp_close_shutdown+0x19c>)
 80059fa:	4861      	ldr	r0, [pc, #388]	; (8005b80 <tcp_close_shutdown+0x1a0>)
 80059fc:	f008 f858 	bl	800dab0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d066      	beq.n	8005ad4 <tcp_close_shutdown+0xf4>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	7d1b      	ldrb	r3, [r3, #20]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d003      	beq.n	8005a16 <tcp_close_shutdown+0x36>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	7d1b      	ldrb	r3, [r3, #20]
 8005a12:	2b07      	cmp	r3, #7
 8005a14:	d15e      	bne.n	8005ad4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <tcp_close_shutdown+0x48>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a26:	d055      	beq.n	8005ad4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8b5b      	ldrh	r3, [r3, #26]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <tcp_close_shutdown+0x62>
 8005a34:	4b50      	ldr	r3, [pc, #320]	; (8005b78 <tcp_close_shutdown+0x198>)
 8005a36:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005a3a:	4952      	ldr	r1, [pc, #328]	; (8005b84 <tcp_close_shutdown+0x1a4>)
 8005a3c:	4850      	ldr	r0, [pc, #320]	; (8005b80 <tcp_close_shutdown+0x1a0>)
 8005a3e:	f008 f837 	bl	800dab0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005a4a:	687d      	ldr	r5, [r7, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	8ad2      	ldrh	r2, [r2, #22]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	8b09      	ldrh	r1, [r1, #24]
 8005a58:	9102      	str	r1, [sp, #8]
 8005a5a:	9201      	str	r2, [sp, #4]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	462b      	mov	r3, r5
 8005a60:	4622      	mov	r2, r4
 8005a62:	4601      	mov	r1, r0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f004 fe8f 	bl	800a788 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 f8ba 	bl	8006be4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005a70:	4b45      	ldr	r3, [pc, #276]	; (8005b88 <tcp_close_shutdown+0x1a8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d105      	bne.n	8005a86 <tcp_close_shutdown+0xa6>
 8005a7a:	4b43      	ldr	r3, [pc, #268]	; (8005b88 <tcp_close_shutdown+0x1a8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4a41      	ldr	r2, [pc, #260]	; (8005b88 <tcp_close_shutdown+0x1a8>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e013      	b.n	8005aae <tcp_close_shutdown+0xce>
 8005a86:	4b40      	ldr	r3, [pc, #256]	; (8005b88 <tcp_close_shutdown+0x1a8>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e00c      	b.n	8005aa8 <tcp_close_shutdown+0xc8>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d104      	bne.n	8005aa2 <tcp_close_shutdown+0xc2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	e005      	b.n	8005aae <tcp_close_shutdown+0xce>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1ef      	bne.n	8005a8e <tcp_close_shutdown+0xae>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	60da      	str	r2, [r3, #12]
 8005ab4:	4b35      	ldr	r3, [pc, #212]	; (8005b8c <tcp_close_shutdown+0x1ac>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005aba:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <tcp_close_shutdown+0x1b0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d102      	bne.n	8005aca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005ac4:	f003 fd4c 	bl	8009560 <tcp_trigger_input_pcb_close>
 8005ac8:	e002      	b.n	8005ad0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fed6 	bl	800587c <tcp_free>
      }
      return ERR_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e04d      	b.n	8005b70 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	7d1b      	ldrb	r3, [r3, #20]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d02d      	beq.n	8005b38 <tcp_close_shutdown+0x158>
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d036      	beq.n	8005b4e <tcp_close_shutdown+0x16e>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d13f      	bne.n	8005b64 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8adb      	ldrh	r3, [r3, #22]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d021      	beq.n	8005b30 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005aec:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <tcp_close_shutdown+0x1b4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d105      	bne.n	8005b02 <tcp_close_shutdown+0x122>
 8005af6:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <tcp_close_shutdown+0x1b4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <tcp_close_shutdown+0x1b4>)
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	e013      	b.n	8005b2a <tcp_close_shutdown+0x14a>
 8005b02:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <tcp_close_shutdown+0x1b4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	e00c      	b.n	8005b24 <tcp_close_shutdown+0x144>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d104      	bne.n	8005b1e <tcp_close_shutdown+0x13e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	60da      	str	r2, [r3, #12]
 8005b1c:	e005      	b.n	8005b2a <tcp_close_shutdown+0x14a>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1ef      	bne.n	8005b0a <tcp_close_shutdown+0x12a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff fea3 	bl	800587c <tcp_free>
      break;
 8005b36:	e01a      	b.n	8005b6e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff ff17 	bl	800596c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4815      	ldr	r0, [pc, #84]	; (8005b98 <tcp_close_shutdown+0x1b8>)
 8005b42:	f001 f89f 	bl	8006c84 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff feb4 	bl	80058b4 <tcp_free_listen>
      break;
 8005b4c:	e00f      	b.n	8005b6e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	480d      	ldr	r0, [pc, #52]	; (8005b88 <tcp_close_shutdown+0x1a8>)
 8005b52:	f001 f897 	bl	8006c84 <tcp_pcb_remove>
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <tcp_close_shutdown+0x1ac>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fe8d 	bl	800587c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005b62:	e004      	b.n	8005b6e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f819 	bl	8005b9c <tcp_close_shutdown_fin>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	e000      	b.n	8005b70 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bdb0      	pop	{r4, r5, r7, pc}
 8005b78:	0800f3d4 	.word	0x0800f3d4
 8005b7c:	0800f4a8 	.word	0x0800f4a8
 8005b80:	0800f418 	.word	0x0800f418
 8005b84:	0800f4c8 	.word	0x0800f4c8
 8005b88:	20006504 	.word	0x20006504
 8005b8c:	20006500 	.word	0x20006500
 8005b90:	20006518 	.word	0x20006518
 8005b94:	20006510 	.word	0x20006510
 8005b98:	2000650c 	.word	0x2000650c

08005b9c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <tcp_close_shutdown_fin+0x1c>
 8005baa:	4b2c      	ldr	r3, [pc, #176]	; (8005c5c <tcp_close_shutdown_fin+0xc0>)
 8005bac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005bb0:	492b      	ldr	r1, [pc, #172]	; (8005c60 <tcp_close_shutdown_fin+0xc4>)
 8005bb2:	482c      	ldr	r0, [pc, #176]	; (8005c64 <tcp_close_shutdown_fin+0xc8>)
 8005bb4:	f007 ff7c 	bl	800dab0 <iprintf>

  switch (pcb->state) {
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	7d1b      	ldrb	r3, [r3, #20]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d010      	beq.n	8005be2 <tcp_close_shutdown_fin+0x46>
 8005bc0:	2b07      	cmp	r3, #7
 8005bc2:	d01b      	beq.n	8005bfc <tcp_close_shutdown_fin+0x60>
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d126      	bne.n	8005c16 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f003 fedb 	bl	8009984 <tcp_send_fin>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d11f      	bne.n	8005c1a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2205      	movs	r2, #5
 8005bde:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005be0:	e01b      	b.n	8005c1a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f003 fece 	bl	8009984 <tcp_send_fin>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d114      	bne.n	8005c1e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2205      	movs	r2, #5
 8005bf8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005bfa:	e010      	b.n	8005c1e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f003 fec1 	bl	8009984 <tcp_send_fin>
 8005c02:	4603      	mov	r3, r0
 8005c04:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d109      	bne.n	8005c22 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2209      	movs	r2, #9
 8005c12:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c14:	e005      	b.n	8005c22 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	e01c      	b.n	8005c54 <tcp_close_shutdown_fin+0xb8>
      break;
 8005c1a:	bf00      	nop
 8005c1c:	e002      	b.n	8005c24 <tcp_close_shutdown_fin+0x88>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e000      	b.n	8005c24 <tcp_close_shutdown_fin+0x88>
      break;
 8005c22:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f003 ffe7 	bl	8009c00 <tcp_output>
 8005c32:	e00d      	b.n	8005c50 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d108      	bne.n	8005c50 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	8b5b      	ldrh	r3, [r3, #26]
 8005c42:	f043 0308 	orr.w	r3, r3, #8
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e001      	b.n	8005c54 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8005c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	0800f3d4 	.word	0x0800f3d4
 8005c60:	0800f484 	.word	0x0800f484
 8005c64:	0800f418 	.word	0x0800f418

08005c68 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <tcp_close+0x22>
 8005c76:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <tcp_close+0x4c>)
 8005c78:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005c7c:	490e      	ldr	r1, [pc, #56]	; (8005cb8 <tcp_close+0x50>)
 8005c7e:	480f      	ldr	r0, [pc, #60]	; (8005cbc <tcp_close+0x54>)
 8005c80:	f007 ff16 	bl	800dab0 <iprintf>
 8005c84:	f06f 030f 	mvn.w	r3, #15
 8005c88:	e00f      	b.n	8005caa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	7d1b      	ldrb	r3, [r3, #20]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d006      	beq.n	8005ca0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8b5b      	ldrh	r3, [r3, #26]
 8005c96:	f043 0310 	orr.w	r3, r3, #16
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff fe9c 	bl	80059e0 <tcp_close_shutdown>
 8005ca8:	4603      	mov	r3, r0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	0800f3d4 	.word	0x0800f3d4
 8005cb8:	0800f4e4 	.word	0x0800f4e4
 8005cbc:	0800f418 	.word	0x0800f418

08005cc0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08e      	sub	sp, #56	; 0x38
 8005cc4:	af04      	add	r7, sp, #16
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d107      	bne.n	8005ce0 <tcp_abandon+0x20>
 8005cd0:	4b52      	ldr	r3, [pc, #328]	; (8005e1c <tcp_abandon+0x15c>)
 8005cd2:	f240 223d 	movw	r2, #573	; 0x23d
 8005cd6:	4952      	ldr	r1, [pc, #328]	; (8005e20 <tcp_abandon+0x160>)
 8005cd8:	4852      	ldr	r0, [pc, #328]	; (8005e24 <tcp_abandon+0x164>)
 8005cda:	f007 fee9 	bl	800dab0 <iprintf>
 8005cde:	e099      	b.n	8005e14 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7d1b      	ldrb	r3, [r3, #20]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d106      	bne.n	8005cf6 <tcp_abandon+0x36>
 8005ce8:	4b4c      	ldr	r3, [pc, #304]	; (8005e1c <tcp_abandon+0x15c>)
 8005cea:	f240 2241 	movw	r2, #577	; 0x241
 8005cee:	494e      	ldr	r1, [pc, #312]	; (8005e28 <tcp_abandon+0x168>)
 8005cf0:	484c      	ldr	r0, [pc, #304]	; (8005e24 <tcp_abandon+0x164>)
 8005cf2:	f007 fedd 	bl	800dab0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	7d1b      	ldrb	r3, [r3, #20]
 8005cfa:	2b0a      	cmp	r3, #10
 8005cfc:	d107      	bne.n	8005d0e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	484a      	ldr	r0, [pc, #296]	; (8005e2c <tcp_abandon+0x16c>)
 8005d02:	f000 ffbf 	bl	8006c84 <tcp_pcb_remove>
    tcp_free(pcb);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff fdb8 	bl	800587c <tcp_free>
 8005d0c:	e082      	b.n	8005e14 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	7d1b      	ldrb	r3, [r3, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d126      	bne.n	8005d86 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8adb      	ldrh	r3, [r3, #22]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02e      	beq.n	8005d9e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d40:	4b3b      	ldr	r3, [pc, #236]	; (8005e30 <tcp_abandon+0x170>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d105      	bne.n	8005d56 <tcp_abandon+0x96>
 8005d4a:	4b39      	ldr	r3, [pc, #228]	; (8005e30 <tcp_abandon+0x170>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4a37      	ldr	r2, [pc, #220]	; (8005e30 <tcp_abandon+0x170>)
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	e013      	b.n	8005d7e <tcp_abandon+0xbe>
 8005d56:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <tcp_abandon+0x170>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e00c      	b.n	8005d78 <tcp_abandon+0xb8>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d104      	bne.n	8005d72 <tcp_abandon+0xb2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	60da      	str	r2, [r3, #12]
 8005d70:	e005      	b.n	8005d7e <tcp_abandon+0xbe>
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1ef      	bne.n	8005d5e <tcp_abandon+0x9e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	60da      	str	r2, [r3, #12]
 8005d84:	e00b      	b.n	8005d9e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	8adb      	ldrh	r3, [r3, #22]
 8005d8e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4828      	ldr	r0, [pc, #160]	; (8005e34 <tcp_abandon+0x174>)
 8005d94:	f000 ff76 	bl	8006c84 <tcp_pcb_remove>
 8005d98:	4b27      	ldr	r3, [pc, #156]	; (8005e38 <tcp_abandon+0x178>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fd1a 	bl	80067e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fd11 	bl	80067e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fd08 	bl	80067e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00e      	beq.n	8005df8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	8b12      	ldrh	r2, [r2, #24]
 8005de4:	9202      	str	r2, [sp, #8]
 8005de6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005de8:	9201      	str	r2, [sp, #4]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	460b      	mov	r3, r1
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	69b9      	ldr	r1, [r7, #24]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f004 fcc8 	bl	800a788 <tcp_rst>
    }
    last_state = pcb->state;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	7d1b      	ldrb	r3, [r3, #20]
 8005dfc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fd3c 	bl	800587c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <tcp_abandon+0x154>
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f06f 010c 	mvn.w	r1, #12
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	4798      	blx	r3
  }
}
 8005e14:	3728      	adds	r7, #40	; 0x28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	0800f3d4 	.word	0x0800f3d4
 8005e20:	0800f518 	.word	0x0800f518
 8005e24:	0800f418 	.word	0x0800f418
 8005e28:	0800f534 	.word	0x0800f534
 8005e2c:	20006514 	.word	0x20006514
 8005e30:	20006510 	.word	0x20006510
 8005e34:	20006504 	.word	0x20006504
 8005e38:	20006500 	.word	0x20006500

08005e3c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005e44:	2101      	movs	r1, #1
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff ff3a 	bl	8005cc0 <tcp_abandon>
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <tcp_update_rcv_ann_wnd+0x1c>
 8005e62:	4b25      	ldr	r3, [pc, #148]	; (8005ef8 <tcp_update_rcv_ann_wnd+0xa4>)
 8005e64:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005e68:	4924      	ldr	r1, [pc, #144]	; (8005efc <tcp_update_rcv_ann_wnd+0xa8>)
 8005e6a:	4825      	ldr	r0, [pc, #148]	; (8005f00 <tcp_update_rcv_ann_wnd+0xac>)
 8005e6c:	f007 fe20 	bl	800dab0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005e78:	4413      	add	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005e84:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005e88:	bf28      	it	cs
 8005e8a:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8005e8e:	b292      	uxth	r2, r2
 8005e90:	4413      	add	r3, r2
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	db08      	blt.n	8005eac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	e020      	b.n	8005eee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	dd03      	ble.n	8005ec2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ec0:	e014      	b.n	8005eec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	d306      	bcc.n	8005ee4 <tcp_update_rcv_ann_wnd+0x90>
 8005ed6:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <tcp_update_rcv_ann_wnd+0xa4>)
 8005ed8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005edc:	4909      	ldr	r1, [pc, #36]	; (8005f04 <tcp_update_rcv_ann_wnd+0xb0>)
 8005ede:	4808      	ldr	r0, [pc, #32]	; (8005f00 <tcp_update_rcv_ann_wnd+0xac>)
 8005ee0:	f007 fde6 	bl	800dab0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005eec:	2300      	movs	r3, #0
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	0800f3d4 	.word	0x0800f3d4
 8005efc:	0800f630 	.word	0x0800f630
 8005f00:	0800f418 	.word	0x0800f418
 8005f04:	0800f654 	.word	0x0800f654

08005f08 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <tcp_recved+0x22>
 8005f1a:	4b1f      	ldr	r3, [pc, #124]	; (8005f98 <tcp_recved+0x90>)
 8005f1c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005f20:	491e      	ldr	r1, [pc, #120]	; (8005f9c <tcp_recved+0x94>)
 8005f22:	481f      	ldr	r0, [pc, #124]	; (8005fa0 <tcp_recved+0x98>)
 8005f24:	f007 fdc4 	bl	800dab0 <iprintf>
 8005f28:	e032      	b.n	8005f90 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7d1b      	ldrb	r3, [r3, #20]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d106      	bne.n	8005f40 <tcp_recved+0x38>
 8005f32:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <tcp_recved+0x90>)
 8005f34:	f240 32d3 	movw	r2, #979	; 0x3d3
 8005f38:	491a      	ldr	r1, [pc, #104]	; (8005fa4 <tcp_recved+0x9c>)
 8005f3a:	4819      	ldr	r0, [pc, #100]	; (8005fa0 <tcp_recved+0x98>)
 8005f3c:	f007 fdb8 	bl	800dab0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005f44:	887b      	ldrh	r3, [r7, #2]
 8005f46:	4413      	add	r3, r2
 8005f48:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005f4a:	89fb      	ldrh	r3, [r7, #14]
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f50:	d804      	bhi.n	8005f5c <tcp_recved+0x54>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f56:	89fa      	ldrh	r2, [r7, #14]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d204      	bcs.n	8005f66 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f62:	851a      	strh	r2, [r3, #40]	; 0x28
 8005f64:	e002      	b.n	8005f6c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	89fa      	ldrh	r2, [r7, #14]
 8005f6a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff ff71 	bl	8005e54 <tcp_update_rcv_ann_wnd>
 8005f72:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7a:	d309      	bcc.n	8005f90 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	8b5b      	ldrh	r3, [r3, #26]
 8005f80:	f043 0302 	orr.w	r3, r3, #2
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f003 fe38 	bl	8009c00 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	0800f3d4 	.word	0x0800f3d4
 8005f9c:	0800f670 	.word	0x0800f670
 8005fa0:	0800f418 	.word	0x0800f418
 8005fa4:	0800f688 	.word	0x0800f688

08005fa8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005fa8:	b5b0      	push	{r4, r5, r7, lr}
 8005faa:	b090      	sub	sp, #64	; 0x40
 8005fac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005fb4:	4b94      	ldr	r3, [pc, #592]	; (8006208 <tcp_slowtmr+0x260>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	4a93      	ldr	r2, [pc, #588]	; (8006208 <tcp_slowtmr+0x260>)
 8005fbc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005fbe:	4b93      	ldr	r3, [pc, #588]	; (800620c <tcp_slowtmr+0x264>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	4b91      	ldr	r3, [pc, #580]	; (800620c <tcp_slowtmr+0x264>)
 8005fc8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005fce:	4b90      	ldr	r3, [pc, #576]	; (8006210 <tcp_slowtmr+0x268>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005fd4:	e29f      	b.n	8006516 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	7d1b      	ldrb	r3, [r3, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <tcp_slowtmr+0x44>
 8005fde:	4b8d      	ldr	r3, [pc, #564]	; (8006214 <tcp_slowtmr+0x26c>)
 8005fe0:	f240 42be 	movw	r2, #1214	; 0x4be
 8005fe4:	498c      	ldr	r1, [pc, #560]	; (8006218 <tcp_slowtmr+0x270>)
 8005fe6:	488d      	ldr	r0, [pc, #564]	; (800621c <tcp_slowtmr+0x274>)
 8005fe8:	f007 fd62 	bl	800dab0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	7d1b      	ldrb	r3, [r3, #20]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d106      	bne.n	8006002 <tcp_slowtmr+0x5a>
 8005ff4:	4b87      	ldr	r3, [pc, #540]	; (8006214 <tcp_slowtmr+0x26c>)
 8005ff6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005ffa:	4989      	ldr	r1, [pc, #548]	; (8006220 <tcp_slowtmr+0x278>)
 8005ffc:	4887      	ldr	r0, [pc, #540]	; (800621c <tcp_slowtmr+0x274>)
 8005ffe:	f007 fd57 	bl	800dab0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	7d1b      	ldrb	r3, [r3, #20]
 8006006:	2b0a      	cmp	r3, #10
 8006008:	d106      	bne.n	8006018 <tcp_slowtmr+0x70>
 800600a:	4b82      	ldr	r3, [pc, #520]	; (8006214 <tcp_slowtmr+0x26c>)
 800600c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006010:	4984      	ldr	r1, [pc, #528]	; (8006224 <tcp_slowtmr+0x27c>)
 8006012:	4882      	ldr	r0, [pc, #520]	; (800621c <tcp_slowtmr+0x274>)
 8006014:	f007 fd4c 	bl	800dab0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	7f9a      	ldrb	r2, [r3, #30]
 800601c:	4b7b      	ldr	r3, [pc, #492]	; (800620c <tcp_slowtmr+0x264>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d105      	bne.n	8006030 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800602e:	e272      	b.n	8006516 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006030:	4b76      	ldr	r3, [pc, #472]	; (800620c <tcp_slowtmr+0x264>)
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	7d1b      	ldrb	r3, [r3, #20]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d10a      	bne.n	8006062 <tcp_slowtmr+0xba>
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006052:	2b05      	cmp	r3, #5
 8006054:	d905      	bls.n	8006062 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800605a:	3301      	adds	r3, #1
 800605c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006060:	e11e      	b.n	80062a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006068:	2b0b      	cmp	r3, #11
 800606a:	d905      	bls.n	8006078 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800606c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006070:	3301      	adds	r3, #1
 8006072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006076:	e113      	b.n	80062a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800607e:	2b00      	cmp	r3, #0
 8006080:	d075      	beq.n	800616e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <tcp_slowtmr+0xf0>
 800608a:	4b62      	ldr	r3, [pc, #392]	; (8006214 <tcp_slowtmr+0x26c>)
 800608c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006090:	4965      	ldr	r1, [pc, #404]	; (8006228 <tcp_slowtmr+0x280>)
 8006092:	4862      	ldr	r0, [pc, #392]	; (800621c <tcp_slowtmr+0x274>)
 8006094:	f007 fd0c 	bl	800dab0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <tcp_slowtmr+0x106>
 80060a0:	4b5c      	ldr	r3, [pc, #368]	; (8006214 <tcp_slowtmr+0x26c>)
 80060a2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80060a6:	4961      	ldr	r1, [pc, #388]	; (800622c <tcp_slowtmr+0x284>)
 80060a8:	485c      	ldr	r0, [pc, #368]	; (800621c <tcp_slowtmr+0x274>)
 80060aa:	f007 fd01 	bl	800dab0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80060b4:	2b0b      	cmp	r3, #11
 80060b6:	d905      	bls.n	80060c4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80060b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060bc:	3301      	adds	r3, #1
 80060be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060c2:	e0ed      	b.n	80062a0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80060ca:	3b01      	subs	r3, #1
 80060cc:	4a58      	ldr	r2, [pc, #352]	; (8006230 <tcp_slowtmr+0x288>)
 80060ce:	5cd3      	ldrb	r3, [r2, r3]
 80060d0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060d8:	7c7a      	ldrb	r2, [r7, #17]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d907      	bls.n	80060ee <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060e4:	3301      	adds	r3, #1
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80060f4:	7c7a      	ldrb	r2, [r7, #17]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	f200 80d2 	bhi.w	80062a0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80060fc:	2301      	movs	r3, #1
 80060fe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006106:	2b00      	cmp	r3, #0
 8006108:	d108      	bne.n	800611c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800610a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800610c:	f004 fc2e 	bl	800a96c <tcp_zero_window_probe>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d014      	beq.n	8006140 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006116:	2300      	movs	r3, #0
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	e011      	b.n	8006140 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006122:	4619      	mov	r1, r3
 8006124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006126:	f003 fae5 	bl	80096f4 <tcp_split_unsent_seg>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d107      	bne.n	8006140 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006132:	f003 fd65 	bl	8009c00 <tcp_output>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80ac 	beq.w	80062a0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006156:	2b06      	cmp	r3, #6
 8006158:	f200 80a2 	bhi.w	80062a0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006162:	3301      	adds	r3, #1
 8006164:	b2da      	uxtb	r2, r3
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800616c:	e098      	b.n	80062a0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006174:	2b00      	cmp	r3, #0
 8006176:	db0f      	blt.n	8006198 <tcp_slowtmr+0x1f0>
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800617e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006182:	4293      	cmp	r3, r2
 8006184:	d008      	beq.n	8006198 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800618c:	b29b      	uxth	r3, r3
 800618e:	3301      	adds	r3, #1
 8006190:	b29b      	uxth	r3, r3
 8006192:	b21a      	sxth	r2, r3
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80061a4:	429a      	cmp	r2, r3
 80061a6:	db7b      	blt.n	80062a0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80061a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061aa:	f004 f821 	bl	800a1f0 <tcp_rexmit_rto_prepare>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <tcp_slowtmr+0x21c>
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d171      	bne.n	80062a0 <tcp_slowtmr+0x2f8>
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d06d      	beq.n	80062a0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	7d1b      	ldrb	r3, [r3, #20]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d03a      	beq.n	8006242 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061d2:	2b0c      	cmp	r3, #12
 80061d4:	bf28      	it	cs
 80061d6:	230c      	movcs	r3, #12
 80061d8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80061e0:	10db      	asrs	r3, r3, #3
 80061e2:	b21b      	sxth	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80061ec:	4413      	add	r3, r2
 80061ee:	7efa      	ldrb	r2, [r7, #27]
 80061f0:	4910      	ldr	r1, [pc, #64]	; (8006234 <tcp_slowtmr+0x28c>)
 80061f2:	5c8a      	ldrb	r2, [r1, r2]
 80061f4:	4093      	lsls	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80061fe:	4293      	cmp	r3, r2
 8006200:	dc1a      	bgt.n	8006238 <tcp_slowtmr+0x290>
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	b21a      	sxth	r2, r3
 8006206:	e019      	b.n	800623c <tcp_slowtmr+0x294>
 8006208:	20006508 	.word	0x20006508
 800620c:	200000ca 	.word	0x200000ca
 8006210:	20006504 	.word	0x20006504
 8006214:	0800f3d4 	.word	0x0800f3d4
 8006218:	0800f718 	.word	0x0800f718
 800621c:	0800f418 	.word	0x0800f418
 8006220:	0800f744 	.word	0x0800f744
 8006224:	0800f770 	.word	0x0800f770
 8006228:	0800f7a0 	.word	0x0800f7a0
 800622c:	0800f7d4 	.word	0x0800f7d4
 8006230:	080113a0 	.word	0x080113a0
 8006234:	08011390 	.word	0x08011390
 8006238:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	2200      	movs	r2, #0
 8006246:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006254:	4293      	cmp	r3, r2
 8006256:	bf28      	it	cs
 8006258:	4613      	movcs	r3, r2
 800625a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800625c:	8a7b      	ldrh	r3, [r7, #18]
 800625e:	085b      	lsrs	r3, r3, #1
 8006260:	b29a      	uxth	r2, r3
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	b29b      	uxth	r3, r3
 8006276:	429a      	cmp	r2, r3
 8006278:	d206      	bcs.n	8006288 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	2200      	movs	r2, #0
 8006296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800629a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800629c:	f004 f818 	bl	800a2d0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a2:	7d1b      	ldrb	r3, [r3, #20]
 80062a4:	2b06      	cmp	r3, #6
 80062a6:	d111      	bne.n	80062cc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	8b5b      	ldrh	r3, [r3, #26]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062b4:	4b9d      	ldr	r3, [pc, #628]	; (800652c <tcp_slowtmr+0x584>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b28      	cmp	r3, #40	; 0x28
 80062c0:	d904      	bls.n	80062cc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80062c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062c6:	3301      	adds	r3, #1
 80062c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	7a5b      	ldrb	r3, [r3, #9]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d04c      	beq.n	8006372 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d003      	beq.n	80062e8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80062e4:	2b07      	cmp	r3, #7
 80062e6:	d144      	bne.n	8006372 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062e8:	4b90      	ldr	r3, [pc, #576]	; (800652c <tcp_slowtmr+0x584>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80062fc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006300:	498b      	ldr	r1, [pc, #556]	; (8006530 <tcp_slowtmr+0x588>)
 8006302:	fba1 1303 	umull	r1, r3, r1, r3
 8006306:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006308:	429a      	cmp	r2, r3
 800630a:	d90a      	bls.n	8006322 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800630c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006310:	3301      	adds	r3, #1
 8006312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006316:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800631a:	3301      	adds	r3, #1
 800631c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006320:	e027      	b.n	8006372 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006322:	4b82      	ldr	r3, [pc, #520]	; (800652c <tcp_slowtmr+0x584>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006338:	4618      	mov	r0, r3
 800633a:	4b7e      	ldr	r3, [pc, #504]	; (8006534 <tcp_slowtmr+0x58c>)
 800633c:	fb03 f300 	mul.w	r3, r3, r0
 8006340:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006342:	497b      	ldr	r1, [pc, #492]	; (8006530 <tcp_slowtmr+0x588>)
 8006344:	fba1 1303 	umull	r1, r3, r1, r3
 8006348:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800634a:	429a      	cmp	r2, r3
 800634c:	d911      	bls.n	8006372 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800634e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006350:	f004 facc 	bl	800a8ec <tcp_keepalive>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800635a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800635e:	2b00      	cmp	r3, #0
 8006360:	d107      	bne.n	8006372 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006368:	3301      	adds	r3, #1
 800636a:	b2da      	uxtb	r2, r3
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006376:	2b00      	cmp	r3, #0
 8006378:	d011      	beq.n	800639e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800637a:	4b6c      	ldr	r3, [pc, #432]	; (800652c <tcp_slowtmr+0x584>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	1ad2      	subs	r2, r2, r3
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800638a:	4619      	mov	r1, r3
 800638c:	460b      	mov	r3, r1
 800638e:	005b      	lsls	r3, r3, #1
 8006390:	440b      	add	r3, r1
 8006392:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006394:	429a      	cmp	r2, r3
 8006396:	d302      	bcc.n	800639e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006398:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800639a:	f000 fdd7 	bl	8006f4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	7d1b      	ldrb	r3, [r3, #20]
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d10b      	bne.n	80063be <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063a6:	4b61      	ldr	r3, [pc, #388]	; (800652c <tcp_slowtmr+0x584>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b28      	cmp	r3, #40	; 0x28
 80063b2:	d904      	bls.n	80063be <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80063b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063b8:	3301      	adds	r3, #1
 80063ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	7d1b      	ldrb	r3, [r3, #20]
 80063c2:	2b09      	cmp	r3, #9
 80063c4:	d10b      	bne.n	80063de <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80063c6:	4b59      	ldr	r3, [pc, #356]	; (800652c <tcp_slowtmr+0x584>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2bf0      	cmp	r3, #240	; 0xf0
 80063d2:	d904      	bls.n	80063de <tcp_slowtmr+0x436>
        ++pcb_remove;
 80063d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063d8:	3301      	adds	r3, #1
 80063da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80063de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d060      	beq.n	80064a8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80063ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063f0:	f000 fbf8 	bl	8006be4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d010      	beq.n	800641c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80063fa:	4b4f      	ldr	r3, [pc, #316]	; (8006538 <tcp_slowtmr+0x590>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006400:	429a      	cmp	r2, r3
 8006402:	d106      	bne.n	8006412 <tcp_slowtmr+0x46a>
 8006404:	4b4d      	ldr	r3, [pc, #308]	; (800653c <tcp_slowtmr+0x594>)
 8006406:	f240 526d 	movw	r2, #1389	; 0x56d
 800640a:	494d      	ldr	r1, [pc, #308]	; (8006540 <tcp_slowtmr+0x598>)
 800640c:	484d      	ldr	r0, [pc, #308]	; (8006544 <tcp_slowtmr+0x59c>)
 800640e:	f007 fb4f 	bl	800dab0 <iprintf>
        prev->next = pcb->next;
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	e00f      	b.n	800643c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800641c:	4b46      	ldr	r3, [pc, #280]	; (8006538 <tcp_slowtmr+0x590>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006422:	429a      	cmp	r2, r3
 8006424:	d006      	beq.n	8006434 <tcp_slowtmr+0x48c>
 8006426:	4b45      	ldr	r3, [pc, #276]	; (800653c <tcp_slowtmr+0x594>)
 8006428:	f240 5271 	movw	r2, #1393	; 0x571
 800642c:	4946      	ldr	r1, [pc, #280]	; (8006548 <tcp_slowtmr+0x5a0>)
 800642e:	4845      	ldr	r0, [pc, #276]	; (8006544 <tcp_slowtmr+0x59c>)
 8006430:	f007 fb3e 	bl	800dab0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a3f      	ldr	r2, [pc, #252]	; (8006538 <tcp_slowtmr+0x590>)
 800643a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800643c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006440:	2b00      	cmp	r3, #0
 8006442:	d013      	beq.n	800646c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800644c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	3304      	adds	r3, #4
 8006452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006454:	8ad2      	ldrh	r2, [r2, #22]
 8006456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006458:	8b09      	ldrh	r1, [r1, #24]
 800645a:	9102      	str	r1, [sp, #8]
 800645c:	9201      	str	r2, [sp, #4]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	462b      	mov	r3, r5
 8006462:	4622      	mov	r2, r4
 8006464:	4601      	mov	r1, r0
 8006466:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006468:	f004 f98e 	bl	800a788 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	7d1b      	ldrb	r3, [r3, #20]
 8006476:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006482:	6838      	ldr	r0, [r7, #0]
 8006484:	f7ff f9fa 	bl	800587c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006488:	4b30      	ldr	r3, [pc, #192]	; (800654c <tcp_slowtmr+0x5a4>)
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <tcp_slowtmr+0x4f6>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f06f 010c 	mvn.w	r1, #12
 800649a:	68b8      	ldr	r0, [r7, #8]
 800649c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800649e:	4b2b      	ldr	r3, [pc, #172]	; (800654c <tcp_slowtmr+0x5a4>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d037      	beq.n	8006516 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80064a6:	e590      	b.n	8005fca <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	7f1b      	ldrb	r3, [r3, #28]
 80064b6:	3301      	adds	r3, #1
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	7f1a      	ldrb	r2, [r3, #28]
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	7f5b      	ldrb	r3, [r3, #29]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d325      	bcc.n	8006516 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80064d0:	4b1e      	ldr	r3, [pc, #120]	; (800654c <tcp_slowtmr+0x5a4>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <tcp_slowtmr+0x550>
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064e8:	6912      	ldr	r2, [r2, #16]
 80064ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ec:	4610      	mov	r0, r2
 80064ee:	4798      	blx	r3
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80064f6:	e002      	b.n	80064fe <tcp_slowtmr+0x556>
 80064f8:	2300      	movs	r3, #0
 80064fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <tcp_slowtmr+0x5a4>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d000      	beq.n	8006508 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006506:	e560      	b.n	8005fca <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006508:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006512:	f003 fb75 	bl	8009c00 <tcp_output>
  while (pcb != NULL) {
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	2b00      	cmp	r3, #0
 800651a:	f47f ad5c 	bne.w	8005fd6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <tcp_slowtmr+0x5a8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006528:	e067      	b.n	80065fa <tcp_slowtmr+0x652>
 800652a:	bf00      	nop
 800652c:	20006508 	.word	0x20006508
 8006530:	10624dd3 	.word	0x10624dd3
 8006534:	000124f8 	.word	0x000124f8
 8006538:	20006504 	.word	0x20006504
 800653c:	0800f3d4 	.word	0x0800f3d4
 8006540:	0800f80c 	.word	0x0800f80c
 8006544:	0800f418 	.word	0x0800f418
 8006548:	0800f838 	.word	0x0800f838
 800654c:	20006500 	.word	0x20006500
 8006550:	20006514 	.word	0x20006514
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	7d1b      	ldrb	r3, [r3, #20]
 8006558:	2b0a      	cmp	r3, #10
 800655a:	d006      	beq.n	800656a <tcp_slowtmr+0x5c2>
 800655c:	4b2a      	ldr	r3, [pc, #168]	; (8006608 <tcp_slowtmr+0x660>)
 800655e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006562:	492a      	ldr	r1, [pc, #168]	; (800660c <tcp_slowtmr+0x664>)
 8006564:	482a      	ldr	r0, [pc, #168]	; (8006610 <tcp_slowtmr+0x668>)
 8006566:	f007 faa3 	bl	800dab0 <iprintf>
    pcb_remove = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006570:	4b28      	ldr	r3, [pc, #160]	; (8006614 <tcp_slowtmr+0x66c>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2bf0      	cmp	r3, #240	; 0xf0
 800657c:	d904      	bls.n	8006588 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800657e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006582:	3301      	adds	r3, #1
 8006584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800658c:	2b00      	cmp	r3, #0
 800658e:	d02f      	beq.n	80065f0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006592:	f000 fb27 	bl	8006be4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d010      	beq.n	80065be <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800659c:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <tcp_slowtmr+0x670>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d106      	bne.n	80065b4 <tcp_slowtmr+0x60c>
 80065a6:	4b18      	ldr	r3, [pc, #96]	; (8006608 <tcp_slowtmr+0x660>)
 80065a8:	f240 52af 	movw	r2, #1455	; 0x5af
 80065ac:	491b      	ldr	r1, [pc, #108]	; (800661c <tcp_slowtmr+0x674>)
 80065ae:	4818      	ldr	r0, [pc, #96]	; (8006610 <tcp_slowtmr+0x668>)
 80065b0:	f007 fa7e 	bl	800dab0 <iprintf>
        prev->next = pcb->next;
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	60da      	str	r2, [r3, #12]
 80065bc:	e00f      	b.n	80065de <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80065be:	4b16      	ldr	r3, [pc, #88]	; (8006618 <tcp_slowtmr+0x670>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d006      	beq.n	80065d6 <tcp_slowtmr+0x62e>
 80065c8:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <tcp_slowtmr+0x660>)
 80065ca:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80065ce:	4914      	ldr	r1, [pc, #80]	; (8006620 <tcp_slowtmr+0x678>)
 80065d0:	480f      	ldr	r0, [pc, #60]	; (8006610 <tcp_slowtmr+0x668>)
 80065d2:	f007 fa6d 	bl	800dab0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	4a0f      	ldr	r2, [pc, #60]	; (8006618 <tcp_slowtmr+0x670>)
 80065dc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80065e8:	69f8      	ldr	r0, [r7, #28]
 80065ea:	f7ff f947 	bl	800587c <tcp_free>
 80065ee:	e004      	b.n	80065fa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1a9      	bne.n	8006554 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006600:	bf00      	nop
 8006602:	3730      	adds	r7, #48	; 0x30
 8006604:	46bd      	mov	sp, r7
 8006606:	bdb0      	pop	{r4, r5, r7, pc}
 8006608:	0800f3d4 	.word	0x0800f3d4
 800660c:	0800f864 	.word	0x0800f864
 8006610:	0800f418 	.word	0x0800f418
 8006614:	20006508 	.word	0x20006508
 8006618:	20006514 	.word	0x20006514
 800661c:	0800f894 	.word	0x0800f894
 8006620:	0800f8bc 	.word	0x0800f8bc

08006624 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800662a:	4b2d      	ldr	r3, [pc, #180]	; (80066e0 <tcp_fasttmr+0xbc>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	3301      	adds	r3, #1
 8006630:	b2da      	uxtb	r2, r3
 8006632:	4b2b      	ldr	r3, [pc, #172]	; (80066e0 <tcp_fasttmr+0xbc>)
 8006634:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006636:	4b2b      	ldr	r3, [pc, #172]	; (80066e4 <tcp_fasttmr+0xc0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800663c:	e048      	b.n	80066d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	7f9a      	ldrb	r2, [r3, #30]
 8006642:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <tcp_fasttmr+0xbc>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d03f      	beq.n	80066ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800664a:	4b25      	ldr	r3, [pc, #148]	; (80066e0 <tcp_fasttmr+0xbc>)
 800664c:	781a      	ldrb	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	8b5b      	ldrh	r3, [r3, #26]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d010      	beq.n	8006680 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	8b5b      	ldrh	r3, [r3, #26]
 8006662:	f043 0302 	orr.w	r3, r3, #2
 8006666:	b29a      	uxth	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f003 fac7 	bl	8009c00 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8b5b      	ldrh	r3, [r3, #26]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8b5b      	ldrh	r3, [r3, #26]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8b5b      	ldrh	r3, [r3, #26]
 8006690:	f023 0308 	bic.w	r3, r3, #8
 8006694:	b29a      	uxth	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fa7e 	bl	8005b9c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80066ae:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <tcp_fasttmr+0xc4>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f819 	bl	80066ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80066ba:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <tcp_fasttmr+0xc4>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d000      	beq.n	80066c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80066c2:	e7b8      	b.n	8006636 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	e002      	b.n	80066d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1b3      	bne.n	800663e <tcp_fasttmr+0x1a>
    }
  }
}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	200000ca 	.word	0x200000ca
 80066e4:	20006504 	.word	0x20006504
 80066e8:	20006500 	.word	0x20006500

080066ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <tcp_process_refused_data+0x22>
 80066fa:	4b37      	ldr	r3, [pc, #220]	; (80067d8 <tcp_process_refused_data+0xec>)
 80066fc:	f240 6209 	movw	r2, #1545	; 0x609
 8006700:	4936      	ldr	r1, [pc, #216]	; (80067dc <tcp_process_refused_data+0xf0>)
 8006702:	4837      	ldr	r0, [pc, #220]	; (80067e0 <tcp_process_refused_data+0xf4>)
 8006704:	f007 f9d4 	bl	800dab0 <iprintf>
 8006708:	f06f 030f 	mvn.w	r3, #15
 800670c:	e060      	b.n	80067d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006712:	7b5b      	ldrb	r3, [r3, #13]
 8006714:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800671a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <tcp_process_refused_data+0x58>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6918      	ldr	r0, [r3, #16]
 8006736:	2300      	movs	r3, #0
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	47a0      	blx	r4
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]
 8006742:	e007      	b.n	8006754 <tcp_process_refused_data+0x68>
 8006744:	2300      	movs	r3, #0
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	2000      	movs	r0, #0
 800674c:	f000 f8a2 	bl	8006894 <tcp_recv_null>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d12a      	bne.n	80067b2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800675c:	7bbb      	ldrb	r3, [r7, #14]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d033      	beq.n	80067ce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676e:	d005      	beq.n	800677c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006774:	3301      	adds	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00b      	beq.n	800679e <tcp_process_refused_data+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6918      	ldr	r0, [r3, #16]
 8006790:	2300      	movs	r3, #0
 8006792:	2200      	movs	r2, #0
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	47a0      	blx	r4
 8006798:	4603      	mov	r3, r0
 800679a:	73fb      	strb	r3, [r7, #15]
 800679c:	e001      	b.n	80067a2 <tcp_process_refused_data+0xb6>
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80067a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067a6:	f113 0f0d 	cmn.w	r3, #13
 80067aa:	d110      	bne.n	80067ce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80067ac:	f06f 030c 	mvn.w	r3, #12
 80067b0:	e00e      	b.n	80067d0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80067b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b6:	f113 0f0d 	cmn.w	r3, #13
 80067ba:	d102      	bne.n	80067c2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80067bc:	f06f 030c 	mvn.w	r3, #12
 80067c0:	e006      	b.n	80067d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80067c8:	f06f 0304 	mvn.w	r3, #4
 80067cc:	e000      	b.n	80067d0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd90      	pop	{r4, r7, pc}
 80067d8:	0800f3d4 	.word	0x0800f3d4
 80067dc:	0800f8e4 	.word	0x0800f8e4
 80067e0:	0800f418 	.word	0x0800f418

080067e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80067ec:	e007      	b.n	80067fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f809 	bl	800680c <tcp_seg_free>
    seg = next;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f4      	bne.n	80067ee <tcp_segs_free+0xa>
  }
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe fd88 	bl	800533c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	2003      	movs	r0, #3
 8006830:	f7fd ff76 	bl	8004720 <memp_free>
  }
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <tcp_seg_copy+0x1c>
 800684a:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <tcp_seg_copy+0x4c>)
 800684c:	f240 6282 	movw	r2, #1666	; 0x682
 8006850:	490e      	ldr	r1, [pc, #56]	; (800688c <tcp_seg_copy+0x50>)
 8006852:	480f      	ldr	r0, [pc, #60]	; (8006890 <tcp_seg_copy+0x54>)
 8006854:	f007 f92c 	bl	800dab0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006858:	2003      	movs	r0, #3
 800685a:	f7fd ff15 	bl	8004688 <memp_malloc>
 800685e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <tcp_seg_copy+0x2e>
    return NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	e00a      	b.n	8006880 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800686a:	2210      	movs	r2, #16
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f007 f90b 	bl	800da8a <memcpy>
  pbuf_ref(cseg->p);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fdff 	bl	800547c <pbuf_ref>
  return cseg;
 800687e:	68fb      	ldr	r3, [r7, #12]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	0800f3d4 	.word	0x0800f3d4
 800688c:	0800f928 	.word	0x0800f928
 8006890:	0800f418 	.word	0x0800f418

08006894 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d109      	bne.n	80068bc <tcp_recv_null+0x28>
 80068a8:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <tcp_recv_null+0x60>)
 80068aa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80068ae:	4912      	ldr	r1, [pc, #72]	; (80068f8 <tcp_recv_null+0x64>)
 80068b0:	4812      	ldr	r0, [pc, #72]	; (80068fc <tcp_recv_null+0x68>)
 80068b2:	f007 f8fd 	bl	800dab0 <iprintf>
 80068b6:	f06f 030f 	mvn.w	r3, #15
 80068ba:	e016      	b.n	80068ea <tcp_recv_null+0x56>

  if (p != NULL) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d009      	beq.n	80068d6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	891b      	ldrh	r3, [r3, #8]
 80068c6:	4619      	mov	r1, r3
 80068c8:	68b8      	ldr	r0, [r7, #8]
 80068ca:	f7ff fb1d 	bl	8005f08 <tcp_recved>
    pbuf_free(p);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fe fd34 	bl	800533c <pbuf_free>
 80068d4:	e008      	b.n	80068e8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80068d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d104      	bne.n	80068e8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80068de:	68b8      	ldr	r0, [r7, #8]
 80068e0:	f7ff f9c2 	bl	8005c68 <tcp_close>
 80068e4:	4603      	mov	r3, r0
 80068e6:	e000      	b.n	80068ea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	0800f3d4 	.word	0x0800f3d4
 80068f8:	0800f944 	.word	0x0800f944
 80068fc:	0800f418 	.word	0x0800f418

08006900 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800690a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800690e:	2b00      	cmp	r3, #0
 8006910:	db01      	blt.n	8006916 <tcp_kill_prio+0x16>
 8006912:	79fb      	ldrb	r3, [r7, #7]
 8006914:	e000      	b.n	8006918 <tcp_kill_prio+0x18>
 8006916:	237f      	movs	r3, #127	; 0x7f
 8006918:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800691a:	7afb      	ldrb	r3, [r7, #11]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d034      	beq.n	800698a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006920:	7afb      	ldrb	r3, [r7, #11]
 8006922:	3b01      	subs	r3, #1
 8006924:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800692e:	4b19      	ldr	r3, [pc, #100]	; (8006994 <tcp_kill_prio+0x94>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e01f      	b.n	8006976 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	7d5b      	ldrb	r3, [r3, #21]
 800693a:	7afa      	ldrb	r2, [r7, #11]
 800693c:	429a      	cmp	r2, r3
 800693e:	d80c      	bhi.n	800695a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006944:	7afa      	ldrb	r2, [r7, #11]
 8006946:	429a      	cmp	r2, r3
 8006948:	d112      	bne.n	8006970 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800694a:	4b13      	ldr	r3, [pc, #76]	; (8006998 <tcp_kill_prio+0x98>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	429a      	cmp	r2, r3
 8006958:	d80a      	bhi.n	8006970 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800695a:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <tcp_kill_prio+0x98>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	7d5b      	ldrb	r3, [r3, #21]
 800696e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1dc      	bne.n	8006936 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006982:	6938      	ldr	r0, [r7, #16]
 8006984:	f7ff fa5a 	bl	8005e3c <tcp_abort>
 8006988:	e000      	b.n	800698c <tcp_kill_prio+0x8c>
    return;
 800698a:	bf00      	nop
  }
}
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20006504 	.word	0x20006504
 8006998:	20006508 	.word	0x20006508

0800699c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d009      	beq.n	80069c0 <tcp_kill_state+0x24>
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	2b09      	cmp	r3, #9
 80069b0:	d006      	beq.n	80069c0 <tcp_kill_state+0x24>
 80069b2:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <tcp_kill_state+0x80>)
 80069b4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80069b8:	4919      	ldr	r1, [pc, #100]	; (8006a20 <tcp_kill_state+0x84>)
 80069ba:	481a      	ldr	r0, [pc, #104]	; (8006a24 <tcp_kill_state+0x88>)
 80069bc:	f007 f878 	bl	800dab0 <iprintf>

  inactivity = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069c8:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <tcp_kill_state+0x8c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	e017      	b.n	8006a00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	7d1b      	ldrb	r3, [r3, #20]
 80069d4:	79fa      	ldrb	r2, [r7, #7]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d10f      	bne.n	80069fa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80069da:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <tcp_kill_state+0x90>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d807      	bhi.n	80069fa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80069ea:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <tcp_kill_state+0x90>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e4      	bne.n	80069d0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	6938      	ldr	r0, [r7, #16]
 8006a10:	f7ff f956 	bl	8005cc0 <tcp_abandon>
  }
}
 8006a14:	bf00      	nop
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	0800f3d4 	.word	0x0800f3d4
 8006a20:	0800f960 	.word	0x0800f960
 8006a24:	0800f418 	.word	0x0800f418
 8006a28:	20006504 	.word	0x20006504
 8006a2c:	20006508 	.word	0x20006508

08006a30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a3e:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <tcp_kill_timewait+0x58>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e012      	b.n	8006a6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006a46:	4b11      	ldr	r3, [pc, #68]	; (8006a8c <tcp_kill_timewait+0x5c>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d807      	bhi.n	8006a66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <tcp_kill_timewait+0x5c>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e9      	bne.n	8006a46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006a78:	68b8      	ldr	r0, [r7, #8]
 8006a7a:	f7ff f9df 	bl	8005e3c <tcp_abort>
  }
}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20006514 	.word	0x20006514
 8006a8c:	20006508 	.word	0x20006508

08006a90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006a96:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <tcp_handle_closepend+0x48>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006a9c:	e014      	b.n	8006ac8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	8b5b      	ldrh	r3, [r3, #26]
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d009      	beq.n	8006ac4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8b5b      	ldrh	r3, [r3, #26]
 8006ab4:	f023 0308 	bic.w	r3, r3, #8
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff f86c 	bl	8005b9c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e7      	bne.n	8006a9e <tcp_handle_closepend+0xe>
  }
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20006504 	.word	0x20006504

08006adc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	f7fd fdce 	bl	8004688 <memp_malloc>
 8006aec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d126      	bne.n	8006b42 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006af4:	f7ff ffcc 	bl	8006a90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006af8:	f7ff ff9a 	bl	8006a30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006afc:	2001      	movs	r0, #1
 8006afe:	f7fd fdc3 	bl	8004688 <memp_malloc>
 8006b02:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d11b      	bne.n	8006b42 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006b0a:	2009      	movs	r0, #9
 8006b0c:	f7ff ff46 	bl	800699c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006b10:	2001      	movs	r0, #1
 8006b12:	f7fd fdb9 	bl	8004688 <memp_malloc>
 8006b16:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d111      	bne.n	8006b42 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006b1e:	2008      	movs	r0, #8
 8006b20:	f7ff ff3c 	bl	800699c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006b24:	2001      	movs	r0, #1
 8006b26:	f7fd fdaf 	bl	8004688 <memp_malloc>
 8006b2a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d107      	bne.n	8006b42 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff fee3 	bl	8006900 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	f7fd fda4 	bl	8004688 <memp_malloc>
 8006b40:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d03f      	beq.n	8006bc8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006b48:	229c      	movs	r2, #156	; 0x9c
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f006 ffa7 	bl	800daa0 <memset>
    pcb->prio = prio;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	79fa      	ldrb	r2, [r7, #7]
 8006b56:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8006b5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	22ff      	movs	r2, #255	; 0xff
 8006b76:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006b7e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2206      	movs	r2, #6
 8006b84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2206      	movs	r2, #6
 8006b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b94:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <tcp_alloc+0xf8>)
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <tcp_alloc+0xfc>)
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8006bb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <tcp_alloc+0x100>)
 8006bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a07      	ldr	r2, [pc, #28]	; (8006be0 <tcp_alloc+0x104>)
 8006bc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20006508 	.word	0x20006508
 8006bd8:	200000ca 	.word	0x200000ca
 8006bdc:	08006895 	.word	0x08006895
 8006be0:	006ddd00 	.word	0x006ddd00

08006be4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d107      	bne.n	8006c02 <tcp_pcb_purge+0x1e>
 8006bf2:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <tcp_pcb_purge+0x94>)
 8006bf4:	f640 0251 	movw	r2, #2129	; 0x851
 8006bf8:	4920      	ldr	r1, [pc, #128]	; (8006c7c <tcp_pcb_purge+0x98>)
 8006bfa:	4821      	ldr	r0, [pc, #132]	; (8006c80 <tcp_pcb_purge+0x9c>)
 8006bfc:	f006 ff58 	bl	800dab0 <iprintf>
 8006c00:	e037      	b.n	8006c72 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7d1b      	ldrb	r3, [r3, #20]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d033      	beq.n	8006c72 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006c0e:	2b0a      	cmp	r3, #10
 8006c10:	d02f      	beq.n	8006c72 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d02b      	beq.n	8006c72 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe fb88 	bl	800533c <pbuf_free>
      pcb->refused_data = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f986 	bl	8006f4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c46:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fdc9 	bl	80067e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fdc4 	bl	80067e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	66da      	str	r2, [r3, #108]	; 0x6c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	0800f3d4 	.word	0x0800f3d4
 8006c7c:	0800fa20 	.word	0x0800fa20
 8006c80:	0800f418 	.word	0x0800f418

08006c84 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <tcp_pcb_remove+0x1e>
 8006c94:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <tcp_pcb_remove+0x10c>)
 8006c96:	f640 0283 	movw	r2, #2179	; 0x883
 8006c9a:	493e      	ldr	r1, [pc, #248]	; (8006d94 <tcp_pcb_remove+0x110>)
 8006c9c:	483e      	ldr	r0, [pc, #248]	; (8006d98 <tcp_pcb_remove+0x114>)
 8006c9e:	f006 ff07 	bl	800dab0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <tcp_pcb_remove+0x32>
 8006ca8:	4b39      	ldr	r3, [pc, #228]	; (8006d90 <tcp_pcb_remove+0x10c>)
 8006caa:	f640 0284 	movw	r2, #2180	; 0x884
 8006cae:	493b      	ldr	r1, [pc, #236]	; (8006d9c <tcp_pcb_remove+0x118>)
 8006cb0:	4839      	ldr	r0, [pc, #228]	; (8006d98 <tcp_pcb_remove+0x114>)
 8006cb2:	f006 fefd 	bl	800dab0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d105      	bne.n	8006ccc <tcp_pcb_remove+0x48>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e013      	b.n	8006cf4 <tcp_pcb_remove+0x70>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e00c      	b.n	8006cee <tcp_pcb_remove+0x6a>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d104      	bne.n	8006ce8 <tcp_pcb_remove+0x64>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	e005      	b.n	8006cf4 <tcp_pcb_remove+0x70>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1ef      	bne.n	8006cd4 <tcp_pcb_remove+0x50>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006cfa:	6838      	ldr	r0, [r7, #0]
 8006cfc:	f7ff ff72 	bl	8006be4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	7d1b      	ldrb	r3, [r3, #20]
 8006d04:	2b0a      	cmp	r3, #10
 8006d06:	d013      	beq.n	8006d30 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d00f      	beq.n	8006d30 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	8b5b      	ldrh	r3, [r3, #26]
 8006d14:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d009      	beq.n	8006d30 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	8b5b      	ldrh	r3, [r3, #26]
 8006d20:	f043 0302 	orr.w	r3, r3, #2
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006d2a:	6838      	ldr	r0, [r7, #0]
 8006d2c:	f002 ff68 	bl	8009c00 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	7d1b      	ldrb	r3, [r3, #20]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d020      	beq.n	8006d7a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d006      	beq.n	8006d4e <tcp_pcb_remove+0xca>
 8006d40:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <tcp_pcb_remove+0x10c>)
 8006d42:	f640 0293 	movw	r2, #2195	; 0x893
 8006d46:	4916      	ldr	r1, [pc, #88]	; (8006da0 <tcp_pcb_remove+0x11c>)
 8006d48:	4813      	ldr	r0, [pc, #76]	; (8006d98 <tcp_pcb_remove+0x114>)
 8006d4a:	f006 feb1 	bl	800dab0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d006      	beq.n	8006d64 <tcp_pcb_remove+0xe0>
 8006d56:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <tcp_pcb_remove+0x10c>)
 8006d58:	f640 0294 	movw	r2, #2196	; 0x894
 8006d5c:	4911      	ldr	r1, [pc, #68]	; (8006da4 <tcp_pcb_remove+0x120>)
 8006d5e:	480e      	ldr	r0, [pc, #56]	; (8006d98 <tcp_pcb_remove+0x114>)
 8006d60:	f006 fea6 	bl	800dab0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d006      	beq.n	8006d7a <tcp_pcb_remove+0xf6>
 8006d6c:	4b08      	ldr	r3, [pc, #32]	; (8006d90 <tcp_pcb_remove+0x10c>)
 8006d6e:	f640 0296 	movw	r2, #2198	; 0x896
 8006d72:	490d      	ldr	r1, [pc, #52]	; (8006da8 <tcp_pcb_remove+0x124>)
 8006d74:	4808      	ldr	r0, [pc, #32]	; (8006d98 <tcp_pcb_remove+0x114>)
 8006d76:	f006 fe9b 	bl	800dab0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	0800f3d4 	.word	0x0800f3d4
 8006d94:	0800fa3c 	.word	0x0800fa3c
 8006d98:	0800f418 	.word	0x0800f418
 8006d9c:	0800fa58 	.word	0x0800fa58
 8006da0:	0800fa78 	.word	0x0800fa78
 8006da4:	0800fa90 	.word	0x0800fa90
 8006da8:	0800faac 	.word	0x0800faac

08006dac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <tcp_next_iss+0x1c>
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <tcp_next_iss+0x38>)
 8006dbc:	f640 02af 	movw	r2, #2223	; 0x8af
 8006dc0:	4909      	ldr	r1, [pc, #36]	; (8006de8 <tcp_next_iss+0x3c>)
 8006dc2:	480a      	ldr	r0, [pc, #40]	; (8006dec <tcp_next_iss+0x40>)
 8006dc4:	f006 fe74 	bl	800dab0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006dc8:	4b09      	ldr	r3, [pc, #36]	; (8006df0 <tcp_next_iss+0x44>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <tcp_next_iss+0x48>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	4a07      	ldr	r2, [pc, #28]	; (8006df0 <tcp_next_iss+0x44>)
 8006dd4:	6013      	str	r3, [r2, #0]
  return iss;
 8006dd6:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <tcp_next_iss+0x44>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	0800f3d4 	.word	0x0800f3d4
 8006de8:	0800fac4 	.word	0x0800fac4
 8006dec:	0800f418 	.word	0x0800f418
 8006df0:	2000000c 	.word	0x2000000c
 8006df4:	20006508 	.word	0x20006508

08006df8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <tcp_eff_send_mss_netif+0x22>
 8006e0c:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <tcp_eff_send_mss_netif+0x68>)
 8006e0e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006e12:	4914      	ldr	r1, [pc, #80]	; (8006e64 <tcp_eff_send_mss_netif+0x6c>)
 8006e14:	4814      	ldr	r0, [pc, #80]	; (8006e68 <tcp_eff_send_mss_netif+0x70>)
 8006e16:	f006 fe4b 	bl	800dab0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006e20:	89fb      	ldrh	r3, [r7, #14]
 8006e22:	e019      	b.n	8006e58 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e28:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006e2a:	8afb      	ldrh	r3, [r7, #22]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d012      	beq.n	8006e56 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006e30:	2328      	movs	r3, #40	; 0x28
 8006e32:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006e34:	8afa      	ldrh	r2, [r7, #22]
 8006e36:	8abb      	ldrh	r3, [r7, #20]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d904      	bls.n	8006e46 <tcp_eff_send_mss_netif+0x4e>
 8006e3c:	8afa      	ldrh	r2, [r7, #22]
 8006e3e:	8abb      	ldrh	r3, [r7, #20]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	e000      	b.n	8006e48 <tcp_eff_send_mss_netif+0x50>
 8006e46:	2300      	movs	r3, #0
 8006e48:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006e4a:	8a7a      	ldrh	r2, [r7, #18]
 8006e4c:	89fb      	ldrh	r3, [r7, #14]
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	bf28      	it	cs
 8006e52:	4613      	movcs	r3, r2
 8006e54:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006e56:	89fb      	ldrh	r3, [r7, #14]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	0800f3d4 	.word	0x0800f3d4
 8006e64:	0800fae0 	.word	0x0800fae0
 8006e68:	0800f418 	.word	0x0800f418

08006e6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d119      	bne.n	8006eb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006e80:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006e82:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006e86:	4910      	ldr	r1, [pc, #64]	; (8006ec8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006e88:	4810      	ldr	r0, [pc, #64]	; (8006ecc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006e8a:	f006 fe11 	bl	800dab0 <iprintf>

  while (pcb != NULL) {
 8006e8e:	e011      	b.n	8006eb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d108      	bne.n	8006eae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7fe ffca 	bl	8005e3c <tcp_abort>
      pcb = next;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e002      	b.n	8006eb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1ea      	bne.n	8006e90 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	0800f3d4 	.word	0x0800f3d4
 8006ec8:	0800fb08 	.word	0x0800fb08
 8006ecc:	0800f418 	.word	0x0800f418

08006ed0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d02a      	beq.n	8006f36 <tcp_netif_ip_addr_changed+0x66>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d026      	beq.n	8006f36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <tcp_netif_ip_addr_changed+0x70>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff ffbc 	bl	8006e6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006ef4:	4b13      	ldr	r3, [pc, #76]	; (8006f44 <tcp_netif_ip_addr_changed+0x74>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff ffb6 	bl	8006e6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d017      	beq.n	8006f36 <tcp_netif_ip_addr_changed+0x66>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d013      	beq.n	8006f36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <tcp_netif_ip_addr_changed+0x78>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e00c      	b.n	8006f30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d103      	bne.n	8006f2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1ef      	bne.n	8006f16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006f36:	bf00      	nop
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20006504 	.word	0x20006504
 8006f44:	20006510 	.word	0x20006510
 8006f48:	2000650c 	.word	0x2000650c

08006f4c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff fc3f 	bl	80067e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006f74:	b590      	push	{r4, r7, lr}
 8006f76:	b08d      	sub	sp, #52	; 0x34
 8006f78:	af04      	add	r7, sp, #16
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d105      	bne.n	8006f90 <tcp_input+0x1c>
 8006f84:	4b9b      	ldr	r3, [pc, #620]	; (80071f4 <tcp_input+0x280>)
 8006f86:	2283      	movs	r2, #131	; 0x83
 8006f88:	499b      	ldr	r1, [pc, #620]	; (80071f8 <tcp_input+0x284>)
 8006f8a:	489c      	ldr	r0, [pc, #624]	; (80071fc <tcp_input+0x288>)
 8006f8c:	f006 fd90 	bl	800dab0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	4a9a      	ldr	r2, [pc, #616]	; (8007200 <tcp_input+0x28c>)
 8006f96:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	895b      	ldrh	r3, [r3, #10]
 8006f9c:	2b13      	cmp	r3, #19
 8006f9e:	f240 83c4 	bls.w	800772a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006fa2:	4b98      	ldr	r3, [pc, #608]	; (8007204 <tcp_input+0x290>)
 8006fa4:	695a      	ldr	r2, [r3, #20]
 8006fa6:	4b97      	ldr	r3, [pc, #604]	; (8007204 <tcp_input+0x290>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f005 fc1b 	bl	800c7e8 <ip4_addr_isbroadcast_u32>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 83ba 	bne.w	800772e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006fba:	4b92      	ldr	r3, [pc, #584]	; (8007204 <tcp_input+0x290>)
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006fc2:	2be0      	cmp	r3, #224	; 0xe0
 8006fc4:	f000 83b3 	beq.w	800772e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006fc8:	4b8d      	ldr	r3, [pc, #564]	; (8007200 <tcp_input+0x28c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	899b      	ldrh	r3, [r3, #12]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fc ff03 	bl	8003ddc <lwip_htons>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	0b1b      	lsrs	r3, r3, #12
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006fe2:	7cbb      	ldrb	r3, [r7, #18]
 8006fe4:	2b13      	cmp	r3, #19
 8006fe6:	f240 83a2 	bls.w	800772e <tcp_input+0x7ba>
 8006fea:	7cbb      	ldrb	r3, [r7, #18]
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	891b      	ldrh	r3, [r3, #8]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	f200 839b 	bhi.w	800772e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006ff8:	7cbb      	ldrb	r3, [r7, #18]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b14      	subs	r3, #20
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	4b81      	ldr	r3, [pc, #516]	; (8007208 <tcp_input+0x294>)
 8007002:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007004:	4b81      	ldr	r3, [pc, #516]	; (800720c <tcp_input+0x298>)
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	895a      	ldrh	r2, [r3, #10]
 800700e:	7cbb      	ldrb	r3, [r7, #18]
 8007010:	b29b      	uxth	r3, r3
 8007012:	429a      	cmp	r2, r3
 8007014:	d309      	bcc.n	800702a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007016:	4b7c      	ldr	r3, [pc, #496]	; (8007208 <tcp_input+0x294>)
 8007018:	881a      	ldrh	r2, [r3, #0]
 800701a:	4b7d      	ldr	r3, [pc, #500]	; (8007210 <tcp_input+0x29c>)
 800701c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800701e:	7cbb      	ldrb	r3, [r7, #18]
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fe f904 	bl	8005230 <pbuf_remove_header>
 8007028:	e04e      	b.n	80070c8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d105      	bne.n	800703e <tcp_input+0xca>
 8007032:	4b70      	ldr	r3, [pc, #448]	; (80071f4 <tcp_input+0x280>)
 8007034:	22c2      	movs	r2, #194	; 0xc2
 8007036:	4977      	ldr	r1, [pc, #476]	; (8007214 <tcp_input+0x2a0>)
 8007038:	4870      	ldr	r0, [pc, #448]	; (80071fc <tcp_input+0x288>)
 800703a:	f006 fd39 	bl	800dab0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800703e:	2114      	movs	r1, #20
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7fe f8f5 	bl	8005230 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	895a      	ldrh	r2, [r3, #10]
 800704a:	4b71      	ldr	r3, [pc, #452]	; (8007210 <tcp_input+0x29c>)
 800704c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800704e:	4b6e      	ldr	r3, [pc, #440]	; (8007208 <tcp_input+0x294>)
 8007050:	881a      	ldrh	r2, [r3, #0]
 8007052:	4b6f      	ldr	r3, [pc, #444]	; (8007210 <tcp_input+0x29c>)
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800705a:	4b6d      	ldr	r3, [pc, #436]	; (8007210 <tcp_input+0x29c>)
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7fe f8e5 	bl	8005230 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	895b      	ldrh	r3, [r3, #10]
 800706c:	8a3a      	ldrh	r2, [r7, #16]
 800706e:	429a      	cmp	r2, r3
 8007070:	f200 835f 	bhi.w	8007732 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	4a64      	ldr	r2, [pc, #400]	; (800720c <tcp_input+0x298>)
 800707c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	8a3a      	ldrh	r2, [r7, #16]
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe f8d2 	bl	8005230 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	891a      	ldrh	r2, [r3, #8]
 8007090:	8a3b      	ldrh	r3, [r7, #16]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	b29a      	uxth	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	895b      	ldrh	r3, [r3, #10]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <tcp_input+0x13a>
 80070a2:	4b54      	ldr	r3, [pc, #336]	; (80071f4 <tcp_input+0x280>)
 80070a4:	22df      	movs	r2, #223	; 0xdf
 80070a6:	495c      	ldr	r1, [pc, #368]	; (8007218 <tcp_input+0x2a4>)
 80070a8:	4854      	ldr	r0, [pc, #336]	; (80071fc <tcp_input+0x288>)
 80070aa:	f006 fd01 	bl	800dab0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	891a      	ldrh	r2, [r3, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	891b      	ldrh	r3, [r3, #8]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d005      	beq.n	80070c8 <tcp_input+0x154>
 80070bc:	4b4d      	ldr	r3, [pc, #308]	; (80071f4 <tcp_input+0x280>)
 80070be:	22e0      	movs	r2, #224	; 0xe0
 80070c0:	4956      	ldr	r1, [pc, #344]	; (800721c <tcp_input+0x2a8>)
 80070c2:	484e      	ldr	r0, [pc, #312]	; (80071fc <tcp_input+0x288>)
 80070c4:	f006 fcf4 	bl	800dab0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80070c8:	4b4d      	ldr	r3, [pc, #308]	; (8007200 <tcp_input+0x28c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	4b4b      	ldr	r3, [pc, #300]	; (8007200 <tcp_input+0x28c>)
 80070d2:	681c      	ldr	r4, [r3, #0]
 80070d4:	4610      	mov	r0, r2
 80070d6:	f7fc fe81 	bl	8003ddc <lwip_htons>
 80070da:	4603      	mov	r3, r0
 80070dc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80070de:	4b48      	ldr	r3, [pc, #288]	; (8007200 <tcp_input+0x28c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	885b      	ldrh	r3, [r3, #2]
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	4b46      	ldr	r3, [pc, #280]	; (8007200 <tcp_input+0x28c>)
 80070e8:	681c      	ldr	r4, [r3, #0]
 80070ea:	4610      	mov	r0, r2
 80070ec:	f7fc fe76 	bl	8003ddc <lwip_htons>
 80070f0:	4603      	mov	r3, r0
 80070f2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80070f4:	4b42      	ldr	r3, [pc, #264]	; (8007200 <tcp_input+0x28c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	4b41      	ldr	r3, [pc, #260]	; (8007200 <tcp_input+0x28c>)
 80070fc:	681c      	ldr	r4, [r3, #0]
 80070fe:	4610      	mov	r0, r2
 8007100:	f7fc fe81 	bl	8003e06 <lwip_htonl>
 8007104:	4603      	mov	r3, r0
 8007106:	6063      	str	r3, [r4, #4]
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	4a45      	ldr	r2, [pc, #276]	; (8007220 <tcp_input+0x2ac>)
 800710c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800710e:	4b3c      	ldr	r3, [pc, #240]	; (8007200 <tcp_input+0x28c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	4b3a      	ldr	r3, [pc, #232]	; (8007200 <tcp_input+0x28c>)
 8007116:	681c      	ldr	r4, [r3, #0]
 8007118:	4610      	mov	r0, r2
 800711a:	f7fc fe74 	bl	8003e06 <lwip_htonl>
 800711e:	4603      	mov	r3, r0
 8007120:	60a3      	str	r3, [r4, #8]
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	4a3f      	ldr	r2, [pc, #252]	; (8007224 <tcp_input+0x2b0>)
 8007126:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007128:	4b35      	ldr	r3, [pc, #212]	; (8007200 <tcp_input+0x28c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	89db      	ldrh	r3, [r3, #14]
 800712e:	b29a      	uxth	r2, r3
 8007130:	4b33      	ldr	r3, [pc, #204]	; (8007200 <tcp_input+0x28c>)
 8007132:	681c      	ldr	r4, [r3, #0]
 8007134:	4610      	mov	r0, r2
 8007136:	f7fc fe51 	bl	8003ddc <lwip_htons>
 800713a:	4603      	mov	r3, r0
 800713c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800713e:	4b30      	ldr	r3, [pc, #192]	; (8007200 <tcp_input+0x28c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	899b      	ldrh	r3, [r3, #12]
 8007144:	b29b      	uxth	r3, r3
 8007146:	4618      	mov	r0, r3
 8007148:	f7fc fe48 	bl	8003ddc <lwip_htons>
 800714c:	4603      	mov	r3, r0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4b34      	ldr	r3, [pc, #208]	; (8007228 <tcp_input+0x2b4>)
 8007158:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	891a      	ldrh	r2, [r3, #8]
 800715e:	4b33      	ldr	r3, [pc, #204]	; (800722c <tcp_input+0x2b8>)
 8007160:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007162:	4b31      	ldr	r3, [pc, #196]	; (8007228 <tcp_input+0x2b4>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <tcp_input+0x214>
    tcplen++;
 800716e:	4b2f      	ldr	r3, [pc, #188]	; (800722c <tcp_input+0x2b8>)
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	4b2d      	ldr	r3, [pc, #180]	; (800722c <tcp_input+0x2b8>)
 8007178:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	891a      	ldrh	r2, [r3, #8]
 800717e:	4b2b      	ldr	r3, [pc, #172]	; (800722c <tcp_input+0x2b8>)
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	f200 82d7 	bhi.w	8007736 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007188:	2300      	movs	r3, #0
 800718a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800718c:	4b28      	ldr	r3, [pc, #160]	; (8007230 <tcp_input+0x2bc>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	e09d      	b.n	80072d0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	7d1b      	ldrb	r3, [r3, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d105      	bne.n	80071a8 <tcp_input+0x234>
 800719c:	4b15      	ldr	r3, [pc, #84]	; (80071f4 <tcp_input+0x280>)
 800719e:	22fb      	movs	r2, #251	; 0xfb
 80071a0:	4924      	ldr	r1, [pc, #144]	; (8007234 <tcp_input+0x2c0>)
 80071a2:	4816      	ldr	r0, [pc, #88]	; (80071fc <tcp_input+0x288>)
 80071a4:	f006 fc84 	bl	800dab0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	7d1b      	ldrb	r3, [r3, #20]
 80071ac:	2b0a      	cmp	r3, #10
 80071ae:	d105      	bne.n	80071bc <tcp_input+0x248>
 80071b0:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <tcp_input+0x280>)
 80071b2:	22fc      	movs	r2, #252	; 0xfc
 80071b4:	4920      	ldr	r1, [pc, #128]	; (8007238 <tcp_input+0x2c4>)
 80071b6:	4811      	ldr	r0, [pc, #68]	; (80071fc <tcp_input+0x288>)
 80071b8:	f006 fc7a 	bl	800dab0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	7d1b      	ldrb	r3, [r3, #20]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <tcp_input+0x25c>
 80071c4:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <tcp_input+0x280>)
 80071c6:	22fd      	movs	r2, #253	; 0xfd
 80071c8:	491c      	ldr	r1, [pc, #112]	; (800723c <tcp_input+0x2c8>)
 80071ca:	480c      	ldr	r0, [pc, #48]	; (80071fc <tcp_input+0x288>)
 80071cc:	f006 fc70 	bl	800dab0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	7a1b      	ldrb	r3, [r3, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d033      	beq.n	8007240 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	7a1a      	ldrb	r2, [r3, #8]
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <tcp_input+0x290>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071e4:	3301      	adds	r3, #1
 80071e6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d029      	beq.n	8007240 <tcp_input+0x2cc>
      prev = pcb;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	61bb      	str	r3, [r7, #24]
      continue;
 80071f0:	e06b      	b.n	80072ca <tcp_input+0x356>
 80071f2:	bf00      	nop
 80071f4:	0800fb3c 	.word	0x0800fb3c
 80071f8:	0800fb70 	.word	0x0800fb70
 80071fc:	0800fb88 	.word	0x0800fb88
 8007200:	200000dc 	.word	0x200000dc
 8007204:	20003400 	.word	0x20003400
 8007208:	200000e0 	.word	0x200000e0
 800720c:	200000e4 	.word	0x200000e4
 8007210:	200000e2 	.word	0x200000e2
 8007214:	0800fbb0 	.word	0x0800fbb0
 8007218:	0800fbc0 	.word	0x0800fbc0
 800721c:	0800fbcc 	.word	0x0800fbcc
 8007220:	200000ec 	.word	0x200000ec
 8007224:	200000f0 	.word	0x200000f0
 8007228:	200000f8 	.word	0x200000f8
 800722c:	200000f6 	.word	0x200000f6
 8007230:	20006504 	.word	0x20006504
 8007234:	0800fbec 	.word	0x0800fbec
 8007238:	0800fc14 	.word	0x0800fc14
 800723c:	0800fc40 	.word	0x0800fc40
    }

    if (pcb->remote_port == tcphdr->src &&
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	8b1a      	ldrh	r2, [r3, #24]
 8007244:	4b94      	ldr	r3, [pc, #592]	; (8007498 <tcp_input+0x524>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29b      	uxth	r3, r3
 800724c:	429a      	cmp	r2, r3
 800724e:	d13a      	bne.n	80072c6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	8ada      	ldrh	r2, [r3, #22]
 8007254:	4b90      	ldr	r3, [pc, #576]	; (8007498 <tcp_input+0x524>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800725c:	429a      	cmp	r2, r3
 800725e:	d132      	bne.n	80072c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	4b8d      	ldr	r3, [pc, #564]	; (800749c <tcp_input+0x528>)
 8007266:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007268:	429a      	cmp	r2, r3
 800726a:	d12c      	bne.n	80072c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	4b8a      	ldr	r3, [pc, #552]	; (800749c <tcp_input+0x528>)
 8007272:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007274:	429a      	cmp	r2, r3
 8007276:	d126      	bne.n	80072c6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	69fa      	ldr	r2, [r7, #28]
 800727e:	429a      	cmp	r2, r3
 8007280:	d106      	bne.n	8007290 <tcp_input+0x31c>
 8007282:	4b87      	ldr	r3, [pc, #540]	; (80074a0 <tcp_input+0x52c>)
 8007284:	f240 120d 	movw	r2, #269	; 0x10d
 8007288:	4986      	ldr	r1, [pc, #536]	; (80074a4 <tcp_input+0x530>)
 800728a:	4887      	ldr	r0, [pc, #540]	; (80074a8 <tcp_input+0x534>)
 800728c:	f006 fc10 	bl	800dab0 <iprintf>
      if (prev != NULL) {
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <tcp_input+0x338>
        prev->next = pcb->next;
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800729e:	4b83      	ldr	r3, [pc, #524]	; (80074ac <tcp_input+0x538>)
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80072a6:	4a81      	ldr	r2, [pc, #516]	; (80074ac <tcp_input+0x538>)
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d111      	bne.n	80072da <tcp_input+0x366>
 80072b6:	4b7a      	ldr	r3, [pc, #488]	; (80074a0 <tcp_input+0x52c>)
 80072b8:	f240 1215 	movw	r2, #277	; 0x115
 80072bc:	497c      	ldr	r1, [pc, #496]	; (80074b0 <tcp_input+0x53c>)
 80072be:	487a      	ldr	r0, [pc, #488]	; (80074a8 <tcp_input+0x534>)
 80072c0:	f006 fbf6 	bl	800dab0 <iprintf>
      break;
 80072c4:	e009      	b.n	80072da <tcp_input+0x366>
    }
    prev = pcb;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f47f af5e 	bne.w	8007194 <tcp_input+0x220>
 80072d8:	e000      	b.n	80072dc <tcp_input+0x368>
      break;
 80072da:	bf00      	nop
  }

  if (pcb == NULL) {
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 8095 	bne.w	800740e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80072e4:	4b73      	ldr	r3, [pc, #460]	; (80074b4 <tcp_input+0x540>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	e03f      	b.n	800736c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	7d1b      	ldrb	r3, [r3, #20]
 80072f0:	2b0a      	cmp	r3, #10
 80072f2:	d006      	beq.n	8007302 <tcp_input+0x38e>
 80072f4:	4b6a      	ldr	r3, [pc, #424]	; (80074a0 <tcp_input+0x52c>)
 80072f6:	f240 121f 	movw	r2, #287	; 0x11f
 80072fa:	496f      	ldr	r1, [pc, #444]	; (80074b8 <tcp_input+0x544>)
 80072fc:	486a      	ldr	r0, [pc, #424]	; (80074a8 <tcp_input+0x534>)
 80072fe:	f006 fbd7 	bl	800dab0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	7a1b      	ldrb	r3, [r3, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d009      	beq.n	800731e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	7a1a      	ldrb	r2, [r3, #8]
 800730e:	4b63      	ldr	r3, [pc, #396]	; (800749c <tcp_input+0x528>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007316:	3301      	adds	r3, #1
 8007318:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800731a:	429a      	cmp	r2, r3
 800731c:	d122      	bne.n	8007364 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	8b1a      	ldrh	r2, [r3, #24]
 8007322:	4b5d      	ldr	r3, [pc, #372]	; (8007498 <tcp_input+0x524>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	429a      	cmp	r2, r3
 800732c:	d11b      	bne.n	8007366 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	8ada      	ldrh	r2, [r3, #22]
 8007332:	4b59      	ldr	r3, [pc, #356]	; (8007498 <tcp_input+0x524>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	885b      	ldrh	r3, [r3, #2]
 8007338:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800733a:	429a      	cmp	r2, r3
 800733c:	d113      	bne.n	8007366 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	4b56      	ldr	r3, [pc, #344]	; (800749c <tcp_input+0x528>)
 8007344:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007346:	429a      	cmp	r2, r3
 8007348:	d10d      	bne.n	8007366 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b53      	ldr	r3, [pc, #332]	; (800749c <tcp_input+0x528>)
 8007350:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007352:	429a      	cmp	r2, r3
 8007354:	d107      	bne.n	8007366 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007356:	69f8      	ldr	r0, [r7, #28]
 8007358:	f000 fb52 	bl	8007a00 <tcp_timewait_input>
        }
        pbuf_free(p);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7fd ffed 	bl	800533c <pbuf_free>
        return;
 8007362:	e1ee      	b.n	8007742 <tcp_input+0x7ce>
        continue;
 8007364:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1bc      	bne.n	80072ec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007376:	4b51      	ldr	r3, [pc, #324]	; (80074bc <tcp_input+0x548>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	e02a      	b.n	80073d4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	7a1b      	ldrb	r3, [r3, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00c      	beq.n	80073a0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	7a1a      	ldrb	r2, [r3, #8]
 800738a:	4b44      	ldr	r3, [pc, #272]	; (800749c <tcp_input+0x528>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007392:	3301      	adds	r3, #1
 8007394:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007396:	429a      	cmp	r2, r3
 8007398:	d002      	beq.n	80073a0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	61bb      	str	r3, [r7, #24]
        continue;
 800739e:	e016      	b.n	80073ce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	8ada      	ldrh	r2, [r3, #22]
 80073a4:	4b3c      	ldr	r3, [pc, #240]	; (8007498 <tcp_input+0x524>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	885b      	ldrh	r3, [r3, #2]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d10c      	bne.n	80073ca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b39      	ldr	r3, [pc, #228]	; (800749c <tcp_input+0x528>)
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d00f      	beq.n	80073dc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00d      	beq.n	80073de <tcp_input+0x46a>
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1d1      	bne.n	800737e <tcp_input+0x40a>
 80073da:	e000      	b.n	80073de <tcp_input+0x46a>
            break;
 80073dc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d014      	beq.n	800740e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80073f2:	4b32      	ldr	r3, [pc, #200]	; (80074bc <tcp_input+0x548>)
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80073fa:	4a30      	ldr	r2, [pc, #192]	; (80074bc <tcp_input+0x548>)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007400:	6978      	ldr	r0, [r7, #20]
 8007402:	f000 f9ff 	bl	8007804 <tcp_listen_input>
      }
      pbuf_free(p);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fd ff98 	bl	800533c <pbuf_free>
      return;
 800740c:	e199      	b.n	8007742 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8160 	beq.w	80076d6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007416:	4b2a      	ldr	r3, [pc, #168]	; (80074c0 <tcp_input+0x54c>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	891a      	ldrh	r2, [r3, #8]
 8007420:	4b27      	ldr	r3, [pc, #156]	; (80074c0 <tcp_input+0x54c>)
 8007422:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007424:	4a26      	ldr	r2, [pc, #152]	; (80074c0 <tcp_input+0x54c>)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800742a:	4b1b      	ldr	r3, [pc, #108]	; (8007498 <tcp_input+0x524>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a24      	ldr	r2, [pc, #144]	; (80074c0 <tcp_input+0x54c>)
 8007430:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <tcp_input+0x550>)
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007438:	4b23      	ldr	r3, [pc, #140]	; (80074c8 <tcp_input+0x554>)
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800743e:	4b23      	ldr	r3, [pc, #140]	; (80074cc <tcp_input+0x558>)
 8007440:	2200      	movs	r2, #0
 8007442:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007444:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <tcp_input+0x55c>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d006      	beq.n	800745e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	7b5b      	ldrb	r3, [r3, #13]
 8007454:	f043 0301 	orr.w	r3, r3, #1
 8007458:	b2da      	uxtb	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007462:	2b00      	cmp	r3, #0
 8007464:	d038      	beq.n	80074d8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007466:	69f8      	ldr	r0, [r7, #28]
 8007468:	f7ff f940 	bl	80066ec <tcp_process_refused_data>
 800746c:	4603      	mov	r3, r0
 800746e:	f113 0f0d 	cmn.w	r3, #13
 8007472:	d007      	beq.n	8007484 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007478:	2b00      	cmp	r3, #0
 800747a:	d02d      	beq.n	80074d8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800747c:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <tcp_input+0x560>)
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d029      	beq.n	80074d8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007488:	2b00      	cmp	r3, #0
 800748a:	f040 8104 	bne.w	8007696 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800748e:	69f8      	ldr	r0, [r7, #28]
 8007490:	f003 f9ca 	bl	800a828 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007494:	e0ff      	b.n	8007696 <tcp_input+0x722>
 8007496:	bf00      	nop
 8007498:	200000dc 	.word	0x200000dc
 800749c:	20003400 	.word	0x20003400
 80074a0:	0800fb3c 	.word	0x0800fb3c
 80074a4:	0800fc68 	.word	0x0800fc68
 80074a8:	0800fb88 	.word	0x0800fb88
 80074ac:	20006504 	.word	0x20006504
 80074b0:	0800fc94 	.word	0x0800fc94
 80074b4:	20006514 	.word	0x20006514
 80074b8:	0800fcc0 	.word	0x0800fcc0
 80074bc:	2000650c 	.word	0x2000650c
 80074c0:	200000cc 	.word	0x200000cc
 80074c4:	200000fc 	.word	0x200000fc
 80074c8:	200000f9 	.word	0x200000f9
 80074cc:	200000f4 	.word	0x200000f4
 80074d0:	200000f8 	.word	0x200000f8
 80074d4:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 80074d8:	4a9b      	ldr	r2, [pc, #620]	; (8007748 <tcp_input+0x7d4>)
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80074de:	69f8      	ldr	r0, [r7, #28]
 80074e0:	f000 fb0a 	bl	8007af8 <tcp_process>
 80074e4:	4603      	mov	r3, r0
 80074e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80074e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80074ec:	f113 0f0d 	cmn.w	r3, #13
 80074f0:	f000 80d3 	beq.w	800769a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80074f4:	4b95      	ldr	r3, [pc, #596]	; (800774c <tcp_input+0x7d8>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d015      	beq.n	800752c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007506:	2b00      	cmp	r3, #0
 8007508:	d008      	beq.n	800751c <tcp_input+0x5a8>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	6912      	ldr	r2, [r2, #16]
 8007514:	f06f 010d 	mvn.w	r1, #13
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800751c:	69f9      	ldr	r1, [r7, #28]
 800751e:	488c      	ldr	r0, [pc, #560]	; (8007750 <tcp_input+0x7dc>)
 8007520:	f7ff fbb0 	bl	8006c84 <tcp_pcb_remove>
        tcp_free(pcb);
 8007524:	69f8      	ldr	r0, [r7, #28]
 8007526:	f7fe f9a9 	bl	800587c <tcp_free>
 800752a:	e0c1      	b.n	80076b0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007530:	4b88      	ldr	r3, [pc, #544]	; (8007754 <tcp_input+0x7e0>)
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01d      	beq.n	8007574 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007538:	4b86      	ldr	r3, [pc, #536]	; (8007754 <tcp_input+0x7e0>)
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <tcp_input+0x5ea>
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	6910      	ldr	r0, [r2, #16]
 8007552:	89fa      	ldrh	r2, [r7, #14]
 8007554:	69f9      	ldr	r1, [r7, #28]
 8007556:	4798      	blx	r3
 8007558:	4603      	mov	r3, r0
 800755a:	74fb      	strb	r3, [r7, #19]
 800755c:	e001      	b.n	8007562 <tcp_input+0x5ee>
 800755e:	2300      	movs	r3, #0
 8007560:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007562:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007566:	f113 0f0d 	cmn.w	r3, #13
 800756a:	f000 8098 	beq.w	800769e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800756e:	4b79      	ldr	r3, [pc, #484]	; (8007754 <tcp_input+0x7e0>)
 8007570:	2200      	movs	r2, #0
 8007572:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007574:	69f8      	ldr	r0, [r7, #28]
 8007576:	f000 f905 	bl	8007784 <tcp_input_delayed_close>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	f040 8090 	bne.w	80076a2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007582:	4b75      	ldr	r3, [pc, #468]	; (8007758 <tcp_input+0x7e4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d041      	beq.n	800760e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800758e:	2b00      	cmp	r3, #0
 8007590:	d006      	beq.n	80075a0 <tcp_input+0x62c>
 8007592:	4b72      	ldr	r3, [pc, #456]	; (800775c <tcp_input+0x7e8>)
 8007594:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007598:	4971      	ldr	r1, [pc, #452]	; (8007760 <tcp_input+0x7ec>)
 800759a:	4872      	ldr	r0, [pc, #456]	; (8007764 <tcp_input+0x7f0>)
 800759c:	f006 fa88 	bl	800dab0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	8b5b      	ldrh	r3, [r3, #26]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80075ac:	4b6a      	ldr	r3, [pc, #424]	; (8007758 <tcp_input+0x7e4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fd fec3 	bl	800533c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80075b6:	69f8      	ldr	r0, [r7, #28]
 80075b8:	f7fe fc40 	bl	8005e3c <tcp_abort>
            goto aborted;
 80075bc:	e078      	b.n	80076b0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00c      	beq.n	80075e2 <tcp_input+0x66e>
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	6918      	ldr	r0, [r3, #16]
 80075d2:	4b61      	ldr	r3, [pc, #388]	; (8007758 <tcp_input+0x7e4>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	2300      	movs	r3, #0
 80075d8:	69f9      	ldr	r1, [r7, #28]
 80075da:	47a0      	blx	r4
 80075dc:	4603      	mov	r3, r0
 80075de:	74fb      	strb	r3, [r7, #19]
 80075e0:	e008      	b.n	80075f4 <tcp_input+0x680>
 80075e2:	4b5d      	ldr	r3, [pc, #372]	; (8007758 <tcp_input+0x7e4>)
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	2300      	movs	r3, #0
 80075e8:	69f9      	ldr	r1, [r7, #28]
 80075ea:	2000      	movs	r0, #0
 80075ec:	f7ff f952 	bl	8006894 <tcp_recv_null>
 80075f0:	4603      	mov	r3, r0
 80075f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80075f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80075f8:	f113 0f0d 	cmn.w	r3, #13
 80075fc:	d053      	beq.n	80076a6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80075fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007606:	4b54      	ldr	r3, [pc, #336]	; (8007758 <tcp_input+0x7e4>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800760e:	4b4f      	ldr	r3, [pc, #316]	; (800774c <tcp_input+0x7d8>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d030      	beq.n	800767c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007626:	7b5a      	ldrb	r2, [r3, #13]
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800762c:	f042 0220 	orr.w	r2, r2, #32
 8007630:	b2d2      	uxtb	r2, r2
 8007632:	735a      	strb	r2, [r3, #13]
 8007634:	e022      	b.n	800767c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800763e:	d005      	beq.n	800764c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007644:	3301      	adds	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <tcp_input+0x6fa>
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	6918      	ldr	r0, [r3, #16]
 8007660:	2300      	movs	r3, #0
 8007662:	2200      	movs	r2, #0
 8007664:	69f9      	ldr	r1, [r7, #28]
 8007666:	47a0      	blx	r4
 8007668:	4603      	mov	r3, r0
 800766a:	74fb      	strb	r3, [r7, #19]
 800766c:	e001      	b.n	8007672 <tcp_input+0x6fe>
 800766e:	2300      	movs	r3, #0
 8007670:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007672:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007676:	f113 0f0d 	cmn.w	r3, #13
 800767a:	d016      	beq.n	80076aa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800767c:	4b32      	ldr	r3, [pc, #200]	; (8007748 <tcp_input+0x7d4>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007682:	69f8      	ldr	r0, [r7, #28]
 8007684:	f000 f87e 	bl	8007784 <tcp_input_delayed_close>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10f      	bne.n	80076ae <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800768e:	69f8      	ldr	r0, [r7, #28]
 8007690:	f002 fab6 	bl	8009c00 <tcp_output>
 8007694:	e00c      	b.n	80076b0 <tcp_input+0x73c>
        goto aborted;
 8007696:	bf00      	nop
 8007698:	e00a      	b.n	80076b0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800769a:	bf00      	nop
 800769c:	e008      	b.n	80076b0 <tcp_input+0x73c>
              goto aborted;
 800769e:	bf00      	nop
 80076a0:	e006      	b.n	80076b0 <tcp_input+0x73c>
          goto aborted;
 80076a2:	bf00      	nop
 80076a4:	e004      	b.n	80076b0 <tcp_input+0x73c>
            goto aborted;
 80076a6:	bf00      	nop
 80076a8:	e002      	b.n	80076b0 <tcp_input+0x73c>
              goto aborted;
 80076aa:	bf00      	nop
 80076ac:	e000      	b.n	80076b0 <tcp_input+0x73c>
          goto aborted;
 80076ae:	bf00      	nop
    tcp_input_pcb = NULL;
 80076b0:	4b25      	ldr	r3, [pc, #148]	; (8007748 <tcp_input+0x7d4>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80076b6:	4b28      	ldr	r3, [pc, #160]	; (8007758 <tcp_input+0x7e4>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80076bc:	4b2a      	ldr	r3, [pc, #168]	; (8007768 <tcp_input+0x7f4>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d03d      	beq.n	8007740 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80076c4:	4b28      	ldr	r3, [pc, #160]	; (8007768 <tcp_input+0x7f4>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fd fe37 	bl	800533c <pbuf_free>
      inseg.p = NULL;
 80076ce:	4b26      	ldr	r3, [pc, #152]	; (8007768 <tcp_input+0x7f4>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80076d4:	e034      	b.n	8007740 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80076d6:	4b25      	ldr	r3, [pc, #148]	; (800776c <tcp_input+0x7f8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	899b      	ldrh	r3, [r3, #12]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fc fb7c 	bl	8003ddc <lwip_htons>
 80076e4:	4603      	mov	r3, r0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d118      	bne.n	8007722 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80076f0:	4b1f      	ldr	r3, [pc, #124]	; (8007770 <tcp_input+0x7fc>)
 80076f2:	6819      	ldr	r1, [r3, #0]
 80076f4:	4b1f      	ldr	r3, [pc, #124]	; (8007774 <tcp_input+0x800>)
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	4b1f      	ldr	r3, [pc, #124]	; (8007778 <tcp_input+0x804>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007700:	4b1a      	ldr	r3, [pc, #104]	; (800776c <tcp_input+0x7f8>)
 8007702:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007704:	885b      	ldrh	r3, [r3, #2]
 8007706:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007708:	4a18      	ldr	r2, [pc, #96]	; (800776c <tcp_input+0x7f8>)
 800770a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800770c:	8812      	ldrh	r2, [r2, #0]
 800770e:	b292      	uxth	r2, r2
 8007710:	9202      	str	r2, [sp, #8]
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	4b19      	ldr	r3, [pc, #100]	; (800777c <tcp_input+0x808>)
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	4b19      	ldr	r3, [pc, #100]	; (8007780 <tcp_input+0x80c>)
 800771a:	4602      	mov	r2, r0
 800771c:	2000      	movs	r0, #0
 800771e:	f003 f833 	bl	800a788 <tcp_rst>
    pbuf_free(p);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7fd fe0a 	bl	800533c <pbuf_free>
  return;
 8007728:	e00a      	b.n	8007740 <tcp_input+0x7cc>
    goto dropped;
 800772a:	bf00      	nop
 800772c:	e004      	b.n	8007738 <tcp_input+0x7c4>
dropped:
 800772e:	bf00      	nop
 8007730:	e002      	b.n	8007738 <tcp_input+0x7c4>
      goto dropped;
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <tcp_input+0x7c4>
      goto dropped;
 8007736:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7fd fdff 	bl	800533c <pbuf_free>
 800773e:	e000      	b.n	8007742 <tcp_input+0x7ce>
  return;
 8007740:	bf00      	nop
}
 8007742:	3724      	adds	r7, #36	; 0x24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd90      	pop	{r4, r7, pc}
 8007748:	20006518 	.word	0x20006518
 800774c:	200000f9 	.word	0x200000f9
 8007750:	20006504 	.word	0x20006504
 8007754:	200000f4 	.word	0x200000f4
 8007758:	200000fc 	.word	0x200000fc
 800775c:	0800fb3c 	.word	0x0800fb3c
 8007760:	0800fcf0 	.word	0x0800fcf0
 8007764:	0800fb88 	.word	0x0800fb88
 8007768:	200000cc 	.word	0x200000cc
 800776c:	200000dc 	.word	0x200000dc
 8007770:	200000f0 	.word	0x200000f0
 8007774:	200000f6 	.word	0x200000f6
 8007778:	200000ec 	.word	0x200000ec
 800777c:	20003410 	.word	0x20003410
 8007780:	20003414 	.word	0x20003414

08007784 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <tcp_input_delayed_close+0x1c>
 8007792:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <tcp_input_delayed_close+0x6c>)
 8007794:	f240 225a 	movw	r2, #602	; 0x25a
 8007798:	4916      	ldr	r1, [pc, #88]	; (80077f4 <tcp_input_delayed_close+0x70>)
 800779a:	4817      	ldr	r0, [pc, #92]	; (80077f8 <tcp_input_delayed_close+0x74>)
 800779c:	f006 f988 	bl	800dab0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80077a0:	4b16      	ldr	r3, [pc, #88]	; (80077fc <tcp_input_delayed_close+0x78>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	f003 0310 	and.w	r3, r3, #16
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01c      	beq.n	80077e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8b5b      	ldrh	r3, [r3, #26]
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10d      	bne.n	80077d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d008      	beq.n	80077d4 <tcp_input_delayed_close+0x50>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6912      	ldr	r2, [r2, #16]
 80077cc:	f06f 010e 	mvn.w	r1, #14
 80077d0:	4610      	mov	r0, r2
 80077d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	480a      	ldr	r0, [pc, #40]	; (8007800 <tcp_input_delayed_close+0x7c>)
 80077d8:	f7ff fa54 	bl	8006c84 <tcp_pcb_remove>
    tcp_free(pcb);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7fe f84d 	bl	800587c <tcp_free>
    return 1;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	0800fb3c 	.word	0x0800fb3c
 80077f4:	0800fd0c 	.word	0x0800fd0c
 80077f8:	0800fb88 	.word	0x0800fb88
 80077fc:	200000f9 	.word	0x200000f9
 8007800:	20006504 	.word	0x20006504

08007804 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007804:	b590      	push	{r4, r7, lr}
 8007806:	b08b      	sub	sp, #44	; 0x2c
 8007808:	af04      	add	r7, sp, #16
 800780a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800780c:	4b6f      	ldr	r3, [pc, #444]	; (80079cc <tcp_listen_input+0x1c8>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	f040 80d3 	bne.w	80079c0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <tcp_listen_input+0x2a>
 8007820:	4b6b      	ldr	r3, [pc, #428]	; (80079d0 <tcp_listen_input+0x1cc>)
 8007822:	f240 2281 	movw	r2, #641	; 0x281
 8007826:	496b      	ldr	r1, [pc, #428]	; (80079d4 <tcp_listen_input+0x1d0>)
 8007828:	486b      	ldr	r0, [pc, #428]	; (80079d8 <tcp_listen_input+0x1d4>)
 800782a:	f006 f941 	bl	800dab0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800782e:	4b67      	ldr	r3, [pc, #412]	; (80079cc <tcp_listen_input+0x1c8>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	f003 0310 	and.w	r3, r3, #16
 8007836:	2b00      	cmp	r3, #0
 8007838:	d019      	beq.n	800786e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800783a:	4b68      	ldr	r3, [pc, #416]	; (80079dc <tcp_listen_input+0x1d8>)
 800783c:	6819      	ldr	r1, [r3, #0]
 800783e:	4b68      	ldr	r3, [pc, #416]	; (80079e0 <tcp_listen_input+0x1dc>)
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	4b67      	ldr	r3, [pc, #412]	; (80079e4 <tcp_listen_input+0x1e0>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800784a:	4b67      	ldr	r3, [pc, #412]	; (80079e8 <tcp_listen_input+0x1e4>)
 800784c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800784e:	885b      	ldrh	r3, [r3, #2]
 8007850:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007852:	4a65      	ldr	r2, [pc, #404]	; (80079e8 <tcp_listen_input+0x1e4>)
 8007854:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007856:	8812      	ldrh	r2, [r2, #0]
 8007858:	b292      	uxth	r2, r2
 800785a:	9202      	str	r2, [sp, #8]
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	4b63      	ldr	r3, [pc, #396]	; (80079ec <tcp_listen_input+0x1e8>)
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	4b63      	ldr	r3, [pc, #396]	; (80079f0 <tcp_listen_input+0x1ec>)
 8007864:	4602      	mov	r2, r0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f002 ff8e 	bl	800a788 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800786c:	e0aa      	b.n	80079c4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800786e:	4b57      	ldr	r3, [pc, #348]	; (80079cc <tcp_listen_input+0x1c8>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 80a4 	beq.w	80079c4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	7d5b      	ldrb	r3, [r3, #21]
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff f92b 	bl	8006adc <tcp_alloc>
 8007886:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d111      	bne.n	80078b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <tcp_listen_input+0xa8>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6910      	ldr	r0, [r2, #16]
 800789e:	f04f 32ff 	mov.w	r2, #4294967295
 80078a2:	2100      	movs	r1, #0
 80078a4:	4798      	blx	r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	73bb      	strb	r3, [r7, #14]
      return;
 80078aa:	e08c      	b.n	80079c6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80078ac:	23f0      	movs	r3, #240	; 0xf0
 80078ae:	73bb      	strb	r3, [r7, #14]
      return;
 80078b0:	e089      	b.n	80079c6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80078b2:	4b50      	ldr	r3, [pc, #320]	; (80079f4 <tcp_listen_input+0x1f0>)
 80078b4:	695a      	ldr	r2, [r3, #20]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80078ba:	4b4e      	ldr	r3, [pc, #312]	; (80079f4 <tcp_listen_input+0x1f0>)
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8ada      	ldrh	r2, [r3, #22]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80078ca:	4b47      	ldr	r3, [pc, #284]	; (80079e8 <tcp_listen_input+0x1e4>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2203      	movs	r2, #3
 80078da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80078dc:	4b41      	ldr	r3, [pc, #260]	; (80079e4 <tcp_listen_input+0x1e0>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80078ee:	6978      	ldr	r0, [r7, #20]
 80078f0:	f7ff fa5c 	bl	8006dac <tcp_next_iss>
 80078f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800790e:	4b35      	ldr	r3, [pc, #212]	; (80079e4 <tcp_listen_input+0x1e0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	1e5a      	subs	r2, r3, #1
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7a5b      	ldrb	r3, [r3, #9]
 800792a:	f003 030c 	and.w	r3, r3, #12
 800792e:	b2da      	uxtb	r2, r3
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7a1a      	ldrb	r2, [r3, #8]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800793c:	4b2e      	ldr	r3, [pc, #184]	; (80079f8 <tcp_listen_input+0x1f4>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	60da      	str	r2, [r3, #12]
 8007944:	4a2c      	ldr	r2, [pc, #176]	; (80079f8 <tcp_listen_input+0x1f4>)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	f003 f8dd 	bl	800ab08 <tcp_timer_needed>
 800794e:	4b2b      	ldr	r3, [pc, #172]	; (80079fc <tcp_listen_input+0x1f8>)
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	f001 fd8f 	bl	8009478 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800795a:	4b23      	ldr	r3, [pc, #140]	; (80079e8 <tcp_listen_input+0x1e4>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	89db      	ldrh	r3, [r3, #14]
 8007960:	b29a      	uxth	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	3304      	adds	r3, #4
 800797c:	4618      	mov	r0, r3
 800797e:	f004 fc9f 	bl	800c2c0 <ip4_route>
 8007982:	4601      	mov	r1, r0
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	3304      	adds	r3, #4
 8007988:	461a      	mov	r2, r3
 800798a:	4620      	mov	r0, r4
 800798c:	f7ff fa34 	bl	8006df8 <tcp_eff_send_mss_netif>
 8007990:	4603      	mov	r3, r0
 8007992:	461a      	mov	r2, r3
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007998:	2112      	movs	r1, #18
 800799a:	6978      	ldr	r0, [r7, #20]
 800799c:	f002 f842 	bl	8009a24 <tcp_enqueue_flags>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80079a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80079ac:	2100      	movs	r1, #0
 80079ae:	6978      	ldr	r0, [r7, #20]
 80079b0:	f7fe f986 	bl	8005cc0 <tcp_abandon>
      return;
 80079b4:	e007      	b.n	80079c6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80079b6:	6978      	ldr	r0, [r7, #20]
 80079b8:	f002 f922 	bl	8009c00 <tcp_output>
  return;
 80079bc:	bf00      	nop
 80079be:	e001      	b.n	80079c4 <tcp_listen_input+0x1c0>
    return;
 80079c0:	bf00      	nop
 80079c2:	e000      	b.n	80079c6 <tcp_listen_input+0x1c2>
  return;
 80079c4:	bf00      	nop
}
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd90      	pop	{r4, r7, pc}
 80079cc:	200000f8 	.word	0x200000f8
 80079d0:	0800fb3c 	.word	0x0800fb3c
 80079d4:	0800fd34 	.word	0x0800fd34
 80079d8:	0800fb88 	.word	0x0800fb88
 80079dc:	200000f0 	.word	0x200000f0
 80079e0:	200000f6 	.word	0x200000f6
 80079e4:	200000ec 	.word	0x200000ec
 80079e8:	200000dc 	.word	0x200000dc
 80079ec:	20003410 	.word	0x20003410
 80079f0:	20003414 	.word	0x20003414
 80079f4:	20003400 	.word	0x20003400
 80079f8:	20006504 	.word	0x20006504
 80079fc:	20006500 	.word	0x20006500

08007a00 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af04      	add	r7, sp, #16
 8007a06:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007a08:	4b30      	ldr	r3, [pc, #192]	; (8007acc <tcp_timewait_input+0xcc>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d154      	bne.n	8007abe <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <tcp_timewait_input+0x28>
 8007a1a:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <tcp_timewait_input+0xd0>)
 8007a1c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007a20:	492c      	ldr	r1, [pc, #176]	; (8007ad4 <tcp_timewait_input+0xd4>)
 8007a22:	482d      	ldr	r0, [pc, #180]	; (8007ad8 <tcp_timewait_input+0xd8>)
 8007a24:	f006 f844 	bl	800dab0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007a28:	4b28      	ldr	r3, [pc, #160]	; (8007acc <tcp_timewait_input+0xcc>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d02a      	beq.n	8007a8a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007a34:	4b29      	ldr	r3, [pc, #164]	; (8007adc <tcp_timewait_input+0xdc>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	db2d      	blt.n	8007a9e <tcp_timewait_input+0x9e>
 8007a42:	4b26      	ldr	r3, [pc, #152]	; (8007adc <tcp_timewait_input+0xdc>)
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007a4e:	440b      	add	r3, r1
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dc23      	bgt.n	8007a9e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a56:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <tcp_timewait_input+0xe0>)
 8007a58:	6819      	ldr	r1, [r3, #0]
 8007a5a:	4b22      	ldr	r3, [pc, #136]	; (8007ae4 <tcp_timewait_input+0xe4>)
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <tcp_timewait_input+0xdc>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a66:	4b20      	ldr	r3, [pc, #128]	; (8007ae8 <tcp_timewait_input+0xe8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a6a:	885b      	ldrh	r3, [r3, #2]
 8007a6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <tcp_timewait_input+0xe8>)
 8007a70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a72:	8812      	ldrh	r2, [r2, #0]
 8007a74:	b292      	uxth	r2, r2
 8007a76:	9202      	str	r2, [sp, #8]
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	4b1c      	ldr	r3, [pc, #112]	; (8007aec <tcp_timewait_input+0xec>)
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	4b1c      	ldr	r3, [pc, #112]	; (8007af0 <tcp_timewait_input+0xf0>)
 8007a80:	4602      	mov	r2, r0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f002 fe80 	bl	800a788 <tcp_rst>
      return;
 8007a88:	e01c      	b.n	8007ac4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8007a8a:	4b10      	ldr	r3, [pc, #64]	; (8007acc <tcp_timewait_input+0xcc>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007a96:	4b17      	ldr	r3, [pc, #92]	; (8007af4 <tcp_timewait_input+0xf4>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007a9e:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <tcp_timewait_input+0xe4>)
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00d      	beq.n	8007ac2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	8b5b      	ldrh	r3, [r3, #26]
 8007aaa:	f043 0302 	orr.w	r3, r3, #2
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f002 f8a3 	bl	8009c00 <tcp_output>
  }
  return;
 8007aba:	bf00      	nop
 8007abc:	e001      	b.n	8007ac2 <tcp_timewait_input+0xc2>
    return;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <tcp_timewait_input+0xc4>
  return;
 8007ac2:	bf00      	nop
}
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	200000f8 	.word	0x200000f8
 8007ad0:	0800fb3c 	.word	0x0800fb3c
 8007ad4:	0800fd54 	.word	0x0800fd54
 8007ad8:	0800fb88 	.word	0x0800fb88
 8007adc:	200000ec 	.word	0x200000ec
 8007ae0:	200000f0 	.word	0x200000f0
 8007ae4:	200000f6 	.word	0x200000f6
 8007ae8:	200000dc 	.word	0x200000dc
 8007aec:	20003410 	.word	0x20003410
 8007af0:	20003414 	.word	0x20003414
 8007af4:	20006508 	.word	0x20006508

08007af8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007af8:	b590      	push	{r4, r7, lr}
 8007afa:	b08d      	sub	sp, #52	; 0x34
 8007afc:	af04      	add	r7, sp, #16
 8007afe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <tcp_process+0x24>
 8007b0e:	4ba5      	ldr	r3, [pc, #660]	; (8007da4 <tcp_process+0x2ac>)
 8007b10:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007b14:	49a4      	ldr	r1, [pc, #656]	; (8007da8 <tcp_process+0x2b0>)
 8007b16:	48a5      	ldr	r0, [pc, #660]	; (8007dac <tcp_process+0x2b4>)
 8007b18:	f005 ffca 	bl	800dab0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007b1c:	4ba4      	ldr	r3, [pc, #656]	; (8007db0 <tcp_process+0x2b8>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d04e      	beq.n	8007bc6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7d1b      	ldrb	r3, [r3, #20]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d108      	bne.n	8007b42 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b34:	4b9f      	ldr	r3, [pc, #636]	; (8007db4 <tcp_process+0x2bc>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d123      	bne.n	8007b84 <tcp_process+0x8c>
        acceptable = 1;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	76fb      	strb	r3, [r7, #27]
 8007b40:	e020      	b.n	8007b84 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b46:	4b9c      	ldr	r3, [pc, #624]	; (8007db8 <tcp_process+0x2c0>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d102      	bne.n	8007b54 <tcp_process+0x5c>
        acceptable = 1;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	76fb      	strb	r3, [r7, #27]
 8007b52:	e017      	b.n	8007b84 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007b54:	4b98      	ldr	r3, [pc, #608]	; (8007db8 <tcp_process+0x2c0>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	db10      	blt.n	8007b84 <tcp_process+0x8c>
 8007b62:	4b95      	ldr	r3, [pc, #596]	; (8007db8 <tcp_process+0x2c0>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007b6e:	440b      	add	r3, r1
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	dc06      	bgt.n	8007b84 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8b5b      	ldrh	r3, [r3, #26]
 8007b7a:	f043 0302 	orr.w	r3, r3, #2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007b84:	7efb      	ldrb	r3, [r7, #27]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01b      	beq.n	8007bc2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	7d1b      	ldrb	r3, [r3, #20]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <tcp_process+0xa8>
 8007b92:	4b84      	ldr	r3, [pc, #528]	; (8007da4 <tcp_process+0x2ac>)
 8007b94:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007b98:	4988      	ldr	r1, [pc, #544]	; (8007dbc <tcp_process+0x2c4>)
 8007b9a:	4884      	ldr	r0, [pc, #528]	; (8007dac <tcp_process+0x2b4>)
 8007b9c:	f005 ff88 	bl	800dab0 <iprintf>
      recv_flags |= TF_RESET;
 8007ba0:	4b87      	ldr	r3, [pc, #540]	; (8007dc0 <tcp_process+0x2c8>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	f043 0308 	orr.w	r3, r3, #8
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	4b85      	ldr	r3, [pc, #532]	; (8007dc0 <tcp_process+0x2c8>)
 8007bac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8b5b      	ldrh	r3, [r3, #26]
 8007bb2:	f023 0301 	bic.w	r3, r3, #1
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007bbc:	f06f 030d 	mvn.w	r3, #13
 8007bc0:	e37a      	b.n	80082b8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e378      	b.n	80082b8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007bc6:	4b7a      	ldr	r3, [pc, #488]	; (8007db0 <tcp_process+0x2b8>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d010      	beq.n	8007bf4 <tcp_process+0xfc>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7d1b      	ldrb	r3, [r3, #20]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d00c      	beq.n	8007bf4 <tcp_process+0xfc>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	7d1b      	ldrb	r3, [r3, #20]
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d008      	beq.n	8007bf4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	8b5b      	ldrh	r3, [r3, #26]
 8007be6:	f043 0302 	orr.w	r3, r3, #2
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e361      	b.n	80082b8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	8b5b      	ldrh	r3, [r3, #26]
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007c00:	4b70      	ldr	r3, [pc, #448]	; (8007dc4 <tcp_process+0x2cc>)
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 fc2d 	bl	8009478 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7d1b      	ldrb	r3, [r3, #20]
 8007c22:	3b02      	subs	r3, #2
 8007c24:	2b07      	cmp	r3, #7
 8007c26:	f200 8337 	bhi.w	8008298 <tcp_process+0x7a0>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <tcp_process+0x138>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c51 	.word	0x08007c51
 8007c34:	08007e81 	.word	0x08007e81
 8007c38:	08007ff9 	.word	0x08007ff9
 8007c3c:	08008023 	.word	0x08008023
 8007c40:	08008147 	.word	0x08008147
 8007c44:	08007ff9 	.word	0x08007ff9
 8007c48:	080081d3 	.word	0x080081d3
 8007c4c:	08008263 	.word	0x08008263
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007c50:	4b57      	ldr	r3, [pc, #348]	; (8007db0 <tcp_process+0x2b8>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 80e4 	beq.w	8007e26 <tcp_process+0x32e>
 8007c5e:	4b54      	ldr	r3, [pc, #336]	; (8007db0 <tcp_process+0x2b8>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 80dd 	beq.w	8007e26 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	4b50      	ldr	r3, [pc, #320]	; (8007db4 <tcp_process+0x2bc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	f040 80d5 	bne.w	8007e26 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007c7c:	4b4e      	ldr	r3, [pc, #312]	; (8007db8 <tcp_process+0x2c0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007c8e:	4b49      	ldr	r3, [pc, #292]	; (8007db4 <tcp_process+0x2bc>)
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007c96:	4b4c      	ldr	r3, [pc, #304]	; (8007dc8 <tcp_process+0x2d0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	89db      	ldrh	r3, [r3, #14]
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007cb0:	4b41      	ldr	r3, [pc, #260]	; (8007db8 <tcp_process+0x2c0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	1e5a      	subs	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f004 faf9 	bl	800c2c0 <ip4_route>
 8007cce:	4601      	mov	r1, r0
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff f88e 	bl	8006df8 <tcp_eff_send_mss_netif>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ce8:	009a      	lsls	r2, r3, #2
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	f241 111c 	movw	r1, #4380	; 0x111c
 8007cf4:	428b      	cmp	r3, r1
 8007cf6:	bf38      	it	cc
 8007cf8:	460b      	movcc	r3, r1
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d204      	bcs.n	8007d08 <tcp_process+0x210>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	e00d      	b.n	8007d24 <tcp_process+0x22c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d904      	bls.n	8007d20 <tcp_process+0x228>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	e001      	b.n	8007d24 <tcp_process+0x22c>
 8007d20:	f241 131c 	movw	r3, #4380	; 0x111c
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d106      	bne.n	8007d42 <tcp_process+0x24a>
 8007d34:	4b1b      	ldr	r3, [pc, #108]	; (8007da4 <tcp_process+0x2ac>)
 8007d36:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007d3a:	4924      	ldr	r1, [pc, #144]	; (8007dcc <tcp_process+0x2d4>)
 8007d3c:	481b      	ldr	r0, [pc, #108]	; (8007dac <tcp_process+0x2b4>)
 8007d3e:	f005 feb7 	bl	800dab0 <iprintf>
        --pcb->snd_queuelen;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d111      	bne.n	8007d82 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d62:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d106      	bne.n	8007d78 <tcp_process+0x280>
 8007d6a:	4b0e      	ldr	r3, [pc, #56]	; (8007da4 <tcp_process+0x2ac>)
 8007d6c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007d70:	4917      	ldr	r1, [pc, #92]	; (8007dd0 <tcp_process+0x2d8>)
 8007d72:	480e      	ldr	r0, [pc, #56]	; (8007dac <tcp_process+0x2b4>)
 8007d74:	f005 fe9c 	bl	800dab0 <iprintf>
          pcb->unsent = rseg->next;
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007d80:	e003      	b.n	8007d8a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007d8a:	69f8      	ldr	r0, [r7, #28]
 8007d8c:	f7fe fd3e 	bl	800680c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d11d      	bne.n	8007dd4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d9e:	861a      	strh	r2, [r3, #48]	; 0x30
 8007da0:	e01f      	b.n	8007de2 <tcp_process+0x2ea>
 8007da2:	bf00      	nop
 8007da4:	0800fb3c 	.word	0x0800fb3c
 8007da8:	0800fd74 	.word	0x0800fd74
 8007dac:	0800fb88 	.word	0x0800fb88
 8007db0:	200000f8 	.word	0x200000f8
 8007db4:	200000f0 	.word	0x200000f0
 8007db8:	200000ec 	.word	0x200000ec
 8007dbc:	0800fd90 	.word	0x0800fd90
 8007dc0:	200000f9 	.word	0x200000f9
 8007dc4:	20006508 	.word	0x20006508
 8007dc8:	200000dc 	.word	0x200000dc
 8007dcc:	0800fdb0 	.word	0x0800fdb0
 8007dd0:	0800fdc8 	.word	0x0800fdc8
        } else {
          pcb->rtime = 0;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <tcp_process+0x30a>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	6910      	ldr	r0, [r2, #16]
 8007df6:	2200      	movs	r2, #0
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4798      	blx	r3
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	76bb      	strb	r3, [r7, #26]
 8007e00:	e001      	b.n	8007e06 <tcp_process+0x30e>
 8007e02:	2300      	movs	r3, #0
 8007e04:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007e06:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007e0a:	f113 0f0d 	cmn.w	r3, #13
 8007e0e:	d102      	bne.n	8007e16 <tcp_process+0x31e>
          return ERR_ABRT;
 8007e10:	f06f 030c 	mvn.w	r3, #12
 8007e14:	e250      	b.n	80082b8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8b5b      	ldrh	r3, [r3, #26]
 8007e1a:	f043 0302 	orr.w	r3, r3, #2
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007e24:	e23a      	b.n	800829c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007e26:	4b9d      	ldr	r3, [pc, #628]	; (800809c <tcp_process+0x5a4>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	f003 0310 	and.w	r3, r3, #16
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 8234 	beq.w	800829c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e34:	4b9a      	ldr	r3, [pc, #616]	; (80080a0 <tcp_process+0x5a8>)
 8007e36:	6819      	ldr	r1, [r3, #0]
 8007e38:	4b9a      	ldr	r3, [pc, #616]	; (80080a4 <tcp_process+0x5ac>)
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4b9a      	ldr	r3, [pc, #616]	; (80080a8 <tcp_process+0x5b0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e44:	4b99      	ldr	r3, [pc, #612]	; (80080ac <tcp_process+0x5b4>)
 8007e46:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e48:	885b      	ldrh	r3, [r3, #2]
 8007e4a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007e4c:	4a97      	ldr	r2, [pc, #604]	; (80080ac <tcp_process+0x5b4>)
 8007e4e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e50:	8812      	ldrh	r2, [r2, #0]
 8007e52:	b292      	uxth	r2, r2
 8007e54:	9202      	str	r2, [sp, #8]
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	4b95      	ldr	r3, [pc, #596]	; (80080b0 <tcp_process+0x5b8>)
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	4b95      	ldr	r3, [pc, #596]	; (80080b4 <tcp_process+0x5bc>)
 8007e5e:	4602      	mov	r2, r0
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f002 fc91 	bl	800a788 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e6c:	2b05      	cmp	r3, #5
 8007e6e:	f200 8215 	bhi.w	800829c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f002 fa51 	bl	800a320 <tcp_rexmit_rto>
      break;
 8007e7e:	e20d      	b.n	800829c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007e80:	4b86      	ldr	r3, [pc, #536]	; (800809c <tcp_process+0x5a4>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80a1 	beq.w	8007fd0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007e8e:	4b84      	ldr	r3, [pc, #528]	; (80080a0 <tcp_process+0x5a8>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	db7e      	blt.n	8007f9c <tcp_process+0x4a4>
 8007e9e:	4b80      	ldr	r3, [pc, #512]	; (80080a0 <tcp_process+0x5a8>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dc77      	bgt.n	8007f9c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d102      	bne.n	8007ec0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007eba:	23fa      	movs	r3, #250	; 0xfa
 8007ebc:	76bb      	strb	r3, [r7, #26]
 8007ebe:	e01d      	b.n	8007efc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <tcp_process+0x3e0>
 8007eca:	4b7b      	ldr	r3, [pc, #492]	; (80080b8 <tcp_process+0x5c0>)
 8007ecc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007ed0:	497a      	ldr	r1, [pc, #488]	; (80080bc <tcp_process+0x5c4>)
 8007ed2:	487b      	ldr	r0, [pc, #492]	; (80080c0 <tcp_process+0x5c8>)
 8007ed4:	f005 fdec 	bl	800dab0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <tcp_process+0x400>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6910      	ldr	r0, [r2, #16]
 8007eec:	2200      	movs	r2, #0
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	4798      	blx	r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	76bb      	strb	r3, [r7, #26]
 8007ef6:	e001      	b.n	8007efc <tcp_process+0x404>
 8007ef8:	23f0      	movs	r3, #240	; 0xf0
 8007efa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007efc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007f04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007f08:	f113 0f0d 	cmn.w	r3, #13
 8007f0c:	d002      	beq.n	8007f14 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7fd ff94 	bl	8005e3c <tcp_abort>
            }
            return ERR_ABRT;
 8007f14:	f06f 030c 	mvn.w	r3, #12
 8007f18:	e1ce      	b.n	80082b8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fae0 	bl	80084e0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007f20:	4b68      	ldr	r3, [pc, #416]	; (80080c4 <tcp_process+0x5cc>)
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <tcp_process+0x43c>
            recv_acked--;
 8007f28:	4b66      	ldr	r3, [pc, #408]	; (80080c4 <tcp_process+0x5cc>)
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	4b64      	ldr	r3, [pc, #400]	; (80080c4 <tcp_process+0x5cc>)
 8007f32:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f38:	009a      	lsls	r2, r3, #2
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	f241 111c 	movw	r1, #4380	; 0x111c
 8007f44:	428b      	cmp	r3, r1
 8007f46:	bf38      	it	cc
 8007f48:	460b      	movcc	r3, r1
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d204      	bcs.n	8007f58 <tcp_process+0x460>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	e00d      	b.n	8007f74 <tcp_process+0x47c>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d904      	bls.n	8007f70 <tcp_process+0x478>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	e001      	b.n	8007f74 <tcp_process+0x47c>
 8007f70:	f241 131c 	movw	r3, #4380	; 0x111c
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007f7a:	4b53      	ldr	r3, [pc, #332]	; (80080c8 <tcp_process+0x5d0>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d037      	beq.n	8007ff6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	8b5b      	ldrh	r3, [r3, #26]
 8007f8a:	f043 0302 	orr.w	r3, r3, #2
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2207      	movs	r2, #7
 8007f98:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007f9a:	e02c      	b.n	8007ff6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f9c:	4b40      	ldr	r3, [pc, #256]	; (80080a0 <tcp_process+0x5a8>)
 8007f9e:	6819      	ldr	r1, [r3, #0]
 8007fa0:	4b40      	ldr	r3, [pc, #256]	; (80080a4 <tcp_process+0x5ac>)
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4b40      	ldr	r3, [pc, #256]	; (80080a8 <tcp_process+0x5b0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fac:	4b3f      	ldr	r3, [pc, #252]	; (80080ac <tcp_process+0x5b4>)
 8007fae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fb0:	885b      	ldrh	r3, [r3, #2]
 8007fb2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fb4:	4a3d      	ldr	r2, [pc, #244]	; (80080ac <tcp_process+0x5b4>)
 8007fb6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fb8:	8812      	ldrh	r2, [r2, #0]
 8007fba:	b292      	uxth	r2, r2
 8007fbc:	9202      	str	r2, [sp, #8]
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	4b3b      	ldr	r3, [pc, #236]	; (80080b0 <tcp_process+0x5b8>)
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4b3b      	ldr	r3, [pc, #236]	; (80080b4 <tcp_process+0x5bc>)
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f002 fbdd 	bl	800a788 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007fce:	e167      	b.n	80082a0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007fd0:	4b32      	ldr	r3, [pc, #200]	; (800809c <tcp_process+0x5a4>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8161 	beq.w	80082a0 <tcp_process+0x7a8>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	1e5a      	subs	r2, r3, #1
 8007fe4:	4b30      	ldr	r3, [pc, #192]	; (80080a8 <tcp_process+0x5b0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	f040 8159 	bne.w	80082a0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f002 f9b8 	bl	800a364 <tcp_rexmit>
      break;
 8007ff4:	e154      	b.n	80082a0 <tcp_process+0x7a8>
 8007ff6:	e153      	b.n	80082a0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa71 	bl	80084e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007ffe:	4b32      	ldr	r3, [pc, #200]	; (80080c8 <tcp_process+0x5d0>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 814c 	beq.w	80082a4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	8b5b      	ldrh	r3, [r3, #26]
 8008010:	f043 0302 	orr.w	r3, r3, #2
 8008014:	b29a      	uxth	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2207      	movs	r2, #7
 800801e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008020:	e140      	b.n	80082a4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa5c 	bl	80084e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008028:	4b27      	ldr	r3, [pc, #156]	; (80080c8 <tcp_process+0x5d0>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	f003 0320 	and.w	r3, r3, #32
 8008030:	2b00      	cmp	r3, #0
 8008032:	d071      	beq.n	8008118 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008034:	4b19      	ldr	r3, [pc, #100]	; (800809c <tcp_process+0x5a4>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	2b00      	cmp	r3, #0
 800803e:	d060      	beq.n	8008102 <tcp_process+0x60a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008044:	4b16      	ldr	r3, [pc, #88]	; (80080a0 <tcp_process+0x5a8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d15a      	bne.n	8008102 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008050:	2b00      	cmp	r3, #0
 8008052:	d156      	bne.n	8008102 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	8b5b      	ldrh	r3, [r3, #26]
 8008058:	f043 0302 	orr.w	r3, r3, #2
 800805c:	b29a      	uxth	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fe fdbe 	bl	8006be4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008068:	4b18      	ldr	r3, [pc, #96]	; (80080cc <tcp_process+0x5d4>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	429a      	cmp	r2, r3
 8008070:	d105      	bne.n	800807e <tcp_process+0x586>
 8008072:	4b16      	ldr	r3, [pc, #88]	; (80080cc <tcp_process+0x5d4>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	4a14      	ldr	r2, [pc, #80]	; (80080cc <tcp_process+0x5d4>)
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	e02e      	b.n	80080dc <tcp_process+0x5e4>
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <tcp_process+0x5d4>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e027      	b.n	80080d6 <tcp_process+0x5de>
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	429a      	cmp	r2, r3
 800808e:	d11f      	bne.n	80080d0 <tcp_process+0x5d8>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68da      	ldr	r2, [r3, #12]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	60da      	str	r2, [r3, #12]
 8008098:	e020      	b.n	80080dc <tcp_process+0x5e4>
 800809a:	bf00      	nop
 800809c:	200000f8 	.word	0x200000f8
 80080a0:	200000f0 	.word	0x200000f0
 80080a4:	200000f6 	.word	0x200000f6
 80080a8:	200000ec 	.word	0x200000ec
 80080ac:	200000dc 	.word	0x200000dc
 80080b0:	20003410 	.word	0x20003410
 80080b4:	20003414 	.word	0x20003414
 80080b8:	0800fb3c 	.word	0x0800fb3c
 80080bc:	0800fddc 	.word	0x0800fddc
 80080c0:	0800fb88 	.word	0x0800fb88
 80080c4:	200000f4 	.word	0x200000f4
 80080c8:	200000f9 	.word	0x200000f9
 80080cc:	20006504 	.word	0x20006504
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1d4      	bne.n	8008086 <tcp_process+0x58e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	60da      	str	r2, [r3, #12]
 80080e2:	4b77      	ldr	r3, [pc, #476]	; (80082c0 <tcp_process+0x7c8>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	220a      	movs	r2, #10
 80080ec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80080ee:	4b75      	ldr	r3, [pc, #468]	; (80082c4 <tcp_process+0x7cc>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60da      	str	r2, [r3, #12]
 80080f6:	4a73      	ldr	r2, [pc, #460]	; (80082c4 <tcp_process+0x7cc>)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	f002 fd04 	bl	800ab08 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008100:	e0d2      	b.n	80082a8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	8b5b      	ldrh	r3, [r3, #26]
 8008106:	f043 0302 	orr.w	r3, r3, #2
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2208      	movs	r2, #8
 8008114:	751a      	strb	r2, [r3, #20]
      break;
 8008116:	e0c7      	b.n	80082a8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008118:	4b6b      	ldr	r3, [pc, #428]	; (80082c8 <tcp_process+0x7d0>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 0310 	and.w	r3, r3, #16
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 80c1 	beq.w	80082a8 <tcp_process+0x7b0>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800812a:	4b68      	ldr	r3, [pc, #416]	; (80082cc <tcp_process+0x7d4>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	429a      	cmp	r2, r3
 8008130:	f040 80ba 	bne.w	80082a8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008138:	2b00      	cmp	r3, #0
 800813a:	f040 80b5 	bne.w	80082a8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2206      	movs	r2, #6
 8008142:	751a      	strb	r2, [r3, #20]
      break;
 8008144:	e0b0      	b.n	80082a8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9ca 	bl	80084e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800814c:	4b60      	ldr	r3, [pc, #384]	; (80082d0 <tcp_process+0x7d8>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 0320 	and.w	r3, r3, #32
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 80a9 	beq.w	80082ac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	8b5b      	ldrh	r3, [r3, #26]
 800815e:	f043 0302 	orr.w	r3, r3, #2
 8008162:	b29a      	uxth	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7fe fd3b 	bl	8006be4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800816e:	4b59      	ldr	r3, [pc, #356]	; (80082d4 <tcp_process+0x7dc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d105      	bne.n	8008184 <tcp_process+0x68c>
 8008178:	4b56      	ldr	r3, [pc, #344]	; (80082d4 <tcp_process+0x7dc>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	4a55      	ldr	r2, [pc, #340]	; (80082d4 <tcp_process+0x7dc>)
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	e013      	b.n	80081ac <tcp_process+0x6b4>
 8008184:	4b53      	ldr	r3, [pc, #332]	; (80082d4 <tcp_process+0x7dc>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	613b      	str	r3, [r7, #16]
 800818a:	e00c      	b.n	80081a6 <tcp_process+0x6ae>
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d104      	bne.n	80081a0 <tcp_process+0x6a8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	60da      	str	r2, [r3, #12]
 800819e:	e005      	b.n	80081ac <tcp_process+0x6b4>
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1ef      	bne.n	800818c <tcp_process+0x694>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	60da      	str	r2, [r3, #12]
 80081b2:	4b43      	ldr	r3, [pc, #268]	; (80082c0 <tcp_process+0x7c8>)
 80081b4:	2201      	movs	r2, #1
 80081b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	220a      	movs	r2, #10
 80081bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80081be:	4b41      	ldr	r3, [pc, #260]	; (80082c4 <tcp_process+0x7cc>)
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60da      	str	r2, [r3, #12]
 80081c6:	4a3f      	ldr	r2, [pc, #252]	; (80082c4 <tcp_process+0x7cc>)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	f002 fc9c 	bl	800ab08 <tcp_timer_needed>
      }
      break;
 80081d0:	e06c      	b.n	80082ac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f984 	bl	80084e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80081d8:	4b3b      	ldr	r3, [pc, #236]	; (80082c8 <tcp_process+0x7d0>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d065      	beq.n	80082b0 <tcp_process+0x7b8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081e8:	4b38      	ldr	r3, [pc, #224]	; (80082cc <tcp_process+0x7d4>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d15f      	bne.n	80082b0 <tcp_process+0x7b8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d15b      	bne.n	80082b0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7fe fcf3 	bl	8006be4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80081fe:	4b35      	ldr	r3, [pc, #212]	; (80082d4 <tcp_process+0x7dc>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	429a      	cmp	r2, r3
 8008206:	d105      	bne.n	8008214 <tcp_process+0x71c>
 8008208:	4b32      	ldr	r3, [pc, #200]	; (80082d4 <tcp_process+0x7dc>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	4a31      	ldr	r2, [pc, #196]	; (80082d4 <tcp_process+0x7dc>)
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	e013      	b.n	800823c <tcp_process+0x744>
 8008214:	4b2f      	ldr	r3, [pc, #188]	; (80082d4 <tcp_process+0x7dc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	e00c      	b.n	8008236 <tcp_process+0x73e>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d104      	bne.n	8008230 <tcp_process+0x738>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	60da      	str	r2, [r3, #12]
 800822e:	e005      	b.n	800823c <tcp_process+0x744>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1ef      	bne.n	800821c <tcp_process+0x724>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	4b1f      	ldr	r3, [pc, #124]	; (80082c0 <tcp_process+0x7c8>)
 8008244:	2201      	movs	r2, #1
 8008246:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	220a      	movs	r2, #10
 800824c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800824e:	4b1d      	ldr	r3, [pc, #116]	; (80082c4 <tcp_process+0x7cc>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	4a1b      	ldr	r2, [pc, #108]	; (80082c4 <tcp_process+0x7cc>)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	f002 fc54 	bl	800ab08 <tcp_timer_needed>
      }
      break;
 8008260:	e026      	b.n	80082b0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f93c 	bl	80084e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008268:	4b17      	ldr	r3, [pc, #92]	; (80082c8 <tcp_process+0x7d0>)
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01f      	beq.n	80082b4 <tcp_process+0x7bc>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008278:	4b14      	ldr	r3, [pc, #80]	; (80082cc <tcp_process+0x7d4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d119      	bne.n	80082b4 <tcp_process+0x7bc>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d115      	bne.n	80082b4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008288:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <tcp_process+0x7d8>)
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	f043 0310 	orr.w	r3, r3, #16
 8008290:	b2da      	uxtb	r2, r3
 8008292:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <tcp_process+0x7d8>)
 8008294:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008296:	e00d      	b.n	80082b4 <tcp_process+0x7bc>
    default:
      break;
 8008298:	bf00      	nop
 800829a:	e00c      	b.n	80082b6 <tcp_process+0x7be>
      break;
 800829c:	bf00      	nop
 800829e:	e00a      	b.n	80082b6 <tcp_process+0x7be>
      break;
 80082a0:	bf00      	nop
 80082a2:	e008      	b.n	80082b6 <tcp_process+0x7be>
      break;
 80082a4:	bf00      	nop
 80082a6:	e006      	b.n	80082b6 <tcp_process+0x7be>
      break;
 80082a8:	bf00      	nop
 80082aa:	e004      	b.n	80082b6 <tcp_process+0x7be>
      break;
 80082ac:	bf00      	nop
 80082ae:	e002      	b.n	80082b6 <tcp_process+0x7be>
      break;
 80082b0:	bf00      	nop
 80082b2:	e000      	b.n	80082b6 <tcp_process+0x7be>
      break;
 80082b4:	bf00      	nop
  }
  return ERR_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3724      	adds	r7, #36	; 0x24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd90      	pop	{r4, r7, pc}
 80082c0:	20006500 	.word	0x20006500
 80082c4:	20006514 	.word	0x20006514
 80082c8:	200000f8 	.word	0x200000f8
 80082cc:	200000f0 	.word	0x200000f0
 80082d0:	200000f9 	.word	0x200000f9
 80082d4:	20006504 	.word	0x20006504

080082d8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80082d8:	b590      	push	{r4, r7, lr}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d106      	bne.n	80082f6 <tcp_oos_insert_segment+0x1e>
 80082e8:	4b3b      	ldr	r3, [pc, #236]	; (80083d8 <tcp_oos_insert_segment+0x100>)
 80082ea:	f240 421f 	movw	r2, #1055	; 0x41f
 80082ee:	493b      	ldr	r1, [pc, #236]	; (80083dc <tcp_oos_insert_segment+0x104>)
 80082f0:	483b      	ldr	r0, [pc, #236]	; (80083e0 <tcp_oos_insert_segment+0x108>)
 80082f2:	f005 fbdd 	bl	800dab0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	899b      	ldrh	r3, [r3, #12]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fb fd6c 	bl	8003ddc <lwip_htons>
 8008304:	4603      	mov	r3, r0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d028      	beq.n	8008362 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008310:	6838      	ldr	r0, [r7, #0]
 8008312:	f7fe fa67 	bl	80067e4 <tcp_segs_free>
    next = NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	e056      	b.n	80083ca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	899b      	ldrh	r3, [r3, #12]
 8008322:	b29b      	uxth	r3, r3
 8008324:	4618      	mov	r0, r3
 8008326:	f7fb fd59 	bl	8003ddc <lwip_htons>
 800832a:	4603      	mov	r3, r0
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00d      	beq.n	8008352 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	899b      	ldrh	r3, [r3, #12]
 800833c:	b29c      	uxth	r4, r3
 800833e:	2001      	movs	r0, #1
 8008340:	f7fb fd4c 	bl	8003ddc <lwip_htons>
 8008344:	4603      	mov	r3, r0
 8008346:	461a      	mov	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	4322      	orrs	r2, r4
 800834e:	b292      	uxth	r2, r2
 8008350:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7fe fa55 	bl	800680c <tcp_seg_free>
    while (next &&
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00e      	beq.n	8008386 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	891b      	ldrh	r3, [r3, #8]
 800836c:	461a      	mov	r2, r3
 800836e:	4b1d      	ldr	r3, [pc, #116]	; (80083e4 <tcp_oos_insert_segment+0x10c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	441a      	add	r2, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	8909      	ldrh	r1, [r1, #8]
 800837e:	440b      	add	r3, r1
 8008380:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008382:	2b00      	cmp	r3, #0
 8008384:	daca      	bge.n	800831c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01e      	beq.n	80083ca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	891b      	ldrh	r3, [r3, #8]
 8008390:	461a      	mov	r2, r3
 8008392:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <tcp_oos_insert_segment+0x10c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	441a      	add	r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	1ad3      	subs	r3, r2, r3
    if (next &&
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dd12      	ble.n	80083ca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <tcp_oos_insert_segment+0x10c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	891b      	ldrh	r3, [r3, #8]
 80083c2:	4619      	mov	r1, r3
 80083c4:	4610      	mov	r0, r2
 80083c6:	f7fc fe33 	bl	8005030 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	601a      	str	r2, [r3, #0]
}
 80083d0:	bf00      	nop
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd90      	pop	{r4, r7, pc}
 80083d8:	0800fb3c 	.word	0x0800fb3c
 80083dc:	0800fdfc 	.word	0x0800fdfc
 80083e0:	0800fb88 	.word	0x0800fb88
 80083e4:	200000ec 	.word	0x200000ec

080083e8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80083e8:	b5b0      	push	{r4, r5, r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80083f6:	e03e      	b.n	8008476 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	4618      	mov	r0, r3
 8008408:	f7fd f820 	bl	800544c <pbuf_clen>
 800840c:	4603      	mov	r3, r0
 800840e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008416:	8a7a      	ldrh	r2, [r7, #18]
 8008418:	429a      	cmp	r2, r3
 800841a:	d906      	bls.n	800842a <tcp_free_acked_segments+0x42>
 800841c:	4b2a      	ldr	r3, [pc, #168]	; (80084c8 <tcp_free_acked_segments+0xe0>)
 800841e:	f240 4257 	movw	r2, #1111	; 0x457
 8008422:	492a      	ldr	r1, [pc, #168]	; (80084cc <tcp_free_acked_segments+0xe4>)
 8008424:	482a      	ldr	r0, [pc, #168]	; (80084d0 <tcp_free_acked_segments+0xe8>)
 8008426:	f005 fb43 	bl	800dab0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008430:	8a7b      	ldrh	r3, [r7, #18]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	b29a      	uxth	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	891a      	ldrh	r2, [r3, #8]
 8008440:	4b24      	ldr	r3, [pc, #144]	; (80084d4 <tcp_free_acked_segments+0xec>)
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	4413      	add	r3, r2
 8008446:	b29a      	uxth	r2, r3
 8008448:	4b22      	ldr	r3, [pc, #136]	; (80084d4 <tcp_free_acked_segments+0xec>)
 800844a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800844c:	6978      	ldr	r0, [r7, #20]
 800844e:	f7fe f9dd 	bl	800680c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00c      	beq.n	8008476 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d109      	bne.n	8008476 <tcp_free_acked_segments+0x8e>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d106      	bne.n	8008476 <tcp_free_acked_segments+0x8e>
 8008468:	4b17      	ldr	r3, [pc, #92]	; (80084c8 <tcp_free_acked_segments+0xe0>)
 800846a:	f240 4262 	movw	r2, #1122	; 0x462
 800846e:	491a      	ldr	r1, [pc, #104]	; (80084d8 <tcp_free_acked_segments+0xf0>)
 8008470:	4817      	ldr	r0, [pc, #92]	; (80084d0 <tcp_free_acked_segments+0xe8>)
 8008472:	f005 fb1d 	bl	800dab0 <iprintf>
  while (seg_list != NULL &&
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d020      	beq.n	80084be <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	4618      	mov	r0, r3
 8008484:	f7fb fcbf 	bl	8003e06 <lwip_htonl>
 8008488:	4604      	mov	r4, r0
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	891b      	ldrh	r3, [r3, #8]
 800848e:	461d      	mov	r5, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	899b      	ldrh	r3, [r3, #12]
 8008496:	b29b      	uxth	r3, r3
 8008498:	4618      	mov	r0, r3
 800849a:	f7fb fc9f 	bl	8003ddc <lwip_htons>
 800849e:	4603      	mov	r3, r0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <tcp_free_acked_segments+0xc6>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <tcp_free_acked_segments+0xc8>
 80084ae:	2300      	movs	r3, #0
 80084b0:	442b      	add	r3, r5
 80084b2:	18e2      	adds	r2, r4, r3
 80084b4:	4b09      	ldr	r3, [pc, #36]	; (80084dc <tcp_free_acked_segments+0xf4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dd9c      	ble.n	80083f8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80084be:	68bb      	ldr	r3, [r7, #8]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bdb0      	pop	{r4, r5, r7, pc}
 80084c8:	0800fb3c 	.word	0x0800fb3c
 80084cc:	0800fe24 	.word	0x0800fe24
 80084d0:	0800fb88 	.word	0x0800fb88
 80084d4:	200000f4 	.word	0x200000f4
 80084d8:	0800fe4c 	.word	0x0800fe4c
 80084dc:	200000f0 	.word	0x200000f0

080084e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80084e0:	b5b0      	push	{r4, r5, r7, lr}
 80084e2:	b094      	sub	sp, #80	; 0x50
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <tcp_receive+0x20>
 80084f2:	4ba6      	ldr	r3, [pc, #664]	; (800878c <tcp_receive+0x2ac>)
 80084f4:	f240 427b 	movw	r2, #1147	; 0x47b
 80084f8:	49a5      	ldr	r1, [pc, #660]	; (8008790 <tcp_receive+0x2b0>)
 80084fa:	48a6      	ldr	r0, [pc, #664]	; (8008794 <tcp_receive+0x2b4>)
 80084fc:	f005 fad8 	bl	800dab0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7d1b      	ldrb	r3, [r3, #20]
 8008504:	2b03      	cmp	r3, #3
 8008506:	d806      	bhi.n	8008516 <tcp_receive+0x36>
 8008508:	4ba0      	ldr	r3, [pc, #640]	; (800878c <tcp_receive+0x2ac>)
 800850a:	f240 427c 	movw	r2, #1148	; 0x47c
 800850e:	49a2      	ldr	r1, [pc, #648]	; (8008798 <tcp_receive+0x2b8>)
 8008510:	48a0      	ldr	r0, [pc, #640]	; (8008794 <tcp_receive+0x2b4>)
 8008512:	f005 facd 	bl	800dab0 <iprintf>

  if (flags & TCP_ACK) {
 8008516:	4ba1      	ldr	r3, [pc, #644]	; (800879c <tcp_receive+0x2bc>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0310 	and.w	r3, r3, #16
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 8263 	beq.w	80089ea <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008530:	4413      	add	r3, r2
 8008532:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008538:	4b99      	ldr	r3, [pc, #612]	; (80087a0 <tcp_receive+0x2c0>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	db1b      	blt.n	800857a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008546:	4b96      	ldr	r3, [pc, #600]	; (80087a0 <tcp_receive+0x2c0>)
 8008548:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800854a:	429a      	cmp	r2, r3
 800854c:	d106      	bne.n	800855c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008552:	4b94      	ldr	r3, [pc, #592]	; (80087a4 <tcp_receive+0x2c4>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	2b00      	cmp	r3, #0
 800855a:	db0e      	blt.n	800857a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008560:	4b90      	ldr	r3, [pc, #576]	; (80087a4 <tcp_receive+0x2c4>)
 8008562:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008564:	429a      	cmp	r2, r3
 8008566:	d125      	bne.n	80085b4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008568:	4b8f      	ldr	r3, [pc, #572]	; (80087a8 <tcp_receive+0x2c8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	89db      	ldrh	r3, [r3, #14]
 800856e:	b29a      	uxth	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008576:	429a      	cmp	r2, r3
 8008578:	d91c      	bls.n	80085b4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800857a:	4b8b      	ldr	r3, [pc, #556]	; (80087a8 <tcp_receive+0x2c8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	89db      	ldrh	r3, [r3, #14]
 8008580:	b29a      	uxth	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008594:	429a      	cmp	r2, r3
 8008596:	d205      	bcs.n	80085a4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80085a4:	4b7e      	ldr	r3, [pc, #504]	; (80087a0 <tcp_receive+0x2c0>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80085ac:	4b7d      	ldr	r3, [pc, #500]	; (80087a4 <tcp_receive+0x2c4>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80085b4:	4b7b      	ldr	r3, [pc, #492]	; (80087a4 <tcp_receive+0x2c4>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dc58      	bgt.n	8008674 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80085c2:	4b7a      	ldr	r3, [pc, #488]	; (80087ac <tcp_receive+0x2cc>)
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d14b      	bne.n	8008662 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80085d4:	4413      	add	r3, r2
 80085d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d8:	429a      	cmp	r2, r3
 80085da:	d142      	bne.n	8008662 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	db3d      	blt.n	8008662 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ea:	4b6e      	ldr	r3, [pc, #440]	; (80087a4 <tcp_receive+0x2c4>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d137      	bne.n	8008662 <tcp_receive+0x182>
              found_dupack = 1;
 80085f2:	2301      	movs	r3, #1
 80085f4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085fc:	2bff      	cmp	r3, #255	; 0xff
 80085fe:	d007      	beq.n	8008610 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008606:	3301      	adds	r3, #1
 8008608:	b2da      	uxtb	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008616:	2b03      	cmp	r3, #3
 8008618:	d91b      	bls.n	8008652 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008624:	4413      	add	r3, r2
 8008626:	b29a      	uxth	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800862e:	429a      	cmp	r2, r3
 8008630:	d30a      	bcc.n	8008648 <tcp_receive+0x168>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800863c:	4413      	add	r3, r2
 800863e:	b29a      	uxth	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008646:	e004      	b.n	8008652 <tcp_receive+0x172>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800864e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008658:	2b02      	cmp	r3, #2
 800865a:	d902      	bls.n	8008662 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 feed 	bl	800a43c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008664:	2b00      	cmp	r3, #0
 8008666:	f040 8160 	bne.w	800892a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008672:	e15a      	b.n	800892a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008674:	4b4b      	ldr	r3, [pc, #300]	; (80087a4 <tcp_receive+0x2c4>)
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	3b01      	subs	r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	f2c0 814d 	blt.w	8008920 <tcp_receive+0x440>
 8008686:	4b47      	ldr	r3, [pc, #284]	; (80087a4 <tcp_receive+0x2c4>)
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	f300 8145 	bgt.w	8008920 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	8b5b      	ldrh	r3, [r3, #26]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d010      	beq.n	80086c4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8b5b      	ldrh	r3, [r3, #26]
 80086a6:	f023 0304 	bic.w	r3, r3, #4
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80086d2:	10db      	asrs	r3, r3, #3
 80086d4:	b21b      	sxth	r3, r3
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80086de:	b29b      	uxth	r3, r3
 80086e0:	4413      	add	r3, r2
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	b21a      	sxth	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80086ec:	4b2d      	ldr	r3, [pc, #180]	; (80087a4 <tcp_receive+0x2c4>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008704:	4b27      	ldr	r3, [pc, #156]	; (80087a4 <tcp_receive+0x2c4>)
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7d1b      	ldrb	r3, [r3, #20]
 8008710:	2b03      	cmp	r3, #3
 8008712:	f240 8096 	bls.w	8008842 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008722:	429a      	cmp	r2, r3
 8008724:	d244      	bcs.n	80087b0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	8b5b      	ldrh	r3, [r3, #26]
 800872a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <tcp_receive+0x256>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <tcp_receive+0x258>
 8008736:	2302      	movs	r3, #2
 8008738:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800873c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008746:	fb12 f303 	smulbb	r3, r2, r3
 800874a:	b29b      	uxth	r3, r3
 800874c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800874e:	4293      	cmp	r3, r2
 8008750:	bf28      	it	cs
 8008752:	4613      	movcs	r3, r2
 8008754:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800875c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800875e:	4413      	add	r3, r2
 8008760:	b29a      	uxth	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008768:	429a      	cmp	r2, r3
 800876a:	d309      	bcc.n	8008780 <tcp_receive+0x2a0>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008772:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008774:	4413      	add	r3, r2
 8008776:	b29a      	uxth	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800877e:	e060      	b.n	8008842 <tcp_receive+0x362>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008786:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800878a:	e05a      	b.n	8008842 <tcp_receive+0x362>
 800878c:	0800fb3c 	.word	0x0800fb3c
 8008790:	0800fe6c 	.word	0x0800fe6c
 8008794:	0800fb88 	.word	0x0800fb88
 8008798:	0800fe88 	.word	0x0800fe88
 800879c:	200000f8 	.word	0x200000f8
 80087a0:	200000ec 	.word	0x200000ec
 80087a4:	200000f0 	.word	0x200000f0
 80087a8:	200000dc 	.word	0x200000dc
 80087ac:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80087b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087b8:	4413      	add	r3, r2
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d309      	bcc.n	80087da <tcp_receive+0x2fa>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80087cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087ce:	4413      	add	r3, r2
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80087d8:	e004      	b.n	80087e4 <tcp_receive+0x304>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d326      	bcc.n	8008842 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	b29a      	uxth	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008814:	4413      	add	r3, r2
 8008816:	b29a      	uxth	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800881e:	429a      	cmp	r2, r3
 8008820:	d30a      	bcc.n	8008838 <tcp_receive+0x358>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800882c:	4413      	add	r3, r2
 800882e:	b29a      	uxth	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008836:	e004      	b.n	8008842 <tcp_receive+0x362>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800883e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884a:	4a98      	ldr	r2, [pc, #608]	; (8008aac <tcp_receive+0x5cc>)
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff fdcb 	bl	80083e8 <tcp_free_acked_segments>
 8008852:	4602      	mov	r2, r0
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008860:	4a93      	ldr	r2, [pc, #588]	; (8008ab0 <tcp_receive+0x5d0>)
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff fdc0 	bl	80083e8 <tcp_free_acked_segments>
 8008868:	4602      	mov	r2, r0
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800887c:	861a      	strh	r2, [r3, #48]	; 0x30
 800887e:	e002      	b.n	8008886 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d103      	bne.n	800889c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80088a2:	4b84      	ldr	r3, [pc, #528]	; (8008ab4 <tcp_receive+0x5d4>)
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	4413      	add	r3, r2
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8b5b      	ldrh	r3, [r3, #26]
 80088b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d035      	beq.n	8008928 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d118      	bne.n	80088f6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00c      	beq.n	80088e6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fb fa94 	bl	8003e06 <lwip_htonl>
 80088de:	4603      	mov	r3, r0
 80088e0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	dc20      	bgt.n	8008928 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	8b5b      	ldrh	r3, [r3, #26]
 80088ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80088f4:	e018      	b.n	8008928 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	4618      	mov	r0, r3
 8008904:	f7fb fa7f 	bl	8003e06 <lwip_htonl>
 8008908:	4603      	mov	r3, r0
 800890a:	1ae3      	subs	r3, r4, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	dc0b      	bgt.n	8008928 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8b5b      	ldrh	r3, [r3, #26]
 8008914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800891e:	e003      	b.n	8008928 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 ff81 	bl	800a828 <tcp_send_empty_ack>
 8008926:	e000      	b.n	800892a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008928:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892e:	2b00      	cmp	r3, #0
 8008930:	d05b      	beq.n	80089ea <tcp_receive+0x50a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008936:	4b60      	ldr	r3, [pc, #384]	; (8008ab8 <tcp_receive+0x5d8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	da54      	bge.n	80089ea <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008940:	4b5e      	ldr	r3, [pc, #376]	; (8008abc <tcp_receive+0x5dc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	b29a      	uxth	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894a:	b29b      	uxth	r3, r3
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	b29b      	uxth	r3, r3
 8008950:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008954:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800895e:	10db      	asrs	r3, r3, #3
 8008960:	b21b      	sxth	r3, r3
 8008962:	b29b      	uxth	r3, r3
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	b29b      	uxth	r3, r3
 8008968:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008972:	b29a      	uxth	r2, r3
 8008974:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008978:	4413      	add	r3, r2
 800897a:	b29b      	uxth	r3, r3
 800897c:	b21a      	sxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008982:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008986:	2b00      	cmp	r3, #0
 8008988:	da05      	bge.n	8008996 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800898a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800898e:	425b      	negs	r3, r3
 8008990:	b29b      	uxth	r3, r3
 8008992:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008996:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80089a0:	109b      	asrs	r3, r3, #2
 80089a2:	b21b      	sxth	r3, r3
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80089ba:	4413      	add	r3, r2
 80089bc:	b29b      	uxth	r3, r3
 80089be:	b21a      	sxth	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80089ca:	10db      	asrs	r3, r3, #3
 80089cc:	b21b      	sxth	r3, r3
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	4413      	add	r3, r2
 80089da:	b29b      	uxth	r3, r3
 80089dc:	b21a      	sxth	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80089ea:	4b35      	ldr	r3, [pc, #212]	; (8008ac0 <tcp_receive+0x5e0>)
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 84e1 	beq.w	80093b6 <tcp_receive+0xed6>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7d1b      	ldrb	r3, [r3, #20]
 80089f8:	2b06      	cmp	r3, #6
 80089fa:	f200 84dc 	bhi.w	80093b6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a02:	4b30      	ldr	r3, [pc, #192]	; (8008ac4 <tcp_receive+0x5e4>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f2c0 808e 	blt.w	8008b2c <tcp_receive+0x64c>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a14:	4b2a      	ldr	r3, [pc, #168]	; (8008ac0 <tcp_receive+0x5e0>)
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4b2a      	ldr	r3, [pc, #168]	; (8008ac4 <tcp_receive+0x5e4>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	440b      	add	r3, r1
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	3301      	adds	r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f300 8081 	bgt.w	8008b2c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008a2a:	4b27      	ldr	r3, [pc, #156]	; (8008ac8 <tcp_receive+0x5e8>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a34:	4b23      	ldr	r3, [pc, #140]	; (8008ac4 <tcp_receive+0x5e4>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008a3c:	4b22      	ldr	r3, [pc, #136]	; (8008ac8 <tcp_receive+0x5e8>)
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d106      	bne.n	8008a52 <tcp_receive+0x572>
 8008a44:	4b21      	ldr	r3, [pc, #132]	; (8008acc <tcp_receive+0x5ec>)
 8008a46:	f240 5294 	movw	r2, #1428	; 0x594
 8008a4a:	4921      	ldr	r1, [pc, #132]	; (8008ad0 <tcp_receive+0x5f0>)
 8008a4c:	4821      	ldr	r0, [pc, #132]	; (8008ad4 <tcp_receive+0x5f4>)
 8008a4e:	f005 f82f 	bl	800dab0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d906      	bls.n	8008a6a <tcp_receive+0x58a>
 8008a5c:	4b1b      	ldr	r3, [pc, #108]	; (8008acc <tcp_receive+0x5ec>)
 8008a5e:	f240 5295 	movw	r2, #1429	; 0x595
 8008a62:	491d      	ldr	r1, [pc, #116]	; (8008ad8 <tcp_receive+0x5f8>)
 8008a64:	481b      	ldr	r0, [pc, #108]	; (8008ad4 <tcp_receive+0x5f4>)
 8008a66:	f005 f823 	bl	800dab0 <iprintf>
      off = (u16_t)off32;
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008a70:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <tcp_receive+0x5e8>)
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	891b      	ldrh	r3, [r3, #8]
 8008a76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d906      	bls.n	8008a8c <tcp_receive+0x5ac>
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <tcp_receive+0x5ec>)
 8008a80:	f240 5297 	movw	r2, #1431	; 0x597
 8008a84:	4915      	ldr	r1, [pc, #84]	; (8008adc <tcp_receive+0x5fc>)
 8008a86:	4813      	ldr	r0, [pc, #76]	; (8008ad4 <tcp_receive+0x5f4>)
 8008a88:	f005 f812 	bl	800dab0 <iprintf>
      inseg.len -= off;
 8008a8c:	4b0e      	ldr	r3, [pc, #56]	; (8008ac8 <tcp_receive+0x5e8>)
 8008a8e:	891a      	ldrh	r2, [r3, #8]
 8008a90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	4b0b      	ldr	r3, [pc, #44]	; (8008ac8 <tcp_receive+0x5e8>)
 8008a9a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <tcp_receive+0x5e8>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	891a      	ldrh	r2, [r3, #8]
 8008aa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008aaa:	e029      	b.n	8008b00 <tcp_receive+0x620>
 8008aac:	0800fea4 	.word	0x0800fea4
 8008ab0:	0800feac 	.word	0x0800feac
 8008ab4:	200000f4 	.word	0x200000f4
 8008ab8:	200000f0 	.word	0x200000f0
 8008abc:	20006508 	.word	0x20006508
 8008ac0:	200000f6 	.word	0x200000f6
 8008ac4:	200000ec 	.word	0x200000ec
 8008ac8:	200000cc 	.word	0x200000cc
 8008acc:	0800fb3c 	.word	0x0800fb3c
 8008ad0:	0800feb4 	.word	0x0800feb4
 8008ad4:	0800fb88 	.word	0x0800fb88
 8008ad8:	0800fec4 	.word	0x0800fec4
 8008adc:	0800fed4 	.word	0x0800fed4
        off -= p->len;
 8008ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ae2:	895b      	ldrh	r3, [r3, #10]
 8008ae4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008af2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af6:	2200      	movs	r2, #0
 8008af8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b02:	895b      	ldrh	r3, [r3, #10]
 8008b04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d8e9      	bhi.n	8008ae0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008b0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008b10:	4619      	mov	r1, r3
 8008b12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008b14:	f7fc fb8c 	bl	8005230 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	4a91      	ldr	r2, [pc, #580]	; (8008d64 <tcp_receive+0x884>)
 8008b1e:	6013      	str	r3, [r2, #0]
 8008b20:	4b91      	ldr	r3, [pc, #580]	; (8008d68 <tcp_receive+0x888>)
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	4a8f      	ldr	r2, [pc, #572]	; (8008d64 <tcp_receive+0x884>)
 8008b26:	6812      	ldr	r2, [r2, #0]
 8008b28:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008b2a:	e00d      	b.n	8008b48 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008b2c:	4b8d      	ldr	r3, [pc, #564]	; (8008d64 <tcp_receive+0x884>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	da06      	bge.n	8008b48 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	8b5b      	ldrh	r3, [r3, #26]
 8008b3e:	f043 0302 	orr.w	r3, r3, #2
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008b48:	4b86      	ldr	r3, [pc, #536]	; (8008d64 <tcp_receive+0x884>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f2c0 842a 	blt.w	80093ac <tcp_receive+0xecc>
 8008b58:	4b82      	ldr	r3, [pc, #520]	; (8008d64 <tcp_receive+0x884>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008b64:	440b      	add	r3, r1
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	3301      	adds	r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f300 841e 	bgt.w	80093ac <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b74:	4b7b      	ldr	r3, [pc, #492]	; (8008d64 <tcp_receive+0x884>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	f040 829a 	bne.w	80090b2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008b7e:	4b7a      	ldr	r3, [pc, #488]	; (8008d68 <tcp_receive+0x888>)
 8008b80:	891c      	ldrh	r4, [r3, #8]
 8008b82:	4b79      	ldr	r3, [pc, #484]	; (8008d68 <tcp_receive+0x888>)
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	899b      	ldrh	r3, [r3, #12]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fb f926 	bl	8003ddc <lwip_htons>
 8008b90:	4603      	mov	r3, r0
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0303 	and.w	r3, r3, #3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <tcp_receive+0x6c0>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <tcp_receive+0x6c2>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4423      	add	r3, r4
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	4b71      	ldr	r3, [pc, #452]	; (8008d6c <tcp_receive+0x88c>)
 8008ba8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008bae:	4b6f      	ldr	r3, [pc, #444]	; (8008d6c <tcp_receive+0x88c>)
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d275      	bcs.n	8008ca2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008bb6:	4b6c      	ldr	r3, [pc, #432]	; (8008d68 <tcp_receive+0x888>)
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	899b      	ldrh	r3, [r3, #12]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fb f90c 	bl	8003ddc <lwip_htons>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01f      	beq.n	8008c10 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008bd0:	4b65      	ldr	r3, [pc, #404]	; (8008d68 <tcp_receive+0x888>)
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	899b      	ldrh	r3, [r3, #12]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	b21b      	sxth	r3, r3
 8008bda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008bde:	b21c      	sxth	r4, r3
 8008be0:	4b61      	ldr	r3, [pc, #388]	; (8008d68 <tcp_receive+0x888>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	899b      	ldrh	r3, [r3, #12]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fb f8f7 	bl	8003ddc <lwip_htons>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fb f8ee 	bl	8003ddc <lwip_htons>
 8008c00:	4603      	mov	r3, r0
 8008c02:	b21b      	sxth	r3, r3
 8008c04:	4323      	orrs	r3, r4
 8008c06:	b21a      	sxth	r2, r3
 8008c08:	4b57      	ldr	r3, [pc, #348]	; (8008d68 <tcp_receive+0x888>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	b292      	uxth	r2, r2
 8008c0e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c14:	4b54      	ldr	r3, [pc, #336]	; (8008d68 <tcp_receive+0x888>)
 8008c16:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008c18:	4b53      	ldr	r3, [pc, #332]	; (8008d68 <tcp_receive+0x888>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	899b      	ldrh	r3, [r3, #12]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fb f8db 	bl	8003ddc <lwip_htons>
 8008c26:	4603      	mov	r3, r0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f003 0302 	and.w	r3, r3, #2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <tcp_receive+0x75e>
            inseg.len -= 1;
 8008c32:	4b4d      	ldr	r3, [pc, #308]	; (8008d68 <tcp_receive+0x888>)
 8008c34:	891b      	ldrh	r3, [r3, #8]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	4b4b      	ldr	r3, [pc, #300]	; (8008d68 <tcp_receive+0x888>)
 8008c3c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008c3e:	4b4a      	ldr	r3, [pc, #296]	; (8008d68 <tcp_receive+0x888>)
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	4b49      	ldr	r3, [pc, #292]	; (8008d68 <tcp_receive+0x888>)
 8008c44:	891b      	ldrh	r3, [r3, #8]
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f7fc f9f1 	bl	8005030 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008c4e:	4b46      	ldr	r3, [pc, #280]	; (8008d68 <tcp_receive+0x888>)
 8008c50:	891c      	ldrh	r4, [r3, #8]
 8008c52:	4b45      	ldr	r3, [pc, #276]	; (8008d68 <tcp_receive+0x888>)
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	899b      	ldrh	r3, [r3, #12]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fb f8be 	bl	8003ddc <lwip_htons>
 8008c60:	4603      	mov	r3, r0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f003 0303 	and.w	r3, r3, #3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <tcp_receive+0x790>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e000      	b.n	8008c72 <tcp_receive+0x792>
 8008c70:	2300      	movs	r3, #0
 8008c72:	4423      	add	r3, r4
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	4b3d      	ldr	r3, [pc, #244]	; (8008d6c <tcp_receive+0x88c>)
 8008c78:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008c7a:	4b3c      	ldr	r3, [pc, #240]	; (8008d6c <tcp_receive+0x88c>)
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	4b38      	ldr	r3, [pc, #224]	; (8008d64 <tcp_receive+0x884>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	441a      	add	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c8e:	440b      	add	r3, r1
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d006      	beq.n	8008ca2 <tcp_receive+0x7c2>
 8008c94:	4b36      	ldr	r3, [pc, #216]	; (8008d70 <tcp_receive+0x890>)
 8008c96:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8008c9a:	4936      	ldr	r1, [pc, #216]	; (8008d74 <tcp_receive+0x894>)
 8008c9c:	4836      	ldr	r0, [pc, #216]	; (8008d78 <tcp_receive+0x898>)
 8008c9e:	f004 ff07 	bl	800dab0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 80e7 	beq.w	8008e7a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008cac:	4b2e      	ldr	r3, [pc, #184]	; (8008d68 <tcp_receive+0x888>)
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	899b      	ldrh	r3, [r3, #12]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fb f891 	bl	8003ddc <lwip_htons>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d010      	beq.n	8008ce8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008cc6:	e00a      	b.n	8008cde <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ccc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f7fd fd97 	bl	800680c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1f0      	bne.n	8008cc8 <tcp_receive+0x7e8>
 8008ce6:	e0c8      	b.n	8008e7a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008cee:	e052      	b.n	8008d96 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	899b      	ldrh	r3, [r3, #12]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fb f86f 	bl	8003ddc <lwip_htons>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d03d      	beq.n	8008d86 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008d0a:	4b17      	ldr	r3, [pc, #92]	; (8008d68 <tcp_receive+0x888>)
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	899b      	ldrh	r3, [r3, #12]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fb f862 	bl	8003ddc <lwip_htons>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d130      	bne.n	8008d86 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008d24:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <tcp_receive+0x888>)
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	899b      	ldrh	r3, [r3, #12]
 8008d2a:	b29c      	uxth	r4, r3
 8008d2c:	2001      	movs	r0, #1
 8008d2e:	f7fb f855 	bl	8003ddc <lwip_htons>
 8008d32:	4603      	mov	r3, r0
 8008d34:	461a      	mov	r2, r3
 8008d36:	4b0c      	ldr	r3, [pc, #48]	; (8008d68 <tcp_receive+0x888>)
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	4322      	orrs	r2, r4
 8008d3c:	b292      	uxth	r2, r2
 8008d3e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008d40:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <tcp_receive+0x888>)
 8008d42:	891c      	ldrh	r4, [r3, #8]
 8008d44:	4b08      	ldr	r3, [pc, #32]	; (8008d68 <tcp_receive+0x888>)
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	899b      	ldrh	r3, [r3, #12]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fb f845 	bl	8003ddc <lwip_htons>
 8008d52:	4603      	mov	r3, r0
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00e      	beq.n	8008d7c <tcp_receive+0x89c>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e00d      	b.n	8008d7e <tcp_receive+0x89e>
 8008d62:	bf00      	nop
 8008d64:	200000ec 	.word	0x200000ec
 8008d68:	200000cc 	.word	0x200000cc
 8008d6c:	200000f6 	.word	0x200000f6
 8008d70:	0800fb3c 	.word	0x0800fb3c
 8008d74:	0800fee4 	.word	0x0800fee4
 8008d78:	0800fb88 	.word	0x0800fb88
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4423      	add	r3, r4
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	4b98      	ldr	r3, [pc, #608]	; (8008fe4 <tcp_receive+0xb04>)
 8008d84:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d88:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008d90:	6938      	ldr	r0, [r7, #16]
 8008d92:	f7fd fd3b 	bl	800680c <tcp_seg_free>
            while (next &&
 8008d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00e      	beq.n	8008dba <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008d9c:	4b91      	ldr	r3, [pc, #580]	; (8008fe4 <tcp_receive+0xb04>)
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	4b91      	ldr	r3, [pc, #580]	; (8008fe8 <tcp_receive+0xb08>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	441a      	add	r2, r3
 8008da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008db0:	8909      	ldrh	r1, [r1, #8]
 8008db2:	440b      	add	r3, r1
 8008db4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	da9a      	bge.n	8008cf0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d059      	beq.n	8008e74 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008dc0:	4b88      	ldr	r3, [pc, #544]	; (8008fe4 <tcp_receive+0xb04>)
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	4b88      	ldr	r3, [pc, #544]	; (8008fe8 <tcp_receive+0xb08>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	441a      	add	r2, r3
 8008dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dd4d      	ble.n	8008e74 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	4b81      	ldr	r3, [pc, #516]	; (8008fe8 <tcp_receive+0xb08>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	4b80      	ldr	r3, [pc, #512]	; (8008fec <tcp_receive+0xb0c>)
 8008dec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008dee:	4b7f      	ldr	r3, [pc, #508]	; (8008fec <tcp_receive+0xb0c>)
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	899b      	ldrh	r3, [r3, #12]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fa fff0 	bl	8003ddc <lwip_htons>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <tcp_receive+0x934>
                inseg.len -= 1;
 8008e08:	4b78      	ldr	r3, [pc, #480]	; (8008fec <tcp_receive+0xb0c>)
 8008e0a:	891b      	ldrh	r3, [r3, #8]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	4b76      	ldr	r3, [pc, #472]	; (8008fec <tcp_receive+0xb0c>)
 8008e12:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008e14:	4b75      	ldr	r3, [pc, #468]	; (8008fec <tcp_receive+0xb0c>)
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	4b74      	ldr	r3, [pc, #464]	; (8008fec <tcp_receive+0xb0c>)
 8008e1a:	891b      	ldrh	r3, [r3, #8]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4610      	mov	r0, r2
 8008e20:	f7fc f906 	bl	8005030 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008e24:	4b71      	ldr	r3, [pc, #452]	; (8008fec <tcp_receive+0xb0c>)
 8008e26:	891c      	ldrh	r4, [r3, #8]
 8008e28:	4b70      	ldr	r3, [pc, #448]	; (8008fec <tcp_receive+0xb0c>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	899b      	ldrh	r3, [r3, #12]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fa ffd3 	bl	8003ddc <lwip_htons>
 8008e36:	4603      	mov	r3, r0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <tcp_receive+0x966>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e000      	b.n	8008e48 <tcp_receive+0x968>
 8008e46:	2300      	movs	r3, #0
 8008e48:	4423      	add	r3, r4
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	4b65      	ldr	r3, [pc, #404]	; (8008fe4 <tcp_receive+0xb04>)
 8008e4e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008e50:	4b64      	ldr	r3, [pc, #400]	; (8008fe4 <tcp_receive+0xb04>)
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	4b64      	ldr	r3, [pc, #400]	; (8008fe8 <tcp_receive+0xb08>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	441a      	add	r2, r3
 8008e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d006      	beq.n	8008e74 <tcp_receive+0x994>
 8008e66:	4b62      	ldr	r3, [pc, #392]	; (8008ff0 <tcp_receive+0xb10>)
 8008e68:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8008e6c:	4961      	ldr	r1, [pc, #388]	; (8008ff4 <tcp_receive+0xb14>)
 8008e6e:	4862      	ldr	r0, [pc, #392]	; (8008ff8 <tcp_receive+0xb18>)
 8008e70:	f004 fe1e 	bl	800dab0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e78:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008e7a:	4b5a      	ldr	r3, [pc, #360]	; (8008fe4 <tcp_receive+0xb04>)
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4b59      	ldr	r3, [pc, #356]	; (8008fe8 <tcp_receive+0xb08>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	441a      	add	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008e8e:	4b55      	ldr	r3, [pc, #340]	; (8008fe4 <tcp_receive+0xb04>)
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d206      	bcs.n	8008ea4 <tcp_receive+0x9c4>
 8008e96:	4b56      	ldr	r3, [pc, #344]	; (8008ff0 <tcp_receive+0xb10>)
 8008e98:	f240 6207 	movw	r2, #1543	; 0x607
 8008e9c:	4957      	ldr	r1, [pc, #348]	; (8008ffc <tcp_receive+0xb1c>)
 8008e9e:	4856      	ldr	r0, [pc, #344]	; (8008ff8 <tcp_receive+0xb18>)
 8008ea0:	f004 fe06 	bl	800dab0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008ea8:	4b4e      	ldr	r3, [pc, #312]	; (8008fe4 <tcp_receive+0xb04>)
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7fc ffcd 	bl	8005e54 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008eba:	4b4c      	ldr	r3, [pc, #304]	; (8008fec <tcp_receive+0xb0c>)
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	891b      	ldrh	r3, [r3, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d006      	beq.n	8008ed2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008ec4:	4b49      	ldr	r3, [pc, #292]	; (8008fec <tcp_receive+0xb0c>)
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	4a4d      	ldr	r2, [pc, #308]	; (8009000 <tcp_receive+0xb20>)
 8008eca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008ecc:	4b47      	ldr	r3, [pc, #284]	; (8008fec <tcp_receive+0xb0c>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ed2:	4b46      	ldr	r3, [pc, #280]	; (8008fec <tcp_receive+0xb0c>)
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	899b      	ldrh	r3, [r3, #12]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fa ff7e 	bl	8003ddc <lwip_htons>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 80b8 	beq.w	800905e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008eee:	4b45      	ldr	r3, [pc, #276]	; (8009004 <tcp_receive+0xb24>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	f043 0320 	orr.w	r3, r3, #32
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	4b42      	ldr	r3, [pc, #264]	; (8009004 <tcp_receive+0xb24>)
 8008efa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008efc:	e0af      	b.n	800905e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f02:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	4a36      	ldr	r2, [pc, #216]	; (8008fe8 <tcp_receive+0xb08>)
 8008f0e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	891b      	ldrh	r3, [r3, #8]
 8008f14:	461c      	mov	r4, r3
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	899b      	ldrh	r3, [r3, #12]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fa ff5c 	bl	8003ddc <lwip_htons>
 8008f24:	4603      	mov	r3, r0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	f003 0303 	and.w	r3, r3, #3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <tcp_receive+0xa54>
 8008f30:	2301      	movs	r3, #1
 8008f32:	e000      	b.n	8008f36 <tcp_receive+0xa56>
 8008f34:	2300      	movs	r3, #0
 8008f36:	191a      	adds	r2, r3, r4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	441a      	add	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f46:	461c      	mov	r4, r3
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	891b      	ldrh	r3, [r3, #8]
 8008f4c:	461d      	mov	r5, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	899b      	ldrh	r3, [r3, #12]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fa ff40 	bl	8003ddc <lwip_htons>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f003 0303 	and.w	r3, r3, #3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <tcp_receive+0xa8c>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <tcp_receive+0xa8e>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	442b      	add	r3, r5
 8008f70:	429c      	cmp	r4, r3
 8008f72:	d206      	bcs.n	8008f82 <tcp_receive+0xaa2>
 8008f74:	4b1e      	ldr	r3, [pc, #120]	; (8008ff0 <tcp_receive+0xb10>)
 8008f76:	f240 622c 	movw	r2, #1580	; 0x62c
 8008f7a:	4923      	ldr	r1, [pc, #140]	; (8009008 <tcp_receive+0xb28>)
 8008f7c:	481e      	ldr	r0, [pc, #120]	; (8008ff8 <tcp_receive+0xb18>)
 8008f7e:	f004 fd97 	bl	800dab0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	891b      	ldrh	r3, [r3, #8]
 8008f86:	461c      	mov	r4, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	899b      	ldrh	r3, [r3, #12]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fa ff23 	bl	8003ddc <lwip_htons>
 8008f96:	4603      	mov	r3, r0
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <tcp_receive+0xac6>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <tcp_receive+0xac8>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	1919      	adds	r1, r3, r4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008fae:	b28b      	uxth	r3, r1
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7fc ff4b 	bl	8005e54 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	891b      	ldrh	r3, [r3, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d028      	beq.n	800901a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <tcp_receive+0xb20>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01d      	beq.n	800900c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8008fd0:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <tcp_receive+0xb20>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f7fc fa70 	bl	80054c0 <pbuf_cat>
 8008fe0:	e018      	b.n	8009014 <tcp_receive+0xb34>
 8008fe2:	bf00      	nop
 8008fe4:	200000f6 	.word	0x200000f6
 8008fe8:	200000ec 	.word	0x200000ec
 8008fec:	200000cc 	.word	0x200000cc
 8008ff0:	0800fb3c 	.word	0x0800fb3c
 8008ff4:	0800ff1c 	.word	0x0800ff1c
 8008ff8:	0800fb88 	.word	0x0800fb88
 8008ffc:	0800ff58 	.word	0x0800ff58
 8009000:	200000fc 	.word	0x200000fc
 8009004:	200000f9 	.word	0x200000f9
 8009008:	0800ff78 	.word	0x0800ff78
            } else {
              recv_data = cseg->p;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	4a70      	ldr	r2, [pc, #448]	; (80091d4 <tcp_receive+0xcf4>)
 8009012:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	899b      	ldrh	r3, [r3, #12]
 8009020:	b29b      	uxth	r3, r3
 8009022:	4618      	mov	r0, r3
 8009024:	f7fa feda 	bl	8003ddc <lwip_htons>
 8009028:	4603      	mov	r3, r0
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00d      	beq.n	8009050 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009034:	4b68      	ldr	r3, [pc, #416]	; (80091d8 <tcp_receive+0xcf8>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	f043 0320 	orr.w	r3, r3, #32
 800903c:	b2da      	uxtb	r2, r3
 800903e:	4b66      	ldr	r3, [pc, #408]	; (80091d8 <tcp_receive+0xcf8>)
 8009040:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	7d1b      	ldrb	r3, [r3, #20]
 8009046:	2b04      	cmp	r3, #4
 8009048:	d102      	bne.n	8009050 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2207      	movs	r2, #7
 800904e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009058:	68b8      	ldr	r0, [r7, #8]
 800905a:	f7fd fbd7 	bl	800680c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009072:	429a      	cmp	r2, r3
 8009074:	f43f af43 	beq.w	8008efe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	8b5b      	ldrh	r3, [r3, #26]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00e      	beq.n	80090a2 <tcp_receive+0xbc2>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	8b5b      	ldrh	r3, [r3, #26]
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	b29a      	uxth	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	835a      	strh	r2, [r3, #26]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	8b5b      	ldrh	r3, [r3, #26]
 8009096:	f043 0302 	orr.w	r3, r3, #2
 800909a:	b29a      	uxth	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80090a0:	e188      	b.n	80093b4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	8b5b      	ldrh	r3, [r3, #26]
 80090a6:	f043 0301 	orr.w	r3, r3, #1
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80090b0:	e180      	b.n	80093b4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80090ba:	4848      	ldr	r0, [pc, #288]	; (80091dc <tcp_receive+0xcfc>)
 80090bc:	f7fd fbbe 	bl	800683c <tcp_seg_copy>
 80090c0:	4602      	mov	r2, r0
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	675a      	str	r2, [r3, #116]	; 0x74
 80090c6:	e16d      	b.n	80093a4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80090c8:	2300      	movs	r3, #0
 80090ca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80090d2:	e157      	b.n	8009384 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	4b41      	ldr	r3, [pc, #260]	; (80091e0 <tcp_receive+0xd00>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d11d      	bne.n	800911e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80090e2:	4b3e      	ldr	r3, [pc, #248]	; (80091dc <tcp_receive+0xcfc>)
 80090e4:	891a      	ldrh	r2, [r3, #8]
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	891b      	ldrh	r3, [r3, #8]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	f240 814f 	bls.w	800938e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80090f0:	483a      	ldr	r0, [pc, #232]	; (80091dc <tcp_receive+0xcfc>)
 80090f2:	f7fd fba3 	bl	800683c <tcp_seg_copy>
 80090f6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 8149 	beq.w	8009392 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8009100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	e002      	b.n	8009114 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009114:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009116:	6978      	ldr	r0, [r7, #20]
 8009118:	f7ff f8de 	bl	80082d8 <tcp_oos_insert_segment>
                }
                break;
 800911c:	e139      	b.n	8009392 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800911e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009120:	2b00      	cmp	r3, #0
 8009122:	d117      	bne.n	8009154 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009124:	4b2e      	ldr	r3, [pc, #184]	; (80091e0 <tcp_receive+0xd00>)
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	da57      	bge.n	80091e4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009134:	4829      	ldr	r0, [pc, #164]	; (80091dc <tcp_receive+0xcfc>)
 8009136:	f7fd fb81 	bl	800683c <tcp_seg_copy>
 800913a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 8129 	beq.w	8009396 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800914a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800914c:	69b8      	ldr	r0, [r7, #24]
 800914e:	f7ff f8c3 	bl	80082d8 <tcp_oos_insert_segment>
                  }
                  break;
 8009152:	e120      	b.n	8009396 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009154:	4b22      	ldr	r3, [pc, #136]	; (80091e0 <tcp_receive+0xd00>)
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	3b01      	subs	r3, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	db3e      	blt.n	80091e4 <tcp_receive+0xd04>
 8009166:	4b1e      	ldr	r3, [pc, #120]	; (80091e0 <tcp_receive+0xd00>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	3301      	adds	r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	dc35      	bgt.n	80091e4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009178:	4818      	ldr	r0, [pc, #96]	; (80091dc <tcp_receive+0xcfc>)
 800917a:	f7fd fb5f 	bl	800683c <tcp_seg_copy>
 800917e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 8109 	beq.w	800939a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009190:	8912      	ldrh	r2, [r2, #8]
 8009192:	441a      	add	r2, r3
 8009194:	4b12      	ldr	r3, [pc, #72]	; (80091e0 <tcp_receive+0xd00>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	dd12      	ble.n	80091c4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800919e:	4b10      	ldr	r3, [pc, #64]	; (80091e0 <tcp_receive+0xd00>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80091b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	891b      	ldrh	r3, [r3, #8]
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f7fb ff36 	bl	8005030 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80091c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c6:	69fa      	ldr	r2, [r7, #28]
 80091c8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80091ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091cc:	69f8      	ldr	r0, [r7, #28]
 80091ce:	f7ff f883 	bl	80082d8 <tcp_oos_insert_segment>
                  }
                  break;
 80091d2:	e0e2      	b.n	800939a <tcp_receive+0xeba>
 80091d4:	200000fc 	.word	0x200000fc
 80091d8:	200000f9 	.word	0x200000f9
 80091dc:	200000cc 	.word	0x200000cc
 80091e0:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f040 80c6 	bne.w	800937e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80091f2:	4b80      	ldr	r3, [pc, #512]	; (80093f4 <tcp_receive+0xf14>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f340 80bd 	ble.w	800937e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	899b      	ldrh	r3, [r3, #12]
 800920a:	b29b      	uxth	r3, r3
 800920c:	4618      	mov	r0, r3
 800920e:	f7fa fde5 	bl	8003ddc <lwip_htons>
 8009212:	4603      	mov	r3, r0
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	f040 80bf 	bne.w	800939e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009220:	4875      	ldr	r0, [pc, #468]	; (80093f8 <tcp_receive+0xf18>)
 8009222:	f7fd fb0b 	bl	800683c <tcp_seg_copy>
 8009226:	4602      	mov	r2, r0
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 80b6 	beq.w	80093a2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800923e:	8912      	ldrh	r2, [r2, #8]
 8009240:	441a      	add	r2, r3
 8009242:	4b6c      	ldr	r3, [pc, #432]	; (80093f4 <tcp_receive+0xf14>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	dd12      	ble.n	8009272 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800924c:	4b69      	ldr	r3, [pc, #420]	; (80093f4 <tcp_receive+0xf14>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	b29a      	uxth	r2, r3
 8009252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	b29b      	uxth	r3, r3
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	b29a      	uxth	r2, r3
 800925e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009260:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	891b      	ldrh	r3, [r3, #8]
 800926a:	4619      	mov	r1, r3
 800926c:	4610      	mov	r0, r2
 800926e:	f7fb fedf 	bl	8005030 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009272:	4b62      	ldr	r3, [pc, #392]	; (80093fc <tcp_receive+0xf1c>)
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	4b5e      	ldr	r3, [pc, #376]	; (80093f4 <tcp_receive+0xf14>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	441a      	add	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009286:	440b      	add	r3, r1
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	f340 8089 	ble.w	80093a2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	899b      	ldrh	r3, [r3, #12]
 8009298:	b29b      	uxth	r3, r3
 800929a:	4618      	mov	r0, r3
 800929c:	f7fa fd9e 	bl	8003ddc <lwip_htons>
 80092a0:	4603      	mov	r3, r0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d022      	beq.n	80092f2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80092ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	899b      	ldrh	r3, [r3, #12]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	b21b      	sxth	r3, r3
 80092b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80092bc:	b21c      	sxth	r4, r3
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	899b      	ldrh	r3, [r3, #12]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fa fd87 	bl	8003ddc <lwip_htons>
 80092ce:	4603      	mov	r3, r0
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fa fd7e 	bl	8003ddc <lwip_htons>
 80092e0:	4603      	mov	r3, r0
 80092e2:	b21b      	sxth	r3, r3
 80092e4:	4323      	orrs	r3, r4
 80092e6:	b21a      	sxth	r2, r3
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	b292      	uxth	r2, r2
 80092f0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fc:	4413      	add	r3, r2
 80092fe:	b299      	uxth	r1, r3
 8009300:	4b3c      	ldr	r3, [pc, #240]	; (80093f4 <tcp_receive+0xf14>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	b29a      	uxth	r2, r3
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	1a8a      	subs	r2, r1, r2
 800930c:	b292      	uxth	r2, r2
 800930e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	891b      	ldrh	r3, [r3, #8]
 800931c:	4619      	mov	r1, r3
 800931e:	4610      	mov	r0, r2
 8009320:	f7fb fe86 	bl	8005030 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	891c      	ldrh	r4, [r3, #8]
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	899b      	ldrh	r3, [r3, #12]
 8009332:	b29b      	uxth	r3, r3
 8009334:	4618      	mov	r0, r3
 8009336:	f7fa fd51 	bl	8003ddc <lwip_htons>
 800933a:	4603      	mov	r3, r0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	f003 0303 	and.w	r3, r3, #3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <tcp_receive+0xe6a>
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <tcp_receive+0xe6c>
 800934a:	2300      	movs	r3, #0
 800934c:	4423      	add	r3, r4
 800934e:	b29a      	uxth	r2, r3
 8009350:	4b2a      	ldr	r3, [pc, #168]	; (80093fc <tcp_receive+0xf1c>)
 8009352:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009354:	4b29      	ldr	r3, [pc, #164]	; (80093fc <tcp_receive+0xf1c>)
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	4b26      	ldr	r3, [pc, #152]	; (80093f4 <tcp_receive+0xf14>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	441a      	add	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	6879      	ldr	r1, [r7, #4]
 8009366:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009368:	440b      	add	r3, r1
 800936a:	429a      	cmp	r2, r3
 800936c:	d019      	beq.n	80093a2 <tcp_receive+0xec2>
 800936e:	4b24      	ldr	r3, [pc, #144]	; (8009400 <tcp_receive+0xf20>)
 8009370:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009374:	4923      	ldr	r1, [pc, #140]	; (8009404 <tcp_receive+0xf24>)
 8009376:	4824      	ldr	r0, [pc, #144]	; (8009408 <tcp_receive+0xf28>)
 8009378:	f004 fb9a 	bl	800dab0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800937c:	e011      	b.n	80093a2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800937e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	63bb      	str	r3, [r7, #56]	; 0x38
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	2b00      	cmp	r3, #0
 8009388:	f47f aea4 	bne.w	80090d4 <tcp_receive+0xbf4>
 800938c:	e00a      	b.n	80093a4 <tcp_receive+0xec4>
                break;
 800938e:	bf00      	nop
 8009390:	e008      	b.n	80093a4 <tcp_receive+0xec4>
                break;
 8009392:	bf00      	nop
 8009394:	e006      	b.n	80093a4 <tcp_receive+0xec4>
                  break;
 8009396:	bf00      	nop
 8009398:	e004      	b.n	80093a4 <tcp_receive+0xec4>
                  break;
 800939a:	bf00      	nop
 800939c:	e002      	b.n	80093a4 <tcp_receive+0xec4>
                  break;
 800939e:	bf00      	nop
 80093a0:	e000      	b.n	80093a4 <tcp_receive+0xec4>
                break;
 80093a2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 fa3f 	bl	800a828 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80093aa:	e003      	b.n	80093b4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 fa3b 	bl	800a828 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80093b2:	e01a      	b.n	80093ea <tcp_receive+0xf0a>
 80093b4:	e019      	b.n	80093ea <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80093b6:	4b0f      	ldr	r3, [pc, #60]	; (80093f4 <tcp_receive+0xf14>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db0a      	blt.n	80093da <tcp_receive+0xefa>
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <tcp_receive+0xf14>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80093d0:	440b      	add	r3, r1
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	3301      	adds	r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dd07      	ble.n	80093ea <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	8b5b      	ldrh	r3, [r3, #26]
 80093de:	f043 0302 	orr.w	r3, r3, #2
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80093e8:	e7ff      	b.n	80093ea <tcp_receive+0xf0a>
 80093ea:	bf00      	nop
 80093ec:	3750      	adds	r7, #80	; 0x50
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bdb0      	pop	{r4, r5, r7, pc}
 80093f2:	bf00      	nop
 80093f4:	200000ec 	.word	0x200000ec
 80093f8:	200000cc 	.word	0x200000cc
 80093fc:	200000f6 	.word	0x200000f6
 8009400:	0800fb3c 	.word	0x0800fb3c
 8009404:	0800fee4 	.word	0x0800fee4
 8009408:	0800fb88 	.word	0x0800fb88

0800940c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009412:	4b15      	ldr	r3, [pc, #84]	; (8009468 <tcp_get_next_optbyte+0x5c>)
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	b291      	uxth	r1, r2
 800941a:	4a13      	ldr	r2, [pc, #76]	; (8009468 <tcp_get_next_optbyte+0x5c>)
 800941c:	8011      	strh	r1, [r2, #0]
 800941e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009420:	4b12      	ldr	r3, [pc, #72]	; (800946c <tcp_get_next_optbyte+0x60>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d004      	beq.n	8009432 <tcp_get_next_optbyte+0x26>
 8009428:	4b11      	ldr	r3, [pc, #68]	; (8009470 <tcp_get_next_optbyte+0x64>)
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	88fa      	ldrh	r2, [r7, #6]
 800942e:	429a      	cmp	r2, r3
 8009430:	d208      	bcs.n	8009444 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009432:	4b10      	ldr	r3, [pc, #64]	; (8009474 <tcp_get_next_optbyte+0x68>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3314      	adds	r3, #20
 8009438:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800943a:	88fb      	ldrh	r3, [r7, #6]
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	4413      	add	r3, r2
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	e00b      	b.n	800945c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009444:	88fb      	ldrh	r3, [r7, #6]
 8009446:	b2da      	uxtb	r2, r3
 8009448:	4b09      	ldr	r3, [pc, #36]	; (8009470 <tcp_get_next_optbyte+0x64>)
 800944a:	881b      	ldrh	r3, [r3, #0]
 800944c:	b2db      	uxtb	r3, r3
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009452:	4b06      	ldr	r3, [pc, #24]	; (800946c <tcp_get_next_optbyte+0x60>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	797b      	ldrb	r3, [r7, #5]
 8009458:	4413      	add	r3, r2
 800945a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800945c:	4618      	mov	r0, r3
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	200000e8 	.word	0x200000e8
 800946c:	200000e4 	.word	0x200000e4
 8009470:	200000e2 	.word	0x200000e2
 8009474:	200000dc 	.word	0x200000dc

08009478 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d106      	bne.n	8009494 <tcp_parseopt+0x1c>
 8009486:	4b31      	ldr	r3, [pc, #196]	; (800954c <tcp_parseopt+0xd4>)
 8009488:	f240 727d 	movw	r2, #1917	; 0x77d
 800948c:	4930      	ldr	r1, [pc, #192]	; (8009550 <tcp_parseopt+0xd8>)
 800948e:	4831      	ldr	r0, [pc, #196]	; (8009554 <tcp_parseopt+0xdc>)
 8009490:	f004 fb0e 	bl	800dab0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009494:	4b30      	ldr	r3, [pc, #192]	; (8009558 <tcp_parseopt+0xe0>)
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d053      	beq.n	8009544 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800949c:	4b2f      	ldr	r3, [pc, #188]	; (800955c <tcp_parseopt+0xe4>)
 800949e:	2200      	movs	r2, #0
 80094a0:	801a      	strh	r2, [r3, #0]
 80094a2:	e043      	b.n	800952c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80094a4:	f7ff ffb2 	bl	800940c <tcp_get_next_optbyte>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d03c      	beq.n	800952c <tcp_parseopt+0xb4>
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d002      	beq.n	80094bc <tcp_parseopt+0x44>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d03f      	beq.n	800953a <tcp_parseopt+0xc2>
 80094ba:	e026      	b.n	800950a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80094bc:	f7ff ffa6 	bl	800940c <tcp_get_next_optbyte>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d13b      	bne.n	800953e <tcp_parseopt+0xc6>
 80094c6:	4b25      	ldr	r3, [pc, #148]	; (800955c <tcp_parseopt+0xe4>)
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	3302      	adds	r3, #2
 80094cc:	4a22      	ldr	r2, [pc, #136]	; (8009558 <tcp_parseopt+0xe0>)
 80094ce:	8812      	ldrh	r2, [r2, #0]
 80094d0:	4293      	cmp	r3, r2
 80094d2:	dc34      	bgt.n	800953e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80094d4:	f7ff ff9a 	bl	800940c <tcp_get_next_optbyte>
 80094d8:	4603      	mov	r3, r0
 80094da:	b29b      	uxth	r3, r3
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80094e0:	f7ff ff94 	bl	800940c <tcp_get_next_optbyte>
 80094e4:	4603      	mov	r3, r0
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	89bb      	ldrh	r3, [r7, #12]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80094ee:	89bb      	ldrh	r3, [r7, #12]
 80094f0:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80094f4:	d804      	bhi.n	8009500 <tcp_parseopt+0x88>
 80094f6:	89bb      	ldrh	r3, [r7, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <tcp_parseopt+0x88>
 80094fc:	89ba      	ldrh	r2, [r7, #12]
 80094fe:	e001      	b.n	8009504 <tcp_parseopt+0x8c>
 8009500:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009508:	e010      	b.n	800952c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800950a:	f7ff ff7f 	bl	800940c <tcp_get_next_optbyte>
 800950e:	4603      	mov	r3, r0
 8009510:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009512:	7afb      	ldrb	r3, [r7, #11]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d914      	bls.n	8009542 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009518:	7afb      	ldrb	r3, [r7, #11]
 800951a:	b29a      	uxth	r2, r3
 800951c:	4b0f      	ldr	r3, [pc, #60]	; (800955c <tcp_parseopt+0xe4>)
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	4413      	add	r3, r2
 8009522:	b29b      	uxth	r3, r3
 8009524:	3b02      	subs	r3, #2
 8009526:	b29a      	uxth	r2, r3
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <tcp_parseopt+0xe4>)
 800952a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800952c:	4b0b      	ldr	r3, [pc, #44]	; (800955c <tcp_parseopt+0xe4>)
 800952e:	881a      	ldrh	r2, [r3, #0]
 8009530:	4b09      	ldr	r3, [pc, #36]	; (8009558 <tcp_parseopt+0xe0>)
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	429a      	cmp	r2, r3
 8009536:	d3b5      	bcc.n	80094a4 <tcp_parseopt+0x2c>
 8009538:	e004      	b.n	8009544 <tcp_parseopt+0xcc>
          return;
 800953a:	bf00      	nop
 800953c:	e002      	b.n	8009544 <tcp_parseopt+0xcc>
            return;
 800953e:	bf00      	nop
 8009540:	e000      	b.n	8009544 <tcp_parseopt+0xcc>
            return;
 8009542:	bf00      	nop
      }
    }
  }
}
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	0800fb3c 	.word	0x0800fb3c
 8009550:	0800ffa0 	.word	0x0800ffa0
 8009554:	0800fb88 	.word	0x0800fb88
 8009558:	200000e0 	.word	0x200000e0
 800955c:	200000e8 	.word	0x200000e8

08009560 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009560:	b480      	push	{r7}
 8009562:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009564:	4b05      	ldr	r3, [pc, #20]	; (800957c <tcp_trigger_input_pcb_close+0x1c>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f043 0310 	orr.w	r3, r3, #16
 800956c:	b2da      	uxtb	r2, r3
 800956e:	4b03      	ldr	r3, [pc, #12]	; (800957c <tcp_trigger_input_pcb_close+0x1c>)
 8009570:	701a      	strb	r2, [r3, #0]
}
 8009572:	bf00      	nop
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	200000f9 	.word	0x200000f9

08009580 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00a      	beq.n	80095a8 <tcp_route+0x28>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	7a1b      	ldrb	r3, [r3, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d006      	beq.n	80095a8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	7a1b      	ldrb	r3, [r3, #8]
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fb fb70 	bl	8004c84 <netif_get_by_index>
 80095a4:	4603      	mov	r3, r0
 80095a6:	e003      	b.n	80095b0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f002 fe89 	bl	800c2c0 <ip4_route>
 80095ae:	4603      	mov	r3, r0
  }
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80095b8:	b590      	push	{r4, r7, lr}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	4613      	mov	r3, r2
 80095c6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d105      	bne.n	80095da <tcp_create_segment+0x22>
 80095ce:	4b44      	ldr	r3, [pc, #272]	; (80096e0 <tcp_create_segment+0x128>)
 80095d0:	22a3      	movs	r2, #163	; 0xa3
 80095d2:	4944      	ldr	r1, [pc, #272]	; (80096e4 <tcp_create_segment+0x12c>)
 80095d4:	4844      	ldr	r0, [pc, #272]	; (80096e8 <tcp_create_segment+0x130>)
 80095d6:	f004 fa6b 	bl	800dab0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d105      	bne.n	80095ec <tcp_create_segment+0x34>
 80095e0:	4b3f      	ldr	r3, [pc, #252]	; (80096e0 <tcp_create_segment+0x128>)
 80095e2:	22a4      	movs	r2, #164	; 0xa4
 80095e4:	4941      	ldr	r1, [pc, #260]	; (80096ec <tcp_create_segment+0x134>)
 80095e6:	4840      	ldr	r0, [pc, #256]	; (80096e8 <tcp_create_segment+0x130>)
 80095e8:	f004 fa62 	bl	800dab0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80095ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80095fa:	2003      	movs	r0, #3
 80095fc:	f7fb f844 	bl	8004688 <memp_malloc>
 8009600:	6138      	str	r0, [r7, #16]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d104      	bne.n	8009612 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f7fb fe97 	bl	800533c <pbuf_free>
    return NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	e061      	b.n	80096d6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009618:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	891a      	ldrh	r2, [r3, #8]
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	b29b      	uxth	r3, r3
 800962e:	429a      	cmp	r2, r3
 8009630:	d205      	bcs.n	800963e <tcp_create_segment+0x86>
 8009632:	4b2b      	ldr	r3, [pc, #172]	; (80096e0 <tcp_create_segment+0x128>)
 8009634:	22b0      	movs	r2, #176	; 0xb0
 8009636:	492e      	ldr	r1, [pc, #184]	; (80096f0 <tcp_create_segment+0x138>)
 8009638:	482b      	ldr	r0, [pc, #172]	; (80096e8 <tcp_create_segment+0x130>)
 800963a:	f004 fa39 	bl	800dab0 <iprintf>
  seg->len = p->tot_len - optlen;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	891a      	ldrh	r2, [r3, #8]
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	b29b      	uxth	r3, r3
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	b29a      	uxth	r2, r3
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800964e:	2114      	movs	r1, #20
 8009650:	68b8      	ldr	r0, [r7, #8]
 8009652:	f7fb fddd 	bl	8005210 <pbuf_add_header>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d004      	beq.n	8009666 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800965c:	6938      	ldr	r0, [r7, #16]
 800965e:	f7fd f8d5 	bl	800680c <tcp_seg_free>
    return NULL;
 8009662:	2300      	movs	r3, #0
 8009664:	e037      	b.n	80096d6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8ada      	ldrh	r2, [r3, #22]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	68dc      	ldr	r4, [r3, #12]
 8009678:	4610      	mov	r0, r2
 800967a:	f7fa fbaf 	bl	8003ddc <lwip_htons>
 800967e:	4603      	mov	r3, r0
 8009680:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8b1a      	ldrh	r2, [r3, #24]
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	68dc      	ldr	r4, [r3, #12]
 800968a:	4610      	mov	r0, r2
 800968c:	f7fa fba6 	bl	8003ddc <lwip_htons>
 8009690:	4603      	mov	r3, r0
 8009692:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	68dc      	ldr	r4, [r3, #12]
 8009698:	6838      	ldr	r0, [r7, #0]
 800969a:	f7fa fbb4 	bl	8003e06 <lwip_htonl>
 800969e:	4603      	mov	r3, r0
 80096a0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	089b      	lsrs	r3, r3, #2
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	3305      	adds	r3, #5
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	031b      	lsls	r3, r3, #12
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	68dc      	ldr	r4, [r3, #12]
 80096be:	4610      	mov	r0, r2
 80096c0:	f7fa fb8c 	bl	8003ddc <lwip_htons>
 80096c4:	4603      	mov	r3, r0
 80096c6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	749a      	strb	r2, [r3, #18]
 80096d0:	2200      	movs	r2, #0
 80096d2:	74da      	strb	r2, [r3, #19]
  return seg;
 80096d4:	693b      	ldr	r3, [r7, #16]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd90      	pop	{r4, r7, pc}
 80096de:	bf00      	nop
 80096e0:	0800ffbc 	.word	0x0800ffbc
 80096e4:	0800fff0 	.word	0x0800fff0
 80096e8:	08010010 	.word	0x08010010
 80096ec:	08010038 	.word	0x08010038
 80096f0:	0801005c 	.word	0x0801005c

080096f4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80096f4:	b590      	push	{r4, r7, lr}
 80096f6:	b08b      	sub	sp, #44	; 0x2c
 80096f8:	af02      	add	r7, sp, #8
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009700:	2300      	movs	r3, #0
 8009702:	61fb      	str	r3, [r7, #28]
 8009704:	2300      	movs	r3, #0
 8009706:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009708:	2300      	movs	r3, #0
 800970a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <tcp_split_unsent_seg+0x2c>
 8009712:	4b95      	ldr	r3, [pc, #596]	; (8009968 <tcp_split_unsent_seg+0x274>)
 8009714:	f240 324b 	movw	r2, #843	; 0x34b
 8009718:	4994      	ldr	r1, [pc, #592]	; (800996c <tcp_split_unsent_seg+0x278>)
 800971a:	4895      	ldr	r0, [pc, #596]	; (8009970 <tcp_split_unsent_seg+0x27c>)
 800971c:	f004 f9c8 	bl	800dab0 <iprintf>

  useg = pcb->unsent;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009724:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800972c:	f04f 33ff 	mov.w	r3, #4294967295
 8009730:	e116      	b.n	8009960 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009732:	887b      	ldrh	r3, [r7, #2]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d109      	bne.n	800974c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009738:	4b8b      	ldr	r3, [pc, #556]	; (8009968 <tcp_split_unsent_seg+0x274>)
 800973a:	f240 3253 	movw	r2, #851	; 0x353
 800973e:	498d      	ldr	r1, [pc, #564]	; (8009974 <tcp_split_unsent_seg+0x280>)
 8009740:	488b      	ldr	r0, [pc, #556]	; (8009970 <tcp_split_unsent_seg+0x27c>)
 8009742:	f004 f9b5 	bl	800dab0 <iprintf>
    return ERR_VAL;
 8009746:	f06f 0305 	mvn.w	r3, #5
 800974a:	e109      	b.n	8009960 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	891b      	ldrh	r3, [r3, #8]
 8009750:	887a      	ldrh	r2, [r7, #2]
 8009752:	429a      	cmp	r2, r3
 8009754:	d301      	bcc.n	800975a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	e102      	b.n	8009960 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800975e:	887a      	ldrh	r2, [r7, #2]
 8009760:	429a      	cmp	r2, r3
 8009762:	d906      	bls.n	8009772 <tcp_split_unsent_seg+0x7e>
 8009764:	4b80      	ldr	r3, [pc, #512]	; (8009968 <tcp_split_unsent_seg+0x274>)
 8009766:	f240 325b 	movw	r2, #859	; 0x35b
 800976a:	4983      	ldr	r1, [pc, #524]	; (8009978 <tcp_split_unsent_seg+0x284>)
 800976c:	4880      	ldr	r0, [pc, #512]	; (8009970 <tcp_split_unsent_seg+0x27c>)
 800976e:	f004 f99f 	bl	800dab0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	891b      	ldrh	r3, [r3, #8]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d106      	bne.n	8009788 <tcp_split_unsent_seg+0x94>
 800977a:	4b7b      	ldr	r3, [pc, #492]	; (8009968 <tcp_split_unsent_seg+0x274>)
 800977c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009780:	497e      	ldr	r1, [pc, #504]	; (800997c <tcp_split_unsent_seg+0x288>)
 8009782:	487b      	ldr	r0, [pc, #492]	; (8009970 <tcp_split_unsent_seg+0x27c>)
 8009784:	f004 f994 	bl	800dab0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	7a9b      	ldrb	r3, [r3, #10]
 800978c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 0304 	and.w	r3, r3, #4
 8009798:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	891a      	ldrh	r2, [r3, #8]
 800979e:	887b      	ldrh	r3, [r7, #2]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	89bb      	ldrh	r3, [r7, #12]
 80097aa:	4413      	add	r3, r2
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80097b2:	4619      	mov	r1, r3
 80097b4:	2036      	movs	r0, #54	; 0x36
 80097b6:	f7fb fae1 	bl	8004d7c <pbuf_alloc>
 80097ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 80b7 	beq.w	8009932 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	891a      	ldrh	r2, [r3, #8]
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	891b      	ldrh	r3, [r3, #8]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	887b      	ldrh	r3, [r7, #2]
 80097d4:	4413      	add	r3, r2
 80097d6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	6858      	ldr	r0, [r3, #4]
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
 80097e2:	18d1      	adds	r1, r2, r3
 80097e4:	897b      	ldrh	r3, [r7, #10]
 80097e6:	89ba      	ldrh	r2, [r7, #12]
 80097e8:	f7fb ff92 	bl	8005710 <pbuf_copy_partial>
 80097ec:	4603      	mov	r3, r0
 80097ee:	461a      	mov	r2, r3
 80097f0:	89bb      	ldrh	r3, [r7, #12]
 80097f2:	4293      	cmp	r3, r2
 80097f4:	f040 809f 	bne.w	8009936 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	899b      	ldrh	r3, [r3, #12]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	4618      	mov	r0, r3
 8009802:	f7fa faeb 	bl	8003ddc <lwip_htons>
 8009806:	4603      	mov	r3, r0
 8009808:	b2db      	uxtb	r3, r3
 800980a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800980e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009810:	2300      	movs	r3, #0
 8009812:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009814:	7efb      	ldrb	r3, [r7, #27]
 8009816:	f003 0308 	and.w	r3, r3, #8
 800981a:	2b00      	cmp	r3, #0
 800981c:	d007      	beq.n	800982e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800981e:	7efb      	ldrb	r3, [r7, #27]
 8009820:	f023 0308 	bic.w	r3, r3, #8
 8009824:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009826:	7ebb      	ldrb	r3, [r7, #26]
 8009828:	f043 0308 	orr.w	r3, r3, #8
 800982c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800982e:	7efb      	ldrb	r3, [r7, #27]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d007      	beq.n	8009848 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009838:	7efb      	ldrb	r3, [r7, #27]
 800983a:	f023 0301 	bic.w	r3, r3, #1
 800983e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009840:	7ebb      	ldrb	r3, [r7, #26]
 8009842:	f043 0301 	orr.w	r3, r3, #1
 8009846:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	4618      	mov	r0, r3
 8009850:	f7fa fad9 	bl	8003e06 <lwip_htonl>
 8009854:	4602      	mov	r2, r0
 8009856:	887b      	ldrh	r3, [r7, #2]
 8009858:	18d1      	adds	r1, r2, r3
 800985a:	7eba      	ldrb	r2, [r7, #26]
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	460b      	mov	r3, r1
 8009862:	6939      	ldr	r1, [r7, #16]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff fea7 	bl	80095b8 <tcp_create_segment>
 800986a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d063      	beq.n	800993a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	4618      	mov	r0, r3
 8009878:	f7fb fde8 	bl	800544c <pbuf_clen>
 800987c:	4603      	mov	r3, r0
 800987e:	461a      	mov	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009886:	1a9b      	subs	r3, r3, r2
 8009888:	b29a      	uxth	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	6858      	ldr	r0, [r3, #4]
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	891a      	ldrh	r2, [r3, #8]
 800989a:	89bb      	ldrh	r3, [r7, #12]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	b29b      	uxth	r3, r3
 80098a0:	4619      	mov	r1, r3
 80098a2:	f7fb fbc5 	bl	8005030 <pbuf_realloc>
  useg->len -= remainder;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	891a      	ldrh	r2, [r3, #8]
 80098aa:	89bb      	ldrh	r3, [r7, #12]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	899b      	ldrh	r3, [r3, #12]
 80098ba:	b29c      	uxth	r4, r3
 80098bc:	7efb      	ldrb	r3, [r7, #27]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fa fa8b 	bl	8003ddc <lwip_htons>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	4322      	orrs	r2, r4
 80098d0:	b292      	uxth	r2, r2
 80098d2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fb fdb7 	bl	800544c <pbuf_clen>
 80098de:	4603      	mov	r3, r0
 80098e0:	461a      	mov	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80098e8:	4413      	add	r3, r2
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fb fda8 	bl	800544c <pbuf_clen>
 80098fc:	4603      	mov	r3, r0
 80098fe:	461a      	mov	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009906:	4413      	add	r3, r2
 8009908:	b29a      	uxth	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d103      	bne.n	800992e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	e016      	b.n	8009960 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009932:	bf00      	nop
 8009934:	e002      	b.n	800993c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009936:	bf00      	nop
 8009938:	e000      	b.n	800993c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800993a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d006      	beq.n	8009950 <tcp_split_unsent_seg+0x25c>
 8009942:	4b09      	ldr	r3, [pc, #36]	; (8009968 <tcp_split_unsent_seg+0x274>)
 8009944:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009948:	490d      	ldr	r1, [pc, #52]	; (8009980 <tcp_split_unsent_seg+0x28c>)
 800994a:	4809      	ldr	r0, [pc, #36]	; (8009970 <tcp_split_unsent_seg+0x27c>)
 800994c:	f004 f8b0 	bl	800dab0 <iprintf>
  if (p != NULL) {
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009956:	6938      	ldr	r0, [r7, #16]
 8009958:	f7fb fcf0 	bl	800533c <pbuf_free>
  }

  return ERR_MEM;
 800995c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009960:	4618      	mov	r0, r3
 8009962:	3724      	adds	r7, #36	; 0x24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd90      	pop	{r4, r7, pc}
 8009968:	0800ffbc 	.word	0x0800ffbc
 800996c:	08010350 	.word	0x08010350
 8009970:	08010010 	.word	0x08010010
 8009974:	08010374 	.word	0x08010374
 8009978:	08010398 	.word	0x08010398
 800997c:	080103a8 	.word	0x080103a8
 8009980:	080103b8 	.word	0x080103b8

08009984 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009984:	b590      	push	{r4, r7, lr}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <tcp_send_fin+0x1c>
 8009992:	4b21      	ldr	r3, [pc, #132]	; (8009a18 <tcp_send_fin+0x94>)
 8009994:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009998:	4920      	ldr	r1, [pc, #128]	; (8009a1c <tcp_send_fin+0x98>)
 800999a:	4821      	ldr	r0, [pc, #132]	; (8009a20 <tcp_send_fin+0x9c>)
 800999c:	f004 f888 	bl	800dab0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d02e      	beq.n	8009a06 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ac:	60fb      	str	r3, [r7, #12]
 80099ae:	e002      	b.n	80099b6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1f8      	bne.n	80099b0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	899b      	ldrh	r3, [r3, #12]
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fa fa08 	bl	8003ddc <lwip_htons>
 80099cc:	4603      	mov	r3, r0
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 0307 	and.w	r3, r3, #7
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d116      	bne.n	8009a06 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	899b      	ldrh	r3, [r3, #12]
 80099de:	b29c      	uxth	r4, r3
 80099e0:	2001      	movs	r0, #1
 80099e2:	f7fa f9fb 	bl	8003ddc <lwip_htons>
 80099e6:	4603      	mov	r3, r0
 80099e8:	461a      	mov	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	4322      	orrs	r2, r4
 80099f0:	b292      	uxth	r2, r2
 80099f2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	8b5b      	ldrh	r3, [r3, #26]
 80099f8:	f043 0320 	orr.w	r3, r3, #32
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e004      	b.n	8009a10 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009a06:	2101      	movs	r1, #1
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f80b 	bl	8009a24 <tcp_enqueue_flags>
 8009a0e:	4603      	mov	r3, r0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd90      	pop	{r4, r7, pc}
 8009a18:	0800ffbc 	.word	0x0800ffbc
 8009a1c:	080103c4 	.word	0x080103c4
 8009a20:	08010010 	.word	0x08010010

08009a24 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08a      	sub	sp, #40	; 0x28
 8009a28:	af02      	add	r7, sp, #8
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	f003 0303 	and.w	r3, r3, #3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d106      	bne.n	8009a50 <tcp_enqueue_flags+0x2c>
 8009a42:	4b67      	ldr	r3, [pc, #412]	; (8009be0 <tcp_enqueue_flags+0x1bc>)
 8009a44:	f240 4212 	movw	r2, #1042	; 0x412
 8009a48:	4966      	ldr	r1, [pc, #408]	; (8009be4 <tcp_enqueue_flags+0x1c0>)
 8009a4a:	4867      	ldr	r0, [pc, #412]	; (8009be8 <tcp_enqueue_flags+0x1c4>)
 8009a4c:	f004 f830 	bl	800dab0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d106      	bne.n	8009a64 <tcp_enqueue_flags+0x40>
 8009a56:	4b62      	ldr	r3, [pc, #392]	; (8009be0 <tcp_enqueue_flags+0x1bc>)
 8009a58:	f240 4213 	movw	r2, #1043	; 0x413
 8009a5c:	4963      	ldr	r1, [pc, #396]	; (8009bec <tcp_enqueue_flags+0x1c8>)
 8009a5e:	4862      	ldr	r0, [pc, #392]	; (8009be8 <tcp_enqueue_flags+0x1c4>)
 8009a60:	f004 f826 	bl	800dab0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	f003 0302 	and.w	r3, r3, #2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009a72:	7ffb      	ldrb	r3, [r7, #31]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	f003 0304 	and.w	r3, r3, #4
 8009a7c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009a86:	4619      	mov	r1, r3
 8009a88:	2036      	movs	r0, #54	; 0x36
 8009a8a:	f7fb f977 	bl	8004d7c <pbuf_alloc>
 8009a8e:	6138      	str	r0, [r7, #16]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d109      	bne.n	8009aaa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	8b5b      	ldrh	r3, [r3, #26]
 8009a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa8:	e095      	b.n	8009bd6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	895a      	ldrh	r2, [r3, #10]
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d206      	bcs.n	8009ac4 <tcp_enqueue_flags+0xa0>
 8009ab6:	4b4a      	ldr	r3, [pc, #296]	; (8009be0 <tcp_enqueue_flags+0x1bc>)
 8009ab8:	f240 423a 	movw	r2, #1082	; 0x43a
 8009abc:	494c      	ldr	r1, [pc, #304]	; (8009bf0 <tcp_enqueue_flags+0x1cc>)
 8009abe:	484a      	ldr	r0, [pc, #296]	; (8009be8 <tcp_enqueue_flags+0x1c4>)
 8009ac0:	f003 fff6 	bl	800dab0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009ac8:	78fa      	ldrb	r2, [r7, #3]
 8009aca:	7ffb      	ldrb	r3, [r7, #31]
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	6939      	ldr	r1, [r7, #16]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff fd70 	bl	80095b8 <tcp_create_segment>
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d109      	bne.n	8009af4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	8b5b      	ldrh	r3, [r3, #26]
 8009ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009aee:	f04f 33ff 	mov.w	r3, #4294967295
 8009af2:	e070      	b.n	8009bd6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f003 0303 	and.w	r3, r3, #3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d006      	beq.n	8009b0e <tcp_enqueue_flags+0xea>
 8009b00:	4b37      	ldr	r3, [pc, #220]	; (8009be0 <tcp_enqueue_flags+0x1bc>)
 8009b02:	f240 4242 	movw	r2, #1090	; 0x442
 8009b06:	493b      	ldr	r1, [pc, #236]	; (8009bf4 <tcp_enqueue_flags+0x1d0>)
 8009b08:	4837      	ldr	r0, [pc, #220]	; (8009be8 <tcp_enqueue_flags+0x1c4>)
 8009b0a:	f003 ffd1 	bl	800dab0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	891b      	ldrh	r3, [r3, #8]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d006      	beq.n	8009b24 <tcp_enqueue_flags+0x100>
 8009b16:	4b32      	ldr	r3, [pc, #200]	; (8009be0 <tcp_enqueue_flags+0x1bc>)
 8009b18:	f240 4243 	movw	r2, #1091	; 0x443
 8009b1c:	4936      	ldr	r1, [pc, #216]	; (8009bf8 <tcp_enqueue_flags+0x1d4>)
 8009b1e:	4832      	ldr	r0, [pc, #200]	; (8009be8 <tcp_enqueue_flags+0x1c4>)
 8009b20:	f003 ffc6 	bl	800dab0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	66da      	str	r2, [r3, #108]	; 0x6c
 8009b32:	e00d      	b.n	8009b50 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	e002      	b.n	8009b42 <tcp_enqueue_flags+0x11e>
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1f8      	bne.n	8009b3c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d104      	bne.n	8009b6c <tcp_enqueue_flags+0x148>
 8009b62:	78fb      	ldrb	r3, [r7, #3]
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d004      	beq.n	8009b76 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009b76:	78fb      	ldrb	r3, [r7, #3]
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d006      	beq.n	8009b8e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	8b5b      	ldrh	r3, [r3, #26]
 8009b84:	f043 0320 	orr.w	r3, r3, #32
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fb fc5a 	bl	800544c <pbuf_clen>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ba2:	4413      	add	r3, r2
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00e      	beq.n	8009bd4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10a      	bne.n	8009bd4 <tcp_enqueue_flags+0x1b0>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <tcp_enqueue_flags+0x1b0>
 8009bc6:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <tcp_enqueue_flags+0x1bc>)
 8009bc8:	f240 4266 	movw	r2, #1126	; 0x466
 8009bcc:	490b      	ldr	r1, [pc, #44]	; (8009bfc <tcp_enqueue_flags+0x1d8>)
 8009bce:	4806      	ldr	r0, [pc, #24]	; (8009be8 <tcp_enqueue_flags+0x1c4>)
 8009bd0:	f003 ff6e 	bl	800dab0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3720      	adds	r7, #32
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	0800ffbc 	.word	0x0800ffbc
 8009be4:	080103e0 	.word	0x080103e0
 8009be8:	08010010 	.word	0x08010010
 8009bec:	08010438 	.word	0x08010438
 8009bf0:	08010458 	.word	0x08010458
 8009bf4:	08010494 	.word	0x08010494
 8009bf8:	080104ac 	.word	0x080104ac
 8009bfc:	080104d8 	.word	0x080104d8

08009c00 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009c00:	b5b0      	push	{r4, r5, r7, lr}
 8009c02:	b08a      	sub	sp, #40	; 0x28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <tcp_output+0x1c>
 8009c0e:	4ba0      	ldr	r3, [pc, #640]	; (8009e90 <tcp_output+0x290>)
 8009c10:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009c14:	499f      	ldr	r1, [pc, #636]	; (8009e94 <tcp_output+0x294>)
 8009c16:	48a0      	ldr	r0, [pc, #640]	; (8009e98 <tcp_output+0x298>)
 8009c18:	f003 ff4a 	bl	800dab0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7d1b      	ldrb	r3, [r3, #20]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d106      	bne.n	8009c32 <tcp_output+0x32>
 8009c24:	4b9a      	ldr	r3, [pc, #616]	; (8009e90 <tcp_output+0x290>)
 8009c26:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8009c2a:	499c      	ldr	r1, [pc, #624]	; (8009e9c <tcp_output+0x29c>)
 8009c2c:	489a      	ldr	r0, [pc, #616]	; (8009e98 <tcp_output+0x298>)
 8009c2e:	f003 ff3f 	bl	800dab0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009c32:	4b9b      	ldr	r3, [pc, #620]	; (8009ea0 <tcp_output+0x2a0>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d101      	bne.n	8009c40 <tcp_output+0x40>
    return ERR_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e1d2      	b.n	8009fe6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d203      	bcs.n	8009c58 <tcp_output+0x58>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c56:	e002      	b.n	8009c5e <tcp_output+0x5e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c5e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c64:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10b      	bne.n	8009c84 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	8b5b      	ldrh	r3, [r3, #26]
 8009c70:	f003 0302 	and.w	r3, r3, #2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 81a9 	beq.w	8009fcc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fdd4 	bl	800a828 <tcp_send_empty_ack>
 8009c80:	4603      	mov	r3, r0
 8009c82:	e1b0      	b.n	8009fe6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff fc77 	bl	8009580 <tcp_route>
 8009c92:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d102      	bne.n	8009ca0 <tcp_output+0xa0>
    return ERR_RTE;
 8009c9a:	f06f 0303 	mvn.w	r3, #3
 8009c9e:	e1a2      	b.n	8009fe6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <tcp_output+0xae>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d111      	bne.n	8009cd2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d002      	beq.n	8009cba <tcp_output+0xba>
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	e000      	b.n	8009cbc <tcp_output+0xbc>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d102      	bne.n	8009cca <tcp_output+0xca>
      return ERR_RTE;
 8009cc4:	f06f 0303 	mvn.w	r3, #3
 8009cc8:	e18d      	b.n	8009fe6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fa f894 	bl	8003e06 <lwip_htonl>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce8:	8912      	ldrh	r2, [r2, #8]
 8009cea:	4413      	add	r3, r2
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d227      	bcs.n	8009d42 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d114      	bne.n	8009d2a <tcp_output+0x12a>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d110      	bne.n	8009d2a <tcp_output+0x12a>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10b      	bne.n	8009d2a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	8b5b      	ldrh	r3, [r3, #26]
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 814c 	beq.w	8009fd0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fd75 	bl	800a828 <tcp_send_empty_ack>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	e151      	b.n	8009fe6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 811b 	beq.w	8009f8e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8009d58:	e002      	b.n	8009d60 <tcp_output+0x160>
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	623b      	str	r3, [r7, #32]
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1f8      	bne.n	8009d5a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009d68:	e111      	b.n	8009f8e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	899b      	ldrh	r3, [r3, #12]
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fa f832 	bl	8003ddc <lwip_htons>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	f003 0304 	and.w	r3, r3, #4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d006      	beq.n	8009d92 <tcp_output+0x192>
 8009d84:	4b42      	ldr	r3, [pc, #264]	; (8009e90 <tcp_output+0x290>)
 8009d86:	f240 5237 	movw	r2, #1335	; 0x537
 8009d8a:	4946      	ldr	r1, [pc, #280]	; (8009ea4 <tcp_output+0x2a4>)
 8009d8c:	4842      	ldr	r0, [pc, #264]	; (8009e98 <tcp_output+0x298>)
 8009d8e:	f003 fe8f 	bl	800dab0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01f      	beq.n	8009dda <tcp_output+0x1da>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8b5b      	ldrh	r3, [r3, #26]
 8009d9e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d119      	bne.n	8009dda <tcp_output+0x1da>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <tcp_output+0x1c6>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d110      	bne.n	8009dda <tcp_output+0x1da>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dbc:	891a      	ldrh	r2, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d209      	bcs.n	8009dda <tcp_output+0x1da>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d004      	beq.n	8009dda <tcp_output+0x1da>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009dd6:	2b0f      	cmp	r3, #15
 8009dd8:	d901      	bls.n	8009dde <tcp_output+0x1de>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <tcp_output+0x1e0>
 8009dde:	2300      	movs	r3, #0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d106      	bne.n	8009df2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	8b5b      	ldrh	r3, [r3, #26]
 8009de8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 80e3 	beq.w	8009fb8 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	7d1b      	ldrb	r3, [r3, #20]
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d00d      	beq.n	8009e16 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	899b      	ldrh	r3, [r3, #12]
 8009e00:	b29c      	uxth	r4, r3
 8009e02:	2010      	movs	r0, #16
 8009e04:	f7f9 ffea 	bl	8003ddc <lwip_htons>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	4322      	orrs	r2, r4
 8009e12:	b292      	uxth	r2, r2
 8009e14:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	6879      	ldr	r1, [r7, #4]
 8009e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e1c:	f000 f908 	bl	800a030 <tcp_output_segment>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d009      	beq.n	8009e40 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	8b5b      	ldrh	r3, [r3, #26]
 8009e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	835a      	strh	r2, [r3, #26]
      return err;
 8009e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e3e:	e0d2      	b.n	8009fe6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	7d1b      	ldrb	r3, [r3, #20]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d006      	beq.n	8009e5e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	8b5b      	ldrh	r3, [r3, #26]
 8009e54:	f023 0303 	bic.w	r3, r3, #3
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7f9 ffce 	bl	8003e06 <lwip_htonl>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	891b      	ldrh	r3, [r3, #8]
 8009e70:	461d      	mov	r5, r3
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	899b      	ldrh	r3, [r3, #12]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7f9 ffae 	bl	8003ddc <lwip_htons>
 8009e80:	4603      	mov	r3, r0
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 0303 	and.w	r3, r3, #3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00d      	beq.n	8009ea8 <tcp_output+0x2a8>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e00c      	b.n	8009eaa <tcp_output+0x2aa>
 8009e90:	0800ffbc 	.word	0x0800ffbc
 8009e94:	08010500 	.word	0x08010500
 8009e98:	08010010 	.word	0x08010010
 8009e9c:	08010518 	.word	0x08010518
 8009ea0:	20006518 	.word	0x20006518
 8009ea4:	08010540 	.word	0x08010540
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	442b      	add	r3, r5
 8009eac:	4423      	add	r3, r4
 8009eae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	da02      	bge.n	8009ec2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	891b      	ldrh	r3, [r3, #8]
 8009ec6:	461c      	mov	r4, r3
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	899b      	ldrh	r3, [r3, #12]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f9 ff83 	bl	8003ddc <lwip_htons>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	f003 0303 	and.w	r3, r3, #3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <tcp_output+0x2e6>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e000      	b.n	8009ee8 <tcp_output+0x2e8>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	4423      	add	r3, r4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d049      	beq.n	8009f82 <tcp_output+0x382>
      seg->next = NULL;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d105      	bne.n	8009f08 <tcp_output+0x308>
        pcb->unacked = seg;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f00:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	623b      	str	r3, [r7, #32]
 8009f06:	e03f      	b.n	8009f88 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7f9 ff79 	bl	8003e06 <lwip_htonl>
 8009f14:	4604      	mov	r4, r0
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7f9 ff72 	bl	8003e06 <lwip_htonl>
 8009f22:	4603      	mov	r3, r0
 8009f24:	1ae3      	subs	r3, r4, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	da24      	bge.n	8009f74 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	3370      	adds	r3, #112	; 0x70
 8009f2e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009f30:	e002      	b.n	8009f38 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d011      	beq.n	8009f64 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7f9 ff5c 	bl	8003e06 <lwip_htonl>
 8009f4e:	4604      	mov	r4, r0
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7f9 ff55 	bl	8003e06 <lwip_htonl>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dbe6      	blt.n	8009f32 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	e009      	b.n	8009f88 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f78:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	623b      	str	r3, [r7, #32]
 8009f80:	e002      	b.n	8009f88 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f84:	f7fc fc42 	bl	800680c <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f8c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d012      	beq.n	8009fba <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f9 ff33 	bl	8003e06 <lwip_htonl>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009faa:	8912      	ldrh	r2, [r2, #8]
 8009fac:	4413      	add	r3, r2
  while (seg != NULL &&
 8009fae:	69ba      	ldr	r2, [r7, #24]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	f4bf aeda 	bcs.w	8009d6a <tcp_output+0x16a>
 8009fb6:	e000      	b.n	8009fba <tcp_output+0x3ba>
      break;
 8009fb8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d108      	bne.n	8009fd4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009fca:	e004      	b.n	8009fd6 <tcp_output+0x3d6>
    goto output_done;
 8009fcc:	bf00      	nop
 8009fce:	e002      	b.n	8009fd6 <tcp_output+0x3d6>
    goto output_done;
 8009fd0:	bf00      	nop
 8009fd2:	e000      	b.n	8009fd6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009fd4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	8b5b      	ldrh	r3, [r3, #26]
 8009fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3728      	adds	r7, #40	; 0x28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bdb0      	pop	{r4, r5, r7, pc}
 8009fee:	bf00      	nop

08009ff0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d106      	bne.n	800a00c <tcp_output_segment_busy+0x1c>
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <tcp_output_segment_busy+0x34>)
 800a000:	f240 529a 	movw	r2, #1434	; 0x59a
 800a004:	4908      	ldr	r1, [pc, #32]	; (800a028 <tcp_output_segment_busy+0x38>)
 800a006:	4809      	ldr	r0, [pc, #36]	; (800a02c <tcp_output_segment_busy+0x3c>)
 800a008:	f003 fd52 	bl	800dab0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	7b9b      	ldrb	r3, [r3, #14]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d001      	beq.n	800a01a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	0800ffbc 	.word	0x0800ffbc
 800a028:	08010558 	.word	0x08010558
 800a02c:	08010010 	.word	0x08010010

0800a030 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a030:	b5b0      	push	{r4, r5, r7, lr}
 800a032:	b08c      	sub	sp, #48	; 0x30
 800a034:	af04      	add	r7, sp, #16
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d106      	bne.n	800a050 <tcp_output_segment+0x20>
 800a042:	4b64      	ldr	r3, [pc, #400]	; (800a1d4 <tcp_output_segment+0x1a4>)
 800a044:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a048:	4963      	ldr	r1, [pc, #396]	; (800a1d8 <tcp_output_segment+0x1a8>)
 800a04a:	4864      	ldr	r0, [pc, #400]	; (800a1dc <tcp_output_segment+0x1ac>)
 800a04c:	f003 fd30 	bl	800dab0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d106      	bne.n	800a064 <tcp_output_segment+0x34>
 800a056:	4b5f      	ldr	r3, [pc, #380]	; (800a1d4 <tcp_output_segment+0x1a4>)
 800a058:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a05c:	4960      	ldr	r1, [pc, #384]	; (800a1e0 <tcp_output_segment+0x1b0>)
 800a05e:	485f      	ldr	r0, [pc, #380]	; (800a1dc <tcp_output_segment+0x1ac>)
 800a060:	f003 fd26 	bl	800dab0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d106      	bne.n	800a078 <tcp_output_segment+0x48>
 800a06a:	4b5a      	ldr	r3, [pc, #360]	; (800a1d4 <tcp_output_segment+0x1a4>)
 800a06c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a070:	495c      	ldr	r1, [pc, #368]	; (800a1e4 <tcp_output_segment+0x1b4>)
 800a072:	485a      	ldr	r0, [pc, #360]	; (800a1dc <tcp_output_segment+0x1ac>)
 800a074:	f003 fd1c 	bl	800dab0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7ff ffb9 	bl	8009ff0 <tcp_output_segment_busy>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	e0a0      	b.n	800a1ca <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	68dc      	ldr	r4, [r3, #12]
 800a090:	4610      	mov	r0, r2
 800a092:	f7f9 feb8 	bl	8003e06 <lwip_htonl>
 800a096:	4603      	mov	r3, r0
 800a098:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68dc      	ldr	r4, [r3, #12]
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	f7f9 fe9a 	bl	8003ddc <lwip_htons>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a0b4:	441a      	add	r2, r3
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	3314      	adds	r3, #20
 800a0c0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	7a9b      	ldrb	r3, [r3, #10]
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d015      	beq.n	800a0fa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800a0da:	f7fc fe8d 	bl	8006df8 <tcp_eff_send_mss_netif>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a0e2:	8b7b      	ldrh	r3, [r7, #26]
 800a0e4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7f9 fe8c 	bl	8003e06 <lwip_htonl>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a100:	2b00      	cmp	r3, #0
 800a102:	da02      	bge.n	800a10a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2200      	movs	r2, #0
 800a108:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10c      	bne.n	800a12c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a112:	4b35      	ldr	r3, [pc, #212]	; (800a1e8 <tcp_output_segment+0x1b8>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	4618      	mov	r0, r3
 800a122:	f7f9 fe70 	bl	8003e06 <lwip_htonl>
 800a126:	4602      	mov	r2, r0
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	461a      	mov	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	8959      	ldrh	r1, [r3, #10]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	8b3a      	ldrh	r2, [r7, #24]
 800a148:	1a8a      	subs	r2, r1, r2
 800a14a:	b292      	uxth	r2, r2
 800a14c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	8919      	ldrh	r1, [r3, #8]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	8b3a      	ldrh	r2, [r7, #24]
 800a15a:	1a8a      	subs	r2, r1, r2
 800a15c:	b292      	uxth	r2, r2
 800a15e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	68d2      	ldr	r2, [r2, #12]
 800a168:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	741a      	strb	r2, [r3, #16]
 800a172:	2200      	movs	r2, #0
 800a174:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f103 0214 	add.w	r2, r3, #20
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	7a9b      	ldrb	r3, [r3, #10]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	f003 0304 	and.w	r3, r3, #4
 800a188:	4413      	add	r3, r2
 800a18a:	69fa      	ldr	r2, [r7, #28]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d006      	beq.n	800a19e <tcp_output_segment+0x16e>
 800a190:	4b10      	ldr	r3, [pc, #64]	; (800a1d4 <tcp_output_segment+0x1a4>)
 800a192:	f240 621c 	movw	r2, #1564	; 0x61c
 800a196:	4915      	ldr	r1, [pc, #84]	; (800a1ec <tcp_output_segment+0x1bc>)
 800a198:	4810      	ldr	r0, [pc, #64]	; (800a1dc <tcp_output_segment+0x1ac>)
 800a19a:	f003 fc89 	bl	800dab0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6858      	ldr	r0, [r3, #4]
 800a1a2:	68b9      	ldr	r1, [r7, #8]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	1d1c      	adds	r4, r3, #4
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	7add      	ldrb	r5, [r3, #11]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	7a9b      	ldrb	r3, [r3, #10]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	9202      	str	r2, [sp, #8]
 800a1b4:	2206      	movs	r2, #6
 800a1b6:	9201      	str	r2, [sp, #4]
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	4622      	mov	r2, r4
 800a1be:	f002 fa3b 	bl	800c638 <ip4_output_if>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a1c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3720      	adds	r7, #32
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	0800ffbc 	.word	0x0800ffbc
 800a1d8:	08010580 	.word	0x08010580
 800a1dc:	08010010 	.word	0x08010010
 800a1e0:	080105a0 	.word	0x080105a0
 800a1e4:	080105c0 	.word	0x080105c0
 800a1e8:	20006508 	.word	0x20006508
 800a1ec:	080105e4 	.word	0x080105e4

0800a1f0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a1f0:	b5b0      	push	{r4, r5, r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d106      	bne.n	800a20c <tcp_rexmit_rto_prepare+0x1c>
 800a1fe:	4b31      	ldr	r3, [pc, #196]	; (800a2c4 <tcp_rexmit_rto_prepare+0xd4>)
 800a200:	f240 6263 	movw	r2, #1635	; 0x663
 800a204:	4930      	ldr	r1, [pc, #192]	; (800a2c8 <tcp_rexmit_rto_prepare+0xd8>)
 800a206:	4831      	ldr	r0, [pc, #196]	; (800a2cc <tcp_rexmit_rto_prepare+0xdc>)
 800a208:	f003 fc52 	bl	800dab0 <iprintf>

  if (pcb->unacked == NULL) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a210:	2b00      	cmp	r3, #0
 800a212:	d102      	bne.n	800a21a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a214:	f06f 0305 	mvn.w	r3, #5
 800a218:	e050      	b.n	800a2bc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	e00b      	b.n	800a23a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff fee4 	bl	8009ff0 <tcp_output_segment_busy>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a22e:	f06f 0305 	mvn.w	r3, #5
 800a232:	e043      	b.n	800a2bc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	60fb      	str	r3, [r7, #12]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1ef      	bne.n	800a222 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f7ff fed4 	bl	8009ff0 <tcp_output_segment_busy>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a24e:	f06f 0305 	mvn.w	r3, #5
 800a252:	e033      	b.n	800a2bc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	8b5b      	ldrh	r3, [r3, #26]
 800a26e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a272:	b29a      	uxth	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	4618      	mov	r0, r3
 800a280:	f7f9 fdc1 	bl	8003e06 <lwip_htonl>
 800a284:	4604      	mov	r4, r0
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	891b      	ldrh	r3, [r3, #8]
 800a28a:	461d      	mov	r5, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	899b      	ldrh	r3, [r3, #12]
 800a292:	b29b      	uxth	r3, r3
 800a294:	4618      	mov	r0, r3
 800a296:	f7f9 fda1 	bl	8003ddc <lwip_htons>
 800a29a:	4603      	mov	r3, r0
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	f003 0303 	and.w	r3, r3, #3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <tcp_rexmit_rto_prepare+0xba>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e000      	b.n	800a2ac <tcp_rexmit_rto_prepare+0xbc>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	442b      	add	r3, r5
 800a2ae:	18e2      	adds	r2, r4, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bdb0      	pop	{r4, r5, r7, pc}
 800a2c4:	0800ffbc 	.word	0x0800ffbc
 800a2c8:	080105f8 	.word	0x080105f8
 800a2cc:	08010010 	.word	0x08010010

0800a2d0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d106      	bne.n	800a2ec <tcp_rexmit_rto_commit+0x1c>
 800a2de:	4b0d      	ldr	r3, [pc, #52]	; (800a314 <tcp_rexmit_rto_commit+0x44>)
 800a2e0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a2e4:	490c      	ldr	r1, [pc, #48]	; (800a318 <tcp_rexmit_rto_commit+0x48>)
 800a2e6:	480d      	ldr	r0, [pc, #52]	; (800a31c <tcp_rexmit_rto_commit+0x4c>)
 800a2e8:	f003 fbe2 	bl	800dab0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a2f2:	2bff      	cmp	r3, #255	; 0xff
 800a2f4:	d007      	beq.n	800a306 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7ff fc7a 	bl	8009c00 <tcp_output>
}
 800a30c:	bf00      	nop
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	0800ffbc 	.word	0x0800ffbc
 800a318:	0801061c 	.word	0x0801061c
 800a31c:	08010010 	.word	0x08010010

0800a320 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d106      	bne.n	800a33c <tcp_rexmit_rto+0x1c>
 800a32e:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <tcp_rexmit_rto+0x38>)
 800a330:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a334:	4909      	ldr	r1, [pc, #36]	; (800a35c <tcp_rexmit_rto+0x3c>)
 800a336:	480a      	ldr	r0, [pc, #40]	; (800a360 <tcp_rexmit_rto+0x40>)
 800a338:	f003 fbba 	bl	800dab0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff ff57 	bl	800a1f0 <tcp_rexmit_rto_prepare>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d102      	bne.n	800a34e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff ffc1 	bl	800a2d0 <tcp_rexmit_rto_commit>
  }
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	0800ffbc 	.word	0x0800ffbc
 800a35c:	08010640 	.word	0x08010640
 800a360:	08010010 	.word	0x08010010

0800a364 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a364:	b590      	push	{r4, r7, lr}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d106      	bne.n	800a380 <tcp_rexmit+0x1c>
 800a372:	4b2f      	ldr	r3, [pc, #188]	; (800a430 <tcp_rexmit+0xcc>)
 800a374:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a378:	492e      	ldr	r1, [pc, #184]	; (800a434 <tcp_rexmit+0xd0>)
 800a37a:	482f      	ldr	r0, [pc, #188]	; (800a438 <tcp_rexmit+0xd4>)
 800a37c:	f003 fb98 	bl	800dab0 <iprintf>

  if (pcb->unacked == NULL) {
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a384:	2b00      	cmp	r3, #0
 800a386:	d102      	bne.n	800a38e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a388:	f06f 0305 	mvn.w	r3, #5
 800a38c:	e04c      	b.n	800a428 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a392:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a394:	68b8      	ldr	r0, [r7, #8]
 800a396:	f7ff fe2b 	bl	8009ff0 <tcp_output_segment_busy>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a3a0:	f06f 0305 	mvn.w	r3, #5
 800a3a4:	e040      	b.n	800a428 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	336c      	adds	r3, #108	; 0x6c
 800a3b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a3b4:	e002      	b.n	800a3bc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d011      	beq.n	800a3e8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7f9 fd1a 	bl	8003e06 <lwip_htonl>
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7f9 fd13 	bl	8003e06 <lwip_htonl>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dbe6      	blt.n	800a3b6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d103      	bne.n	800a406 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a40c:	2bff      	cmp	r3, #255	; 0xff
 800a40e:	d007      	beq.n	800a420 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a416:	3301      	adds	r3, #1
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd90      	pop	{r4, r7, pc}
 800a430:	0800ffbc 	.word	0x0800ffbc
 800a434:	0801065c 	.word	0x0801065c
 800a438:	08010010 	.word	0x08010010

0800a43c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <tcp_rexmit_fast+0x1c>
 800a44a:	4b2e      	ldr	r3, [pc, #184]	; (800a504 <tcp_rexmit_fast+0xc8>)
 800a44c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a450:	492d      	ldr	r1, [pc, #180]	; (800a508 <tcp_rexmit_fast+0xcc>)
 800a452:	482e      	ldr	r0, [pc, #184]	; (800a50c <tcp_rexmit_fast+0xd0>)
 800a454:	f003 fb2c 	bl	800dab0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d04d      	beq.n	800a4fc <tcp_rexmit_fast+0xc0>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	8b5b      	ldrh	r3, [r3, #26]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d147      	bne.n	800a4fc <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff ff79 	bl	800a364 <tcp_rexmit>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d141      	bne.n	800a4fc <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a484:	429a      	cmp	r2, r3
 800a486:	d207      	bcs.n	800a498 <tcp_rexmit_fast+0x5c>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a48e:	0fda      	lsrs	r2, r3, #31
 800a490:	4413      	add	r3, r2
 800a492:	105b      	asrs	r3, r3, #1
 800a494:	b29b      	uxth	r3, r3
 800a496:	e006      	b.n	800a4a6 <tcp_rexmit_fast+0x6a>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a49e:	0fda      	lsrs	r2, r3, #31
 800a4a0:	4413      	add	r3, r2
 800a4a2:	105b      	asrs	r3, r3, #1
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d206      	bcs.n	800a4cc <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	0049      	lsls	r1, r1, #1
 800a4da:	440b      	add	r3, r1
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	4413      	add	r3, r2
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	8b5b      	ldrh	r3, [r3, #26]
 800a4ec:	f043 0304 	orr.w	r3, r3, #4
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	0800ffbc 	.word	0x0800ffbc
 800a508:	08010674 	.word	0x08010674
 800a50c:	08010010 	.word	0x08010010

0800a510 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	607b      	str	r3, [r7, #4]
 800a51a:	460b      	mov	r3, r1
 800a51c:	817b      	strh	r3, [r7, #10]
 800a51e:	4613      	mov	r3, r2
 800a520:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a522:	897a      	ldrh	r2, [r7, #10]
 800a524:	893b      	ldrh	r3, [r7, #8]
 800a526:	4413      	add	r3, r2
 800a528:	b29b      	uxth	r3, r3
 800a52a:	3314      	adds	r3, #20
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a532:	4619      	mov	r1, r3
 800a534:	2022      	movs	r0, #34	; 0x22
 800a536:	f7fa fc21 	bl	8004d7c <pbuf_alloc>
 800a53a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d04e      	beq.n	800a5e0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	895b      	ldrh	r3, [r3, #10]
 800a546:	461a      	mov	r2, r3
 800a548:	897b      	ldrh	r3, [r7, #10]
 800a54a:	3314      	adds	r3, #20
 800a54c:	429a      	cmp	r2, r3
 800a54e:	da06      	bge.n	800a55e <tcp_output_alloc_header_common+0x4e>
 800a550:	4b26      	ldr	r3, [pc, #152]	; (800a5ec <tcp_output_alloc_header_common+0xdc>)
 800a552:	f240 7224 	movw	r2, #1828	; 0x724
 800a556:	4926      	ldr	r1, [pc, #152]	; (800a5f0 <tcp_output_alloc_header_common+0xe0>)
 800a558:	4826      	ldr	r0, [pc, #152]	; (800a5f4 <tcp_output_alloc_header_common+0xe4>)
 800a55a:	f003 faa9 	bl	800dab0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a564:	8c3b      	ldrh	r3, [r7, #32]
 800a566:	4618      	mov	r0, r3
 800a568:	f7f9 fc38 	bl	8003ddc <lwip_htons>
 800a56c:	4603      	mov	r3, r0
 800a56e:	461a      	mov	r2, r3
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a576:	4618      	mov	r0, r3
 800a578:	f7f9 fc30 	bl	8003ddc <lwip_htons>
 800a57c:	4603      	mov	r3, r0
 800a57e:	461a      	mov	r2, r3
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f7f9 fc3b 	bl	8003e06 <lwip_htonl>
 800a590:	4602      	mov	r2, r0
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a596:	897b      	ldrh	r3, [r7, #10]
 800a598:	089b      	lsrs	r3, r3, #2
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	3305      	adds	r3, #5
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	031b      	lsls	r3, r3, #12
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7f9 fc14 	bl	8003ddc <lwip_htons>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a5bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7f9 fc0c 	bl	8003ddc <lwip_htons>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	741a      	strb	r2, [r3, #16]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	749a      	strb	r2, [r3, #18]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a5e0:	697b      	ldr	r3, [r7, #20]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	0800ffbc 	.word	0x0800ffbc
 800a5f0:	08010694 	.word	0x08010694
 800a5f4:	08010010 	.word	0x08010010

0800a5f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a5f8:	b5b0      	push	{r4, r5, r7, lr}
 800a5fa:	b08a      	sub	sp, #40	; 0x28
 800a5fc:	af04      	add	r7, sp, #16
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	607b      	str	r3, [r7, #4]
 800a602:	460b      	mov	r3, r1
 800a604:	817b      	strh	r3, [r7, #10]
 800a606:	4613      	mov	r3, r2
 800a608:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d106      	bne.n	800a61e <tcp_output_alloc_header+0x26>
 800a610:	4b15      	ldr	r3, [pc, #84]	; (800a668 <tcp_output_alloc_header+0x70>)
 800a612:	f240 7242 	movw	r2, #1858	; 0x742
 800a616:	4915      	ldr	r1, [pc, #84]	; (800a66c <tcp_output_alloc_header+0x74>)
 800a618:	4815      	ldr	r0, [pc, #84]	; (800a670 <tcp_output_alloc_header+0x78>)
 800a61a:	f003 fa49 	bl	800dab0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	8adb      	ldrh	r3, [r3, #22]
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	8b12      	ldrh	r2, [r2, #24]
 800a62a:	68f9      	ldr	r1, [r7, #12]
 800a62c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a62e:	893d      	ldrh	r5, [r7, #8]
 800a630:	897c      	ldrh	r4, [r7, #10]
 800a632:	9103      	str	r1, [sp, #12]
 800a634:	2110      	movs	r1, #16
 800a636:	9102      	str	r1, [sp, #8]
 800a638:	9201      	str	r2, [sp, #4]
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	462a      	mov	r2, r5
 800a640:	4621      	mov	r1, r4
 800a642:	f7ff ff65 	bl	800a510 <tcp_output_alloc_header_common>
 800a646:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d006      	beq.n	800a65c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a656:	441a      	add	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a65c:	697b      	ldr	r3, [r7, #20]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3718      	adds	r7, #24
 800a662:	46bd      	mov	sp, r7
 800a664:	bdb0      	pop	{r4, r5, r7, pc}
 800a666:	bf00      	nop
 800a668:	0800ffbc 	.word	0x0800ffbc
 800a66c:	080106c4 	.word	0x080106c4
 800a670:	08010010 	.word	0x08010010

0800a674 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	4611      	mov	r1, r2
 800a680:	461a      	mov	r2, r3
 800a682:	460b      	mov	r3, r1
 800a684:	71fb      	strb	r3, [r7, #7]
 800a686:	4613      	mov	r3, r2
 800a688:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d106      	bne.n	800a6a2 <tcp_output_fill_options+0x2e>
 800a694:	4b13      	ldr	r3, [pc, #76]	; (800a6e4 <tcp_output_fill_options+0x70>)
 800a696:	f240 7256 	movw	r2, #1878	; 0x756
 800a69a:	4913      	ldr	r1, [pc, #76]	; (800a6e8 <tcp_output_fill_options+0x74>)
 800a69c:	4813      	ldr	r0, [pc, #76]	; (800a6ec <tcp_output_fill_options+0x78>)
 800a69e:	f003 fa07 	bl	800dab0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	3314      	adds	r3, #20
 800a6ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	f103 0214 	add.w	r2, r3, #20
 800a6b4:	8bfb      	ldrh	r3, [r7, #30]
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	f003 0304 	and.w	r3, r3, #4
 800a6c2:	440b      	add	r3, r1
 800a6c4:	4413      	add	r3, r2
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d006      	beq.n	800a6da <tcp_output_fill_options+0x66>
 800a6cc:	4b05      	ldr	r3, [pc, #20]	; (800a6e4 <tcp_output_fill_options+0x70>)
 800a6ce:	f240 7275 	movw	r2, #1909	; 0x775
 800a6d2:	4907      	ldr	r1, [pc, #28]	; (800a6f0 <tcp_output_fill_options+0x7c>)
 800a6d4:	4805      	ldr	r0, [pc, #20]	; (800a6ec <tcp_output_fill_options+0x78>)
 800a6d6:	f003 f9eb 	bl	800dab0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a6da:	bf00      	nop
 800a6dc:	3720      	adds	r7, #32
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	0800ffbc 	.word	0x0800ffbc
 800a6e8:	080106ec 	.word	0x080106ec
 800a6ec:	08010010 	.word	0x08010010
 800a6f0:	080105e4 	.word	0x080105e4

0800a6f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08a      	sub	sp, #40	; 0x28
 800a6f8:	af04      	add	r7, sp, #16
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <tcp_output_control_segment+0x22>
 800a708:	4b1c      	ldr	r3, [pc, #112]	; (800a77c <tcp_output_control_segment+0x88>)
 800a70a:	f240 7287 	movw	r2, #1927	; 0x787
 800a70e:	491c      	ldr	r1, [pc, #112]	; (800a780 <tcp_output_control_segment+0x8c>)
 800a710:	481c      	ldr	r0, [pc, #112]	; (800a784 <tcp_output_control_segment+0x90>)
 800a712:	f003 f9cd 	bl	800dab0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7fe ff30 	bl	8009580 <tcp_route>
 800a720:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a728:	23fc      	movs	r3, #252	; 0xfc
 800a72a:	75fb      	strb	r3, [r7, #23]
 800a72c:	e01c      	b.n	800a768 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d006      	beq.n	800a742 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	7adb      	ldrb	r3, [r3, #11]
 800a738:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	7a9b      	ldrb	r3, [r3, #10]
 800a73e:	757b      	strb	r3, [r7, #21]
 800a740:	e003      	b.n	800a74a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a742:	23ff      	movs	r3, #255	; 0xff
 800a744:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a74a:	7dba      	ldrb	r2, [r7, #22]
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	9302      	str	r3, [sp, #8]
 800a750:	2306      	movs	r3, #6
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	7d7b      	ldrb	r3, [r7, #21]
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	4613      	mov	r3, r2
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	6879      	ldr	r1, [r7, #4]
 800a75e:	68b8      	ldr	r0, [r7, #8]
 800a760:	f001 ff6a 	bl	800c638 <ip4_output_if>
 800a764:	4603      	mov	r3, r0
 800a766:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a768:	68b8      	ldr	r0, [r7, #8]
 800a76a:	f7fa fde7 	bl	800533c <pbuf_free>
  return err;
 800a76e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	0800ffbc 	.word	0x0800ffbc
 800a780:	08010714 	.word	0x08010714
 800a784:	08010010 	.word	0x08010010

0800a788 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a788:	b590      	push	{r4, r7, lr}
 800a78a:	b08b      	sub	sp, #44	; 0x2c
 800a78c:	af04      	add	r7, sp, #16
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <tcp_rst+0x22>
 800a79c:	4b1e      	ldr	r3, [pc, #120]	; (800a818 <tcp_rst+0x90>)
 800a79e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a7a2:	491e      	ldr	r1, [pc, #120]	; (800a81c <tcp_rst+0x94>)
 800a7a4:	481e      	ldr	r0, [pc, #120]	; (800a820 <tcp_rst+0x98>)
 800a7a6:	f003 f983 	bl	800dab0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d106      	bne.n	800a7be <tcp_rst+0x36>
 800a7b0:	4b19      	ldr	r3, [pc, #100]	; (800a818 <tcp_rst+0x90>)
 800a7b2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a7b6:	491b      	ldr	r1, [pc, #108]	; (800a824 <tcp_rst+0x9c>)
 800a7b8:	4819      	ldr	r0, [pc, #100]	; (800a820 <tcp_rst+0x98>)
 800a7ba:	f003 f979 	bl	800dab0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a7c2:	2308      	movs	r3, #8
 800a7c4:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	b29c      	uxth	r4, r3
 800a7ca:	68b8      	ldr	r0, [r7, #8]
 800a7cc:	f7f9 fb1b 	bl	8003e06 <lwip_htonl>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	8abb      	ldrh	r3, [r7, #20]
 800a7d4:	9303      	str	r3, [sp, #12]
 800a7d6:	2314      	movs	r3, #20
 800a7d8:	9302      	str	r3, [sp, #8]
 800a7da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff fe91 	bl	800a510 <tcp_output_alloc_header_common>
 800a7ee:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00c      	beq.n	800a810 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	6939      	ldr	r1, [r7, #16]
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f7ff ff39 	bl	800a674 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	6939      	ldr	r1, [r7, #16]
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f7ff ff73 	bl	800a6f4 <tcp_output_control_segment>
 800a80e:	e000      	b.n	800a812 <tcp_rst+0x8a>
    return;
 800a810:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a812:	371c      	adds	r7, #28
 800a814:	46bd      	mov	sp, r7
 800a816:	bd90      	pop	{r4, r7, pc}
 800a818:	0800ffbc 	.word	0x0800ffbc
 800a81c:	08010740 	.word	0x08010740
 800a820:	08010010 	.word	0x08010010
 800a824:	0801075c 	.word	0x0801075c

0800a828 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a828:	b590      	push	{r4, r7, lr}
 800a82a:	b087      	sub	sp, #28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d106      	bne.n	800a84c <tcp_send_empty_ack+0x24>
 800a83e:	4b28      	ldr	r3, [pc, #160]	; (800a8e0 <tcp_send_empty_ack+0xb8>)
 800a840:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a844:	4927      	ldr	r1, [pc, #156]	; (800a8e4 <tcp_send_empty_ack+0xbc>)
 800a846:	4828      	ldr	r0, [pc, #160]	; (800a8e8 <tcp_send_empty_ack+0xc0>)
 800a848:	f003 f932 	bl	800dab0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 0304 	and.w	r3, r3, #4
 800a856:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a858:	7d7b      	ldrb	r3, [r7, #21]
 800a85a:	b29c      	uxth	r4, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a860:	4618      	mov	r0, r3
 800a862:	f7f9 fad0 	bl	8003e06 <lwip_htonl>
 800a866:	4603      	mov	r3, r0
 800a868:	2200      	movs	r2, #0
 800a86a:	4621      	mov	r1, r4
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff fec3 	bl	800a5f8 <tcp_output_alloc_header>
 800a872:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d109      	bne.n	800a88e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	8b5b      	ldrh	r3, [r3, #26]
 800a87e:	f043 0303 	orr.w	r3, r3, #3
 800a882:	b29a      	uxth	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a888:	f06f 0301 	mvn.w	r3, #1
 800a88c:	e023      	b.n	800a8d6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a88e:	7dbb      	ldrb	r3, [r7, #22]
 800a890:	7dfa      	ldrb	r2, [r7, #23]
 800a892:	6939      	ldr	r1, [r7, #16]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff feed 	bl	800a674 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	3304      	adds	r3, #4
 800a8a0:	6939      	ldr	r1, [r7, #16]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff ff26 	bl	800a6f4 <tcp_output_control_segment>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a8ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d007      	beq.n	800a8c4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	8b5b      	ldrh	r3, [r3, #26]
 800a8b8:	f043 0303 	orr.w	r3, r3, #3
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	835a      	strh	r2, [r3, #26]
 800a8c2:	e006      	b.n	800a8d2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8b5b      	ldrh	r3, [r3, #26]
 800a8c8:	f023 0303 	bic.w	r3, r3, #3
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd90      	pop	{r4, r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	0800ffbc 	.word	0x0800ffbc
 800a8e4:	08010778 	.word	0x08010778
 800a8e8:	08010010 	.word	0x08010010

0800a8ec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a8ec:	b590      	push	{r4, r7, lr}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d106      	bne.n	800a90c <tcp_keepalive+0x20>
 800a8fe:	4b18      	ldr	r3, [pc, #96]	; (800a960 <tcp_keepalive+0x74>)
 800a900:	f640 0224 	movw	r2, #2084	; 0x824
 800a904:	4917      	ldr	r1, [pc, #92]	; (800a964 <tcp_keepalive+0x78>)
 800a906:	4818      	ldr	r0, [pc, #96]	; (800a968 <tcp_keepalive+0x7c>)
 800a908:	f003 f8d2 	bl	800dab0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	b29c      	uxth	r4, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a914:	3b01      	subs	r3, #1
 800a916:	4618      	mov	r0, r3
 800a918:	f7f9 fa75 	bl	8003e06 <lwip_htonl>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2200      	movs	r2, #0
 800a920:	4621      	mov	r1, r4
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff fe68 	bl	800a5f8 <tcp_output_alloc_header>
 800a928:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a930:	f04f 33ff 	mov.w	r3, #4294967295
 800a934:	e010      	b.n	800a958 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	2200      	movs	r2, #0
 800a93a:	6939      	ldr	r1, [r7, #16]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff fe99 	bl	800a674 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	3304      	adds	r3, #4
 800a948:	6939      	ldr	r1, [r7, #16]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff fed2 	bl	800a6f4 <tcp_output_control_segment>
 800a950:	4603      	mov	r3, r0
 800a952:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a954:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd90      	pop	{r4, r7, pc}
 800a960:	0800ffbc 	.word	0x0800ffbc
 800a964:	08010798 	.word	0x08010798
 800a968:	08010010 	.word	0x08010010

0800a96c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a96c:	b590      	push	{r4, r7, lr}
 800a96e:	b08b      	sub	sp, #44	; 0x2c
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a974:	2300      	movs	r3, #0
 800a976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d106      	bne.n	800a98e <tcp_zero_window_probe+0x22>
 800a980:	4b4c      	ldr	r3, [pc, #304]	; (800aab4 <tcp_zero_window_probe+0x148>)
 800a982:	f640 024f 	movw	r2, #2127	; 0x84f
 800a986:	494c      	ldr	r1, [pc, #304]	; (800aab8 <tcp_zero_window_probe+0x14c>)
 800a988:	484c      	ldr	r0, [pc, #304]	; (800aabc <tcp_zero_window_probe+0x150>)
 800a98a:	f003 f891 	bl	800dab0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a992:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	e086      	b.n	800aaac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a9a4:	2bff      	cmp	r3, #255	; 0xff
 800a9a6:	d007      	beq.n	800a9b8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	899b      	ldrh	r3, [r3, #12]
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7f9 fa0b 	bl	8003ddc <lwip_htons>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d005      	beq.n	800a9de <tcp_zero_window_probe+0x72>
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	891b      	ldrh	r3, [r3, #8]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <tcp_zero_window_probe+0x72>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e000      	b.n	800a9e0 <tcp_zero_window_probe+0x74>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a9e2:	7ffb      	ldrb	r3, [r7, #31]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bf0c      	ite	eq
 800a9e8:	2301      	moveq	r3, #1
 800a9ea:	2300      	movne	r3, #0
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9f4:	b299      	uxth	r1, r3
 800a9f6:	6a3b      	ldr	r3, [r7, #32]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	8bba      	ldrh	r2, [r7, #28]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7ff fdfa 	bl	800a5f8 <tcp_output_alloc_header>
 800aa04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d102      	bne.n	800aa12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800aa0c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa10:	e04c      	b.n	800aaac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800aa18:	7ffb      	ldrb	r3, [r7, #31]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d011      	beq.n	800aa42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	899b      	ldrh	r3, [r3, #12]
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	b21b      	sxth	r3, r3
 800aa26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aa2a:	b21c      	sxth	r4, r3
 800aa2c:	2011      	movs	r0, #17
 800aa2e:	f7f9 f9d5 	bl	8003ddc <lwip_htons>
 800aa32:	4603      	mov	r3, r0
 800aa34:	b21b      	sxth	r3, r3
 800aa36:	4323      	orrs	r3, r4
 800aa38:	b21b      	sxth	r3, r3
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	819a      	strh	r2, [r3, #12]
 800aa40:	e010      	b.n	800aa64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	3314      	adds	r3, #20
 800aa48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	6858      	ldr	r0, [r3, #4]
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	891a      	ldrh	r2, [r3, #8]
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	891b      	ldrh	r3, [r3, #8]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	6939      	ldr	r1, [r7, #16]
 800aa60:	f7fa fe56 	bl	8005710 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800aa64:	6a3b      	ldr	r3, [r7, #32]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7f9 f9cb 	bl	8003e06 <lwip_htonl>
 800aa70:	4603      	mov	r3, r0
 800aa72:	3301      	adds	r3, #1
 800aa74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	da02      	bge.n	800aa88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aa88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	69b9      	ldr	r1, [r7, #24]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff fdef 	bl	800a674 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	69b9      	ldr	r1, [r7, #24]
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff fe28 	bl	800a6f4 <tcp_output_control_segment>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aaa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	372c      	adds	r7, #44	; 0x2c
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd90      	pop	{r4, r7, pc}
 800aab4:	0800ffbc 	.word	0x0800ffbc
 800aab8:	080107b4 	.word	0x080107b4
 800aabc:	08010010 	.word	0x08010010

0800aac0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800aac8:	f7fa ff10 	bl	80058ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800aacc:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <tcpip_tcp_timer+0x38>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d103      	bne.n	800aadc <tcpip_tcp_timer+0x1c>
 800aad4:	4b09      	ldr	r3, [pc, #36]	; (800aafc <tcpip_tcp_timer+0x3c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aadc:	2200      	movs	r2, #0
 800aade:	4908      	ldr	r1, [pc, #32]	; (800ab00 <tcpip_tcp_timer+0x40>)
 800aae0:	20fa      	movs	r0, #250	; 0xfa
 800aae2:	f000 f8f1 	bl	800acc8 <sys_timeout>
 800aae6:	e002      	b.n	800aaee <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800aae8:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <tcpip_tcp_timer+0x44>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	601a      	str	r2, [r3, #0]
  }
}
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20006504 	.word	0x20006504
 800aafc:	20006514 	.word	0x20006514
 800ab00:	0800aac1 	.word	0x0800aac1
 800ab04:	20000108 	.word	0x20000108

0800ab08 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <tcp_timer_needed+0x30>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10f      	bne.n	800ab34 <tcp_timer_needed+0x2c>
 800ab14:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <tcp_timer_needed+0x34>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d103      	bne.n	800ab24 <tcp_timer_needed+0x1c>
 800ab1c:	4b08      	ldr	r3, [pc, #32]	; (800ab40 <tcp_timer_needed+0x38>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d007      	beq.n	800ab34 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <tcp_timer_needed+0x30>)
 800ab26:	2201      	movs	r2, #1
 800ab28:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	4905      	ldr	r1, [pc, #20]	; (800ab44 <tcp_timer_needed+0x3c>)
 800ab2e:	20fa      	movs	r0, #250	; 0xfa
 800ab30:	f000 f8ca 	bl	800acc8 <sys_timeout>
  }
}
 800ab34:	bf00      	nop
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	20000108 	.word	0x20000108
 800ab3c:	20006504 	.word	0x20006504
 800ab40:	20006514 	.word	0x20006514
 800ab44:	0800aac1 	.word	0x0800aac1

0800ab48 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ab54:	2006      	movs	r0, #6
 800ab56:	f7f9 fd97 	bl	8004688 <memp_malloc>
 800ab5a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d109      	bne.n	800ab76 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d151      	bne.n	800ac0c <sys_timeout_abs+0xc4>
 800ab68:	4b2a      	ldr	r3, [pc, #168]	; (800ac14 <sys_timeout_abs+0xcc>)
 800ab6a:	22be      	movs	r2, #190	; 0xbe
 800ab6c:	492a      	ldr	r1, [pc, #168]	; (800ac18 <sys_timeout_abs+0xd0>)
 800ab6e:	482b      	ldr	r0, [pc, #172]	; (800ac1c <sys_timeout_abs+0xd4>)
 800ab70:	f002 ff9e 	bl	800dab0 <iprintf>
    return;
 800ab74:	e04a      	b.n	800ac0c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ab8e:	4b24      	ldr	r3, [pc, #144]	; (800ac20 <sys_timeout_abs+0xd8>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d103      	bne.n	800ab9e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ab96:	4a22      	ldr	r2, [pc, #136]	; (800ac20 <sys_timeout_abs+0xd8>)
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6013      	str	r3, [r2, #0]
    return;
 800ab9c:	e037      	b.n	800ac0e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	4b1f      	ldr	r3, [pc, #124]	; (800ac20 <sys_timeout_abs+0xd8>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	0fdb      	lsrs	r3, r3, #31
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d007      	beq.n	800abc6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800abb6:	4b1a      	ldr	r3, [pc, #104]	; (800ac20 <sys_timeout_abs+0xd8>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800abbe:	4a18      	ldr	r2, [pc, #96]	; (800ac20 <sys_timeout_abs+0xd8>)
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	e023      	b.n	800ac0e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800abc6:	4b16      	ldr	r3, [pc, #88]	; (800ac20 <sys_timeout_abs+0xd8>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	e01a      	b.n	800ac04 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00b      	beq.n	800abee <sys_timeout_abs+0xa6>
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	0fdb      	lsrs	r3, r3, #31
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d007      	beq.n	800abfe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	601a      	str	r2, [r3, #0]
        break;
 800abfc:	e007      	b.n	800ac0e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	617b      	str	r3, [r7, #20]
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1e1      	bne.n	800abce <sys_timeout_abs+0x86>
 800ac0a:	e000      	b.n	800ac0e <sys_timeout_abs+0xc6>
    return;
 800ac0c:	bf00      	nop
      }
    }
  }
}
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	080107d8 	.word	0x080107d8
 800ac18:	0801080c 	.word	0x0801080c
 800ac1c:	0801084c 	.word	0x0801084c
 800ac20:	20000100 	.word	0x20000100

0800ac24 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	4798      	blx	r3

  now = sys_now();
 800ac36:	f7f9 f843 	bl	8003cc0 <sys_now>
 800ac3a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	4b0f      	ldr	r3, [pc, #60]	; (800ac80 <lwip_cyclic_timer+0x5c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4413      	add	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	0fdb      	lsrs	r3, r3, #31
 800ac50:	f003 0301 	and.w	r3, r3, #1
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	4413      	add	r3, r2
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	4907      	ldr	r1, [pc, #28]	; (800ac84 <lwip_cyclic_timer+0x60>)
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff ff6e 	bl	800ab48 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ac6c:	e004      	b.n	800ac78 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	4904      	ldr	r1, [pc, #16]	; (800ac84 <lwip_cyclic_timer+0x60>)
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f7ff ff68 	bl	800ab48 <sys_timeout_abs>
}
 800ac78:	bf00      	nop
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	20000104 	.word	0x20000104
 800ac84:	0800ac25 	.word	0x0800ac25

0800ac88 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ac8e:	2301      	movs	r3, #1
 800ac90:	607b      	str	r3, [r7, #4]
 800ac92:	e00e      	b.n	800acb2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ac94:	4a0a      	ldr	r2, [pc, #40]	; (800acc0 <sys_timeouts_init+0x38>)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	4a07      	ldr	r2, [pc, #28]	; (800acc0 <sys_timeouts_init+0x38>)
 800aca2:	4413      	add	r3, r2
 800aca4:	461a      	mov	r2, r3
 800aca6:	4907      	ldr	r1, [pc, #28]	; (800acc4 <sys_timeouts_init+0x3c>)
 800aca8:	f000 f80e 	bl	800acc8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3301      	adds	r3, #1
 800acb0:	607b      	str	r3, [r7, #4]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d9ed      	bls.n	800ac94 <sys_timeouts_init+0xc>
  }
}
 800acb8:	bf00      	nop
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	080113b8 	.word	0x080113b8
 800acc4:	0800ac25 	.word	0x0800ac25

0800acc8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acda:	d306      	bcc.n	800acea <sys_timeout+0x22>
 800acdc:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <sys_timeout+0x40>)
 800acde:	f240 1229 	movw	r2, #297	; 0x129
 800ace2:	490a      	ldr	r1, [pc, #40]	; (800ad0c <sys_timeout+0x44>)
 800ace4:	480a      	ldr	r0, [pc, #40]	; (800ad10 <sys_timeout+0x48>)
 800ace6:	f002 fee3 	bl	800dab0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800acea:	f7f8 ffe9 	bl	8003cc0 <sys_now>
 800acee:	4602      	mov	r2, r0
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4413      	add	r3, r2
 800acf4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	6978      	ldr	r0, [r7, #20]
 800acfc:	f7ff ff24 	bl	800ab48 <sys_timeout_abs>
#endif
}
 800ad00:	bf00      	nop
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	080107d8 	.word	0x080107d8
 800ad0c:	08010874 	.word	0x08010874
 800ad10:	0801084c 	.word	0x0801084c

0800ad14 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ad1a:	f7f8 ffd1 	bl	8003cc0 <sys_now>
 800ad1e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ad20:	4b1a      	ldr	r3, [pc, #104]	; (800ad8c <sys_check_timeouts+0x78>)
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <sys_check_timeouts+0x1a>
 800ad2a:	f7f9 ffd1 	bl	8004cd0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ad2e:	4b18      	ldr	r3, [pc, #96]	; (800ad90 <sys_check_timeouts+0x7c>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d022      	beq.n	800ad80 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	0fdb      	lsrs	r3, r3, #31
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d11a      	bne.n	800ad84 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a0f      	ldr	r2, [pc, #60]	; (800ad90 <sys_check_timeouts+0x7c>)
 800ad54:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	4a0b      	ldr	r2, [pc, #44]	; (800ad94 <sys_check_timeouts+0x80>)
 800ad68:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ad6a:	68b9      	ldr	r1, [r7, #8]
 800ad6c:	2006      	movs	r0, #6
 800ad6e:	f7f9 fcd7 	bl	8004720 <memp_free>
    if (handler != NULL) {
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d0d3      	beq.n	800ad20 <sys_check_timeouts+0xc>
      handler(arg);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6838      	ldr	r0, [r7, #0]
 800ad7c:	4798      	blx	r3
  do {
 800ad7e:	e7cf      	b.n	800ad20 <sys_check_timeouts+0xc>
      return;
 800ad80:	bf00      	nop
 800ad82:	e000      	b.n	800ad86 <sys_check_timeouts+0x72>
      return;
 800ad84:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	200064fc 	.word	0x200064fc
 800ad90:	20000100 	.word	0x20000100
 800ad94:	20000104 	.word	0x20000104

0800ad98 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ad9c:	f002 fea0 	bl	800dae0 <rand>
 800ada0:	4603      	mov	r3, r0
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800adae:	b29a      	uxth	r2, r3
 800adb0:	4b01      	ldr	r3, [pc, #4]	; (800adb8 <udp_init+0x20>)
 800adb2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800adb4:	bf00      	nop
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	20000010 	.word	0x20000010

0800adbc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d105      	bne.n	800addc <udp_input_local_match+0x20>
 800add0:	4b27      	ldr	r3, [pc, #156]	; (800ae70 <udp_input_local_match+0xb4>)
 800add2:	2287      	movs	r2, #135	; 0x87
 800add4:	4927      	ldr	r1, [pc, #156]	; (800ae74 <udp_input_local_match+0xb8>)
 800add6:	4828      	ldr	r0, [pc, #160]	; (800ae78 <udp_input_local_match+0xbc>)
 800add8:	f002 fe6a 	bl	800dab0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d105      	bne.n	800adee <udp_input_local_match+0x32>
 800ade2:	4b23      	ldr	r3, [pc, #140]	; (800ae70 <udp_input_local_match+0xb4>)
 800ade4:	2288      	movs	r2, #136	; 0x88
 800ade6:	4925      	ldr	r1, [pc, #148]	; (800ae7c <udp_input_local_match+0xc0>)
 800ade8:	4823      	ldr	r0, [pc, #140]	; (800ae78 <udp_input_local_match+0xbc>)
 800adea:	f002 fe61 	bl	800dab0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	7a1b      	ldrb	r3, [r3, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00b      	beq.n	800ae0e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	7a1a      	ldrb	r2, [r3, #8]
 800adfa:	4b21      	ldr	r3, [pc, #132]	; (800ae80 <udp_input_local_match+0xc4>)
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae02:	3301      	adds	r3, #1
 800ae04:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d001      	beq.n	800ae0e <udp_input_local_match+0x52>
    return 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	e02b      	b.n	800ae66 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ae0e:	79fb      	ldrb	r3, [r7, #7]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d018      	beq.n	800ae46 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d013      	beq.n	800ae42 <udp_input_local_match+0x86>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00f      	beq.n	800ae42 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ae22:	4b17      	ldr	r3, [pc, #92]	; (800ae80 <udp_input_local_match+0xc4>)
 800ae24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ae26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2a:	d00a      	beq.n	800ae42 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <udp_input_local_match+0xc4>)
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	405a      	eors	r2, r3
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	3308      	adds	r3, #8
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d110      	bne.n	800ae64 <udp_input_local_match+0xa8>
          return 1;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e00f      	b.n	800ae66 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d009      	beq.n	800ae60 <udp_input_local_match+0xa4>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <udp_input_local_match+0xa4>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <udp_input_local_match+0xc4>)
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d101      	bne.n	800ae64 <udp_input_local_match+0xa8>
        return 1;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e000      	b.n	800ae66 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	080108c0 	.word	0x080108c0
 800ae74:	080108f0 	.word	0x080108f0
 800ae78:	08010914 	.word	0x08010914
 800ae7c:	0801093c 	.word	0x0801093c
 800ae80:	20003400 	.word	0x20003400

0800ae84 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ae84:	b590      	push	{r4, r7, lr}
 800ae86:	b08d      	sub	sp, #52	; 0x34
 800ae88:	af02      	add	r7, sp, #8
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d105      	bne.n	800aea4 <udp_input+0x20>
 800ae98:	4b7c      	ldr	r3, [pc, #496]	; (800b08c <udp_input+0x208>)
 800ae9a:	22cf      	movs	r2, #207	; 0xcf
 800ae9c:	497c      	ldr	r1, [pc, #496]	; (800b090 <udp_input+0x20c>)
 800ae9e:	487d      	ldr	r0, [pc, #500]	; (800b094 <udp_input+0x210>)
 800aea0:	f002 fe06 	bl	800dab0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d105      	bne.n	800aeb6 <udp_input+0x32>
 800aeaa:	4b78      	ldr	r3, [pc, #480]	; (800b08c <udp_input+0x208>)
 800aeac:	22d0      	movs	r2, #208	; 0xd0
 800aeae:	497a      	ldr	r1, [pc, #488]	; (800b098 <udp_input+0x214>)
 800aeb0:	4878      	ldr	r0, [pc, #480]	; (800b094 <udp_input+0x210>)
 800aeb2:	f002 fdfd 	bl	800dab0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	895b      	ldrh	r3, [r3, #10]
 800aeba:	2b07      	cmp	r3, #7
 800aebc:	d803      	bhi.n	800aec6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7fa fa3c 	bl	800533c <pbuf_free>
    goto end;
 800aec4:	e0de      	b.n	800b084 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aecc:	4b73      	ldr	r3, [pc, #460]	; (800b09c <udp_input+0x218>)
 800aece:	695a      	ldr	r2, [r3, #20]
 800aed0:	4b72      	ldr	r3, [pc, #456]	; (800b09c <udp_input+0x218>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4619      	mov	r1, r3
 800aed6:	4610      	mov	r0, r2
 800aed8:	f001 fc86 	bl	800c7e8 <ip4_addr_isbroadcast_u32>
 800aedc:	4603      	mov	r3, r0
 800aede:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	881b      	ldrh	r3, [r3, #0]
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7f8 ff78 	bl	8003ddc <lwip_htons>
 800aeec:	4603      	mov	r3, r0
 800aeee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	885b      	ldrh	r3, [r3, #2]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7f8 ff70 	bl	8003ddc <lwip_htons>
 800aefc:	4603      	mov	r3, r0
 800aefe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800af00:	2300      	movs	r3, #0
 800af02:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800af04:	2300      	movs	r3, #0
 800af06:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800af08:	2300      	movs	r3, #0
 800af0a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af0c:	4b64      	ldr	r3, [pc, #400]	; (800b0a0 <udp_input+0x21c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	627b      	str	r3, [r7, #36]	; 0x24
 800af12:	e054      	b.n	800afbe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	8a5b      	ldrh	r3, [r3, #18]
 800af18:	89fa      	ldrh	r2, [r7, #14]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d14a      	bne.n	800afb4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800af1e:	7cfb      	ldrb	r3, [r7, #19]
 800af20:	461a      	mov	r2, r3
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af26:	f7ff ff49 	bl	800adbc <udp_input_local_match>
 800af2a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d041      	beq.n	800afb4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	7c1b      	ldrb	r3, [r3, #16]
 800af34:	f003 0304 	and.w	r3, r3, #4
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d11d      	bne.n	800af78 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	61fb      	str	r3, [r7, #28]
 800af46:	e017      	b.n	800af78 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800af48:	7cfb      	ldrb	r3, [r7, #19]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d014      	beq.n	800af78 <udp_input+0xf4>
 800af4e:	4b53      	ldr	r3, [pc, #332]	; (800b09c <udp_input+0x218>)
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af56:	d10f      	bne.n	800af78 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	3304      	adds	r3, #4
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	429a      	cmp	r2, r3
 800af64:	d008      	beq.n	800af78 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	3304      	adds	r3, #4
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	429a      	cmp	r2, r3
 800af72:	d101      	bne.n	800af78 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	8a9b      	ldrh	r3, [r3, #20]
 800af7c:	8a3a      	ldrh	r2, [r7, #16]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d118      	bne.n	800afb4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800af86:	2b00      	cmp	r3, #0
 800af88:	d005      	beq.n	800af96 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	4b43      	ldr	r3, [pc, #268]	; (800b09c <udp_input+0x218>)
 800af90:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800af92:	429a      	cmp	r2, r3
 800af94:	d10e      	bne.n	800afb4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d014      	beq.n	800afc6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	68da      	ldr	r2, [r3, #12]
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800afa4:	4b3e      	ldr	r3, [pc, #248]	; (800b0a0 <udp_input+0x21c>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afaa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800afac:	4a3c      	ldr	r2, [pc, #240]	; (800b0a0 <udp_input+0x21c>)
 800afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800afb2:	e008      	b.n	800afc6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	627b      	str	r3, [r7, #36]	; 0x24
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1a7      	bne.n	800af14 <udp_input+0x90>
 800afc4:	e000      	b.n	800afc8 <udp_input+0x144>
        break;
 800afc6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d002      	beq.n	800afde <udp_input+0x15a>
    for_us = 1;
 800afd8:	2301      	movs	r3, #1
 800afda:	76fb      	strb	r3, [r7, #27]
 800afdc:	e00a      	b.n	800aff4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	3304      	adds	r3, #4
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	4b2d      	ldr	r3, [pc, #180]	; (800b09c <udp_input+0x218>)
 800afe6:	695b      	ldr	r3, [r3, #20]
 800afe8:	429a      	cmp	r2, r3
 800afea:	bf0c      	ite	eq
 800afec:	2301      	moveq	r3, #1
 800afee:	2300      	movne	r3, #0
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800aff4:	7efb      	ldrb	r3, [r7, #27]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d041      	beq.n	800b07e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800affa:	2108      	movs	r1, #8
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7fa f917 	bl	8005230 <pbuf_remove_header>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00a      	beq.n	800b01e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b008:	4b20      	ldr	r3, [pc, #128]	; (800b08c <udp_input+0x208>)
 800b00a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b00e:	4925      	ldr	r1, [pc, #148]	; (800b0a4 <udp_input+0x220>)
 800b010:	4820      	ldr	r0, [pc, #128]	; (800b094 <udp_input+0x210>)
 800b012:	f002 fd4d 	bl	800dab0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7fa f990 	bl	800533c <pbuf_free>
      goto end;
 800b01c:	e032      	b.n	800b084 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b020:	2b00      	cmp	r3, #0
 800b022:	d012      	beq.n	800b04a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d00a      	beq.n	800b042 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02e:	699c      	ldr	r4, [r3, #24]
 800b030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b032:	69d8      	ldr	r0, [r3, #28]
 800b034:	8a3b      	ldrh	r3, [r7, #16]
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	4b1b      	ldr	r3, [pc, #108]	; (800b0a8 <udp_input+0x224>)
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b03e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b040:	e021      	b.n	800b086 <udp_input+0x202>
        pbuf_free(p);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7fa f97a 	bl	800533c <pbuf_free>
        goto end;
 800b048:	e01c      	b.n	800b084 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b04a:	7cfb      	ldrb	r3, [r7, #19]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d112      	bne.n	800b076 <udp_input+0x1f2>
 800b050:	4b12      	ldr	r3, [pc, #72]	; (800b09c <udp_input+0x218>)
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b058:	2be0      	cmp	r3, #224	; 0xe0
 800b05a:	d00c      	beq.n	800b076 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b05c:	4b0f      	ldr	r3, [pc, #60]	; (800b09c <udp_input+0x218>)
 800b05e:	899b      	ldrh	r3, [r3, #12]
 800b060:	3308      	adds	r3, #8
 800b062:	b29b      	uxth	r3, r3
 800b064:	b21b      	sxth	r3, r3
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7fa f954 	bl	8005316 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b06e:	2103      	movs	r1, #3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f001 f89b 	bl	800c1ac <icmp_dest_unreach>
      pbuf_free(p);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7fa f960 	bl	800533c <pbuf_free>
  return;
 800b07c:	e003      	b.n	800b086 <udp_input+0x202>
    pbuf_free(p);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7fa f95c 	bl	800533c <pbuf_free>
  return;
 800b084:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b086:	372c      	adds	r7, #44	; 0x2c
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd90      	pop	{r4, r7, pc}
 800b08c:	080108c0 	.word	0x080108c0
 800b090:	08010964 	.word	0x08010964
 800b094:	08010914 	.word	0x08010914
 800b098:	0801097c 	.word	0x0801097c
 800b09c:	20003400 	.word	0x20003400
 800b0a0:	2000651c 	.word	0x2000651c
 800b0a4:	08010998 	.word	0x08010998
 800b0a8:	20003410 	.word	0x20003410

0800b0ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d01e      	beq.n	800b0fa <udp_netif_ip_addr_changed+0x4e>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01a      	beq.n	800b0fa <udp_netif_ip_addr_changed+0x4e>
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d017      	beq.n	800b0fa <udp_netif_ip_addr_changed+0x4e>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d013      	beq.n	800b0fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b0d2:	4b0d      	ldr	r3, [pc, #52]	; (800b108 <udp_netif_ip_addr_changed+0x5c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	e00c      	b.n	800b0f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d103      	bne.n	800b0ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1ef      	bne.n	800b0da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b0fa:	bf00      	nop
 800b0fc:	3714      	adds	r7, #20
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	2000651c 	.word	0x2000651c

0800b10c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b114:	4915      	ldr	r1, [pc, #84]	; (800b16c <etharp_free_entry+0x60>)
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	4613      	mov	r3, r2
 800b11a:	005b      	lsls	r3, r3, #1
 800b11c:	4413      	add	r3, r2
 800b11e:	00db      	lsls	r3, r3, #3
 800b120:	440b      	add	r3, r1
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d013      	beq.n	800b150 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b128:	4910      	ldr	r1, [pc, #64]	; (800b16c <etharp_free_entry+0x60>)
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	4613      	mov	r3, r2
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	4413      	add	r3, r2
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	440b      	add	r3, r1
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fa f8ff 	bl	800533c <pbuf_free>
    arp_table[i].q = NULL;
 800b13e:	490b      	ldr	r1, [pc, #44]	; (800b16c <etharp_free_entry+0x60>)
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	4413      	add	r3, r2
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	440b      	add	r3, r1
 800b14c:	2200      	movs	r2, #0
 800b14e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b150:	4906      	ldr	r1, [pc, #24]	; (800b16c <etharp_free_entry+0x60>)
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	4613      	mov	r3, r2
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	4413      	add	r3, r2
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	440b      	add	r3, r1
 800b15e:	3314      	adds	r3, #20
 800b160:	2200      	movs	r2, #0
 800b162:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	2000010c 	.word	0x2000010c

0800b170 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b176:	2300      	movs	r3, #0
 800b178:	607b      	str	r3, [r7, #4]
 800b17a:	e096      	b.n	800b2aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b17c:	494f      	ldr	r1, [pc, #316]	; (800b2bc <etharp_tmr+0x14c>)
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	4613      	mov	r3, r2
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	4413      	add	r3, r2
 800b186:	00db      	lsls	r3, r3, #3
 800b188:	440b      	add	r3, r1
 800b18a:	3314      	adds	r3, #20
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b190:	78fb      	ldrb	r3, [r7, #3]
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 8086 	beq.w	800b2a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b198:	4948      	ldr	r1, [pc, #288]	; (800b2bc <etharp_tmr+0x14c>)
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	4613      	mov	r3, r2
 800b19e:	005b      	lsls	r3, r3, #1
 800b1a0:	4413      	add	r3, r2
 800b1a2:	00db      	lsls	r3, r3, #3
 800b1a4:	440b      	add	r3, r1
 800b1a6:	3312      	adds	r3, #18
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	b298      	uxth	r0, r3
 800b1ae:	4943      	ldr	r1, [pc, #268]	; (800b2bc <etharp_tmr+0x14c>)
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	4413      	add	r3, r2
 800b1b8:	00db      	lsls	r3, r3, #3
 800b1ba:	440b      	add	r3, r1
 800b1bc:	3312      	adds	r3, #18
 800b1be:	4602      	mov	r2, r0
 800b1c0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b1c2:	493e      	ldr	r1, [pc, #248]	; (800b2bc <etharp_tmr+0x14c>)
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	4413      	add	r3, r2
 800b1cc:	00db      	lsls	r3, r3, #3
 800b1ce:	440b      	add	r3, r1
 800b1d0:	3312      	adds	r3, #18
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b1d8:	d215      	bcs.n	800b206 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b1da:	4938      	ldr	r1, [pc, #224]	; (800b2bc <etharp_tmr+0x14c>)
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	4413      	add	r3, r2
 800b1e4:	00db      	lsls	r3, r3, #3
 800b1e6:	440b      	add	r3, r1
 800b1e8:	3314      	adds	r3, #20
 800b1ea:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d10e      	bne.n	800b20e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b1f0:	4932      	ldr	r1, [pc, #200]	; (800b2bc <etharp_tmr+0x14c>)
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	005b      	lsls	r3, r3, #1
 800b1f8:	4413      	add	r3, r2
 800b1fa:	00db      	lsls	r3, r3, #3
 800b1fc:	440b      	add	r3, r1
 800b1fe:	3312      	adds	r3, #18
 800b200:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b202:	2b04      	cmp	r3, #4
 800b204:	d903      	bls.n	800b20e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f7ff ff80 	bl	800b10c <etharp_free_entry>
 800b20c:	e04a      	b.n	800b2a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b20e:	492b      	ldr	r1, [pc, #172]	; (800b2bc <etharp_tmr+0x14c>)
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	4613      	mov	r3, r2
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	4413      	add	r3, r2
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	440b      	add	r3, r1
 800b21c:	3314      	adds	r3, #20
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b03      	cmp	r3, #3
 800b222:	d10a      	bne.n	800b23a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b224:	4925      	ldr	r1, [pc, #148]	; (800b2bc <etharp_tmr+0x14c>)
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	4613      	mov	r3, r2
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	4413      	add	r3, r2
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	440b      	add	r3, r1
 800b232:	3314      	adds	r3, #20
 800b234:	2204      	movs	r2, #4
 800b236:	701a      	strb	r2, [r3, #0]
 800b238:	e034      	b.n	800b2a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b23a:	4920      	ldr	r1, [pc, #128]	; (800b2bc <etharp_tmr+0x14c>)
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	4613      	mov	r3, r2
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	4413      	add	r3, r2
 800b244:	00db      	lsls	r3, r3, #3
 800b246:	440b      	add	r3, r1
 800b248:	3314      	adds	r3, #20
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	2b04      	cmp	r3, #4
 800b24e:	d10a      	bne.n	800b266 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b250:	491a      	ldr	r1, [pc, #104]	; (800b2bc <etharp_tmr+0x14c>)
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	4613      	mov	r3, r2
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	4413      	add	r3, r2
 800b25a:	00db      	lsls	r3, r3, #3
 800b25c:	440b      	add	r3, r1
 800b25e:	3314      	adds	r3, #20
 800b260:	2202      	movs	r2, #2
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	e01e      	b.n	800b2a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b266:	4915      	ldr	r1, [pc, #84]	; (800b2bc <etharp_tmr+0x14c>)
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	4613      	mov	r3, r2
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	4413      	add	r3, r2
 800b270:	00db      	lsls	r3, r3, #3
 800b272:	440b      	add	r3, r1
 800b274:	3314      	adds	r3, #20
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d113      	bne.n	800b2a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b27c:	490f      	ldr	r1, [pc, #60]	; (800b2bc <etharp_tmr+0x14c>)
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	4613      	mov	r3, r2
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	4413      	add	r3, r2
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	440b      	add	r3, r1
 800b28a:	3308      	adds	r3, #8
 800b28c:	6818      	ldr	r0, [r3, #0]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	4613      	mov	r3, r2
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	4413      	add	r3, r2
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	4a08      	ldr	r2, [pc, #32]	; (800b2bc <etharp_tmr+0x14c>)
 800b29a:	4413      	add	r3, r2
 800b29c:	3304      	adds	r3, #4
 800b29e:	4619      	mov	r1, r3
 800b2a0:	f000 fe6e 	bl	800bf80 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	607b      	str	r3, [r7, #4]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2b09      	cmp	r3, #9
 800b2ae:	f77f af65 	ble.w	800b17c <etharp_tmr+0xc>
      }
    }
  }
}
 800b2b2:	bf00      	nop
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	2000010c 	.word	0x2000010c

0800b2c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08a      	sub	sp, #40	; 0x28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	607a      	str	r2, [r7, #4]
 800b2cc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b2ce:	230a      	movs	r3, #10
 800b2d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b2d2:	230a      	movs	r3, #10
 800b2d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b2d6:	230a      	movs	r3, #10
 800b2d8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b2de:	230a      	movs	r3, #10
 800b2e0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	83bb      	strh	r3, [r7, #28]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	837b      	strh	r3, [r7, #26]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	843b      	strh	r3, [r7, #32]
 800b2f2:	e0ae      	b.n	800b452 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b2f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b2f8:	49a6      	ldr	r1, [pc, #664]	; (800b594 <etharp_find_entry+0x2d4>)
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	005b      	lsls	r3, r3, #1
 800b2fe:	4413      	add	r3, r2
 800b300:	00db      	lsls	r3, r3, #3
 800b302:	440b      	add	r3, r1
 800b304:	3314      	adds	r3, #20
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b30a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b30e:	2b0a      	cmp	r3, #10
 800b310:	d105      	bne.n	800b31e <etharp_find_entry+0x5e>
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d102      	bne.n	800b31e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b318:	8c3b      	ldrh	r3, [r7, #32]
 800b31a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b31c:	e095      	b.n	800b44a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 8092 	beq.w	800b44a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d009      	beq.n	800b340 <etharp_find_entry+0x80>
 800b32c:	7dfb      	ldrb	r3, [r7, #23]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d806      	bhi.n	800b340 <etharp_find_entry+0x80>
 800b332:	4b99      	ldr	r3, [pc, #612]	; (800b598 <etharp_find_entry+0x2d8>)
 800b334:	f44f 7292 	mov.w	r2, #292	; 0x124
 800b338:	4998      	ldr	r1, [pc, #608]	; (800b59c <etharp_find_entry+0x2dc>)
 800b33a:	4899      	ldr	r0, [pc, #612]	; (800b5a0 <etharp_find_entry+0x2e0>)
 800b33c:	f002 fbb8 	bl	800dab0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d020      	beq.n	800b388 <etharp_find_entry+0xc8>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6819      	ldr	r1, [r3, #0]
 800b34a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b34e:	4891      	ldr	r0, [pc, #580]	; (800b594 <etharp_find_entry+0x2d4>)
 800b350:	4613      	mov	r3, r2
 800b352:	005b      	lsls	r3, r3, #1
 800b354:	4413      	add	r3, r2
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	4403      	add	r3, r0
 800b35a:	3304      	adds	r3, #4
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4299      	cmp	r1, r3
 800b360:	d112      	bne.n	800b388 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00c      	beq.n	800b382 <etharp_find_entry+0xc2>
 800b368:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b36c:	4989      	ldr	r1, [pc, #548]	; (800b594 <etharp_find_entry+0x2d4>)
 800b36e:	4613      	mov	r3, r2
 800b370:	005b      	lsls	r3, r3, #1
 800b372:	4413      	add	r3, r2
 800b374:	00db      	lsls	r3, r3, #3
 800b376:	440b      	add	r3, r1
 800b378:	3308      	adds	r3, #8
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d102      	bne.n	800b388 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b382:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b386:	e100      	b.n	800b58a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b388:	7dfb      	ldrb	r3, [r7, #23]
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d140      	bne.n	800b410 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b38e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b392:	4980      	ldr	r1, [pc, #512]	; (800b594 <etharp_find_entry+0x2d4>)
 800b394:	4613      	mov	r3, r2
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	4413      	add	r3, r2
 800b39a:	00db      	lsls	r3, r3, #3
 800b39c:	440b      	add	r3, r1
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d01a      	beq.n	800b3da <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b3a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3a8:	497a      	ldr	r1, [pc, #488]	; (800b594 <etharp_find_entry+0x2d4>)
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	005b      	lsls	r3, r3, #1
 800b3ae:	4413      	add	r3, r2
 800b3b0:	00db      	lsls	r3, r3, #3
 800b3b2:	440b      	add	r3, r1
 800b3b4:	3312      	adds	r3, #18
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	8bba      	ldrh	r2, [r7, #28]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d845      	bhi.n	800b44a <etharp_find_entry+0x18a>
            old_queue = i;
 800b3be:	8c3b      	ldrh	r3, [r7, #32]
 800b3c0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b3c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3c6:	4973      	ldr	r1, [pc, #460]	; (800b594 <etharp_find_entry+0x2d4>)
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	005b      	lsls	r3, r3, #1
 800b3cc:	4413      	add	r3, r2
 800b3ce:	00db      	lsls	r3, r3, #3
 800b3d0:	440b      	add	r3, r1
 800b3d2:	3312      	adds	r3, #18
 800b3d4:	881b      	ldrh	r3, [r3, #0]
 800b3d6:	83bb      	strh	r3, [r7, #28]
 800b3d8:	e037      	b.n	800b44a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b3da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3de:	496d      	ldr	r1, [pc, #436]	; (800b594 <etharp_find_entry+0x2d4>)
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	4413      	add	r3, r2
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	440b      	add	r3, r1
 800b3ea:	3312      	adds	r3, #18
 800b3ec:	881b      	ldrh	r3, [r3, #0]
 800b3ee:	8b7a      	ldrh	r2, [r7, #26]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d82a      	bhi.n	800b44a <etharp_find_entry+0x18a>
            old_pending = i;
 800b3f4:	8c3b      	ldrh	r3, [r7, #32]
 800b3f6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800b3f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3fc:	4965      	ldr	r1, [pc, #404]	; (800b594 <etharp_find_entry+0x2d4>)
 800b3fe:	4613      	mov	r3, r2
 800b400:	005b      	lsls	r3, r3, #1
 800b402:	4413      	add	r3, r2
 800b404:	00db      	lsls	r3, r3, #3
 800b406:	440b      	add	r3, r1
 800b408:	3312      	adds	r3, #18
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	837b      	strh	r3, [r7, #26]
 800b40e:	e01c      	b.n	800b44a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d919      	bls.n	800b44a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b416:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b41a:	495e      	ldr	r1, [pc, #376]	; (800b594 <etharp_find_entry+0x2d4>)
 800b41c:	4613      	mov	r3, r2
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	4413      	add	r3, r2
 800b422:	00db      	lsls	r3, r3, #3
 800b424:	440b      	add	r3, r1
 800b426:	3312      	adds	r3, #18
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	8b3a      	ldrh	r2, [r7, #24]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d80c      	bhi.n	800b44a <etharp_find_entry+0x18a>
            old_stable = i;
 800b430:	8c3b      	ldrh	r3, [r7, #32]
 800b432:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800b434:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b438:	4956      	ldr	r1, [pc, #344]	; (800b594 <etharp_find_entry+0x2d4>)
 800b43a:	4613      	mov	r3, r2
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	4413      	add	r3, r2
 800b440:	00db      	lsls	r3, r3, #3
 800b442:	440b      	add	r3, r1
 800b444:	3312      	adds	r3, #18
 800b446:	881b      	ldrh	r3, [r3, #0]
 800b448:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b44a:	8c3b      	ldrh	r3, [r7, #32]
 800b44c:	3301      	adds	r3, #1
 800b44e:	b29b      	uxth	r3, r3
 800b450:	843b      	strh	r3, [r7, #32]
 800b452:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b456:	2b09      	cmp	r3, #9
 800b458:	f77f af4c 	ble.w	800b2f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	f003 0302 	and.w	r3, r3, #2
 800b462:	2b00      	cmp	r3, #0
 800b464:	d108      	bne.n	800b478 <etharp_find_entry+0x1b8>
 800b466:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b46a:	2b0a      	cmp	r3, #10
 800b46c:	d107      	bne.n	800b47e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b46e:	7afb      	ldrb	r3, [r7, #11]
 800b470:	f003 0301 	and.w	r3, r3, #1
 800b474:	2b00      	cmp	r3, #0
 800b476:	d102      	bne.n	800b47e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
 800b47c:	e085      	b.n	800b58a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b47e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b482:	2b09      	cmp	r3, #9
 800b484:	dc02      	bgt.n	800b48c <etharp_find_entry+0x1cc>
    i = empty;
 800b486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b488:	843b      	strh	r3, [r7, #32]
 800b48a:	e039      	b.n	800b500 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b48c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b490:	2b09      	cmp	r3, #9
 800b492:	dc14      	bgt.n	800b4be <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b496:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b498:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b49c:	493d      	ldr	r1, [pc, #244]	; (800b594 <etharp_find_entry+0x2d4>)
 800b49e:	4613      	mov	r3, r2
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	4413      	add	r3, r2
 800b4a4:	00db      	lsls	r3, r3, #3
 800b4a6:	440b      	add	r3, r1
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d018      	beq.n	800b4e0 <etharp_find_entry+0x220>
 800b4ae:	4b3a      	ldr	r3, [pc, #232]	; (800b598 <etharp_find_entry+0x2d8>)
 800b4b0:	f240 126d 	movw	r2, #365	; 0x16d
 800b4b4:	493b      	ldr	r1, [pc, #236]	; (800b5a4 <etharp_find_entry+0x2e4>)
 800b4b6:	483a      	ldr	r0, [pc, #232]	; (800b5a0 <etharp_find_entry+0x2e0>)
 800b4b8:	f002 fafa 	bl	800dab0 <iprintf>
 800b4bc:	e010      	b.n	800b4e0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b4be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b4c2:	2b09      	cmp	r3, #9
 800b4c4:	dc02      	bgt.n	800b4cc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b4c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b4c8:	843b      	strh	r3, [r7, #32]
 800b4ca:	e009      	b.n	800b4e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b4cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b4d0:	2b09      	cmp	r3, #9
 800b4d2:	dc02      	bgt.n	800b4da <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b4d4:	8bfb      	ldrh	r3, [r7, #30]
 800b4d6:	843b      	strh	r3, [r7, #32]
 800b4d8:	e002      	b.n	800b4e0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b4da:	f04f 33ff 	mov.w	r3, #4294967295
 800b4de:	e054      	b.n	800b58a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b4e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b4e4:	2b09      	cmp	r3, #9
 800b4e6:	dd06      	ble.n	800b4f6 <etharp_find_entry+0x236>
 800b4e8:	4b2b      	ldr	r3, [pc, #172]	; (800b598 <etharp_find_entry+0x2d8>)
 800b4ea:	f240 127f 	movw	r2, #383	; 0x17f
 800b4ee:	492e      	ldr	r1, [pc, #184]	; (800b5a8 <etharp_find_entry+0x2e8>)
 800b4f0:	482b      	ldr	r0, [pc, #172]	; (800b5a0 <etharp_find_entry+0x2e0>)
 800b4f2:	f002 fadd 	bl	800dab0 <iprintf>
    etharp_free_entry(i);
 800b4f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff fe06 	bl	800b10c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b500:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b504:	2b09      	cmp	r3, #9
 800b506:	dd06      	ble.n	800b516 <etharp_find_entry+0x256>
 800b508:	4b23      	ldr	r3, [pc, #140]	; (800b598 <etharp_find_entry+0x2d8>)
 800b50a:	f240 1283 	movw	r2, #387	; 0x183
 800b50e:	4926      	ldr	r1, [pc, #152]	; (800b5a8 <etharp_find_entry+0x2e8>)
 800b510:	4823      	ldr	r0, [pc, #140]	; (800b5a0 <etharp_find_entry+0x2e0>)
 800b512:	f002 facd 	bl	800dab0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b516:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b51a:	491e      	ldr	r1, [pc, #120]	; (800b594 <etharp_find_entry+0x2d4>)
 800b51c:	4613      	mov	r3, r2
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	4413      	add	r3, r2
 800b522:	00db      	lsls	r3, r3, #3
 800b524:	440b      	add	r3, r1
 800b526:	3314      	adds	r3, #20
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d006      	beq.n	800b53c <etharp_find_entry+0x27c>
 800b52e:	4b1a      	ldr	r3, [pc, #104]	; (800b598 <etharp_find_entry+0x2d8>)
 800b530:	f240 1285 	movw	r2, #389	; 0x185
 800b534:	491d      	ldr	r1, [pc, #116]	; (800b5ac <etharp_find_entry+0x2ec>)
 800b536:	481a      	ldr	r0, [pc, #104]	; (800b5a0 <etharp_find_entry+0x2e0>)
 800b538:	f002 faba 	bl	800dab0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00b      	beq.n	800b55a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b542:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6819      	ldr	r1, [r3, #0]
 800b54a:	4812      	ldr	r0, [pc, #72]	; (800b594 <etharp_find_entry+0x2d4>)
 800b54c:	4613      	mov	r3, r2
 800b54e:	005b      	lsls	r3, r3, #1
 800b550:	4413      	add	r3, r2
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	4403      	add	r3, r0
 800b556:	3304      	adds	r3, #4
 800b558:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b55a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b55e:	490d      	ldr	r1, [pc, #52]	; (800b594 <etharp_find_entry+0x2d4>)
 800b560:	4613      	mov	r3, r2
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	4413      	add	r3, r2
 800b566:	00db      	lsls	r3, r3, #3
 800b568:	440b      	add	r3, r1
 800b56a:	3312      	adds	r3, #18
 800b56c:	2200      	movs	r2, #0
 800b56e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b570:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b574:	4907      	ldr	r1, [pc, #28]	; (800b594 <etharp_find_entry+0x2d4>)
 800b576:	4613      	mov	r3, r2
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	4413      	add	r3, r2
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	440b      	add	r3, r1
 800b580:	3308      	adds	r3, #8
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b586:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3728      	adds	r7, #40	; 0x28
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	2000010c 	.word	0x2000010c
 800b598:	08010c24 	.word	0x08010c24
 800b59c:	08010c5c 	.word	0x08010c5c
 800b5a0:	08010c9c 	.word	0x08010c9c
 800b5a4:	08010cc4 	.word	0x08010cc4
 800b5a8:	08010cdc 	.word	0x08010cdc
 800b5ac:	08010cf0 	.word	0x08010cf0

0800b5b0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af02      	add	r7, sp, #8
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
 800b5bc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b5c4:	2b06      	cmp	r3, #6
 800b5c6:	d006      	beq.n	800b5d6 <etharp_update_arp_entry+0x26>
 800b5c8:	4b48      	ldr	r3, [pc, #288]	; (800b6ec <etharp_update_arp_entry+0x13c>)
 800b5ca:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b5ce:	4948      	ldr	r1, [pc, #288]	; (800b6f0 <etharp_update_arp_entry+0x140>)
 800b5d0:	4848      	ldr	r0, [pc, #288]	; (800b6f4 <etharp_update_arp_entry+0x144>)
 800b5d2:	f002 fa6d 	bl	800dab0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d012      	beq.n	800b602 <etharp_update_arp_entry+0x52>
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00e      	beq.n	800b602 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68f9      	ldr	r1, [r7, #12]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f001 f8fc 	bl	800c7e8 <ip4_addr_isbroadcast_u32>
 800b5f0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d105      	bne.n	800b602 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b5fe:	2be0      	cmp	r3, #224	; 0xe0
 800b600:	d102      	bne.n	800b608 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b602:	f06f 030f 	mvn.w	r3, #15
 800b606:	e06c      	b.n	800b6e2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	4619      	mov	r1, r3
 800b60e:	68b8      	ldr	r0, [r7, #8]
 800b610:	f7ff fe56 	bl	800b2c0 <etharp_find_entry>
 800b614:	4603      	mov	r3, r0
 800b616:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b618:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	da02      	bge.n	800b626 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b620:	8afb      	ldrh	r3, [r7, #22]
 800b622:	b25b      	sxtb	r3, r3
 800b624:	e05d      	b.n	800b6e2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b626:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b62a:	4933      	ldr	r1, [pc, #204]	; (800b6f8 <etharp_update_arp_entry+0x148>)
 800b62c:	4613      	mov	r3, r2
 800b62e:	005b      	lsls	r3, r3, #1
 800b630:	4413      	add	r3, r2
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	440b      	add	r3, r1
 800b636:	3314      	adds	r3, #20
 800b638:	2202      	movs	r2, #2
 800b63a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b63c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b640:	492d      	ldr	r1, [pc, #180]	; (800b6f8 <etharp_update_arp_entry+0x148>)
 800b642:	4613      	mov	r3, r2
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	4413      	add	r3, r2
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	440b      	add	r3, r1
 800b64c:	3308      	adds	r3, #8
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b652:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b656:	4613      	mov	r3, r2
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	4413      	add	r3, r2
 800b65c:	00db      	lsls	r3, r3, #3
 800b65e:	3308      	adds	r3, #8
 800b660:	4a25      	ldr	r2, [pc, #148]	; (800b6f8 <etharp_update_arp_entry+0x148>)
 800b662:	4413      	add	r3, r2
 800b664:	3304      	adds	r3, #4
 800b666:	2206      	movs	r2, #6
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f002 fa0d 	bl	800da8a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b670:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b674:	4920      	ldr	r1, [pc, #128]	; (800b6f8 <etharp_update_arp_entry+0x148>)
 800b676:	4613      	mov	r3, r2
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	4413      	add	r3, r2
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	440b      	add	r3, r1
 800b680:	3312      	adds	r3, #18
 800b682:	2200      	movs	r2, #0
 800b684:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b68a:	491b      	ldr	r1, [pc, #108]	; (800b6f8 <etharp_update_arp_entry+0x148>)
 800b68c:	4613      	mov	r3, r2
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	4413      	add	r3, r2
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	440b      	add	r3, r1
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d021      	beq.n	800b6e0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b69c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6a0:	4915      	ldr	r1, [pc, #84]	; (800b6f8 <etharp_update_arp_entry+0x148>)
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4413      	add	r3, r2
 800b6a8:	00db      	lsls	r3, r3, #3
 800b6aa:	440b      	add	r3, r1
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b6b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6b4:	4910      	ldr	r1, [pc, #64]	; (800b6f8 <etharp_update_arp_entry+0x148>)
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	005b      	lsls	r3, r3, #1
 800b6ba:	4413      	add	r3, r2
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	440b      	add	r3, r1
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b6ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6939      	ldr	r1, [r7, #16]
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f001 ff8b 	bl	800d5f0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b6da:	6938      	ldr	r0, [r7, #16]
 800b6dc:	f7f9 fe2e 	bl	800533c <pbuf_free>
  }
  return ERR_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3718      	adds	r7, #24
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	08010c24 	.word	0x08010c24
 800b6f0:	08010d1c 	.word	0x08010d1c
 800b6f4:	08010c9c 	.word	0x08010c9c
 800b6f8:	2000010c 	.word	0x2000010c

0800b6fc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e01e      	b.n	800b748 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b70a:	4913      	ldr	r1, [pc, #76]	; (800b758 <etharp_cleanup_netif+0x5c>)
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	4613      	mov	r3, r2
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	4413      	add	r3, r2
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	440b      	add	r3, r1
 800b718:	3314      	adds	r3, #20
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b71e:	7afb      	ldrb	r3, [r7, #11]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00e      	beq.n	800b742 <etharp_cleanup_netif+0x46>
 800b724:	490c      	ldr	r1, [pc, #48]	; (800b758 <etharp_cleanup_netif+0x5c>)
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	4613      	mov	r3, r2
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	4413      	add	r3, r2
 800b72e:	00db      	lsls	r3, r3, #3
 800b730:	440b      	add	r3, r1
 800b732:	3308      	adds	r3, #8
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d102      	bne.n	800b742 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f7ff fce5 	bl	800b10c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3301      	adds	r3, #1
 800b746:	60fb      	str	r3, [r7, #12]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b09      	cmp	r3, #9
 800b74c:	dddd      	ble.n	800b70a <etharp_cleanup_netif+0xe>
    }
  }
}
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	2000010c 	.word	0x2000010c

0800b75c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b75c:	b5b0      	push	{r4, r5, r7, lr}
 800b75e:	b08a      	sub	sp, #40	; 0x28
 800b760:	af04      	add	r7, sp, #16
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d107      	bne.n	800b77c <etharp_input+0x20>
 800b76c:	4b3d      	ldr	r3, [pc, #244]	; (800b864 <etharp_input+0x108>)
 800b76e:	f240 228a 	movw	r2, #650	; 0x28a
 800b772:	493d      	ldr	r1, [pc, #244]	; (800b868 <etharp_input+0x10c>)
 800b774:	483d      	ldr	r0, [pc, #244]	; (800b86c <etharp_input+0x110>)
 800b776:	f002 f99b 	bl	800dab0 <iprintf>
 800b77a:	e06f      	b.n	800b85c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	881b      	ldrh	r3, [r3, #0]
 800b786:	b29b      	uxth	r3, r3
 800b788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b78c:	d10c      	bne.n	800b7a8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b792:	2b06      	cmp	r3, #6
 800b794:	d108      	bne.n	800b7a8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d104      	bne.n	800b7a8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	885b      	ldrh	r3, [r3, #2]
 800b7a2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b7a4:	2b08      	cmp	r3, #8
 800b7a6:	d003      	beq.n	800b7b0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7f9 fdc7 	bl	800533c <pbuf_free>
    return;
 800b7ae:	e055      	b.n	800b85c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	330e      	adds	r3, #14
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	3318      	adds	r3, #24
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d102      	bne.n	800b7d0 <etharp_input+0x74>
    for_us = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	75fb      	strb	r3, [r7, #23]
 800b7ce:	e009      	b.n	800b7e4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	bf0c      	ite	eq
 800b7dc:	2301      	moveq	r3, #1
 800b7de:	2300      	movne	r3, #0
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	f103 0208 	add.w	r2, r3, #8
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <etharp_input+0x98>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e000      	b.n	800b7f6 <etharp_input+0x9a>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	f107 010c 	add.w	r1, r7, #12
 800b7fa:	6838      	ldr	r0, [r7, #0]
 800b7fc:	f7ff fed8 	bl	800b5b0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	88db      	ldrh	r3, [r3, #6]
 800b804:	b29b      	uxth	r3, r3
 800b806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b80a:	d003      	beq.n	800b814 <etharp_input+0xb8>
 800b80c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b810:	d01e      	beq.n	800b850 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b812:	e020      	b.n	800b856 <etharp_input+0xfa>
      if (for_us) {
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d01c      	beq.n	800b854 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b834:	2102      	movs	r1, #2
 800b836:	9103      	str	r1, [sp, #12]
 800b838:	f107 010c 	add.w	r1, r7, #12
 800b83c:	9102      	str	r1, [sp, #8]
 800b83e:	9201      	str	r2, [sp, #4]
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	462b      	mov	r3, r5
 800b844:	4622      	mov	r2, r4
 800b846:	4601      	mov	r1, r0
 800b848:	6838      	ldr	r0, [r7, #0]
 800b84a:	f000 faeb 	bl	800be24 <etharp_raw>
      break;
 800b84e:	e001      	b.n	800b854 <etharp_input+0xf8>
      break;
 800b850:	bf00      	nop
 800b852:	e000      	b.n	800b856 <etharp_input+0xfa>
      break;
 800b854:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7f9 fd70 	bl	800533c <pbuf_free>
}
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bdb0      	pop	{r4, r5, r7, pc}
 800b862:	bf00      	nop
 800b864:	08010c24 	.word	0x08010c24
 800b868:	08010d74 	.word	0x08010d74
 800b86c:	08010c9c 	.word	0x08010c9c

0800b870 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af02      	add	r7, sp, #8
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	4613      	mov	r3, r2
 800b87c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b87e:	79fa      	ldrb	r2, [r7, #7]
 800b880:	4944      	ldr	r1, [pc, #272]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b882:	4613      	mov	r3, r2
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	4413      	add	r3, r2
 800b888:	00db      	lsls	r3, r3, #3
 800b88a:	440b      	add	r3, r1
 800b88c:	3314      	adds	r3, #20
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d806      	bhi.n	800b8a2 <etharp_output_to_arp_index+0x32>
 800b894:	4b40      	ldr	r3, [pc, #256]	; (800b998 <etharp_output_to_arp_index+0x128>)
 800b896:	f240 22ef 	movw	r2, #751	; 0x2ef
 800b89a:	4940      	ldr	r1, [pc, #256]	; (800b99c <etharp_output_to_arp_index+0x12c>)
 800b89c:	4840      	ldr	r0, [pc, #256]	; (800b9a0 <etharp_output_to_arp_index+0x130>)
 800b89e:	f002 f907 	bl	800dab0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b8a2:	79fa      	ldrb	r2, [r7, #7]
 800b8a4:	493b      	ldr	r1, [pc, #236]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	005b      	lsls	r3, r3, #1
 800b8aa:	4413      	add	r3, r2
 800b8ac:	00db      	lsls	r3, r3, #3
 800b8ae:	440b      	add	r3, r1
 800b8b0:	3314      	adds	r3, #20
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d153      	bne.n	800b960 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b8b8:	79fa      	ldrb	r2, [r7, #7]
 800b8ba:	4936      	ldr	r1, [pc, #216]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b8bc:	4613      	mov	r3, r2
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	4413      	add	r3, r2
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	440b      	add	r3, r1
 800b8c6:	3312      	adds	r3, #18
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b8ce:	d919      	bls.n	800b904 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b8d0:	79fa      	ldrb	r2, [r7, #7]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	4413      	add	r3, r2
 800b8d8:	00db      	lsls	r3, r3, #3
 800b8da:	4a2e      	ldr	r2, [pc, #184]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b8dc:	4413      	add	r3, r2
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f000 fb4c 	bl	800bf80 <etharp_request>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d138      	bne.n	800b960 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b8ee:	79fa      	ldrb	r2, [r7, #7]
 800b8f0:	4928      	ldr	r1, [pc, #160]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	4413      	add	r3, r2
 800b8f8:	00db      	lsls	r3, r3, #3
 800b8fa:	440b      	add	r3, r1
 800b8fc:	3314      	adds	r3, #20
 800b8fe:	2203      	movs	r2, #3
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	e02d      	b.n	800b960 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b904:	79fa      	ldrb	r2, [r7, #7]
 800b906:	4923      	ldr	r1, [pc, #140]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b908:	4613      	mov	r3, r2
 800b90a:	005b      	lsls	r3, r3, #1
 800b90c:	4413      	add	r3, r2
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	440b      	add	r3, r1
 800b912:	3312      	adds	r3, #18
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b91a:	d321      	bcc.n	800b960 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b91c:	79fa      	ldrb	r2, [r7, #7]
 800b91e:	4613      	mov	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	4413      	add	r3, r2
 800b924:	00db      	lsls	r3, r3, #3
 800b926:	4a1b      	ldr	r2, [pc, #108]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b928:	4413      	add	r3, r2
 800b92a:	1d19      	adds	r1, r3, #4
 800b92c:	79fa      	ldrb	r2, [r7, #7]
 800b92e:	4613      	mov	r3, r2
 800b930:	005b      	lsls	r3, r3, #1
 800b932:	4413      	add	r3, r2
 800b934:	00db      	lsls	r3, r3, #3
 800b936:	3308      	adds	r3, #8
 800b938:	4a16      	ldr	r2, [pc, #88]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b93a:	4413      	add	r3, r2
 800b93c:	3304      	adds	r3, #4
 800b93e:	461a      	mov	r2, r3
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 fafb 	bl	800bf3c <etharp_request_dst>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d109      	bne.n	800b960 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b94c:	79fa      	ldrb	r2, [r7, #7]
 800b94e:	4911      	ldr	r1, [pc, #68]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b950:	4613      	mov	r3, r2
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	4413      	add	r3, r2
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	440b      	add	r3, r1
 800b95a:	3314      	adds	r3, #20
 800b95c:	2203      	movs	r2, #3
 800b95e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b966:	79fa      	ldrb	r2, [r7, #7]
 800b968:	4613      	mov	r3, r2
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	4413      	add	r3, r2
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	3308      	adds	r3, #8
 800b972:	4a08      	ldr	r2, [pc, #32]	; (800b994 <etharp_output_to_arp_index+0x124>)
 800b974:	4413      	add	r3, r2
 800b976:	1d1a      	adds	r2, r3, #4
 800b978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	4613      	mov	r3, r2
 800b980:	460a      	mov	r2, r1
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f001 fe33 	bl	800d5f0 <ethernet_output>
 800b98a:	4603      	mov	r3, r0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	2000010c 	.word	0x2000010c
 800b998:	08010c24 	.word	0x08010c24
 800b99c:	08010d94 	.word	0x08010d94
 800b9a0:	08010c9c 	.word	0x08010c9c

0800b9a4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08a      	sub	sp, #40	; 0x28
 800b9a8:	af02      	add	r7, sp, #8
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d106      	bne.n	800b9c8 <etharp_output+0x24>
 800b9ba:	4b73      	ldr	r3, [pc, #460]	; (800bb88 <etharp_output+0x1e4>)
 800b9bc:	f240 321e 	movw	r2, #798	; 0x31e
 800b9c0:	4972      	ldr	r1, [pc, #456]	; (800bb8c <etharp_output+0x1e8>)
 800b9c2:	4873      	ldr	r0, [pc, #460]	; (800bb90 <etharp_output+0x1ec>)
 800b9c4:	f002 f874 	bl	800dab0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d106      	bne.n	800b9dc <etharp_output+0x38>
 800b9ce:	4b6e      	ldr	r3, [pc, #440]	; (800bb88 <etharp_output+0x1e4>)
 800b9d0:	f240 321f 	movw	r2, #799	; 0x31f
 800b9d4:	496f      	ldr	r1, [pc, #444]	; (800bb94 <etharp_output+0x1f0>)
 800b9d6:	486e      	ldr	r0, [pc, #440]	; (800bb90 <etharp_output+0x1ec>)
 800b9d8:	f002 f86a 	bl	800dab0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d106      	bne.n	800b9f0 <etharp_output+0x4c>
 800b9e2:	4b69      	ldr	r3, [pc, #420]	; (800bb88 <etharp_output+0x1e4>)
 800b9e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b9e8:	496b      	ldr	r1, [pc, #428]	; (800bb98 <etharp_output+0x1f4>)
 800b9ea:	4869      	ldr	r0, [pc, #420]	; (800bb90 <etharp_output+0x1ec>)
 800b9ec:	f002 f860 	bl	800dab0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68f9      	ldr	r1, [r7, #12]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 fef6 	bl	800c7e8 <ip4_addr_isbroadcast_u32>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d002      	beq.n	800ba08 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ba02:	4b66      	ldr	r3, [pc, #408]	; (800bb9c <etharp_output+0x1f8>)
 800ba04:	61fb      	str	r3, [r7, #28]
 800ba06:	e0af      	b.n	800bb68 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba10:	2be0      	cmp	r3, #224	; 0xe0
 800ba12:	d118      	bne.n	800ba46 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ba14:	2301      	movs	r3, #1
 800ba16:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ba1c:	235e      	movs	r3, #94	; 0x5e
 800ba1e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	3301      	adds	r3, #1
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	3302      	adds	r3, #2
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	3303      	adds	r3, #3
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ba3e:	f107 0310 	add.w	r3, r7, #16
 800ba42:	61fb      	str	r3, [r7, #28]
 800ba44:	e090      	b.n	800bb68 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	405a      	eors	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3308      	adds	r3, #8
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4013      	ands	r3, r2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d012      	beq.n	800ba84 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ba64:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d00b      	beq.n	800ba84 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	330c      	adds	r3, #12
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	330c      	adds	r3, #12
 800ba7a:	61bb      	str	r3, [r7, #24]
 800ba7c:	e002      	b.n	800ba84 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ba7e:	f06f 0303 	mvn.w	r3, #3
 800ba82:	e07d      	b.n	800bb80 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ba84:	4b46      	ldr	r3, [pc, #280]	; (800bba0 <etharp_output+0x1fc>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	4a46      	ldr	r2, [pc, #280]	; (800bba4 <etharp_output+0x200>)
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	005b      	lsls	r3, r3, #1
 800ba90:	440b      	add	r3, r1
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	4413      	add	r3, r2
 800ba96:	3314      	adds	r3, #20
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d925      	bls.n	800baea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ba9e:	4b40      	ldr	r3, [pc, #256]	; (800bba0 <etharp_output+0x1fc>)
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	4619      	mov	r1, r3
 800baa4:	4a3f      	ldr	r2, [pc, #252]	; (800bba4 <etharp_output+0x200>)
 800baa6:	460b      	mov	r3, r1
 800baa8:	005b      	lsls	r3, r3, #1
 800baaa:	440b      	add	r3, r1
 800baac:	00db      	lsls	r3, r3, #3
 800baae:	4413      	add	r3, r2
 800bab0:	3308      	adds	r3, #8
 800bab2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d117      	bne.n	800baea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	4b38      	ldr	r3, [pc, #224]	; (800bba0 <etharp_output+0x1fc>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	4618      	mov	r0, r3
 800bac4:	4937      	ldr	r1, [pc, #220]	; (800bba4 <etharp_output+0x200>)
 800bac6:	4603      	mov	r3, r0
 800bac8:	005b      	lsls	r3, r3, #1
 800baca:	4403      	add	r3, r0
 800bacc:	00db      	lsls	r3, r3, #3
 800bace:	440b      	add	r3, r1
 800bad0:	3304      	adds	r3, #4
 800bad2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d108      	bne.n	800baea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bad8:	4b31      	ldr	r3, [pc, #196]	; (800bba0 <etharp_output+0x1fc>)
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	461a      	mov	r2, r3
 800bade:	68b9      	ldr	r1, [r7, #8]
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f7ff fec5 	bl	800b870 <etharp_output_to_arp_index>
 800bae6:	4603      	mov	r3, r0
 800bae8:	e04a      	b.n	800bb80 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800baea:	2300      	movs	r3, #0
 800baec:	75fb      	strb	r3, [r7, #23]
 800baee:	e031      	b.n	800bb54 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800baf0:	7dfa      	ldrb	r2, [r7, #23]
 800baf2:	492c      	ldr	r1, [pc, #176]	; (800bba4 <etharp_output+0x200>)
 800baf4:	4613      	mov	r3, r2
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	4413      	add	r3, r2
 800bafa:	00db      	lsls	r3, r3, #3
 800bafc:	440b      	add	r3, r1
 800bafe:	3314      	adds	r3, #20
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d923      	bls.n	800bb4e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800bb06:	7dfa      	ldrb	r2, [r7, #23]
 800bb08:	4926      	ldr	r1, [pc, #152]	; (800bba4 <etharp_output+0x200>)
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	4413      	add	r3, r2
 800bb10:	00db      	lsls	r3, r3, #3
 800bb12:	440b      	add	r3, r1
 800bb14:	3308      	adds	r3, #8
 800bb16:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d117      	bne.n	800bb4e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	6819      	ldr	r1, [r3, #0]
 800bb22:	7dfa      	ldrb	r2, [r7, #23]
 800bb24:	481f      	ldr	r0, [pc, #124]	; (800bba4 <etharp_output+0x200>)
 800bb26:	4613      	mov	r3, r2
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	4413      	add	r3, r2
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	4403      	add	r3, r0
 800bb30:	3304      	adds	r3, #4
 800bb32:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800bb34:	4299      	cmp	r1, r3
 800bb36:	d10a      	bne.n	800bb4e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800bb38:	4a19      	ldr	r2, [pc, #100]	; (800bba0 <etharp_output+0x1fc>)
 800bb3a:	7dfb      	ldrb	r3, [r7, #23]
 800bb3c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	461a      	mov	r2, r3
 800bb42:	68b9      	ldr	r1, [r7, #8]
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f7ff fe93 	bl	800b870 <etharp_output_to_arp_index>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	e018      	b.n	800bb80 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bb4e:	7dfb      	ldrb	r3, [r7, #23]
 800bb50:	3301      	adds	r3, #1
 800bb52:	75fb      	strb	r3, [r7, #23]
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	2b09      	cmp	r3, #9
 800bb58:	d9ca      	bls.n	800baf0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bb5a:	68ba      	ldr	r2, [r7, #8]
 800bb5c:	69b9      	ldr	r1, [r7, #24]
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 f822 	bl	800bba8 <etharp_query>
 800bb64:	4603      	mov	r3, r0
 800bb66:	e00b      	b.n	800bb80 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800bb6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f001 fd39 	bl	800d5f0 <ethernet_output>
 800bb7e:	4603      	mov	r3, r0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3720      	adds	r7, #32
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	08010c24 	.word	0x08010c24
 800bb8c:	08010d74 	.word	0x08010d74
 800bb90:	08010c9c 	.word	0x08010c9c
 800bb94:	08010dc4 	.word	0x08010dc4
 800bb98:	08010d64 	.word	0x08010d64
 800bb9c:	080113d4 	.word	0x080113d4
 800bba0:	200001fc 	.word	0x200001fc
 800bba4:	2000010c 	.word	0x2000010c

0800bba8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08c      	sub	sp, #48	; 0x30
 800bbac:	af02      	add	r7, sp, #8
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3326      	adds	r3, #38	; 0x26
 800bbb8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bbba:	23ff      	movs	r3, #255	; 0xff
 800bbbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68f9      	ldr	r1, [r7, #12]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 fe0c 	bl	800c7e8 <ip4_addr_isbroadcast_u32>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10c      	bne.n	800bbf0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bbde:	2be0      	cmp	r3, #224	; 0xe0
 800bbe0:	d006      	beq.n	800bbf0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d003      	beq.n	800bbf0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bbf0:	f06f 030f 	mvn.w	r3, #15
 800bbf4:	e102      	b.n	800bdfc <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	2101      	movs	r1, #1
 800bbfa:	68b8      	ldr	r0, [r7, #8]
 800bbfc:	f7ff fb60 	bl	800b2c0 <etharp_find_entry>
 800bc00:	4603      	mov	r3, r0
 800bc02:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800bc04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	da02      	bge.n	800bc12 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800bc0c:	8a7b      	ldrh	r3, [r7, #18]
 800bc0e:	b25b      	sxtb	r3, r3
 800bc10:	e0f4      	b.n	800bdfc <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800bc12:	8a7b      	ldrh	r3, [r7, #18]
 800bc14:	2b7e      	cmp	r3, #126	; 0x7e
 800bc16:	d906      	bls.n	800bc26 <etharp_query+0x7e>
 800bc18:	4b7a      	ldr	r3, [pc, #488]	; (800be04 <etharp_query+0x25c>)
 800bc1a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800bc1e:	497a      	ldr	r1, [pc, #488]	; (800be08 <etharp_query+0x260>)
 800bc20:	487a      	ldr	r0, [pc, #488]	; (800be0c <etharp_query+0x264>)
 800bc22:	f001 ff45 	bl	800dab0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800bc26:	8a7b      	ldrh	r3, [r7, #18]
 800bc28:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bc2a:	7c7a      	ldrb	r2, [r7, #17]
 800bc2c:	4978      	ldr	r1, [pc, #480]	; (800be10 <etharp_query+0x268>)
 800bc2e:	4613      	mov	r3, r2
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	4413      	add	r3, r2
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	440b      	add	r3, r1
 800bc38:	3314      	adds	r3, #20
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d115      	bne.n	800bc6c <etharp_query+0xc4>
    is_new_entry = 1;
 800bc40:	2301      	movs	r3, #1
 800bc42:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bc44:	7c7a      	ldrb	r2, [r7, #17]
 800bc46:	4972      	ldr	r1, [pc, #456]	; (800be10 <etharp_query+0x268>)
 800bc48:	4613      	mov	r3, r2
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	4413      	add	r3, r2
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	440b      	add	r3, r1
 800bc52:	3314      	adds	r3, #20
 800bc54:	2201      	movs	r2, #1
 800bc56:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bc58:	7c7a      	ldrb	r2, [r7, #17]
 800bc5a:	496d      	ldr	r1, [pc, #436]	; (800be10 <etharp_query+0x268>)
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	4413      	add	r3, r2
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	440b      	add	r3, r1
 800bc66:	3308      	adds	r3, #8
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bc6c:	7c7a      	ldrb	r2, [r7, #17]
 800bc6e:	4968      	ldr	r1, [pc, #416]	; (800be10 <etharp_query+0x268>)
 800bc70:	4613      	mov	r3, r2
 800bc72:	005b      	lsls	r3, r3, #1
 800bc74:	4413      	add	r3, r2
 800bc76:	00db      	lsls	r3, r3, #3
 800bc78:	440b      	add	r3, r1
 800bc7a:	3314      	adds	r3, #20
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d011      	beq.n	800bca6 <etharp_query+0xfe>
 800bc82:	7c7a      	ldrb	r2, [r7, #17]
 800bc84:	4962      	ldr	r1, [pc, #392]	; (800be10 <etharp_query+0x268>)
 800bc86:	4613      	mov	r3, r2
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	4413      	add	r3, r2
 800bc8c:	00db      	lsls	r3, r3, #3
 800bc8e:	440b      	add	r3, r1
 800bc90:	3314      	adds	r3, #20
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d806      	bhi.n	800bca6 <etharp_query+0xfe>
 800bc98:	4b5a      	ldr	r3, [pc, #360]	; (800be04 <etharp_query+0x25c>)
 800bc9a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bc9e:	495d      	ldr	r1, [pc, #372]	; (800be14 <etharp_query+0x26c>)
 800bca0:	485a      	ldr	r0, [pc, #360]	; (800be0c <etharp_query+0x264>)
 800bca2:	f001 ff05 	bl	800dab0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d102      	bne.n	800bcb2 <etharp_query+0x10a>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10c      	bne.n	800bccc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800bcb2:	68b9      	ldr	r1, [r7, #8]
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 f963 	bl	800bf80 <etharp_request>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <etharp_query+0x124>
      return result;
 800bcc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bcca:	e097      	b.n	800bdfc <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d106      	bne.n	800bce0 <etharp_query+0x138>
 800bcd2:	4b4c      	ldr	r3, [pc, #304]	; (800be04 <etharp_query+0x25c>)
 800bcd4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800bcd8:	494f      	ldr	r1, [pc, #316]	; (800be18 <etharp_query+0x270>)
 800bcda:	484c      	ldr	r0, [pc, #304]	; (800be0c <etharp_query+0x264>)
 800bcdc:	f001 fee8 	bl	800dab0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800bce0:	7c7a      	ldrb	r2, [r7, #17]
 800bce2:	494b      	ldr	r1, [pc, #300]	; (800be10 <etharp_query+0x268>)
 800bce4:	4613      	mov	r3, r2
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	4413      	add	r3, r2
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	440b      	add	r3, r1
 800bcee:	3314      	adds	r3, #20
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d918      	bls.n	800bd28 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800bcf6:	4a49      	ldr	r2, [pc, #292]	; (800be1c <etharp_query+0x274>)
 800bcf8:	7c7b      	ldrb	r3, [r7, #17]
 800bcfa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800bcfc:	7c7a      	ldrb	r2, [r7, #17]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	4413      	add	r3, r2
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	3308      	adds	r3, #8
 800bd08:	4a41      	ldr	r2, [pc, #260]	; (800be10 <etharp_query+0x268>)
 800bd0a:	4413      	add	r3, r2
 800bd0c:	1d1a      	adds	r2, r3, #4
 800bd0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	4613      	mov	r3, r2
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	6879      	ldr	r1, [r7, #4]
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f001 fc68 	bl	800d5f0 <ethernet_output>
 800bd20:	4603      	mov	r3, r0
 800bd22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd26:	e067      	b.n	800bdf8 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bd28:	7c7a      	ldrb	r2, [r7, #17]
 800bd2a:	4939      	ldr	r1, [pc, #228]	; (800be10 <etharp_query+0x268>)
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	005b      	lsls	r3, r3, #1
 800bd30:	4413      	add	r3, r2
 800bd32:	00db      	lsls	r3, r3, #3
 800bd34:	440b      	add	r3, r1
 800bd36:	3314      	adds	r3, #20
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d15c      	bne.n	800bdf8 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bd46:	e01c      	b.n	800bd82 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	895a      	ldrh	r2, [r3, #10]
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	891b      	ldrh	r3, [r3, #8]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d10a      	bne.n	800bd6a <etharp_query+0x1c2>
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d006      	beq.n	800bd6a <etharp_query+0x1c2>
 800bd5c:	4b29      	ldr	r3, [pc, #164]	; (800be04 <etharp_query+0x25c>)
 800bd5e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800bd62:	492f      	ldr	r1, [pc, #188]	; (800be20 <etharp_query+0x278>)
 800bd64:	4829      	ldr	r0, [pc, #164]	; (800be0c <etharp_query+0x264>)
 800bd66:	f001 fea3 	bl	800dab0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	7b1b      	ldrb	r3, [r3, #12]
 800bd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <etharp_query+0x1d4>
        copy_needed = 1;
 800bd76:	2301      	movs	r3, #1
 800bd78:	61bb      	str	r3, [r7, #24]
        break;
 800bd7a:	e005      	b.n	800bd88 <etharp_query+0x1e0>
      }
      p = p->next;
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1df      	bne.n	800bd48 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d007      	beq.n	800bd9e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	f44f 7120 	mov.w	r1, #640	; 0x280
 800bd94:	200e      	movs	r0, #14
 800bd96:	f7f9 fd2d 	bl	80057f4 <pbuf_clone>
 800bd9a:	61f8      	str	r0, [r7, #28]
 800bd9c:	e004      	b.n	800bda8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800bda2:	69f8      	ldr	r0, [r7, #28]
 800bda4:	f7f9 fb6a 	bl	800547c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d021      	beq.n	800bdf2 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800bdae:	7c7a      	ldrb	r2, [r7, #17]
 800bdb0:	4917      	ldr	r1, [pc, #92]	; (800be10 <etharp_query+0x268>)
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	4413      	add	r3, r2
 800bdb8:	00db      	lsls	r3, r3, #3
 800bdba:	440b      	add	r3, r1
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800bdc2:	7c7a      	ldrb	r2, [r7, #17]
 800bdc4:	4912      	ldr	r1, [pc, #72]	; (800be10 <etharp_query+0x268>)
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	005b      	lsls	r3, r3, #1
 800bdca:	4413      	add	r3, r2
 800bdcc:	00db      	lsls	r3, r3, #3
 800bdce:	440b      	add	r3, r1
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7f9 fab2 	bl	800533c <pbuf_free>
      }
      arp_table[i].q = p;
 800bdd8:	7c7a      	ldrb	r2, [r7, #17]
 800bdda:	490d      	ldr	r1, [pc, #52]	; (800be10 <etharp_query+0x268>)
 800bddc:	4613      	mov	r3, r2
 800bdde:	005b      	lsls	r3, r3, #1
 800bde0:	4413      	add	r3, r2
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	440b      	add	r3, r1
 800bde6:	69fa      	ldr	r2, [r7, #28]
 800bde8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdf0:	e002      	b.n	800bdf8 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800bdf2:	23ff      	movs	r3, #255	; 0xff
 800bdf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800bdf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3728      	adds	r7, #40	; 0x28
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	08010c24 	.word	0x08010c24
 800be08:	08010dd0 	.word	0x08010dd0
 800be0c:	08010c9c 	.word	0x08010c9c
 800be10:	2000010c 	.word	0x2000010c
 800be14:	08010de0 	.word	0x08010de0
 800be18:	08010dc4 	.word	0x08010dc4
 800be1c:	200001fc 	.word	0x200001fc
 800be20:	08010e08 	.word	0x08010e08

0800be24 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08a      	sub	sp, #40	; 0x28
 800be28:	af02      	add	r7, sp, #8
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d106      	bne.n	800be4a <etharp_raw+0x26>
 800be3c:	4b3a      	ldr	r3, [pc, #232]	; (800bf28 <etharp_raw+0x104>)
 800be3e:	f240 4257 	movw	r2, #1111	; 0x457
 800be42:	493a      	ldr	r1, [pc, #232]	; (800bf2c <etharp_raw+0x108>)
 800be44:	483a      	ldr	r0, [pc, #232]	; (800bf30 <etharp_raw+0x10c>)
 800be46:	f001 fe33 	bl	800dab0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800be4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800be4e:	211c      	movs	r1, #28
 800be50:	200e      	movs	r0, #14
 800be52:	f7f8 ff93 	bl	8004d7c <pbuf_alloc>
 800be56:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d102      	bne.n	800be64 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800be5e:	f04f 33ff 	mov.w	r3, #4294967295
 800be62:	e05d      	b.n	800bf20 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	895b      	ldrh	r3, [r3, #10]
 800be68:	2b1b      	cmp	r3, #27
 800be6a:	d806      	bhi.n	800be7a <etharp_raw+0x56>
 800be6c:	4b2e      	ldr	r3, [pc, #184]	; (800bf28 <etharp_raw+0x104>)
 800be6e:	f240 4263 	movw	r2, #1123	; 0x463
 800be72:	4930      	ldr	r1, [pc, #192]	; (800bf34 <etharp_raw+0x110>)
 800be74:	482e      	ldr	r0, [pc, #184]	; (800bf30 <etharp_raw+0x10c>)
 800be76:	f001 fe1b 	bl	800dab0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800be80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800be82:	4618      	mov	r0, r3
 800be84:	f7f7 ffaa 	bl	8003ddc <lwip_htons>
 800be88:	4603      	mov	r3, r0
 800be8a:	461a      	mov	r2, r3
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be96:	2b06      	cmp	r3, #6
 800be98:	d006      	beq.n	800bea8 <etharp_raw+0x84>
 800be9a:	4b23      	ldr	r3, [pc, #140]	; (800bf28 <etharp_raw+0x104>)
 800be9c:	f240 426a 	movw	r2, #1130	; 0x46a
 800bea0:	4925      	ldr	r1, [pc, #148]	; (800bf38 <etharp_raw+0x114>)
 800bea2:	4823      	ldr	r0, [pc, #140]	; (800bf30 <etharp_raw+0x10c>)
 800bea4:	f001 fe04 	bl	800dab0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	3308      	adds	r3, #8
 800beac:	2206      	movs	r2, #6
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f001 fdea 	bl	800da8a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	3312      	adds	r3, #18
 800beba:	2206      	movs	r2, #6
 800bebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bebe:	4618      	mov	r0, r3
 800bec0:	f001 fde3 	bl	800da8a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	330e      	adds	r3, #14
 800bec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beca:	6812      	ldr	r2, [r2, #0]
 800becc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	3318      	adds	r3, #24
 800bed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bed4:	6812      	ldr	r2, [r2, #0]
 800bed6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	2200      	movs	r2, #0
 800bedc:	701a      	strb	r2, [r3, #0]
 800bede:	2200      	movs	r2, #0
 800bee0:	f042 0201 	orr.w	r2, r2, #1
 800bee4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2200      	movs	r2, #0
 800beea:	f042 0208 	orr.w	r2, r2, #8
 800beee:	709a      	strb	r2, [r3, #2]
 800bef0:	2200      	movs	r2, #0
 800bef2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	2206      	movs	r2, #6
 800bef8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2204      	movs	r2, #4
 800befe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bf00:	f640 0306 	movw	r3, #2054	; 0x806
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	69b9      	ldr	r1, [r7, #24]
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f001 fb6f 	bl	800d5f0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bf12:	69b8      	ldr	r0, [r7, #24]
 800bf14:	f7f9 fa12 	bl	800533c <pbuf_free>
  p = NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bf1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3720      	adds	r7, #32
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	08010c24 	.word	0x08010c24
 800bf2c:	08010d74 	.word	0x08010d74
 800bf30:	08010c9c 	.word	0x08010c9c
 800bf34:	08010e24 	.word	0x08010e24
 800bf38:	08010e58 	.word	0x08010e58

0800bf3c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af04      	add	r7, sp, #16
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bf58:	2201      	movs	r2, #1
 800bf5a:	9203      	str	r2, [sp, #12]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	9202      	str	r2, [sp, #8]
 800bf60:	4a06      	ldr	r2, [pc, #24]	; (800bf7c <etharp_request_dst+0x40>)
 800bf62:	9201      	str	r2, [sp, #4]
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	4603      	mov	r3, r0
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f7ff ff5a 	bl	800be24 <etharp_raw>
 800bf70:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	080113dc 	.word	0x080113dc

0800bf80 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bf8a:	4a05      	ldr	r2, [pc, #20]	; (800bfa0 <etharp_request+0x20>)
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7ff ffd4 	bl	800bf3c <etharp_request_dst>
 800bf94:	4603      	mov	r3, r0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	080113d4 	.word	0x080113d4

0800bfa4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08e      	sub	sp, #56	; 0x38
 800bfa8:	af04      	add	r7, sp, #16
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bfae:	4b79      	ldr	r3, [pc, #484]	; (800c194 <icmp_input+0x1f0>)
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	f003 030f 	and.w	r3, r3, #15
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800bfc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bfc6:	2b13      	cmp	r3, #19
 800bfc8:	f240 80cd 	bls.w	800c166 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	895b      	ldrh	r3, [r3, #10]
 800bfd0:	2b03      	cmp	r3, #3
 800bfd2:	f240 80ca 	bls.w	800c16a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bfe0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 80b7 	beq.w	800c158 <icmp_input+0x1b4>
 800bfea:	2b08      	cmp	r3, #8
 800bfec:	f040 80b7 	bne.w	800c15e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800bff0:	4b69      	ldr	r3, [pc, #420]	; (800c198 <icmp_input+0x1f4>)
 800bff2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bff4:	4b67      	ldr	r3, [pc, #412]	; (800c194 <icmp_input+0x1f0>)
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bffc:	2be0      	cmp	r3, #224	; 0xe0
 800bffe:	f000 80bb 	beq.w	800c178 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c002:	4b64      	ldr	r3, [pc, #400]	; (800c194 <icmp_input+0x1f0>)
 800c004:	695a      	ldr	r2, [r3, #20]
 800c006:	4b63      	ldr	r3, [pc, #396]	; (800c194 <icmp_input+0x1f0>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4619      	mov	r1, r3
 800c00c:	4610      	mov	r0, r2
 800c00e:	f000 fbeb 	bl	800c7e8 <ip4_addr_isbroadcast_u32>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	f040 80b1 	bne.w	800c17c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	891b      	ldrh	r3, [r3, #8]
 800c01e:	2b07      	cmp	r3, #7
 800c020:	f240 80a5 	bls.w	800c16e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c026:	330e      	adds	r3, #14
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7f9 f8f0 	bl	8005210 <pbuf_add_header>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d04b      	beq.n	800c0ce <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	891a      	ldrh	r2, [r3, #8]
 800c03a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c03c:	4413      	add	r3, r2
 800c03e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	891b      	ldrh	r3, [r3, #8]
 800c044:	8b7a      	ldrh	r2, [r7, #26]
 800c046:	429a      	cmp	r2, r3
 800c048:	f0c0 809a 	bcc.w	800c180 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c04c:	8b7b      	ldrh	r3, [r7, #26]
 800c04e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c052:	4619      	mov	r1, r3
 800c054:	200e      	movs	r0, #14
 800c056:	f7f8 fe91 	bl	8004d7c <pbuf_alloc>
 800c05a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 8090 	beq.w	800c184 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	895b      	ldrh	r3, [r3, #10]
 800c068:	461a      	mov	r2, r3
 800c06a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c06c:	3308      	adds	r3, #8
 800c06e:	429a      	cmp	r2, r3
 800c070:	d203      	bcs.n	800c07a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c072:	6978      	ldr	r0, [r7, #20]
 800c074:	f7f9 f962 	bl	800533c <pbuf_free>
          goto icmperr;
 800c078:	e085      	b.n	800c186 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c082:	4618      	mov	r0, r3
 800c084:	f001 fd01 	bl	800da8a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c08a:	4619      	mov	r1, r3
 800c08c:	6978      	ldr	r0, [r7, #20]
 800c08e:	f7f9 f8cf 	bl	8005230 <pbuf_remove_header>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d009      	beq.n	800c0ac <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c098:	4b40      	ldr	r3, [pc, #256]	; (800c19c <icmp_input+0x1f8>)
 800c09a:	22b6      	movs	r2, #182	; 0xb6
 800c09c:	4940      	ldr	r1, [pc, #256]	; (800c1a0 <icmp_input+0x1fc>)
 800c09e:	4841      	ldr	r0, [pc, #260]	; (800c1a4 <icmp_input+0x200>)
 800c0a0:	f001 fd06 	bl	800dab0 <iprintf>
          pbuf_free(r);
 800c0a4:	6978      	ldr	r0, [r7, #20]
 800c0a6:	f7f9 f949 	bl	800533c <pbuf_free>
          goto icmperr;
 800c0aa:	e06c      	b.n	800c186 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	6978      	ldr	r0, [r7, #20]
 800c0b0:	f7f9 fa5c 	bl	800556c <pbuf_copy>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c0ba:	6978      	ldr	r0, [r7, #20]
 800c0bc:	f7f9 f93e 	bl	800533c <pbuf_free>
          goto icmperr;
 800c0c0:	e061      	b.n	800c186 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7f9 f93a 	bl	800533c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	607b      	str	r3, [r7, #4]
 800c0cc:	e00f      	b.n	800c0ee <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c0ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0d0:	330e      	adds	r3, #14
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7f9 f8ab 	bl	8005230 <pbuf_remove_header>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d006      	beq.n	800c0ee <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c0e0:	4b2e      	ldr	r3, [pc, #184]	; (800c19c <icmp_input+0x1f8>)
 800c0e2:	22c7      	movs	r2, #199	; 0xc7
 800c0e4:	4930      	ldr	r1, [pc, #192]	; (800c1a8 <icmp_input+0x204>)
 800c0e6:	482f      	ldr	r0, [pc, #188]	; (800c1a4 <icmp_input+0x200>)
 800c0e8:	f001 fce2 	bl	800dab0 <iprintf>
          goto icmperr;
 800c0ec:	e04b      	b.n	800c186 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c0f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7f9 f889 	bl	8005210 <pbuf_add_header>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d12b      	bne.n	800c15c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c112:	4b20      	ldr	r3, [pc, #128]	; (800c194 <icmp_input+0x1f0>)
 800c114:	691a      	ldr	r2, [r3, #16]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2200      	movs	r2, #0
 800c11e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	2200      	movs	r2, #0
 800c124:	709a      	strb	r2, [r3, #2]
 800c126:	2200      	movs	r2, #0
 800c128:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	22ff      	movs	r2, #255	; 0xff
 800c12e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	729a      	strb	r2, [r3, #10]
 800c136:	2200      	movs	r2, #0
 800c138:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	9302      	str	r3, [sp, #8]
 800c13e:	2301      	movs	r3, #1
 800c140:	9301      	str	r3, [sp, #4]
 800c142:	2300      	movs	r3, #0
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	23ff      	movs	r3, #255	; 0xff
 800c148:	2200      	movs	r2, #0
 800c14a:	69f9      	ldr	r1, [r7, #28]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fa73 	bl	800c638 <ip4_output_if>
 800c152:	4603      	mov	r3, r0
 800c154:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c156:	e001      	b.n	800c15c <icmp_input+0x1b8>
      break;
 800c158:	bf00      	nop
 800c15a:	e000      	b.n	800c15e <icmp_input+0x1ba>
      break;
 800c15c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7f9 f8ec 	bl	800533c <pbuf_free>
  return;
 800c164:	e013      	b.n	800c18e <icmp_input+0x1ea>
    goto lenerr;
 800c166:	bf00      	nop
 800c168:	e002      	b.n	800c170 <icmp_input+0x1cc>
    goto lenerr;
 800c16a:	bf00      	nop
 800c16c:	e000      	b.n	800c170 <icmp_input+0x1cc>
        goto lenerr;
 800c16e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7f9 f8e3 	bl	800533c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c176:	e00a      	b.n	800c18e <icmp_input+0x1ea>
        goto icmperr;
 800c178:	bf00      	nop
 800c17a:	e004      	b.n	800c186 <icmp_input+0x1e2>
        goto icmperr;
 800c17c:	bf00      	nop
 800c17e:	e002      	b.n	800c186 <icmp_input+0x1e2>
          goto icmperr;
 800c180:	bf00      	nop
 800c182:	e000      	b.n	800c186 <icmp_input+0x1e2>
          goto icmperr;
 800c184:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7f9 f8d8 	bl	800533c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c18c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c18e:	3728      	adds	r7, #40	; 0x28
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20003400 	.word	0x20003400
 800c198:	20003414 	.word	0x20003414
 800c19c:	08010e9c 	.word	0x08010e9c
 800c1a0:	08010ed4 	.word	0x08010ed4
 800c1a4:	08010f0c 	.word	0x08010f0c
 800c1a8:	08010f34 	.word	0x08010f34

0800c1ac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c1b8:	78fb      	ldrb	r3, [r7, #3]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	2103      	movs	r1, #3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f814 	bl	800c1ec <icmp_send_response>
}
 800c1c4:	bf00      	nop
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c1d8:	78fb      	ldrb	r3, [r7, #3]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	210b      	movs	r1, #11
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f804 	bl	800c1ec <icmp_send_response>
}
 800c1e4:	bf00      	nop
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08c      	sub	sp, #48	; 0x30
 800c1f0:	af04      	add	r7, sp, #16
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	70fb      	strb	r3, [r7, #3]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c1fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c200:	2124      	movs	r1, #36	; 0x24
 800c202:	2022      	movs	r0, #34	; 0x22
 800c204:	f7f8 fdba 	bl	8004d7c <pbuf_alloc>
 800c208:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d04c      	beq.n	800c2aa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	895b      	ldrh	r3, [r3, #10]
 800c214:	2b23      	cmp	r3, #35	; 0x23
 800c216:	d806      	bhi.n	800c226 <icmp_send_response+0x3a>
 800c218:	4b26      	ldr	r3, [pc, #152]	; (800c2b4 <icmp_send_response+0xc8>)
 800c21a:	f240 1269 	movw	r2, #361	; 0x169
 800c21e:	4926      	ldr	r1, [pc, #152]	; (800c2b8 <icmp_send_response+0xcc>)
 800c220:	4826      	ldr	r0, [pc, #152]	; (800c2bc <icmp_send_response+0xd0>)
 800c222:	f001 fc45 	bl	800dab0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	78fa      	ldrb	r2, [r7, #3]
 800c236:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	78ba      	ldrb	r2, [r7, #2]
 800c23c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2200      	movs	r2, #0
 800c242:	711a      	strb	r2, [r3, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	2200      	movs	r2, #0
 800c24c:	719a      	strb	r2, [r3, #6]
 800c24e:	2200      	movs	r2, #0
 800c250:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	f103 0008 	add.w	r0, r3, #8
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	221c      	movs	r2, #28
 800c260:	4619      	mov	r1, r3
 800c262:	f001 fc12 	bl	800da8a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c26c:	f107 030c 	add.w	r3, r7, #12
 800c270:	4618      	mov	r0, r3
 800c272:	f000 f825 	bl	800c2c0 <ip4_route>
 800c276:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d011      	beq.n	800c2a2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	2200      	movs	r2, #0
 800c282:	709a      	strb	r2, [r3, #2]
 800c284:	2200      	movs	r2, #0
 800c286:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c288:	f107 020c 	add.w	r2, r7, #12
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	9302      	str	r3, [sp, #8]
 800c290:	2301      	movs	r3, #1
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	2300      	movs	r3, #0
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	23ff      	movs	r3, #255	; 0xff
 800c29a:	2100      	movs	r1, #0
 800c29c:	69f8      	ldr	r0, [r7, #28]
 800c29e:	f000 f9cb 	bl	800c638 <ip4_output_if>
  }
  pbuf_free(q);
 800c2a2:	69f8      	ldr	r0, [r7, #28]
 800c2a4:	f7f9 f84a 	bl	800533c <pbuf_free>
 800c2a8:	e000      	b.n	800c2ac <icmp_send_response+0xc0>
    return;
 800c2aa:	bf00      	nop
}
 800c2ac:	3720      	adds	r7, #32
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	08010e9c 	.word	0x08010e9c
 800c2b8:	08010f68 	.word	0x08010f68
 800c2bc:	08010f0c 	.word	0x08010f0c

0800c2c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c2c8:	4b33      	ldr	r3, [pc, #204]	; (800c398 <ip4_route+0xd8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	e036      	b.n	800c33e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2d6:	f003 0301 	and.w	r3, r3, #1
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d02b      	beq.n	800c338 <ip4_route+0x78>
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2e6:	089b      	lsrs	r3, r3, #2
 800c2e8:	f003 0301 	and.w	r3, r3, #1
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d022      	beq.n	800c338 <ip4_route+0x78>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d01d      	beq.n	800c338 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3304      	adds	r3, #4
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	405a      	eors	r2, r3
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3308      	adds	r3, #8
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4013      	ands	r3, r2
 800c310:	2b00      	cmp	r3, #0
 800c312:	d101      	bne.n	800c318 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	e038      	b.n	800c38a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c31e:	f003 0302 	and.w	r3, r3, #2
 800c322:	2b00      	cmp	r3, #0
 800c324:	d108      	bne.n	800c338 <ip4_route+0x78>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	330c      	adds	r3, #12
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	429a      	cmp	r2, r3
 800c332:	d101      	bne.n	800c338 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	e028      	b.n	800c38a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	60fb      	str	r3, [r7, #12]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1c5      	bne.n	800c2d0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c344:	4b15      	ldr	r3, [pc, #84]	; (800c39c <ip4_route+0xdc>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01a      	beq.n	800c382 <ip4_route+0xc2>
 800c34c:	4b13      	ldr	r3, [pc, #76]	; (800c39c <ip4_route+0xdc>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d012      	beq.n	800c382 <ip4_route+0xc2>
 800c35c:	4b0f      	ldr	r3, [pc, #60]	; (800c39c <ip4_route+0xdc>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c364:	f003 0304 	and.w	r3, r3, #4
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00a      	beq.n	800c382 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c36c:	4b0b      	ldr	r3, [pc, #44]	; (800c39c <ip4_route+0xdc>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	3304      	adds	r3, #4
 800c372:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c374:	2b00      	cmp	r3, #0
 800c376:	d004      	beq.n	800c382 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b7f      	cmp	r3, #127	; 0x7f
 800c380:	d101      	bne.n	800c386 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	e001      	b.n	800c38a <ip4_route+0xca>
  }

  return netif_default;
 800c386:	4b05      	ldr	r3, [pc, #20]	; (800c39c <ip4_route+0xdc>)
 800c388:	681b      	ldr	r3, [r3, #0]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3714      	adds	r7, #20
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop
 800c398:	200064f4 	.word	0x200064f4
 800c39c:	200064f8 	.word	0x200064f8

0800c3a0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d016      	beq.n	800c3e6 <ip4_input_accept+0x46>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d011      	beq.n	800c3e6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c3c2:	4b0b      	ldr	r3, [pc, #44]	; (800c3f0 <ip4_input_accept+0x50>)
 800c3c4:	695a      	ldr	r2, [r3, #20]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	3304      	adds	r3, #4
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d008      	beq.n	800c3e2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c3d0:	4b07      	ldr	r3, [pc, #28]	; (800c3f0 <ip4_input_accept+0x50>)
 800c3d2:	695b      	ldr	r3, [r3, #20]
 800c3d4:	6879      	ldr	r1, [r7, #4]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 fa06 	bl	800c7e8 <ip4_addr_isbroadcast_u32>
 800c3dc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e000      	b.n	800c3e8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20003400 	.word	0x20003400

0800c3f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	091b      	lsrs	r3, r3, #4
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b04      	cmp	r3, #4
 800c40e:	d004      	beq.n	800c41a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7f8 ff93 	bl	800533c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	e105      	b.n	800c626 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	f003 030f 	and.w	r3, r3, #15
 800c422:	b2db      	uxtb	r3, r3
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	b2db      	uxtb	r3, r3
 800c428:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	885b      	ldrh	r3, [r3, #2]
 800c42e:	b29b      	uxth	r3, r3
 800c430:	4618      	mov	r0, r3
 800c432:	f7f7 fcd3 	bl	8003ddc <lwip_htons>
 800c436:	4603      	mov	r3, r0
 800c438:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	891b      	ldrh	r3, [r3, #8]
 800c43e:	89ba      	ldrh	r2, [r7, #12]
 800c440:	429a      	cmp	r2, r3
 800c442:	d204      	bcs.n	800c44e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c444:	89bb      	ldrh	r3, [r7, #12]
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7f8 fdf1 	bl	8005030 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	895b      	ldrh	r3, [r3, #10]
 800c452:	89fa      	ldrh	r2, [r7, #14]
 800c454:	429a      	cmp	r2, r3
 800c456:	d807      	bhi.n	800c468 <ip4_input+0x74>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	891b      	ldrh	r3, [r3, #8]
 800c45c:	89ba      	ldrh	r2, [r7, #12]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d802      	bhi.n	800c468 <ip4_input+0x74>
 800c462:	89fb      	ldrh	r3, [r7, #14]
 800c464:	2b13      	cmp	r3, #19
 800c466:	d804      	bhi.n	800c472 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7f8 ff67 	bl	800533c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	e0d9      	b.n	800c626 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	4a6e      	ldr	r2, [pc, #440]	; (800c630 <ip4_input+0x23c>)
 800c478:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	4a6c      	ldr	r2, [pc, #432]	; (800c630 <ip4_input+0x23c>)
 800c480:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c482:	4b6b      	ldr	r3, [pc, #428]	; (800c630 <ip4_input+0x23c>)
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c48a:	2be0      	cmp	r3, #224	; 0xe0
 800c48c:	d112      	bne.n	800c4b4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d007      	beq.n	800c4ae <ip4_input+0xba>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <ip4_input+0xba>
      netif = inp;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	613b      	str	r3, [r7, #16]
 800c4ac:	e02a      	b.n	800c504 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	613b      	str	r3, [r7, #16]
 800c4b2:	e027      	b.n	800c504 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c4b4:	6838      	ldr	r0, [r7, #0]
 800c4b6:	f7ff ff73 	bl	800c3a0 <ip4_input_accept>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <ip4_input+0xd2>
      netif = inp;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	613b      	str	r3, [r7, #16]
 800c4c4:	e01e      	b.n	800c504 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c4ca:	4b59      	ldr	r3, [pc, #356]	; (800c630 <ip4_input+0x23c>)
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b7f      	cmp	r3, #127	; 0x7f
 800c4d2:	d017      	beq.n	800c504 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c4d4:	4b57      	ldr	r3, [pc, #348]	; (800c634 <ip4_input+0x240>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	613b      	str	r3, [r7, #16]
 800c4da:	e00e      	b.n	800c4fa <ip4_input+0x106>
          if (netif == inp) {
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d006      	beq.n	800c4f2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c4e4:	6938      	ldr	r0, [r7, #16]
 800c4e6:	f7ff ff5b 	bl	800c3a0 <ip4_input_accept>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d108      	bne.n	800c502 <ip4_input+0x10e>
 800c4f0:	e000      	b.n	800c4f4 <ip4_input+0x100>
            continue;
 800c4f2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	613b      	str	r3, [r7, #16]
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d1ed      	bne.n	800c4dc <ip4_input+0xe8>
 800c500:	e000      	b.n	800c504 <ip4_input+0x110>
            break;
 800c502:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c504:	4b4a      	ldr	r3, [pc, #296]	; (800c630 <ip4_input+0x23c>)
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 f96c 	bl	800c7e8 <ip4_addr_isbroadcast_u32>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d105      	bne.n	800c522 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c516:	4b46      	ldr	r3, [pc, #280]	; (800c630 <ip4_input+0x23c>)
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c51e:	2be0      	cmp	r3, #224	; 0xe0
 800c520:	d104      	bne.n	800c52c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7f8 ff0a 	bl	800533c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c528:	2300      	movs	r3, #0
 800c52a:	e07c      	b.n	800c626 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d104      	bne.n	800c53c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7f8 ff02 	bl	800533c <pbuf_free>
    return ERR_OK;
 800c538:	2300      	movs	r3, #0
 800c53a:	e074      	b.n	800c626 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	88db      	ldrh	r3, [r3, #6]
 800c540:	b29b      	uxth	r3, r3
 800c542:	461a      	mov	r2, r3
 800c544:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c548:	4013      	ands	r3, r2
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00b      	beq.n	800c566 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fc90 	bl	800ce74 <ip4_reass>
 800c554:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d101      	bne.n	800c560 <ip4_input+0x16c>
      return ERR_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	e062      	b.n	800c626 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c566:	4a32      	ldr	r2, [pc, #200]	; (800c630 <ip4_input+0x23c>)
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c56c:	4a30      	ldr	r2, [pc, #192]	; (800c630 <ip4_input+0x23c>)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c572:	4a2f      	ldr	r2, [pc, #188]	; (800c630 <ip4_input+0x23c>)
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	f003 030f 	and.w	r3, r3, #15
 800c580:	b2db      	uxtb	r3, r3
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	b2db      	uxtb	r3, r3
 800c586:	b29a      	uxth	r2, r3
 800c588:	4b29      	ldr	r3, [pc, #164]	; (800c630 <ip4_input+0x23c>)
 800c58a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c58c:	89fb      	ldrh	r3, [r7, #14]
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7f8 fe4d 	bl	8005230 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	7a5b      	ldrb	r3, [r3, #9]
 800c59a:	2b06      	cmp	r3, #6
 800c59c:	d009      	beq.n	800c5b2 <ip4_input+0x1be>
 800c59e:	2b11      	cmp	r3, #17
 800c5a0:	d002      	beq.n	800c5a8 <ip4_input+0x1b4>
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d00a      	beq.n	800c5bc <ip4_input+0x1c8>
 800c5a6:	e00e      	b.n	800c5c6 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7fe fc6a 	bl	800ae84 <udp_input>
        break;
 800c5b0:	e026      	b.n	800c600 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7fa fcdd 	bl	8006f74 <tcp_input>
        break;
 800c5ba:	e021      	b.n	800c600 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff fcf0 	bl	800bfa4 <icmp_input>
        break;
 800c5c4:	e01c      	b.n	800c600 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c5c6:	4b1a      	ldr	r3, [pc, #104]	; (800c630 <ip4_input+0x23c>)
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	6939      	ldr	r1, [r7, #16]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 f90b 	bl	800c7e8 <ip4_addr_isbroadcast_u32>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10f      	bne.n	800c5f8 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c5d8:	4b15      	ldr	r3, [pc, #84]	; (800c630 <ip4_input+0x23c>)
 800c5da:	695b      	ldr	r3, [r3, #20]
 800c5dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c5e0:	2be0      	cmp	r3, #224	; 0xe0
 800c5e2:	d009      	beq.n	800c5f8 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c5e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7f8 fe93 	bl	8005316 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c5f0:	2102      	movs	r1, #2
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fdda 	bl	800c1ac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7f8 fe9f 	bl	800533c <pbuf_free>
        break;
 800c5fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c600:	4b0b      	ldr	r3, [pc, #44]	; (800c630 <ip4_input+0x23c>)
 800c602:	2200      	movs	r2, #0
 800c604:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c606:	4b0a      	ldr	r3, [pc, #40]	; (800c630 <ip4_input+0x23c>)
 800c608:	2200      	movs	r2, #0
 800c60a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c60c:	4b08      	ldr	r3, [pc, #32]	; (800c630 <ip4_input+0x23c>)
 800c60e:	2200      	movs	r2, #0
 800c610:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c612:	4b07      	ldr	r3, [pc, #28]	; (800c630 <ip4_input+0x23c>)
 800c614:	2200      	movs	r2, #0
 800c616:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c618:	4b05      	ldr	r3, [pc, #20]	; (800c630 <ip4_input+0x23c>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c61e:	4b04      	ldr	r3, [pc, #16]	; (800c630 <ip4_input+0x23c>)
 800c620:	2200      	movs	r2, #0
 800c622:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3718      	adds	r7, #24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20003400 	.word	0x20003400
 800c634:	200064f4 	.word	0x200064f4

0800c638 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08a      	sub	sp, #40	; 0x28
 800c63c:	af04      	add	r7, sp, #16
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
 800c644:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d009      	beq.n	800c664 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <ip4_output_if+0x26>
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d102      	bne.n	800c664 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c660:	3304      	adds	r3, #4
 800c662:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c664:	78fa      	ldrb	r2, [r7, #3]
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	9302      	str	r3, [sp, #8]
 800c66a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c66e:	9301      	str	r3, [sp, #4]
 800c670:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	4613      	mov	r3, r2
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	6979      	ldr	r1, [r7, #20]
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f000 f805 	bl	800c68c <ip4_output_if_src>
 800c682:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c684:	4618      	mov	r0, r3
 800c686:	3718      	adds	r7, #24
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
 800c698:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	7b9b      	ldrb	r3, [r3, #14]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d006      	beq.n	800c6b0 <ip4_output_if_src+0x24>
 800c6a2:	4b4b      	ldr	r3, [pc, #300]	; (800c7d0 <ip4_output_if_src+0x144>)
 800c6a4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c6a8:	494a      	ldr	r1, [pc, #296]	; (800c7d4 <ip4_output_if_src+0x148>)
 800c6aa:	484b      	ldr	r0, [pc, #300]	; (800c7d8 <ip4_output_if_src+0x14c>)
 800c6ac:	f001 fa00 	bl	800dab0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d060      	beq.n	800c778 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c6b6:	2314      	movs	r3, #20
 800c6b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c6ba:	2114      	movs	r1, #20
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f7f8 fda7 	bl	8005210 <pbuf_add_header>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c6c8:	f06f 0301 	mvn.w	r3, #1
 800c6cc:	e07c      	b.n	800c7c8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	895b      	ldrh	r3, [r3, #10]
 800c6d8:	2b13      	cmp	r3, #19
 800c6da:	d806      	bhi.n	800c6ea <ip4_output_if_src+0x5e>
 800c6dc:	4b3c      	ldr	r3, [pc, #240]	; (800c7d0 <ip4_output_if_src+0x144>)
 800c6de:	f240 3289 	movw	r2, #905	; 0x389
 800c6e2:	493e      	ldr	r1, [pc, #248]	; (800c7dc <ip4_output_if_src+0x150>)
 800c6e4:	483c      	ldr	r0, [pc, #240]	; (800c7d8 <ip4_output_if_src+0x14c>)
 800c6e6:	f001 f9e3 	bl	800dab0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	78fa      	ldrb	r2, [r7, #3]
 800c6ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c6f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c700:	8b7b      	ldrh	r3, [r7, #26]
 800c702:	089b      	lsrs	r3, r3, #2
 800c704:	b29b      	uxth	r3, r3
 800c706:	b2db      	uxtb	r3, r3
 800c708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c718:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	891b      	ldrh	r3, [r3, #8]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7f7 fb5c 	bl	8003ddc <lwip_htons>
 800c724:	4603      	mov	r3, r0
 800c726:	461a      	mov	r2, r3
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	2200      	movs	r2, #0
 800c730:	719a      	strb	r2, [r3, #6]
 800c732:	2200      	movs	r2, #0
 800c734:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c736:	4b2a      	ldr	r3, [pc, #168]	; (800c7e0 <ip4_output_if_src+0x154>)
 800c738:	881b      	ldrh	r3, [r3, #0]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f7 fb4e 	bl	8003ddc <lwip_htons>
 800c740:	4603      	mov	r3, r0
 800c742:	461a      	mov	r2, r3
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c748:	4b25      	ldr	r3, [pc, #148]	; (800c7e0 <ip4_output_if_src+0x154>)
 800c74a:	881b      	ldrh	r3, [r3, #0]
 800c74c:	3301      	adds	r3, #1
 800c74e:	b29a      	uxth	r2, r3
 800c750:	4b23      	ldr	r3, [pc, #140]	; (800c7e0 <ip4_output_if_src+0x154>)
 800c752:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d104      	bne.n	800c764 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c75a:	4b22      	ldr	r3, [pc, #136]	; (800c7e4 <ip4_output_if_src+0x158>)
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	60da      	str	r2, [r3, #12]
 800c762:	e003      	b.n	800c76c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	2200      	movs	r2, #0
 800c770:	729a      	strb	r2, [r3, #10]
 800c772:	2200      	movs	r2, #0
 800c774:	72da      	strb	r2, [r3, #11]
 800c776:	e00f      	b.n	800c798 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	895b      	ldrh	r3, [r3, #10]
 800c77c:	2b13      	cmp	r3, #19
 800c77e:	d802      	bhi.n	800c786 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c780:	f06f 0301 	mvn.w	r3, #1
 800c784:	e020      	b.n	800c7c8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c792:	f107 0314 	add.w	r3, r7, #20
 800c796:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00c      	beq.n	800c7ba <ip4_output_if_src+0x12e>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	891a      	ldrh	r2, [r3, #8]
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d906      	bls.n	800c7ba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f000 fd4b 	bl	800d24c <ip4_frag>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	e006      	b.n	800c7c8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	695b      	ldr	r3, [r3, #20]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	68f9      	ldr	r1, [r7, #12]
 800c7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7c4:	4798      	blx	r3
 800c7c6:	4603      	mov	r3, r0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3720      	adds	r7, #32
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	08010f94 	.word	0x08010f94
 800c7d4:	08010fc8 	.word	0x08010fc8
 800c7d8:	08010fd4 	.word	0x08010fd4
 800c7dc:	08010ffc 	.word	0x08010ffc
 800c7e0:	200001fe 	.word	0x200001fe
 800c7e4:	080113d0 	.word	0x080113d0

0800c7e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fc:	d002      	beq.n	800c804 <ip4_addr_isbroadcast_u32+0x1c>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d101      	bne.n	800c808 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c804:	2301      	movs	r3, #1
 800c806:	e02a      	b.n	800c85e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c80e:	f003 0302 	and.w	r3, r3, #2
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c816:	2300      	movs	r3, #0
 800c818:	e021      	b.n	800c85e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	3304      	adds	r3, #4
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	429a      	cmp	r2, r3
 800c824:	d101      	bne.n	800c82a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c826:	2300      	movs	r3, #0
 800c828:	e019      	b.n	800c85e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	3304      	adds	r3, #4
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	405a      	eors	r2, r3
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	3308      	adds	r3, #8
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4013      	ands	r3, r2
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10d      	bne.n	800c85c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	3308      	adds	r3, #8
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	43da      	mvns	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	3308      	adds	r3, #8
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c854:	429a      	cmp	r2, r3
 800c856:	d101      	bne.n	800c85c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c858:	2301      	movs	r3, #1
 800c85a:	e000      	b.n	800c85e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c85c:	2300      	movs	r3, #0
  }
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
	...

0800c86c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c876:	4b12      	ldr	r3, [pc, #72]	; (800c8c0 <ip_reass_tmr+0x54>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c87c:	e018      	b.n	800c8b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	7fdb      	ldrb	r3, [r3, #31]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00b      	beq.n	800c89e <ip_reass_tmr+0x32>
      r->timer--;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	7fdb      	ldrb	r3, [r3, #31]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	e008      	b.n	800c8b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c8a8:	68b9      	ldr	r1, [r7, #8]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f80a 	bl	800c8c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d1e3      	bne.n	800c87e <ip_reass_tmr+0x12>
    }
  }
}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	20000200 	.word	0x20000200

0800c8c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b088      	sub	sp, #32
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d105      	bne.n	800c8e6 <ip_reass_free_complete_datagram+0x22>
 800c8da:	4b45      	ldr	r3, [pc, #276]	; (800c9f0 <ip_reass_free_complete_datagram+0x12c>)
 800c8dc:	22ab      	movs	r2, #171	; 0xab
 800c8de:	4945      	ldr	r1, [pc, #276]	; (800c9f4 <ip_reass_free_complete_datagram+0x130>)
 800c8e0:	4845      	ldr	r0, [pc, #276]	; (800c9f8 <ip_reass_free_complete_datagram+0x134>)
 800c8e2:	f001 f8e5 	bl	800dab0 <iprintf>
  if (prev != NULL) {
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00a      	beq.n	800c902 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d005      	beq.n	800c902 <ip_reass_free_complete_datagram+0x3e>
 800c8f6:	4b3e      	ldr	r3, [pc, #248]	; (800c9f0 <ip_reass_free_complete_datagram+0x12c>)
 800c8f8:	22ad      	movs	r2, #173	; 0xad
 800c8fa:	4940      	ldr	r1, [pc, #256]	; (800c9fc <ip_reass_free_complete_datagram+0x138>)
 800c8fc:	483e      	ldr	r0, [pc, #248]	; (800c9f8 <ip_reass_free_complete_datagram+0x134>)
 800c8fe:	f001 f8d7 	bl	800dab0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	889b      	ldrh	r3, [r3, #4]
 800c90e:	b29b      	uxth	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d12a      	bne.n	800c96a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	6858      	ldr	r0, [r3, #4]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	3308      	adds	r3, #8
 800c92a:	2214      	movs	r2, #20
 800c92c:	4619      	mov	r1, r3
 800c92e:	f001 f8ac 	bl	800da8a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c932:	2101      	movs	r1, #1
 800c934:	69b8      	ldr	r0, [r7, #24]
 800c936:	f7ff fc49 	bl	800c1cc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c93a:	69b8      	ldr	r0, [r7, #24]
 800c93c:	f7f8 fd86 	bl	800544c <pbuf_clen>
 800c940:	4603      	mov	r3, r0
 800c942:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c944:	8bfa      	ldrh	r2, [r7, #30]
 800c946:	8a7b      	ldrh	r3, [r7, #18]
 800c948:	4413      	add	r3, r2
 800c94a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c94e:	db05      	blt.n	800c95c <ip_reass_free_complete_datagram+0x98>
 800c950:	4b27      	ldr	r3, [pc, #156]	; (800c9f0 <ip_reass_free_complete_datagram+0x12c>)
 800c952:	22bc      	movs	r2, #188	; 0xbc
 800c954:	492a      	ldr	r1, [pc, #168]	; (800ca00 <ip_reass_free_complete_datagram+0x13c>)
 800c956:	4828      	ldr	r0, [pc, #160]	; (800c9f8 <ip_reass_free_complete_datagram+0x134>)
 800c958:	f001 f8aa 	bl	800dab0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c95c:	8bfa      	ldrh	r2, [r7, #30]
 800c95e:	8a7b      	ldrh	r3, [r7, #18]
 800c960:	4413      	add	r3, r2
 800c962:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c964:	69b8      	ldr	r0, [r7, #24]
 800c966:	f7f8 fce9 	bl	800533c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c970:	e01f      	b.n	800c9b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f7f8 fd62 	bl	800544c <pbuf_clen>
 800c988:	4603      	mov	r3, r0
 800c98a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c98c:	8bfa      	ldrh	r2, [r7, #30]
 800c98e:	8a7b      	ldrh	r3, [r7, #18]
 800c990:	4413      	add	r3, r2
 800c992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c996:	db05      	blt.n	800c9a4 <ip_reass_free_complete_datagram+0xe0>
 800c998:	4b15      	ldr	r3, [pc, #84]	; (800c9f0 <ip_reass_free_complete_datagram+0x12c>)
 800c99a:	22cc      	movs	r2, #204	; 0xcc
 800c99c:	4918      	ldr	r1, [pc, #96]	; (800ca00 <ip_reass_free_complete_datagram+0x13c>)
 800c99e:	4816      	ldr	r0, [pc, #88]	; (800c9f8 <ip_reass_free_complete_datagram+0x134>)
 800c9a0:	f001 f886 	bl	800dab0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c9a4:	8bfa      	ldrh	r2, [r7, #30]
 800c9a6:	8a7b      	ldrh	r3, [r7, #18]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f7f8 fcc5 	bl	800533c <pbuf_free>
  while (p != NULL) {
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1dc      	bne.n	800c972 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c9b8:	6839      	ldr	r1, [r7, #0]
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f8c2 	bl	800cb44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800c9c0:	4b10      	ldr	r3, [pc, #64]	; (800ca04 <ip_reass_free_complete_datagram+0x140>)
 800c9c2:	881b      	ldrh	r3, [r3, #0]
 800c9c4:	8bfa      	ldrh	r2, [r7, #30]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d905      	bls.n	800c9d6 <ip_reass_free_complete_datagram+0x112>
 800c9ca:	4b09      	ldr	r3, [pc, #36]	; (800c9f0 <ip_reass_free_complete_datagram+0x12c>)
 800c9cc:	22d2      	movs	r2, #210	; 0xd2
 800c9ce:	490e      	ldr	r1, [pc, #56]	; (800ca08 <ip_reass_free_complete_datagram+0x144>)
 800c9d0:	4809      	ldr	r0, [pc, #36]	; (800c9f8 <ip_reass_free_complete_datagram+0x134>)
 800c9d2:	f001 f86d 	bl	800dab0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <ip_reass_free_complete_datagram+0x140>)
 800c9d8:	881a      	ldrh	r2, [r3, #0]
 800c9da:	8bfb      	ldrh	r3, [r7, #30]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	4b08      	ldr	r3, [pc, #32]	; (800ca04 <ip_reass_free_complete_datagram+0x140>)
 800c9e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c9e4:	8bfb      	ldrh	r3, [r7, #30]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3720      	adds	r7, #32
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	0801102c 	.word	0x0801102c
 800c9f4:	08011068 	.word	0x08011068
 800c9f8:	08011074 	.word	0x08011074
 800c9fc:	0801109c 	.word	0x0801109c
 800ca00:	080110b0 	.word	0x080110b0
 800ca04:	20000204 	.word	0x20000204
 800ca08:	080110d0 	.word	0x080110d0

0800ca0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08a      	sub	sp, #40	; 0x28
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ca16:	2300      	movs	r3, #0
 800ca18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ca22:	2300      	movs	r3, #0
 800ca24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ca2a:	4b28      	ldr	r3, [pc, #160]	; (800cacc <ip_reass_remove_oldest_datagram+0xc0>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ca30:	e030      	b.n	800ca94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ca32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca34:	695a      	ldr	r2, [r3, #20]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d10c      	bne.n	800ca58 <ip_reass_remove_oldest_datagram+0x4c>
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	699a      	ldr	r2, [r3, #24]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d106      	bne.n	800ca58 <ip_reass_remove_oldest_datagram+0x4c>
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	899a      	ldrh	r2, [r3, #12]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	889b      	ldrh	r3, [r3, #4]
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d014      	beq.n	800ca82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d104      	bne.n	800ca6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	61bb      	str	r3, [r7, #24]
 800ca6c:	e009      	b.n	800ca82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ca6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca70:	7fda      	ldrb	r2, [r3, #31]
 800ca72:	6a3b      	ldr	r3, [r7, #32]
 800ca74:	7fdb      	ldrb	r3, [r3, #31]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d803      	bhi.n	800ca82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ca82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ca8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1cb      	bne.n	800ca32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ca9a:	6a3b      	ldr	r3, [r7, #32]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d008      	beq.n	800cab2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800caa0:	69b9      	ldr	r1, [r7, #24]
 800caa2:	6a38      	ldr	r0, [r7, #32]
 800caa4:	f7ff ff0e 	bl	800c8c4 <ip_reass_free_complete_datagram>
 800caa8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4413      	add	r3, r2
 800cab0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	da02      	bge.n	800cac0 <ip_reass_remove_oldest_datagram+0xb4>
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	dcac      	bgt.n	800ca1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cac0:	697b      	ldr	r3, [r7, #20]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3728      	adds	r7, #40	; 0x28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20000200 	.word	0x20000200

0800cad0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cada:	2004      	movs	r0, #4
 800cadc:	f7f7 fdd4 	bl	8004688 <memp_malloc>
 800cae0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d110      	bne.n	800cb0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff ff8e 	bl	800ca0c <ip_reass_remove_oldest_datagram>
 800caf0:	4602      	mov	r2, r0
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	4293      	cmp	r3, r2
 800caf6:	dc03      	bgt.n	800cb00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800caf8:	2004      	movs	r0, #4
 800cafa:	f7f7 fdc5 	bl	8004688 <memp_malloc>
 800cafe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d101      	bne.n	800cb0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	e016      	b.n	800cb38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cb0a:	2220      	movs	r2, #32
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f000 ffc6 	bl	800daa0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	220f      	movs	r2, #15
 800cb18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cb1a:	4b09      	ldr	r3, [pc, #36]	; (800cb40 <ip_reass_enqueue_new_datagram+0x70>)
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cb22:	4a07      	ldr	r2, [pc, #28]	; (800cb40 <ip_reass_enqueue_new_datagram+0x70>)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	2214      	movs	r2, #20
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 ffaa 	bl	800da8a <memcpy>
  return ipr;
 800cb36:	68fb      	ldr	r3, [r7, #12]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	20000200 	.word	0x20000200

0800cb44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cb4e:	4b10      	ldr	r3, [pc, #64]	; (800cb90 <ip_reass_dequeue_datagram+0x4c>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d104      	bne.n	800cb62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a0c      	ldr	r2, [pc, #48]	; (800cb90 <ip_reass_dequeue_datagram+0x4c>)
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	e00d      	b.n	800cb7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d106      	bne.n	800cb76 <ip_reass_dequeue_datagram+0x32>
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <ip_reass_dequeue_datagram+0x50>)
 800cb6a:	f240 1245 	movw	r2, #325	; 0x145
 800cb6e:	490a      	ldr	r1, [pc, #40]	; (800cb98 <ip_reass_dequeue_datagram+0x54>)
 800cb70:	480a      	ldr	r0, [pc, #40]	; (800cb9c <ip_reass_dequeue_datagram+0x58>)
 800cb72:	f000 ff9d 	bl	800dab0 <iprintf>
    prev->next = ipr->next;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	2004      	movs	r0, #4
 800cb82:	f7f7 fdcd 	bl	8004720 <memp_free>
}
 800cb86:	bf00      	nop
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	20000200 	.word	0x20000200
 800cb94:	0801102c 	.word	0x0801102c
 800cb98:	080110f4 	.word	0x080110f4
 800cb9c:	08011074 	.word	0x08011074

0800cba0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b08c      	sub	sp, #48	; 0x30
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800cbac:	2300      	movs	r3, #0
 800cbae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	885b      	ldrh	r3, [r3, #2]
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7f7 f90b 	bl	8003ddc <lwip_htons>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	f003 030f 	and.w	r3, r3, #15
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800cbd8:	7e7b      	ldrb	r3, [r7, #25]
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	8b7a      	ldrh	r2, [r7, #26]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d202      	bcs.n	800cbe8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cbe2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe6:	e135      	b.n	800ce54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800cbe8:	7e7b      	ldrb	r3, [r7, #25]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	8b7a      	ldrh	r2, [r7, #26]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cbf2:	69fb      	ldr	r3, [r7, #28]
 800cbf4:	88db      	ldrh	r3, [r3, #6]
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7f7 f8ef 	bl	8003ddc <lwip_htons>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800cc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc12:	2200      	movs	r2, #0
 800cc14:	701a      	strb	r2, [r3, #0]
 800cc16:	2200      	movs	r2, #0
 800cc18:	705a      	strb	r2, [r3, #1]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	709a      	strb	r2, [r3, #2]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800cc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc24:	8afa      	ldrh	r2, [r7, #22]
 800cc26:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800cc28:	8afa      	ldrh	r2, [r7, #22]
 800cc2a:	8b7b      	ldrh	r3, [r7, #26]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc32:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800cc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc36:	88db      	ldrh	r3, [r3, #6]
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	8afa      	ldrh	r2, [r7, #22]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d902      	bls.n	800cc46 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cc40:	f04f 33ff 	mov.w	r3, #4294967295
 800cc44:	e106      	b.n	800ce54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc4c:	e068      	b.n	800cd20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	889b      	ldrh	r3, [r3, #4]
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	889b      	ldrh	r3, [r3, #4]
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d235      	bcs.n	800ccd0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc68:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800cc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d020      	beq.n	800ccb2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc72:	889b      	ldrh	r3, [r3, #4]
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc78:	88db      	ldrh	r3, [r3, #6]
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d307      	bcc.n	800cc90 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800cc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc82:	88db      	ldrh	r3, [r3, #6]
 800cc84:	b29a      	uxth	r2, r3
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	889b      	ldrh	r3, [r3, #4]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d902      	bls.n	800cc96 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cc90:	f04f 33ff 	mov.w	r3, #4294967295
 800cc94:	e0de      	b.n	800ce54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800cc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800cc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9e:	88db      	ldrh	r3, [r3, #6]
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	889b      	ldrh	r3, [r3, #4]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d03d      	beq.n	800cd28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ccb0:	e03a      	b.n	800cd28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	88db      	ldrh	r3, [r3, #6]
 800ccb6:	b29a      	uxth	r2, r3
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	889b      	ldrh	r3, [r3, #4]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d902      	bls.n	800ccc8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ccc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc6:	e0c5      	b.n	800ce54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	68ba      	ldr	r2, [r7, #8]
 800cccc:	605a      	str	r2, [r3, #4]
      break;
 800ccce:	e02b      	b.n	800cd28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	889b      	ldrh	r3, [r3, #4]
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	889b      	ldrh	r3, [r3, #4]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d102      	bne.n	800cce6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cce0:	f04f 33ff 	mov.w	r3, #4294967295
 800cce4:	e0b6      	b.n	800ce54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	889b      	ldrh	r3, [r3, #4]
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	88db      	ldrh	r3, [r3, #6]
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d202      	bcs.n	800ccfc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ccf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfa:	e0ab      	b.n	800ce54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d009      	beq.n	800cd16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd04:	88db      	ldrh	r3, [r3, #6]
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	889b      	ldrh	r3, [r3, #4]
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d001      	beq.n	800cd16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cd12:	2300      	movs	r3, #0
 800cd14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d193      	bne.n	800cc4e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800cd26:	e000      	b.n	800cd2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800cd28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d12d      	bne.n	800cd8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800cd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d01c      	beq.n	800cd70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd38:	88db      	ldrh	r3, [r3, #6]
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	889b      	ldrh	r3, [r3, #4]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d906      	bls.n	800cd54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800cd46:	4b45      	ldr	r3, [pc, #276]	; (800ce5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cd48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800cd4c:	4944      	ldr	r1, [pc, #272]	; (800ce60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cd4e:	4845      	ldr	r0, [pc, #276]	; (800ce64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cd50:	f000 feae 	bl	800dab0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	88db      	ldrh	r3, [r3, #6]
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd62:	889b      	ldrh	r3, [r3, #4]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d010      	beq.n	800cd8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	623b      	str	r3, [r7, #32]
 800cd6e:	e00d      	b.n	800cd8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d006      	beq.n	800cd86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800cd78:	4b38      	ldr	r3, [pc, #224]	; (800ce5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cd7a:	f240 12bf 	movw	r2, #447	; 0x1bf
 800cd7e:	493a      	ldr	r1, [pc, #232]	; (800ce68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800cd80:	4838      	ldr	r0, [pc, #224]	; (800ce64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cd82:	f000 fe95 	bl	800dab0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d105      	bne.n	800cd9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	7f9b      	ldrb	r3, [r3, #30]
 800cd96:	f003 0301 	and.w	r3, r3, #1
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d059      	beq.n	800ce52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800cd9e:	6a3b      	ldr	r3, [r7, #32]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d04f      	beq.n	800ce44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d006      	beq.n	800cdba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	889b      	ldrh	r3, [r3, #4]
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	623b      	str	r3, [r7, #32]
 800cdbe:	e041      	b.n	800ce44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800cdca:	e012      	b.n	800cdf2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	88db      	ldrh	r3, [r3, #6]
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdda:	889b      	ldrh	r3, [r3, #4]
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d002      	beq.n	800cde8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	623b      	str	r3, [r7, #32]
            break;
 800cde6:	e007      	b.n	800cdf8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800cdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1e9      	bne.n	800cdcc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d022      	beq.n	800ce44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d106      	bne.n	800ce14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ce06:	4b15      	ldr	r3, [pc, #84]	; (800ce5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ce08:	f240 12df 	movw	r2, #479	; 0x1df
 800ce0c:	4917      	ldr	r1, [pc, #92]	; (800ce6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ce0e:	4815      	ldr	r0, [pc, #84]	; (800ce64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ce10:	f000 fe4e 	bl	800dab0 <iprintf>
          LWIP_ASSERT("sanity check",
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d106      	bne.n	800ce2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ce20:	4b0e      	ldr	r3, [pc, #56]	; (800ce5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ce22:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ce26:	4911      	ldr	r1, [pc, #68]	; (800ce6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ce28:	480e      	ldr	r0, [pc, #56]	; (800ce64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ce2a:	f000 fe41 	bl	800dab0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d006      	beq.n	800ce44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ce36:	4b09      	ldr	r3, [pc, #36]	; (800ce5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ce38:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ce3c:	490c      	ldr	r1, [pc, #48]	; (800ce70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ce3e:	4809      	ldr	r0, [pc, #36]	; (800ce64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ce40:	f000 fe36 	bl	800dab0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ce44:	6a3b      	ldr	r3, [r7, #32]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bf14      	ite	ne
 800ce4a:	2301      	movne	r3, #1
 800ce4c:	2300      	moveq	r3, #0
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	e000      	b.n	800ce54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ce52:	2300      	movs	r3, #0
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3730      	adds	r7, #48	; 0x30
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	0801102c 	.word	0x0801102c
 800ce60:	08011110 	.word	0x08011110
 800ce64:	08011074 	.word	0x08011074
 800ce68:	08011130 	.word	0x08011130
 800ce6c:	08011168 	.word	0x08011168
 800ce70:	08011178 	.word	0x08011178

0800ce74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08e      	sub	sp, #56	; 0x38
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ce82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	f003 030f 	and.w	r3, r3, #15
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	2b14      	cmp	r3, #20
 800ce92:	f040 8167 	bne.w	800d164 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	88db      	ldrh	r3, [r3, #6]
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7f6 ff9d 	bl	8003ddc <lwip_htons>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	00db      	lsls	r3, r3, #3
 800ceac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	885b      	ldrh	r3, [r3, #2]
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7f6 ff91 	bl	8003ddc <lwip_htons>
 800ceba:	4603      	mov	r3, r0
 800cebc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	f003 030f 	and.w	r3, r3, #15
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800cece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ced6:	429a      	cmp	r2, r3
 800ced8:	f0c0 8146 	bcc.w	800d168 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800cedc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7f8 faaf 	bl	800544c <pbuf_clen>
 800ceee:	4603      	mov	r3, r0
 800cef0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cef2:	4ba3      	ldr	r3, [pc, #652]	; (800d180 <ip4_reass+0x30c>)
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	8c3b      	ldrh	r3, [r7, #32]
 800cefa:	4413      	add	r3, r2
 800cefc:	2b0a      	cmp	r3, #10
 800cefe:	dd10      	ble.n	800cf22 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cf00:	8c3b      	ldrh	r3, [r7, #32]
 800cf02:	4619      	mov	r1, r3
 800cf04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf06:	f7ff fd81 	bl	800ca0c <ip_reass_remove_oldest_datagram>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 812d 	beq.w	800d16c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cf12:	4b9b      	ldr	r3, [pc, #620]	; (800d180 <ip4_reass+0x30c>)
 800cf14:	881b      	ldrh	r3, [r3, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	8c3b      	ldrh	r3, [r7, #32]
 800cf1a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cf1c:	2b0a      	cmp	r3, #10
 800cf1e:	f300 8125 	bgt.w	800d16c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cf22:	4b98      	ldr	r3, [pc, #608]	; (800d184 <ip4_reass+0x310>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	633b      	str	r3, [r7, #48]	; 0x30
 800cf28:	e015      	b.n	800cf56 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	695a      	ldr	r2, [r3, #20]
 800cf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d10c      	bne.n	800cf50 <ip4_reass+0xdc>
 800cf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf38:	699a      	ldr	r2, [r3, #24]
 800cf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3c:	691b      	ldr	r3, [r3, #16]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d106      	bne.n	800cf50 <ip4_reass+0xdc>
 800cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf44:	899a      	ldrh	r2, [r3, #12]
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	889b      	ldrh	r3, [r3, #4]
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d006      	beq.n	800cf5e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	633b      	str	r3, [r7, #48]	; 0x30
 800cf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1e6      	bne.n	800cf2a <ip4_reass+0xb6>
 800cf5c:	e000      	b.n	800cf60 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800cf5e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800cf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d109      	bne.n	800cf7a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800cf66:	8c3b      	ldrh	r3, [r7, #32]
 800cf68:	4619      	mov	r1, r3
 800cf6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf6c:	f7ff fdb0 	bl	800cad0 <ip_reass_enqueue_new_datagram>
 800cf70:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800cf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d11c      	bne.n	800cfb2 <ip4_reass+0x13e>
      goto nullreturn;
 800cf78:	e0f9      	b.n	800d16e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7c:	88db      	ldrh	r3, [r3, #6]
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7f6 ff2b 	bl	8003ddc <lwip_htons>
 800cf86:	4603      	mov	r3, r0
 800cf88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d110      	bne.n	800cfb2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800cf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf92:	89db      	ldrh	r3, [r3, #14]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7f6 ff21 	bl	8003ddc <lwip_htons>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d006      	beq.n	800cfb2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	3308      	adds	r3, #8
 800cfa8:	2214      	movs	r2, #20
 800cfaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 fd6c 	bl	800da8a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800cfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb4:	88db      	ldrh	r3, [r3, #6]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	f003 0320 	and.w	r3, r3, #32
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	bf0c      	ite	eq
 800cfc0:	2301      	moveq	r3, #1
 800cfc2:	2300      	movne	r3, #0
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00e      	beq.n	800cfec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800cfce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cfd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfd2:	4413      	add	r3, r2
 800cfd4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cfd6:	8b7a      	ldrh	r2, [r7, #26]
 800cfd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	f0c0 80a0 	bcc.w	800d120 <ip4_reass+0x2ac>
 800cfe0:	8b7b      	ldrh	r3, [r7, #26]
 800cfe2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	f200 809a 	bhi.w	800d120 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cfec:	69fa      	ldr	r2, [r7, #28]
 800cfee:	6879      	ldr	r1, [r7, #4]
 800cff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cff2:	f7ff fdd5 	bl	800cba0 <ip_reass_chain_frag_into_datagram_and_validate>
 800cff6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cffe:	f000 8091 	beq.w	800d124 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d002:	4b5f      	ldr	r3, [pc, #380]	; (800d180 <ip4_reass+0x30c>)
 800d004:	881a      	ldrh	r2, [r3, #0]
 800d006:	8c3b      	ldrh	r3, [r7, #32]
 800d008:	4413      	add	r3, r2
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	4b5c      	ldr	r3, [pc, #368]	; (800d180 <ip4_reass+0x30c>)
 800d00e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00d      	beq.n	800d032 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d016:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d01a:	4413      	add	r3, r2
 800d01c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d020:	8a7a      	ldrh	r2, [r7, #18]
 800d022:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d026:	7f9b      	ldrb	r3, [r3, #30]
 800d028:	f043 0301 	orr.w	r3, r3, #1
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d030:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d171      	bne.n	800d11c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03a:	8b9b      	ldrh	r3, [r3, #28]
 800d03c:	3314      	adds	r3, #20
 800d03e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d054:	3308      	adds	r3, #8
 800d056:	2214      	movs	r2, #20
 800d058:	4619      	mov	r1, r3
 800d05a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d05c:	f000 fd15 	bl	800da8a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d060:	8a3b      	ldrh	r3, [r7, #16]
 800d062:	4618      	mov	r0, r3
 800d064:	f7f6 feba 	bl	8003ddc <lwip_htons>
 800d068:	4603      	mov	r3, r0
 800d06a:	461a      	mov	r2, r3
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	2200      	movs	r2, #0
 800d074:	719a      	strb	r2, [r3, #6]
 800d076:	2200      	movs	r2, #0
 800d078:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07c:	2200      	movs	r2, #0
 800d07e:	729a      	strb	r2, [r3, #10]
 800d080:	2200      	movs	r2, #0
 800d082:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d08a:	e00d      	b.n	800d0a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d092:	2114      	movs	r1, #20
 800d094:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d096:	f7f8 f8cb 	bl	8005230 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d09a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7f8 fa0f 	bl	80054c0 <pbuf_cat>
      r = iprh->next_pbuf;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1ee      	bne.n	800d08c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d0ae:	4b35      	ldr	r3, [pc, #212]	; (800d184 <ip4_reass+0x310>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d102      	bne.n	800d0be <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0bc:	e010      	b.n	800d0e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d0be:	4b31      	ldr	r3, [pc, #196]	; (800d184 <ip4_reass+0x310>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0c4:	e007      	b.n	800d0d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d006      	beq.n	800d0de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1f4      	bne.n	800d0c6 <ip4_reass+0x252>
 800d0dc:	e000      	b.n	800d0e0 <ip4_reass+0x26c>
          break;
 800d0de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d0e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0e4:	f7ff fd2e 	bl	800cb44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7f8 f9af 	bl	800544c <pbuf_clen>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d0f2:	4b23      	ldr	r3, [pc, #140]	; (800d180 <ip4_reass+0x30c>)
 800d0f4:	881b      	ldrh	r3, [r3, #0]
 800d0f6:	8c3a      	ldrh	r2, [r7, #32]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d906      	bls.n	800d10a <ip4_reass+0x296>
 800d0fc:	4b22      	ldr	r3, [pc, #136]	; (800d188 <ip4_reass+0x314>)
 800d0fe:	f240 229b 	movw	r2, #667	; 0x29b
 800d102:	4922      	ldr	r1, [pc, #136]	; (800d18c <ip4_reass+0x318>)
 800d104:	4822      	ldr	r0, [pc, #136]	; (800d190 <ip4_reass+0x31c>)
 800d106:	f000 fcd3 	bl	800dab0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d10a:	4b1d      	ldr	r3, [pc, #116]	; (800d180 <ip4_reass+0x30c>)
 800d10c:	881a      	ldrh	r2, [r3, #0]
 800d10e:	8c3b      	ldrh	r3, [r7, #32]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	b29a      	uxth	r2, r3
 800d114:	4b1a      	ldr	r3, [pc, #104]	; (800d180 <ip4_reass+0x30c>)
 800d116:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	e02c      	b.n	800d176 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d11c:	2300      	movs	r3, #0
 800d11e:	e02a      	b.n	800d176 <ip4_reass+0x302>

nullreturn_ipr:
 800d120:	bf00      	nop
 800d122:	e000      	b.n	800d126 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800d124:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d106      	bne.n	800d13a <ip4_reass+0x2c6>
 800d12c:	4b16      	ldr	r3, [pc, #88]	; (800d188 <ip4_reass+0x314>)
 800d12e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800d132:	4918      	ldr	r1, [pc, #96]	; (800d194 <ip4_reass+0x320>)
 800d134:	4816      	ldr	r0, [pc, #88]	; (800d190 <ip4_reass+0x31c>)
 800d136:	f000 fcbb 	bl	800dab0 <iprintf>
  if (ipr->p == NULL) {
 800d13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d114      	bne.n	800d16c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d142:	4b10      	ldr	r3, [pc, #64]	; (800d184 <ip4_reass+0x310>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d148:	429a      	cmp	r2, r3
 800d14a:	d006      	beq.n	800d15a <ip4_reass+0x2e6>
 800d14c:	4b0e      	ldr	r3, [pc, #56]	; (800d188 <ip4_reass+0x314>)
 800d14e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d152:	4911      	ldr	r1, [pc, #68]	; (800d198 <ip4_reass+0x324>)
 800d154:	480e      	ldr	r0, [pc, #56]	; (800d190 <ip4_reass+0x31c>)
 800d156:	f000 fcab 	bl	800dab0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d15a:	2100      	movs	r1, #0
 800d15c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d15e:	f7ff fcf1 	bl	800cb44 <ip_reass_dequeue_datagram>
 800d162:	e004      	b.n	800d16e <ip4_reass+0x2fa>
    goto nullreturn;
 800d164:	bf00      	nop
 800d166:	e002      	b.n	800d16e <ip4_reass+0x2fa>
    goto nullreturn;
 800d168:	bf00      	nop
 800d16a:	e000      	b.n	800d16e <ip4_reass+0x2fa>
  }

nullreturn:
 800d16c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7f8 f8e4 	bl	800533c <pbuf_free>
  return NULL;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3738      	adds	r7, #56	; 0x38
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	20000204 	.word	0x20000204
 800d184:	20000200 	.word	0x20000200
 800d188:	0801102c 	.word	0x0801102c
 800d18c:	0801119c 	.word	0x0801119c
 800d190:	08011074 	.word	0x08011074
 800d194:	080111b8 	.word	0x080111b8
 800d198:	080111c4 	.word	0x080111c4

0800d19c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d1a0:	2005      	movs	r0, #5
 800d1a2:	f7f7 fa71 	bl	8004688 <memp_malloc>
 800d1a6:	4603      	mov	r3, r0
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d106      	bne.n	800d1c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d1ba:	4b07      	ldr	r3, [pc, #28]	; (800d1d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d1bc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800d1c0:	4906      	ldr	r1, [pc, #24]	; (800d1dc <ip_frag_free_pbuf_custom_ref+0x30>)
 800d1c2:	4807      	ldr	r0, [pc, #28]	; (800d1e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d1c4:	f000 fc74 	bl	800dab0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d1c8:	6879      	ldr	r1, [r7, #4]
 800d1ca:	2005      	movs	r0, #5
 800d1cc:	f7f7 faa8 	bl	8004720 <memp_free>
}
 800d1d0:	bf00      	nop
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	0801102c 	.word	0x0801102c
 800d1dc:	080111e4 	.word	0x080111e4
 800d1e0:	08011074 	.word	0x08011074

0800d1e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d106      	bne.n	800d204 <ipfrag_free_pbuf_custom+0x20>
 800d1f6:	4b11      	ldr	r3, [pc, #68]	; (800d23c <ipfrag_free_pbuf_custom+0x58>)
 800d1f8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800d1fc:	4910      	ldr	r1, [pc, #64]	; (800d240 <ipfrag_free_pbuf_custom+0x5c>)
 800d1fe:	4811      	ldr	r0, [pc, #68]	; (800d244 <ipfrag_free_pbuf_custom+0x60>)
 800d200:	f000 fc56 	bl	800dab0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d006      	beq.n	800d21a <ipfrag_free_pbuf_custom+0x36>
 800d20c:	4b0b      	ldr	r3, [pc, #44]	; (800d23c <ipfrag_free_pbuf_custom+0x58>)
 800d20e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800d212:	490d      	ldr	r1, [pc, #52]	; (800d248 <ipfrag_free_pbuf_custom+0x64>)
 800d214:	480b      	ldr	r0, [pc, #44]	; (800d244 <ipfrag_free_pbuf_custom+0x60>)
 800d216:	f000 fc4b 	bl	800dab0 <iprintf>
  if (pcr->original != NULL) {
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	695b      	ldr	r3, [r3, #20]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d004      	beq.n	800d22c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	695b      	ldr	r3, [r3, #20]
 800d226:	4618      	mov	r0, r3
 800d228:	f7f8 f888 	bl	800533c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f7ff ffbd 	bl	800d1ac <ip_frag_free_pbuf_custom_ref>
}
 800d232:	bf00      	nop
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	0801102c 	.word	0x0801102c
 800d240:	080111f0 	.word	0x080111f0
 800d244:	08011074 	.word	0x08011074
 800d248:	080111fc 	.word	0x080111fc

0800d24c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b094      	sub	sp, #80	; 0x50
 800d250:	af02      	add	r7, sp, #8
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d262:	3b14      	subs	r3, #20
 800d264:	2b00      	cmp	r3, #0
 800d266:	da00      	bge.n	800d26a <ip4_frag+0x1e>
 800d268:	3307      	adds	r3, #7
 800d26a:	10db      	asrs	r3, r3, #3
 800d26c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d26e:	2314      	movs	r3, #20
 800d270:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800d278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	f003 030f 	and.w	r3, r3, #15
 800d284:	b2db      	uxtb	r3, r3
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	2b14      	cmp	r3, #20
 800d28c:	d002      	beq.n	800d294 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d28e:	f06f 0305 	mvn.w	r3, #5
 800d292:	e10f      	b.n	800d4b4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	895b      	ldrh	r3, [r3, #10]
 800d298:	2b13      	cmp	r3, #19
 800d29a:	d809      	bhi.n	800d2b0 <ip4_frag+0x64>
 800d29c:	4b87      	ldr	r3, [pc, #540]	; (800d4bc <ip4_frag+0x270>)
 800d29e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800d2a2:	4987      	ldr	r1, [pc, #540]	; (800d4c0 <ip4_frag+0x274>)
 800d2a4:	4887      	ldr	r0, [pc, #540]	; (800d4c4 <ip4_frag+0x278>)
 800d2a6:	f000 fc03 	bl	800dab0 <iprintf>
 800d2aa:	f06f 0305 	mvn.w	r3, #5
 800d2ae:	e101      	b.n	800d4b4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b2:	88db      	ldrh	r3, [r3, #6]
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7f6 fd90 	bl	8003ddc <lwip_htons>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800d2c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d2c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d2ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d2cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d2d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	891b      	ldrh	r3, [r3, #8]
 800d2d6:	3b14      	subs	r3, #20
 800d2d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800d2dc:	e0e0      	b.n	800d4a0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d2de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d2e0:	00db      	lsls	r3, r3, #3
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	bf28      	it	cs
 800d2ec:	4613      	movcs	r3, r2
 800d2ee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d2f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d2f4:	2114      	movs	r1, #20
 800d2f6:	200e      	movs	r0, #14
 800d2f8:	f7f7 fd40 	bl	8004d7c <pbuf_alloc>
 800d2fc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 80d4 	beq.w	800d4ae <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d308:	895b      	ldrh	r3, [r3, #10]
 800d30a:	2b13      	cmp	r3, #19
 800d30c:	d806      	bhi.n	800d31c <ip4_frag+0xd0>
 800d30e:	4b6b      	ldr	r3, [pc, #428]	; (800d4bc <ip4_frag+0x270>)
 800d310:	f240 3225 	movw	r2, #805	; 0x325
 800d314:	496c      	ldr	r1, [pc, #432]	; (800d4c8 <ip4_frag+0x27c>)
 800d316:	486b      	ldr	r0, [pc, #428]	; (800d4c4 <ip4_frag+0x278>)
 800d318:	f000 fbca 	bl	800dab0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	2214      	movs	r2, #20
 800d322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d324:	4618      	mov	r0, r3
 800d326:	f000 fbb0 	bl	800da8a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800d330:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d332:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800d336:	e064      	b.n	800d402 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	895a      	ldrh	r2, [r3, #10]
 800d33c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	895b      	ldrh	r3, [r3, #10]
 800d346:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d348:	429a      	cmp	r2, r3
 800d34a:	d906      	bls.n	800d35a <ip4_frag+0x10e>
 800d34c:	4b5b      	ldr	r3, [pc, #364]	; (800d4bc <ip4_frag+0x270>)
 800d34e:	f240 322d 	movw	r2, #813	; 0x32d
 800d352:	495e      	ldr	r1, [pc, #376]	; (800d4cc <ip4_frag+0x280>)
 800d354:	485b      	ldr	r0, [pc, #364]	; (800d4c4 <ip4_frag+0x278>)
 800d356:	f000 fbab 	bl	800dab0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d35a:	8bfa      	ldrh	r2, [r7, #30]
 800d35c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d360:	4293      	cmp	r3, r2
 800d362:	bf28      	it	cs
 800d364:	4613      	movcs	r3, r2
 800d366:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d36a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d105      	bne.n	800d37e <ip4_frag+0x132>
        poff = 0;
 800d372:	2300      	movs	r3, #0
 800d374:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]
        continue;
 800d37c:	e041      	b.n	800d402 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d37e:	f7ff ff0d 	bl	800d19c <ip_frag_alloc_pbuf_custom_ref>
 800d382:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d103      	bne.n	800d392 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d38a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d38c:	f7f7 ffd6 	bl	800533c <pbuf_free>
        goto memerr;
 800d390:	e08e      	b.n	800d4b0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d392:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d398:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d39a:	4413      	add	r3, r2
 800d39c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800d3a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d3a4:	9201      	str	r2, [sp, #4]
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2241      	movs	r2, #65	; 0x41
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	f7f7 fe0b 	bl	8004fc8 <pbuf_alloced_custom>
 800d3b2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d106      	bne.n	800d3c8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d3ba:	69b8      	ldr	r0, [r7, #24]
 800d3bc:	f7ff fef6 	bl	800d1ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d3c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3c2:	f7f7 ffbb 	bl	800533c <pbuf_free>
        goto memerr;
 800d3c6:	e073      	b.n	800d4b0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f7f8 f857 	bl	800547c <pbuf_ref>
      pcr->original = p;
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	4a3e      	ldr	r2, [pc, #248]	; (800d4d0 <ip4_frag+0x284>)
 800d3d8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d3da:	6979      	ldr	r1, [r7, #20]
 800d3dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3de:	f7f8 f86f 	bl	80054c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d3e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d3e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800d3f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d004      	beq.n	800d402 <ip4_frag+0x1b6>
        poff = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d402:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d406:	2b00      	cmp	r3, #0
 800d408:	d196      	bne.n	800d338 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d40a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d40c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d410:	4413      	add	r3, r2
 800d412:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d414:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d41c:	3b14      	subs	r3, #20
 800d41e:	429a      	cmp	r2, r3
 800d420:	bfd4      	ite	le
 800d422:	2301      	movle	r3, #1
 800d424:	2300      	movgt	r3, #0
 800d426:	b2db      	uxtb	r3, r3
 800d428:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d42a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d42e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d432:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d002      	beq.n	800d440 <ip4_frag+0x1f4>
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d003      	beq.n	800d448 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d440:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d446:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d448:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7f6 fcc6 	bl	8003ddc <lwip_htons>
 800d450:	4603      	mov	r3, r0
 800d452:	461a      	mov	r2, r3
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d458:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d45a:	3314      	adds	r3, #20
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f6 fcbc 	bl	8003ddc <lwip_htons>
 800d464:	4603      	mov	r3, r0
 800d466:	461a      	mov	r2, r3
 800d468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46e:	2200      	movs	r2, #0
 800d470:	729a      	strb	r2, [r3, #10]
 800d472:	2200      	movs	r2, #0
 800d474:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d47e:	68b8      	ldr	r0, [r7, #8]
 800d480:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d484:	f7f7 ff5a 	bl	800533c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d488:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d48c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800d494:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d498:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d49a:	4413      	add	r3, r2
 800d49c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800d4a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f47f af1a 	bne.w	800d2de <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e002      	b.n	800d4b4 <ip4_frag+0x268>
      goto memerr;
 800d4ae:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d4b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3748      	adds	r7, #72	; 0x48
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	0801102c 	.word	0x0801102c
 800d4c0:	08011208 	.word	0x08011208
 800d4c4:	08011074 	.word	0x08011074
 800d4c8:	08011224 	.word	0x08011224
 800d4cc:	08011244 	.word	0x08011244
 800d4d0:	0800d1e5 	.word	0x0800d1e5

0800d4d4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d4de:	230e      	movs	r3, #14
 800d4e0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	895b      	ldrh	r3, [r3, #10]
 800d4e6:	2b0e      	cmp	r3, #14
 800d4e8:	d96e      	bls.n	800d5c8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	7bdb      	ldrb	r3, [r3, #15]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d106      	bne.n	800d500 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	7b1a      	ldrb	r2, [r3, #12]
 800d50a:	7b5b      	ldrb	r3, [r3, #13]
 800d50c:	021b      	lsls	r3, r3, #8
 800d50e:	4313      	orrs	r3, r2
 800d510:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d023      	beq.n	800d566 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d10f      	bne.n	800d546 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	785b      	ldrb	r3, [r3, #1]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d11b      	bne.n	800d566 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d532:	2b5e      	cmp	r3, #94	; 0x5e
 800d534:	d117      	bne.n	800d566 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	7b5b      	ldrb	r3, [r3, #13]
 800d53a:	f043 0310 	orr.w	r3, r3, #16
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	735a      	strb	r2, [r3, #13]
 800d544:	e00f      	b.n	800d566 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	2206      	movs	r2, #6
 800d54a:	4928      	ldr	r1, [pc, #160]	; (800d5ec <ethernet_input+0x118>)
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 fa8d 	bl	800da6c <memcmp>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d106      	bne.n	800d566 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	7b5b      	ldrb	r3, [r3, #13]
 800d55c:	f043 0308 	orr.w	r3, r3, #8
 800d560:	b2da      	uxtb	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d566:	89fb      	ldrh	r3, [r7, #14]
 800d568:	2b08      	cmp	r3, #8
 800d56a:	d003      	beq.n	800d574 <ethernet_input+0xa0>
 800d56c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d570:	d014      	beq.n	800d59c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d572:	e032      	b.n	800d5da <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d57a:	f003 0308 	and.w	r3, r3, #8
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d024      	beq.n	800d5cc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d582:	8afb      	ldrh	r3, [r7, #22]
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7f7 fe52 	bl	8005230 <pbuf_remove_header>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d11e      	bne.n	800d5d0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d592:	6839      	ldr	r1, [r7, #0]
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7fe ff2d 	bl	800c3f4 <ip4_input>
      break;
 800d59a:	e013      	b.n	800d5c4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5a2:	f003 0308 	and.w	r3, r3, #8
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d014      	beq.n	800d5d4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d5aa:	8afb      	ldrh	r3, [r7, #22]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7f7 fe3e 	bl	8005230 <pbuf_remove_header>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10e      	bne.n	800d5d8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d5ba:	6839      	ldr	r1, [r7, #0]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7fe f8cd 	bl	800b75c <etharp_input>
      break;
 800d5c2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e00c      	b.n	800d5e2 <ethernet_input+0x10e>
    goto free_and_return;
 800d5c8:	bf00      	nop
 800d5ca:	e006      	b.n	800d5da <ethernet_input+0x106>
        goto free_and_return;
 800d5cc:	bf00      	nop
 800d5ce:	e004      	b.n	800d5da <ethernet_input+0x106>
        goto free_and_return;
 800d5d0:	bf00      	nop
 800d5d2:	e002      	b.n	800d5da <ethernet_input+0x106>
        goto free_and_return;
 800d5d4:	bf00      	nop
 800d5d6:	e000      	b.n	800d5da <ethernet_input+0x106>
        goto free_and_return;
 800d5d8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7f7 feae 	bl	800533c <pbuf_free>
  return ERR_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	080113d4 	.word	0x080113d4

0800d5f0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
 800d5fc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d5fe:	8c3b      	ldrh	r3, [r7, #32]
 800d600:	4618      	mov	r0, r3
 800d602:	f7f6 fbeb 	bl	8003ddc <lwip_htons>
 800d606:	4603      	mov	r3, r0
 800d608:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d60a:	210e      	movs	r1, #14
 800d60c:	68b8      	ldr	r0, [r7, #8]
 800d60e:	f7f7 fdff 	bl	8005210 <pbuf_add_header>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d125      	bne.n	800d664 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	8afa      	ldrh	r2, [r7, #22]
 800d622:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	2206      	movs	r2, #6
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 fa2d 	bl	800da8a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	3306      	adds	r3, #6
 800d634:	2206      	movs	r2, #6
 800d636:	6879      	ldr	r1, [r7, #4]
 800d638:	4618      	mov	r0, r3
 800d63a:	f000 fa26 	bl	800da8a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d644:	2b06      	cmp	r3, #6
 800d646:	d006      	beq.n	800d656 <ethernet_output+0x66>
 800d648:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <ethernet_output+0x84>)
 800d64a:	f240 1233 	movw	r2, #307	; 0x133
 800d64e:	490a      	ldr	r1, [pc, #40]	; (800d678 <ethernet_output+0x88>)
 800d650:	480a      	ldr	r0, [pc, #40]	; (800d67c <ethernet_output+0x8c>)
 800d652:	f000 fa2d 	bl	800dab0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	699b      	ldr	r3, [r3, #24]
 800d65a:	68b9      	ldr	r1, [r7, #8]
 800d65c:	68f8      	ldr	r0, [r7, #12]
 800d65e:	4798      	blx	r3
 800d660:	4603      	mov	r3, r0
 800d662:	e002      	b.n	800d66a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d664:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d666:	f06f 0301 	mvn.w	r3, #1
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3718      	adds	r7, #24
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	08011254 	.word	0x08011254
 800d678:	0801128c 	.word	0x0801128c
 800d67c:	080112c0 	.word	0x080112c0

0800d680 <Blink_Loop>:

//-----------------------------------------------------------------------------
static volatile uint16_t BlinkReg = 0;
//-----------------------------------------------------------------------------
//Процесс для мигания светодиодами.
void Blink_Loop(void){
 800d680:	b480      	push	{r7}
 800d682:	af00      	add	r7, sp, #0
	
	static uint16_t blinkCount = 0;
  //--------------------
	++blinkCount;
 800d684:	4b3c      	ldr	r3, [pc, #240]	; (800d778 <Blink_Loop+0xf8>)
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	3301      	adds	r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	4b3a      	ldr	r3, [pc, #232]	; (800d778 <Blink_Loop+0xf8>)
 800d68e:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 50)   == 0) BlinkReg ^= (1 << INTERVAL_50_mS);
 800d690:	4b39      	ldr	r3, [pc, #228]	; (800d778 <Blink_Loop+0xf8>)
 800d692:	881b      	ldrh	r3, [r3, #0]
 800d694:	4a39      	ldr	r2, [pc, #228]	; (800d77c <Blink_Loop+0xfc>)
 800d696:	fba2 1203 	umull	r1, r2, r2, r3
 800d69a:	0912      	lsrs	r2, r2, #4
 800d69c:	2132      	movs	r1, #50	; 0x32
 800d69e:	fb01 f202 	mul.w	r2, r1, r2
 800d6a2:	1a9b      	subs	r3, r3, r2
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d107      	bne.n	800d6ba <Blink_Loop+0x3a>
 800d6aa:	4b35      	ldr	r3, [pc, #212]	; (800d780 <Blink_Loop+0x100>)
 800d6ac:	881b      	ldrh	r3, [r3, #0]
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	f083 0301 	eor.w	r3, r3, #1
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	4b32      	ldr	r3, [pc, #200]	; (800d780 <Blink_Loop+0x100>)
 800d6b8:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 100)  == 0) BlinkReg ^= (1 << INTERVAL_100_mS);
 800d6ba:	4b2f      	ldr	r3, [pc, #188]	; (800d778 <Blink_Loop+0xf8>)
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	4a2f      	ldr	r2, [pc, #188]	; (800d77c <Blink_Loop+0xfc>)
 800d6c0:	fba2 1203 	umull	r1, r2, r2, r3
 800d6c4:	0952      	lsrs	r2, r2, #5
 800d6c6:	2164      	movs	r1, #100	; 0x64
 800d6c8:	fb01 f202 	mul.w	r2, r1, r2
 800d6cc:	1a9b      	subs	r3, r3, r2
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d107      	bne.n	800d6e4 <Blink_Loop+0x64>
 800d6d4:	4b2a      	ldr	r3, [pc, #168]	; (800d780 <Blink_Loop+0x100>)
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	f083 0302 	eor.w	r3, r3, #2
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	4b27      	ldr	r3, [pc, #156]	; (800d780 <Blink_Loop+0x100>)
 800d6e2:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 250)  == 0) BlinkReg ^= (1 << INTERVAL_250_mS);	
 800d6e4:	4b24      	ldr	r3, [pc, #144]	; (800d778 <Blink_Loop+0xf8>)
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	4a26      	ldr	r2, [pc, #152]	; (800d784 <Blink_Loop+0x104>)
 800d6ea:	fba2 1203 	umull	r1, r2, r2, r3
 800d6ee:	0912      	lsrs	r2, r2, #4
 800d6f0:	21fa      	movs	r1, #250	; 0xfa
 800d6f2:	fb01 f202 	mul.w	r2, r1, r2
 800d6f6:	1a9b      	subs	r3, r3, r2
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d107      	bne.n	800d70e <Blink_Loop+0x8e>
 800d6fe:	4b20      	ldr	r3, [pc, #128]	; (800d780 <Blink_Loop+0x100>)
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	b29b      	uxth	r3, r3
 800d704:	f083 0304 	eor.w	r3, r3, #4
 800d708:	b29a      	uxth	r2, r3
 800d70a:	4b1d      	ldr	r3, [pc, #116]	; (800d780 <Blink_Loop+0x100>)
 800d70c:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 500)  == 0) BlinkReg ^= (1 << INTERVAL_500_mS);
 800d70e:	4b1a      	ldr	r3, [pc, #104]	; (800d778 <Blink_Loop+0xf8>)
 800d710:	881b      	ldrh	r3, [r3, #0]
 800d712:	4a1c      	ldr	r2, [pc, #112]	; (800d784 <Blink_Loop+0x104>)
 800d714:	fba2 1203 	umull	r1, r2, r2, r3
 800d718:	0952      	lsrs	r2, r2, #5
 800d71a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d71e:	fb01 f202 	mul.w	r2, r1, r2
 800d722:	1a9b      	subs	r3, r3, r2
 800d724:	b29b      	uxth	r3, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d107      	bne.n	800d73a <Blink_Loop+0xba>
 800d72a:	4b15      	ldr	r3, [pc, #84]	; (800d780 <Blink_Loop+0x100>)
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	b29b      	uxth	r3, r3
 800d730:	f083 0308 	eor.w	r3, r3, #8
 800d734:	b29a      	uxth	r2, r3
 800d736:	4b12      	ldr	r3, [pc, #72]	; (800d780 <Blink_Loop+0x100>)
 800d738:	801a      	strh	r2, [r3, #0]
	if((blinkCount % 1000) == 0)
 800d73a:	4b0f      	ldr	r3, [pc, #60]	; (800d778 <Blink_Loop+0xf8>)
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	4a11      	ldr	r2, [pc, #68]	; (800d784 <Blink_Loop+0x104>)
 800d740:	fba2 1203 	umull	r1, r2, r2, r3
 800d744:	0992      	lsrs	r2, r2, #6
 800d746:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d74a:	fb01 f202 	mul.w	r2, r1, r2
 800d74e:	1a9b      	subs	r3, r3, r2
 800d750:	b29b      	uxth	r3, r3
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10a      	bne.n	800d76c <Blink_Loop+0xec>
		{
			BlinkReg  ^= (1 << INTERVAL_1000_mS);
 800d756:	4b0a      	ldr	r3, [pc, #40]	; (800d780 <Blink_Loop+0x100>)
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	f083 0310 	eor.w	r3, r3, #16
 800d760:	b29a      	uxth	r2, r3
 800d762:	4b07      	ldr	r3, [pc, #28]	; (800d780 <Blink_Loop+0x100>)
 800d764:	801a      	strh	r2, [r3, #0]
			blinkCount = 0;
 800d766:	4b04      	ldr	r3, [pc, #16]	; (800d778 <Blink_Loop+0xf8>)
 800d768:	2200      	movs	r2, #0
 800d76a:	801a      	strh	r2, [r3, #0]
		}
}
 800d76c:	bf00      	nop
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	20000208 	.word	0x20000208
 800d77c:	51eb851f 	.word	0x51eb851f
 800d780:	20000206 	.word	0x20000206
 800d784:	10624dd3 	.word	0x10624dd3

0800d788 <Blink>:
//-----------------------------------------------------------------------------
uint16_t Blink(BlinkIntervalEnum_t interval){
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4603      	mov	r3, r0
 800d790:	71fb      	strb	r3, [r7, #7]
	
	if(BlinkReg & (1 << interval)) return 0xFFFF;
 800d792:	4b0a      	ldr	r3, [pc, #40]	; (800d7bc <Blink+0x34>)
 800d794:	881b      	ldrh	r3, [r3, #0]
 800d796:	b29b      	uxth	r3, r3
 800d798:	461a      	mov	r2, r3
 800d79a:	79fb      	ldrb	r3, [r7, #7]
 800d79c:	fa42 f303 	asr.w	r3, r2, r3
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <Blink+0x26>
 800d7a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7ac:	e000      	b.n	800d7b0 <Blink+0x28>
	else											     return 0;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	20000206 	.word	0x20000206

0800d7c0 <I2C_Init>:
static uint8_t   I2C_Mode;

//static uint8_t  i2cState = I2C_STATE_IDLE;
//*******************************************************************************************
//*******************************************************************************************
void I2C_Init(I2C_TypeDef *i2c){
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
//			GPIOB->CRH |= GPIO_CRH_MODE10_1 | GPIO_CRH_MODE11_1 |
//						  GPIO_CRH_CNF10    | GPIO_CRH_CNF11;
//		}
	//------------------------------
	//Инициализация I2C.
	i2c->CR2  &= ~I2C_CR2_FREQ;   //
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	605a      	str	r2, [r3, #4]
	i2c->CR2  |=  45; //36;//I2C_CR2_VALUE;  //APB1 = 36MHz
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	685b      	ldr	r3, [r3, #4]
 800d7d8:	f043 022d 	orr.w	r2, r3, #45	; 0x2d
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	605a      	str	r2, [r3, #4]
	i2c->CCR  &= ~I2C_CCR_CCR;    //
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	69db      	ldr	r3, [r3, #28]
 800d7e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d7e8:	f023 030f 	bic.w	r3, r3, #15
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	61d3      	str	r3, [r2, #28]

	//i2c->CCR   =  120;//100кГц
	i2c->CCR   =  30; //400кГц  45;//I2C_CCR_VALUE;  //(36MHz/I2C_BAUD_RATE/2)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	221e      	movs	r2, #30
 800d7f4:	61da      	str	r2, [r3, #28]

	i2c->CCR  |=  I2C_CCR_FS;     //1 - режим FastMode(400kHz), 0 - режим STANDART(100kHz).
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	69db      	ldr	r3, [r3, #28]
 800d7fa:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	61da      	str	r2, [r3, #28]
	i2c->TRISE =  12;//37;//I2C_TRISE_VALUE;//(1mcs/(1/36MHz)+1)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	220c      	movs	r2, #12
 800d806:	621a      	str	r2, [r3, #32]
	i2c->CR1  |=  I2C_CR1_PE;     //Включение модуля I2C1.
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f043 0201 	orr.w	r2, r3, #1
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 255; i++){__NOP();};
 800d814:	2300      	movs	r3, #0
 800d816:	73fb      	strb	r3, [r7, #15]
 800d818:	e003      	b.n	800d822 <I2C_Init+0x62>
 800d81a:	bf00      	nop
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
 800d81e:	3301      	adds	r3, #1
 800d820:	73fb      	strb	r3, [r7, #15]
 800d822:	7bfb      	ldrb	r3, [r7, #15]
 800d824:	2bff      	cmp	r3, #255	; 0xff
 800d826:	d1f8      	bne.n	800d81a <I2C_Init+0x5a>
}
 800d828:	bf00      	nop
 800d82a:	3714      	adds	r7, #20
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <I2C_StartAndSendDeviceAddr>:
//**********************************************************
uint8_t I2C_StartAndSendDeviceAddr(I2C_TypeDef *i2c, uint8_t deviceAddr){
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]

	uint32_t wait = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	60fb      	str	r3, [r7, #12]
	//---------------------
	//Ждем освобождения шины. - не отлажено!!!
	while(i2c->SR2 & I2C_SR2_BUSY)
 800d844:	e00d      	b.n	800d862 <I2C_StartAndSendDeviceAddr+0x2e>
		{
			if(++wait >= I2C_WAIT)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3301      	adds	r3, #1
 800d84a:	60fb      	str	r3, [r7, #12]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2bfe      	cmp	r3, #254	; 0xfe
 800d850:	d907      	bls.n	800d862 <I2C_StartAndSendDeviceAddr+0x2e>
			{
				i2c->CR1 |=	I2C_CR1_SWRST;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	601a      	str	r2, [r3, #0]
				return 1;
 800d85e:	2301      	movs	r3, #1
 800d860:	e045      	b.n	800d8ee <I2C_StartAndSendDeviceAddr+0xba>
	while(i2c->SR2 & I2C_SR2_BUSY)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	699b      	ldr	r3, [r3, #24]
 800d866:	f003 0302 	and.w	r3, r3, #2
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1eb      	bne.n	800d846 <I2C_StartAndSendDeviceAddr+0x12>
			}
		}
	wait = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	60fb      	str	r3, [r7, #12]
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_SR1_SB))//Ожидание формирования Start condition.
 800d87e:	e00d      	b.n	800d89c <I2C_StartAndSendDeviceAddr+0x68>
		{
			if(++wait >= I2C_WAIT)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	3301      	adds	r3, #1
 800d884:	60fb      	str	r3, [r7, #12]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2bfe      	cmp	r3, #254	; 0xfe
 800d88a:	d907      	bls.n	800d89c <I2C_StartAndSendDeviceAddr+0x68>
				{
					i2c->CR1 |=	I2C_CR1_SWRST;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	601a      	str	r2, [r3, #0]
					return 1;
 800d898:	2301      	movs	r3, #1
 800d89a:	e028      	b.n	800d8ee <I2C_StartAndSendDeviceAddr+0xba>
	while(!(i2c->SR1 & I2C_SR1_SB))//Ожидание формирования Start condition.
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	695b      	ldr	r3, [r3, #20]
 800d8a0:	f003 0301 	and.w	r3, r3, #1
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d0eb      	beq.n	800d880 <I2C_StartAndSendDeviceAddr+0x4c>
				}
		}
	wait = 0;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	60fb      	str	r3, [r7, #12]
	(void)i2c->SR1;				    //Для сброса флага SB необходимо прочитать SR1
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave.
	i2c->DR = deviceAddr;
 800d8b0:	78fa      	ldrb	r2, [r7, #3]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR))//Ожидаем окончания передачи адреса и
 800d8b6:	e00d      	b.n	800d8d4 <I2C_StartAndSendDeviceAddr+0xa0>
		{
			if(++wait >= I2C_WAIT)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	60fb      	str	r3, [r7, #12]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2bfe      	cmp	r3, #254	; 0xfe
 800d8c2:	d907      	bls.n	800d8d4 <I2C_StartAndSendDeviceAddr+0xa0>
				{
					i2c->CR1 |=	I2C_CR1_SWRST;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	601a      	str	r2, [r3, #0]
					return 1;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e00c      	b.n	800d8ee <I2C_StartAndSendDeviceAddr+0xba>
	while(!(i2c->SR1 & I2C_SR1_ADDR))//Ожидаем окончания передачи адреса и
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	695b      	ldr	r3, [r3, #20]
 800d8d8:	f003 0302 	and.w	r3, r3, #2
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d0eb      	beq.n	800d8b8 <I2C_StartAndSendDeviceAddr+0x84>
				}
		}
	wait = 0;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	60fb      	str	r3, [r7, #12]
	(void)i2c->SR1;				      //сбрасываем бит ADDR (чтением SR1 и SR2):
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				      //
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	699b      	ldr	r3, [r3, #24]

	return 0;
 800d8ec:	2300      	movs	r3, #0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <I2C_Stop>:
			*(pBuf + len - 1) = i2c->DR;		//считали принятый байт.
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
		}
}
//**********************************************************
void I2C_Stop(I2C_TypeDef *i2c){
 800d8fa:	b480      	push	{r7}
 800d8fc:	b083      	sub	sp, #12
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]

	while((i2c->SR1 & I2C_SR1_BTF));//Ждем окончания передачи
 800d902:	bf00      	nop
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	695b      	ldr	r3, [r3, #20]
 800d908:	f003 0304 	and.w	r3, r3, #4
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1f9      	bne.n	800d904 <I2C_Stop+0xa>
	i2c->CR1 |= I2C_CR1_STOP;		 //Формируем Stop
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	601a      	str	r2, [r3, #0]
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f003 0301 	and.w	r3, r3, #1
 800d940:	2b00      	cmp	r3, #0
 800d942:	d008      	beq.n	800d956 <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 800d944:	78fb      	ldrb	r3, [r7, #3]
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	4a27      	ldr	r2, [pc, #156]	; (800d9e8 <I2C_Int_Handler+0xc0>)
 800d94a:	7812      	ldrb	r2, [r2, #0]
 800d94c:	4313      	orrs	r3, r2
 800d94e:	461a      	mov	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	611a      	str	r2, [r3, #16]
		  return;
 800d954:	e042      	b.n	800d9dc <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f003 0302 	and.w	r3, r3, #2
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d010      	beq.n	800d982 <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 800d960:	4b21      	ldr	r3, [pc, #132]	; (800d9e8 <I2C_Int_Handler+0xc0>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d136      	bne.n	800d9d6 <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 800d968:	4b20      	ldr	r3, [pc, #128]	; (800d9ec <I2C_Int_Handler+0xc4>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 800d974:	4b1e      	ldr	r3, [pc, #120]	; (800d9f0 <I2C_Int_Handler+0xc8>)
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	3301      	adds	r3, #1
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	4b1c      	ldr	r3, [pc, #112]	; (800d9f0 <I2C_Int_Handler+0xc8>)
 800d97e:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 800d980:	e029      	b.n	800d9d6 <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d01f      	beq.n	800d9cc <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 800d98c:	4b17      	ldr	r3, [pc, #92]	; (800d9ec <I2C_Int_Handler+0xc4>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a17      	ldr	r2, [pc, #92]	; (800d9f0 <I2C_Int_Handler+0xc8>)
 800d992:	8812      	ldrh	r2, [r2, #0]
 800d994:	4413      	add	r3, r2
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	461a      	mov	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 800d99e:	4b14      	ldr	r3, [pc, #80]	; (800d9f0 <I2C_Int_Handler+0xc8>)
 800d9a0:	881b      	ldrh	r3, [r3, #0]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	4b12      	ldr	r3, [pc, #72]	; (800d9f0 <I2C_Int_Handler+0xc8>)
 800d9a8:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 800d9aa:	4b12      	ldr	r3, [pc, #72]	; (800d9f4 <I2C_Int_Handler+0xcc>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	4b0f      	ldr	r3, [pc, #60]	; (800d9f0 <I2C_Int_Handler+0xc8>)
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d810      	bhi.n	800d9da <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 800d9b8:	4b0d      	ldr	r3, [pc, #52]	; (800d9f0 <I2C_Int_Handler+0xc8>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	601a      	str	r2, [r3, #0]
				}
			return;
 800d9ca:	e006      	b.n	800d9da <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f003 0304 	and.w	r3, r3, #4
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	e002      	b.n	800d9dc <I2C_Int_Handler+0xb4>
	      return;
 800d9d6:	bf00      	nop
 800d9d8:	e000      	b.n	800d9dc <I2C_Int_Handler+0xb4>
			return;
 800d9da:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 800d9dc:	3714      	adds	r7, #20
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	20000215 	.word	0x20000215
 800d9ec:	20000210 	.word	0x20000210
 800d9f0:	2000020a 	.word	0x2000020a
 800d9f4:	20000214 	.word	0x20000214

0800d9f8 <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 800d9f8:	b480      	push	{r7}
 800d9fa:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 800d9fc:	bf00      	nop
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr
	...

0800da08 <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 800da0c:	4b03      	ldr	r3, [pc, #12]	; (800da1c <I2C2_EV_IRQHandler+0x14>)
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	4619      	mov	r1, r3
 800da12:	4803      	ldr	r0, [pc, #12]	; (800da20 <I2C2_EV_IRQHandler+0x18>)
 800da14:	f7ff ff88 	bl	800d928 <I2C_Int_Handler>
//	LedPA7_Toggel();
}
 800da18:	bf00      	nop
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	2000020c 	.word	0x2000020c
 800da20:	40005800 	.word	0x40005800

0800da24 <__libc_init_array>:
 800da24:	b570      	push	{r4, r5, r6, lr}
 800da26:	4e0d      	ldr	r6, [pc, #52]	; (800da5c <__libc_init_array+0x38>)
 800da28:	4c0d      	ldr	r4, [pc, #52]	; (800da60 <__libc_init_array+0x3c>)
 800da2a:	1ba4      	subs	r4, r4, r6
 800da2c:	10a4      	asrs	r4, r4, #2
 800da2e:	2500      	movs	r5, #0
 800da30:	42a5      	cmp	r5, r4
 800da32:	d109      	bne.n	800da48 <__libc_init_array+0x24>
 800da34:	4e0b      	ldr	r6, [pc, #44]	; (800da64 <__libc_init_array+0x40>)
 800da36:	4c0c      	ldr	r4, [pc, #48]	; (800da68 <__libc_init_array+0x44>)
 800da38:	f000 ff5a 	bl	800e8f0 <_init>
 800da3c:	1ba4      	subs	r4, r4, r6
 800da3e:	10a4      	asrs	r4, r4, #2
 800da40:	2500      	movs	r5, #0
 800da42:	42a5      	cmp	r5, r4
 800da44:	d105      	bne.n	800da52 <__libc_init_array+0x2e>
 800da46:	bd70      	pop	{r4, r5, r6, pc}
 800da48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da4c:	4798      	blx	r3
 800da4e:	3501      	adds	r5, #1
 800da50:	e7ee      	b.n	800da30 <__libc_init_array+0xc>
 800da52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da56:	4798      	blx	r3
 800da58:	3501      	adds	r5, #1
 800da5a:	e7f2      	b.n	800da42 <__libc_init_array+0x1e>
 800da5c:	08011484 	.word	0x08011484
 800da60:	08011484 	.word	0x08011484
 800da64:	08011484 	.word	0x08011484
 800da68:	08011488 	.word	0x08011488

0800da6c <memcmp>:
 800da6c:	b530      	push	{r4, r5, lr}
 800da6e:	2400      	movs	r4, #0
 800da70:	42a2      	cmp	r2, r4
 800da72:	d101      	bne.n	800da78 <memcmp+0xc>
 800da74:	2000      	movs	r0, #0
 800da76:	e007      	b.n	800da88 <memcmp+0x1c>
 800da78:	5d03      	ldrb	r3, [r0, r4]
 800da7a:	3401      	adds	r4, #1
 800da7c:	190d      	adds	r5, r1, r4
 800da7e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800da82:	42ab      	cmp	r3, r5
 800da84:	d0f4      	beq.n	800da70 <memcmp+0x4>
 800da86:	1b58      	subs	r0, r3, r5
 800da88:	bd30      	pop	{r4, r5, pc}

0800da8a <memcpy>:
 800da8a:	b510      	push	{r4, lr}
 800da8c:	1e43      	subs	r3, r0, #1
 800da8e:	440a      	add	r2, r1
 800da90:	4291      	cmp	r1, r2
 800da92:	d100      	bne.n	800da96 <memcpy+0xc>
 800da94:	bd10      	pop	{r4, pc}
 800da96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da9e:	e7f7      	b.n	800da90 <memcpy+0x6>

0800daa0 <memset>:
 800daa0:	4402      	add	r2, r0
 800daa2:	4603      	mov	r3, r0
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d100      	bne.n	800daaa <memset+0xa>
 800daa8:	4770      	bx	lr
 800daaa:	f803 1b01 	strb.w	r1, [r3], #1
 800daae:	e7f9      	b.n	800daa4 <memset+0x4>

0800dab0 <iprintf>:
 800dab0:	b40f      	push	{r0, r1, r2, r3}
 800dab2:	4b0a      	ldr	r3, [pc, #40]	; (800dadc <iprintf+0x2c>)
 800dab4:	b513      	push	{r0, r1, r4, lr}
 800dab6:	681c      	ldr	r4, [r3, #0]
 800dab8:	b124      	cbz	r4, 800dac4 <iprintf+0x14>
 800daba:	69a3      	ldr	r3, [r4, #24]
 800dabc:	b913      	cbnz	r3, 800dac4 <iprintf+0x14>
 800dabe:	4620      	mov	r0, r4
 800dac0:	f000 f882 	bl	800dbc8 <__sinit>
 800dac4:	ab05      	add	r3, sp, #20
 800dac6:	9a04      	ldr	r2, [sp, #16]
 800dac8:	68a1      	ldr	r1, [r4, #8]
 800daca:	9301      	str	r3, [sp, #4]
 800dacc:	4620      	mov	r0, r4
 800dace:	f000 f9df 	bl	800de90 <_vfiprintf_r>
 800dad2:	b002      	add	sp, #8
 800dad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dad8:	b004      	add	sp, #16
 800dada:	4770      	bx	lr
 800dadc:	20000014 	.word	0x20000014

0800dae0 <rand>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4b13      	ldr	r3, [pc, #76]	; (800db30 <rand+0x50>)
 800dae4:	681c      	ldr	r4, [r3, #0]
 800dae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dae8:	b97b      	cbnz	r3, 800db0a <rand+0x2a>
 800daea:	2018      	movs	r0, #24
 800daec:	f000 f8f6 	bl	800dcdc <malloc>
 800daf0:	4a10      	ldr	r2, [pc, #64]	; (800db34 <rand+0x54>)
 800daf2:	4b11      	ldr	r3, [pc, #68]	; (800db38 <rand+0x58>)
 800daf4:	63a0      	str	r0, [r4, #56]	; 0x38
 800daf6:	e9c0 2300 	strd	r2, r3, [r0]
 800dafa:	4b10      	ldr	r3, [pc, #64]	; (800db3c <rand+0x5c>)
 800dafc:	6083      	str	r3, [r0, #8]
 800dafe:	230b      	movs	r3, #11
 800db00:	8183      	strh	r3, [r0, #12]
 800db02:	2201      	movs	r2, #1
 800db04:	2300      	movs	r3, #0
 800db06:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800db0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800db0c:	480c      	ldr	r0, [pc, #48]	; (800db40 <rand+0x60>)
 800db0e:	690a      	ldr	r2, [r1, #16]
 800db10:	694b      	ldr	r3, [r1, #20]
 800db12:	4c0c      	ldr	r4, [pc, #48]	; (800db44 <rand+0x64>)
 800db14:	4350      	muls	r0, r2
 800db16:	fb04 0003 	mla	r0, r4, r3, r0
 800db1a:	fba2 2304 	umull	r2, r3, r2, r4
 800db1e:	4403      	add	r3, r0
 800db20:	1c54      	adds	r4, r2, #1
 800db22:	f143 0500 	adc.w	r5, r3, #0
 800db26:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800db2a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800db2e:	bd38      	pop	{r3, r4, r5, pc}
 800db30:	20000014 	.word	0x20000014
 800db34:	abcd330e 	.word	0xabcd330e
 800db38:	e66d1234 	.word	0xe66d1234
 800db3c:	0005deec 	.word	0x0005deec
 800db40:	5851f42d 	.word	0x5851f42d
 800db44:	4c957f2d 	.word	0x4c957f2d

0800db48 <std>:
 800db48:	2300      	movs	r3, #0
 800db4a:	b510      	push	{r4, lr}
 800db4c:	4604      	mov	r4, r0
 800db4e:	e9c0 3300 	strd	r3, r3, [r0]
 800db52:	6083      	str	r3, [r0, #8]
 800db54:	8181      	strh	r1, [r0, #12]
 800db56:	6643      	str	r3, [r0, #100]	; 0x64
 800db58:	81c2      	strh	r2, [r0, #14]
 800db5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db5e:	6183      	str	r3, [r0, #24]
 800db60:	4619      	mov	r1, r3
 800db62:	2208      	movs	r2, #8
 800db64:	305c      	adds	r0, #92	; 0x5c
 800db66:	f7ff ff9b 	bl	800daa0 <memset>
 800db6a:	4b05      	ldr	r3, [pc, #20]	; (800db80 <std+0x38>)
 800db6c:	6263      	str	r3, [r4, #36]	; 0x24
 800db6e:	4b05      	ldr	r3, [pc, #20]	; (800db84 <std+0x3c>)
 800db70:	62a3      	str	r3, [r4, #40]	; 0x28
 800db72:	4b05      	ldr	r3, [pc, #20]	; (800db88 <std+0x40>)
 800db74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db76:	4b05      	ldr	r3, [pc, #20]	; (800db8c <std+0x44>)
 800db78:	6224      	str	r4, [r4, #32]
 800db7a:	6323      	str	r3, [r4, #48]	; 0x30
 800db7c:	bd10      	pop	{r4, pc}
 800db7e:	bf00      	nop
 800db80:	0800e3ed 	.word	0x0800e3ed
 800db84:	0800e40f 	.word	0x0800e40f
 800db88:	0800e447 	.word	0x0800e447
 800db8c:	0800e46b 	.word	0x0800e46b

0800db90 <_cleanup_r>:
 800db90:	4901      	ldr	r1, [pc, #4]	; (800db98 <_cleanup_r+0x8>)
 800db92:	f000 b885 	b.w	800dca0 <_fwalk_reent>
 800db96:	bf00      	nop
 800db98:	0800e745 	.word	0x0800e745

0800db9c <__sfmoreglue>:
 800db9c:	b570      	push	{r4, r5, r6, lr}
 800db9e:	1e4a      	subs	r2, r1, #1
 800dba0:	2568      	movs	r5, #104	; 0x68
 800dba2:	4355      	muls	r5, r2
 800dba4:	460e      	mov	r6, r1
 800dba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dbaa:	f000 f8ed 	bl	800dd88 <_malloc_r>
 800dbae:	4604      	mov	r4, r0
 800dbb0:	b140      	cbz	r0, 800dbc4 <__sfmoreglue+0x28>
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	e9c0 1600 	strd	r1, r6, [r0]
 800dbb8:	300c      	adds	r0, #12
 800dbba:	60a0      	str	r0, [r4, #8]
 800dbbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dbc0:	f7ff ff6e 	bl	800daa0 <memset>
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}

0800dbc8 <__sinit>:
 800dbc8:	6983      	ldr	r3, [r0, #24]
 800dbca:	b510      	push	{r4, lr}
 800dbcc:	4604      	mov	r4, r0
 800dbce:	bb33      	cbnz	r3, 800dc1e <__sinit+0x56>
 800dbd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800dbd4:	6503      	str	r3, [r0, #80]	; 0x50
 800dbd6:	4b12      	ldr	r3, [pc, #72]	; (800dc20 <__sinit+0x58>)
 800dbd8:	4a12      	ldr	r2, [pc, #72]	; (800dc24 <__sinit+0x5c>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6282      	str	r2, [r0, #40]	; 0x28
 800dbde:	4298      	cmp	r0, r3
 800dbe0:	bf04      	itt	eq
 800dbe2:	2301      	moveq	r3, #1
 800dbe4:	6183      	streq	r3, [r0, #24]
 800dbe6:	f000 f81f 	bl	800dc28 <__sfp>
 800dbea:	6060      	str	r0, [r4, #4]
 800dbec:	4620      	mov	r0, r4
 800dbee:	f000 f81b 	bl	800dc28 <__sfp>
 800dbf2:	60a0      	str	r0, [r4, #8]
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f000 f817 	bl	800dc28 <__sfp>
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	60e0      	str	r0, [r4, #12]
 800dbfe:	2104      	movs	r1, #4
 800dc00:	6860      	ldr	r0, [r4, #4]
 800dc02:	f7ff ffa1 	bl	800db48 <std>
 800dc06:	2201      	movs	r2, #1
 800dc08:	2109      	movs	r1, #9
 800dc0a:	68a0      	ldr	r0, [r4, #8]
 800dc0c:	f7ff ff9c 	bl	800db48 <std>
 800dc10:	2202      	movs	r2, #2
 800dc12:	2112      	movs	r1, #18
 800dc14:	68e0      	ldr	r0, [r4, #12]
 800dc16:	f7ff ff97 	bl	800db48 <std>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	61a3      	str	r3, [r4, #24]
 800dc1e:	bd10      	pop	{r4, pc}
 800dc20:	080113e4 	.word	0x080113e4
 800dc24:	0800db91 	.word	0x0800db91

0800dc28 <__sfp>:
 800dc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2a:	4b1b      	ldr	r3, [pc, #108]	; (800dc98 <__sfp+0x70>)
 800dc2c:	681e      	ldr	r6, [r3, #0]
 800dc2e:	69b3      	ldr	r3, [r6, #24]
 800dc30:	4607      	mov	r7, r0
 800dc32:	b913      	cbnz	r3, 800dc3a <__sfp+0x12>
 800dc34:	4630      	mov	r0, r6
 800dc36:	f7ff ffc7 	bl	800dbc8 <__sinit>
 800dc3a:	3648      	adds	r6, #72	; 0x48
 800dc3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc40:	3b01      	subs	r3, #1
 800dc42:	d503      	bpl.n	800dc4c <__sfp+0x24>
 800dc44:	6833      	ldr	r3, [r6, #0]
 800dc46:	b133      	cbz	r3, 800dc56 <__sfp+0x2e>
 800dc48:	6836      	ldr	r6, [r6, #0]
 800dc4a:	e7f7      	b.n	800dc3c <__sfp+0x14>
 800dc4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc50:	b16d      	cbz	r5, 800dc6e <__sfp+0x46>
 800dc52:	3468      	adds	r4, #104	; 0x68
 800dc54:	e7f4      	b.n	800dc40 <__sfp+0x18>
 800dc56:	2104      	movs	r1, #4
 800dc58:	4638      	mov	r0, r7
 800dc5a:	f7ff ff9f 	bl	800db9c <__sfmoreglue>
 800dc5e:	6030      	str	r0, [r6, #0]
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d1f1      	bne.n	800dc48 <__sfp+0x20>
 800dc64:	230c      	movs	r3, #12
 800dc66:	603b      	str	r3, [r7, #0]
 800dc68:	4604      	mov	r4, r0
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc6e:	4b0b      	ldr	r3, [pc, #44]	; (800dc9c <__sfp+0x74>)
 800dc70:	6665      	str	r5, [r4, #100]	; 0x64
 800dc72:	e9c4 5500 	strd	r5, r5, [r4]
 800dc76:	60a5      	str	r5, [r4, #8]
 800dc78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dc7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dc80:	2208      	movs	r2, #8
 800dc82:	4629      	mov	r1, r5
 800dc84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc88:	f7ff ff0a 	bl	800daa0 <memset>
 800dc8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc94:	e7e9      	b.n	800dc6a <__sfp+0x42>
 800dc96:	bf00      	nop
 800dc98:	080113e4 	.word	0x080113e4
 800dc9c:	ffff0001 	.word	0xffff0001

0800dca0 <_fwalk_reent>:
 800dca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dca4:	4680      	mov	r8, r0
 800dca6:	4689      	mov	r9, r1
 800dca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dcac:	2600      	movs	r6, #0
 800dcae:	b914      	cbnz	r4, 800dcb6 <_fwalk_reent+0x16>
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcb6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800dcba:	3f01      	subs	r7, #1
 800dcbc:	d501      	bpl.n	800dcc2 <_fwalk_reent+0x22>
 800dcbe:	6824      	ldr	r4, [r4, #0]
 800dcc0:	e7f5      	b.n	800dcae <_fwalk_reent+0xe>
 800dcc2:	89ab      	ldrh	r3, [r5, #12]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d907      	bls.n	800dcd8 <_fwalk_reent+0x38>
 800dcc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dccc:	3301      	adds	r3, #1
 800dcce:	d003      	beq.n	800dcd8 <_fwalk_reent+0x38>
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	4640      	mov	r0, r8
 800dcd4:	47c8      	blx	r9
 800dcd6:	4306      	orrs	r6, r0
 800dcd8:	3568      	adds	r5, #104	; 0x68
 800dcda:	e7ee      	b.n	800dcba <_fwalk_reent+0x1a>

0800dcdc <malloc>:
 800dcdc:	4b02      	ldr	r3, [pc, #8]	; (800dce8 <malloc+0xc>)
 800dcde:	4601      	mov	r1, r0
 800dce0:	6818      	ldr	r0, [r3, #0]
 800dce2:	f000 b851 	b.w	800dd88 <_malloc_r>
 800dce6:	bf00      	nop
 800dce8:	20000014 	.word	0x20000014

0800dcec <_free_r>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	4605      	mov	r5, r0
 800dcf0:	2900      	cmp	r1, #0
 800dcf2:	d045      	beq.n	800dd80 <_free_r+0x94>
 800dcf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcf8:	1f0c      	subs	r4, r1, #4
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	bfb8      	it	lt
 800dcfe:	18e4      	addlt	r4, r4, r3
 800dd00:	f000 fdc0 	bl	800e884 <__malloc_lock>
 800dd04:	4a1f      	ldr	r2, [pc, #124]	; (800dd84 <_free_r+0x98>)
 800dd06:	6813      	ldr	r3, [r2, #0]
 800dd08:	4610      	mov	r0, r2
 800dd0a:	b933      	cbnz	r3, 800dd1a <_free_r+0x2e>
 800dd0c:	6063      	str	r3, [r4, #4]
 800dd0e:	6014      	str	r4, [r2, #0]
 800dd10:	4628      	mov	r0, r5
 800dd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd16:	f000 bdb6 	b.w	800e886 <__malloc_unlock>
 800dd1a:	42a3      	cmp	r3, r4
 800dd1c:	d90c      	bls.n	800dd38 <_free_r+0x4c>
 800dd1e:	6821      	ldr	r1, [r4, #0]
 800dd20:	1862      	adds	r2, r4, r1
 800dd22:	4293      	cmp	r3, r2
 800dd24:	bf04      	itt	eq
 800dd26:	681a      	ldreq	r2, [r3, #0]
 800dd28:	685b      	ldreq	r3, [r3, #4]
 800dd2a:	6063      	str	r3, [r4, #4]
 800dd2c:	bf04      	itt	eq
 800dd2e:	1852      	addeq	r2, r2, r1
 800dd30:	6022      	streq	r2, [r4, #0]
 800dd32:	6004      	str	r4, [r0, #0]
 800dd34:	e7ec      	b.n	800dd10 <_free_r+0x24>
 800dd36:	4613      	mov	r3, r2
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	b10a      	cbz	r2, 800dd40 <_free_r+0x54>
 800dd3c:	42a2      	cmp	r2, r4
 800dd3e:	d9fa      	bls.n	800dd36 <_free_r+0x4a>
 800dd40:	6819      	ldr	r1, [r3, #0]
 800dd42:	1858      	adds	r0, r3, r1
 800dd44:	42a0      	cmp	r0, r4
 800dd46:	d10b      	bne.n	800dd60 <_free_r+0x74>
 800dd48:	6820      	ldr	r0, [r4, #0]
 800dd4a:	4401      	add	r1, r0
 800dd4c:	1858      	adds	r0, r3, r1
 800dd4e:	4282      	cmp	r2, r0
 800dd50:	6019      	str	r1, [r3, #0]
 800dd52:	d1dd      	bne.n	800dd10 <_free_r+0x24>
 800dd54:	6810      	ldr	r0, [r2, #0]
 800dd56:	6852      	ldr	r2, [r2, #4]
 800dd58:	605a      	str	r2, [r3, #4]
 800dd5a:	4401      	add	r1, r0
 800dd5c:	6019      	str	r1, [r3, #0]
 800dd5e:	e7d7      	b.n	800dd10 <_free_r+0x24>
 800dd60:	d902      	bls.n	800dd68 <_free_r+0x7c>
 800dd62:	230c      	movs	r3, #12
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	e7d3      	b.n	800dd10 <_free_r+0x24>
 800dd68:	6820      	ldr	r0, [r4, #0]
 800dd6a:	1821      	adds	r1, r4, r0
 800dd6c:	428a      	cmp	r2, r1
 800dd6e:	bf04      	itt	eq
 800dd70:	6811      	ldreq	r1, [r2, #0]
 800dd72:	6852      	ldreq	r2, [r2, #4]
 800dd74:	6062      	str	r2, [r4, #4]
 800dd76:	bf04      	itt	eq
 800dd78:	1809      	addeq	r1, r1, r0
 800dd7a:	6021      	streq	r1, [r4, #0]
 800dd7c:	605c      	str	r4, [r3, #4]
 800dd7e:	e7c7      	b.n	800dd10 <_free_r+0x24>
 800dd80:	bd38      	pop	{r3, r4, r5, pc}
 800dd82:	bf00      	nop
 800dd84:	20000218 	.word	0x20000218

0800dd88 <_malloc_r>:
 800dd88:	b570      	push	{r4, r5, r6, lr}
 800dd8a:	1ccd      	adds	r5, r1, #3
 800dd8c:	f025 0503 	bic.w	r5, r5, #3
 800dd90:	3508      	adds	r5, #8
 800dd92:	2d0c      	cmp	r5, #12
 800dd94:	bf38      	it	cc
 800dd96:	250c      	movcc	r5, #12
 800dd98:	2d00      	cmp	r5, #0
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	db01      	blt.n	800dda2 <_malloc_r+0x1a>
 800dd9e:	42a9      	cmp	r1, r5
 800dda0:	d903      	bls.n	800ddaa <_malloc_r+0x22>
 800dda2:	230c      	movs	r3, #12
 800dda4:	6033      	str	r3, [r6, #0]
 800dda6:	2000      	movs	r0, #0
 800dda8:	bd70      	pop	{r4, r5, r6, pc}
 800ddaa:	f000 fd6b 	bl	800e884 <__malloc_lock>
 800ddae:	4a21      	ldr	r2, [pc, #132]	; (800de34 <_malloc_r+0xac>)
 800ddb0:	6814      	ldr	r4, [r2, #0]
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	b991      	cbnz	r1, 800dddc <_malloc_r+0x54>
 800ddb6:	4c20      	ldr	r4, [pc, #128]	; (800de38 <_malloc_r+0xb0>)
 800ddb8:	6823      	ldr	r3, [r4, #0]
 800ddba:	b91b      	cbnz	r3, 800ddc4 <_malloc_r+0x3c>
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f000 fb05 	bl	800e3cc <_sbrk_r>
 800ddc2:	6020      	str	r0, [r4, #0]
 800ddc4:	4629      	mov	r1, r5
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	f000 fb00 	bl	800e3cc <_sbrk_r>
 800ddcc:	1c43      	adds	r3, r0, #1
 800ddce:	d124      	bne.n	800de1a <_malloc_r+0x92>
 800ddd0:	230c      	movs	r3, #12
 800ddd2:	6033      	str	r3, [r6, #0]
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f000 fd56 	bl	800e886 <__malloc_unlock>
 800ddda:	e7e4      	b.n	800dda6 <_malloc_r+0x1e>
 800dddc:	680b      	ldr	r3, [r1, #0]
 800ddde:	1b5b      	subs	r3, r3, r5
 800dde0:	d418      	bmi.n	800de14 <_malloc_r+0x8c>
 800dde2:	2b0b      	cmp	r3, #11
 800dde4:	d90f      	bls.n	800de06 <_malloc_r+0x7e>
 800dde6:	600b      	str	r3, [r1, #0]
 800dde8:	50cd      	str	r5, [r1, r3]
 800ddea:	18cc      	adds	r4, r1, r3
 800ddec:	4630      	mov	r0, r6
 800ddee:	f000 fd4a 	bl	800e886 <__malloc_unlock>
 800ddf2:	f104 000b 	add.w	r0, r4, #11
 800ddf6:	1d23      	adds	r3, r4, #4
 800ddf8:	f020 0007 	bic.w	r0, r0, #7
 800ddfc:	1ac3      	subs	r3, r0, r3
 800ddfe:	d0d3      	beq.n	800dda8 <_malloc_r+0x20>
 800de00:	425a      	negs	r2, r3
 800de02:	50e2      	str	r2, [r4, r3]
 800de04:	e7d0      	b.n	800dda8 <_malloc_r+0x20>
 800de06:	428c      	cmp	r4, r1
 800de08:	684b      	ldr	r3, [r1, #4]
 800de0a:	bf16      	itet	ne
 800de0c:	6063      	strne	r3, [r4, #4]
 800de0e:	6013      	streq	r3, [r2, #0]
 800de10:	460c      	movne	r4, r1
 800de12:	e7eb      	b.n	800ddec <_malloc_r+0x64>
 800de14:	460c      	mov	r4, r1
 800de16:	6849      	ldr	r1, [r1, #4]
 800de18:	e7cc      	b.n	800ddb4 <_malloc_r+0x2c>
 800de1a:	1cc4      	adds	r4, r0, #3
 800de1c:	f024 0403 	bic.w	r4, r4, #3
 800de20:	42a0      	cmp	r0, r4
 800de22:	d005      	beq.n	800de30 <_malloc_r+0xa8>
 800de24:	1a21      	subs	r1, r4, r0
 800de26:	4630      	mov	r0, r6
 800de28:	f000 fad0 	bl	800e3cc <_sbrk_r>
 800de2c:	3001      	adds	r0, #1
 800de2e:	d0cf      	beq.n	800ddd0 <_malloc_r+0x48>
 800de30:	6025      	str	r5, [r4, #0]
 800de32:	e7db      	b.n	800ddec <_malloc_r+0x64>
 800de34:	20000218 	.word	0x20000218
 800de38:	2000021c 	.word	0x2000021c

0800de3c <__sfputc_r>:
 800de3c:	6893      	ldr	r3, [r2, #8]
 800de3e:	3b01      	subs	r3, #1
 800de40:	2b00      	cmp	r3, #0
 800de42:	b410      	push	{r4}
 800de44:	6093      	str	r3, [r2, #8]
 800de46:	da08      	bge.n	800de5a <__sfputc_r+0x1e>
 800de48:	6994      	ldr	r4, [r2, #24]
 800de4a:	42a3      	cmp	r3, r4
 800de4c:	db01      	blt.n	800de52 <__sfputc_r+0x16>
 800de4e:	290a      	cmp	r1, #10
 800de50:	d103      	bne.n	800de5a <__sfputc_r+0x1e>
 800de52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de56:	f000 bb0d 	b.w	800e474 <__swbuf_r>
 800de5a:	6813      	ldr	r3, [r2, #0]
 800de5c:	1c58      	adds	r0, r3, #1
 800de5e:	6010      	str	r0, [r2, #0]
 800de60:	7019      	strb	r1, [r3, #0]
 800de62:	4608      	mov	r0, r1
 800de64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de68:	4770      	bx	lr

0800de6a <__sfputs_r>:
 800de6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6c:	4606      	mov	r6, r0
 800de6e:	460f      	mov	r7, r1
 800de70:	4614      	mov	r4, r2
 800de72:	18d5      	adds	r5, r2, r3
 800de74:	42ac      	cmp	r4, r5
 800de76:	d101      	bne.n	800de7c <__sfputs_r+0x12>
 800de78:	2000      	movs	r0, #0
 800de7a:	e007      	b.n	800de8c <__sfputs_r+0x22>
 800de7c:	463a      	mov	r2, r7
 800de7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de82:	4630      	mov	r0, r6
 800de84:	f7ff ffda 	bl	800de3c <__sfputc_r>
 800de88:	1c43      	adds	r3, r0, #1
 800de8a:	d1f3      	bne.n	800de74 <__sfputs_r+0xa>
 800de8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de90 <_vfiprintf_r>:
 800de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de94:	460c      	mov	r4, r1
 800de96:	b09d      	sub	sp, #116	; 0x74
 800de98:	4617      	mov	r7, r2
 800de9a:	461d      	mov	r5, r3
 800de9c:	4606      	mov	r6, r0
 800de9e:	b118      	cbz	r0, 800dea8 <_vfiprintf_r+0x18>
 800dea0:	6983      	ldr	r3, [r0, #24]
 800dea2:	b90b      	cbnz	r3, 800dea8 <_vfiprintf_r+0x18>
 800dea4:	f7ff fe90 	bl	800dbc8 <__sinit>
 800dea8:	4b7c      	ldr	r3, [pc, #496]	; (800e09c <_vfiprintf_r+0x20c>)
 800deaa:	429c      	cmp	r4, r3
 800deac:	d158      	bne.n	800df60 <_vfiprintf_r+0xd0>
 800deae:	6874      	ldr	r4, [r6, #4]
 800deb0:	89a3      	ldrh	r3, [r4, #12]
 800deb2:	0718      	lsls	r0, r3, #28
 800deb4:	d55e      	bpl.n	800df74 <_vfiprintf_r+0xe4>
 800deb6:	6923      	ldr	r3, [r4, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d05b      	beq.n	800df74 <_vfiprintf_r+0xe4>
 800debc:	2300      	movs	r3, #0
 800debe:	9309      	str	r3, [sp, #36]	; 0x24
 800dec0:	2320      	movs	r3, #32
 800dec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dec6:	2330      	movs	r3, #48	; 0x30
 800dec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800decc:	9503      	str	r5, [sp, #12]
 800dece:	f04f 0b01 	mov.w	fp, #1
 800ded2:	46b8      	mov	r8, r7
 800ded4:	4645      	mov	r5, r8
 800ded6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800deda:	b10b      	cbz	r3, 800dee0 <_vfiprintf_r+0x50>
 800dedc:	2b25      	cmp	r3, #37	; 0x25
 800dede:	d154      	bne.n	800df8a <_vfiprintf_r+0xfa>
 800dee0:	ebb8 0a07 	subs.w	sl, r8, r7
 800dee4:	d00b      	beq.n	800defe <_vfiprintf_r+0x6e>
 800dee6:	4653      	mov	r3, sl
 800dee8:	463a      	mov	r2, r7
 800deea:	4621      	mov	r1, r4
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff ffbc 	bl	800de6a <__sfputs_r>
 800def2:	3001      	adds	r0, #1
 800def4:	f000 80c2 	beq.w	800e07c <_vfiprintf_r+0x1ec>
 800def8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800defa:	4453      	add	r3, sl
 800defc:	9309      	str	r3, [sp, #36]	; 0x24
 800defe:	f898 3000 	ldrb.w	r3, [r8]
 800df02:	2b00      	cmp	r3, #0
 800df04:	f000 80ba 	beq.w	800e07c <_vfiprintf_r+0x1ec>
 800df08:	2300      	movs	r3, #0
 800df0a:	f04f 32ff 	mov.w	r2, #4294967295
 800df0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df12:	9304      	str	r3, [sp, #16]
 800df14:	9307      	str	r3, [sp, #28]
 800df16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df1a:	931a      	str	r3, [sp, #104]	; 0x68
 800df1c:	46a8      	mov	r8, r5
 800df1e:	2205      	movs	r2, #5
 800df20:	f818 1b01 	ldrb.w	r1, [r8], #1
 800df24:	485e      	ldr	r0, [pc, #376]	; (800e0a0 <_vfiprintf_r+0x210>)
 800df26:	f7f2 f963 	bl	80001f0 <memchr>
 800df2a:	9b04      	ldr	r3, [sp, #16]
 800df2c:	bb78      	cbnz	r0, 800df8e <_vfiprintf_r+0xfe>
 800df2e:	06d9      	lsls	r1, r3, #27
 800df30:	bf44      	itt	mi
 800df32:	2220      	movmi	r2, #32
 800df34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df38:	071a      	lsls	r2, r3, #28
 800df3a:	bf44      	itt	mi
 800df3c:	222b      	movmi	r2, #43	; 0x2b
 800df3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df42:	782a      	ldrb	r2, [r5, #0]
 800df44:	2a2a      	cmp	r2, #42	; 0x2a
 800df46:	d02a      	beq.n	800df9e <_vfiprintf_r+0x10e>
 800df48:	9a07      	ldr	r2, [sp, #28]
 800df4a:	46a8      	mov	r8, r5
 800df4c:	2000      	movs	r0, #0
 800df4e:	250a      	movs	r5, #10
 800df50:	4641      	mov	r1, r8
 800df52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df56:	3b30      	subs	r3, #48	; 0x30
 800df58:	2b09      	cmp	r3, #9
 800df5a:	d969      	bls.n	800e030 <_vfiprintf_r+0x1a0>
 800df5c:	b360      	cbz	r0, 800dfb8 <_vfiprintf_r+0x128>
 800df5e:	e024      	b.n	800dfaa <_vfiprintf_r+0x11a>
 800df60:	4b50      	ldr	r3, [pc, #320]	; (800e0a4 <_vfiprintf_r+0x214>)
 800df62:	429c      	cmp	r4, r3
 800df64:	d101      	bne.n	800df6a <_vfiprintf_r+0xda>
 800df66:	68b4      	ldr	r4, [r6, #8]
 800df68:	e7a2      	b.n	800deb0 <_vfiprintf_r+0x20>
 800df6a:	4b4f      	ldr	r3, [pc, #316]	; (800e0a8 <_vfiprintf_r+0x218>)
 800df6c:	429c      	cmp	r4, r3
 800df6e:	bf08      	it	eq
 800df70:	68f4      	ldreq	r4, [r6, #12]
 800df72:	e79d      	b.n	800deb0 <_vfiprintf_r+0x20>
 800df74:	4621      	mov	r1, r4
 800df76:	4630      	mov	r0, r6
 800df78:	f000 fae0 	bl	800e53c <__swsetup_r>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	d09d      	beq.n	800debc <_vfiprintf_r+0x2c>
 800df80:	f04f 30ff 	mov.w	r0, #4294967295
 800df84:	b01d      	add	sp, #116	; 0x74
 800df86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df8a:	46a8      	mov	r8, r5
 800df8c:	e7a2      	b.n	800ded4 <_vfiprintf_r+0x44>
 800df8e:	4a44      	ldr	r2, [pc, #272]	; (800e0a0 <_vfiprintf_r+0x210>)
 800df90:	1a80      	subs	r0, r0, r2
 800df92:	fa0b f000 	lsl.w	r0, fp, r0
 800df96:	4318      	orrs	r0, r3
 800df98:	9004      	str	r0, [sp, #16]
 800df9a:	4645      	mov	r5, r8
 800df9c:	e7be      	b.n	800df1c <_vfiprintf_r+0x8c>
 800df9e:	9a03      	ldr	r2, [sp, #12]
 800dfa0:	1d11      	adds	r1, r2, #4
 800dfa2:	6812      	ldr	r2, [r2, #0]
 800dfa4:	9103      	str	r1, [sp, #12]
 800dfa6:	2a00      	cmp	r2, #0
 800dfa8:	db01      	blt.n	800dfae <_vfiprintf_r+0x11e>
 800dfaa:	9207      	str	r2, [sp, #28]
 800dfac:	e004      	b.n	800dfb8 <_vfiprintf_r+0x128>
 800dfae:	4252      	negs	r2, r2
 800dfb0:	f043 0302 	orr.w	r3, r3, #2
 800dfb4:	9207      	str	r2, [sp, #28]
 800dfb6:	9304      	str	r3, [sp, #16]
 800dfb8:	f898 3000 	ldrb.w	r3, [r8]
 800dfbc:	2b2e      	cmp	r3, #46	; 0x2e
 800dfbe:	d10e      	bne.n	800dfde <_vfiprintf_r+0x14e>
 800dfc0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dfc4:	2b2a      	cmp	r3, #42	; 0x2a
 800dfc6:	d138      	bne.n	800e03a <_vfiprintf_r+0x1aa>
 800dfc8:	9b03      	ldr	r3, [sp, #12]
 800dfca:	1d1a      	adds	r2, r3, #4
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	9203      	str	r2, [sp, #12]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	bfb8      	it	lt
 800dfd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfd8:	f108 0802 	add.w	r8, r8, #2
 800dfdc:	9305      	str	r3, [sp, #20]
 800dfde:	4d33      	ldr	r5, [pc, #204]	; (800e0ac <_vfiprintf_r+0x21c>)
 800dfe0:	f898 1000 	ldrb.w	r1, [r8]
 800dfe4:	2203      	movs	r2, #3
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	f7f2 f902 	bl	80001f0 <memchr>
 800dfec:	b140      	cbz	r0, 800e000 <_vfiprintf_r+0x170>
 800dfee:	2340      	movs	r3, #64	; 0x40
 800dff0:	1b40      	subs	r0, r0, r5
 800dff2:	fa03 f000 	lsl.w	r0, r3, r0
 800dff6:	9b04      	ldr	r3, [sp, #16]
 800dff8:	4303      	orrs	r3, r0
 800dffa:	f108 0801 	add.w	r8, r8, #1
 800dffe:	9304      	str	r3, [sp, #16]
 800e000:	f898 1000 	ldrb.w	r1, [r8]
 800e004:	482a      	ldr	r0, [pc, #168]	; (800e0b0 <_vfiprintf_r+0x220>)
 800e006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e00a:	2206      	movs	r2, #6
 800e00c:	f108 0701 	add.w	r7, r8, #1
 800e010:	f7f2 f8ee 	bl	80001f0 <memchr>
 800e014:	2800      	cmp	r0, #0
 800e016:	d037      	beq.n	800e088 <_vfiprintf_r+0x1f8>
 800e018:	4b26      	ldr	r3, [pc, #152]	; (800e0b4 <_vfiprintf_r+0x224>)
 800e01a:	bb1b      	cbnz	r3, 800e064 <_vfiprintf_r+0x1d4>
 800e01c:	9b03      	ldr	r3, [sp, #12]
 800e01e:	3307      	adds	r3, #7
 800e020:	f023 0307 	bic.w	r3, r3, #7
 800e024:	3308      	adds	r3, #8
 800e026:	9303      	str	r3, [sp, #12]
 800e028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e02a:	444b      	add	r3, r9
 800e02c:	9309      	str	r3, [sp, #36]	; 0x24
 800e02e:	e750      	b.n	800ded2 <_vfiprintf_r+0x42>
 800e030:	fb05 3202 	mla	r2, r5, r2, r3
 800e034:	2001      	movs	r0, #1
 800e036:	4688      	mov	r8, r1
 800e038:	e78a      	b.n	800df50 <_vfiprintf_r+0xc0>
 800e03a:	2300      	movs	r3, #0
 800e03c:	f108 0801 	add.w	r8, r8, #1
 800e040:	9305      	str	r3, [sp, #20]
 800e042:	4619      	mov	r1, r3
 800e044:	250a      	movs	r5, #10
 800e046:	4640      	mov	r0, r8
 800e048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e04c:	3a30      	subs	r2, #48	; 0x30
 800e04e:	2a09      	cmp	r2, #9
 800e050:	d903      	bls.n	800e05a <_vfiprintf_r+0x1ca>
 800e052:	2b00      	cmp	r3, #0
 800e054:	d0c3      	beq.n	800dfde <_vfiprintf_r+0x14e>
 800e056:	9105      	str	r1, [sp, #20]
 800e058:	e7c1      	b.n	800dfde <_vfiprintf_r+0x14e>
 800e05a:	fb05 2101 	mla	r1, r5, r1, r2
 800e05e:	2301      	movs	r3, #1
 800e060:	4680      	mov	r8, r0
 800e062:	e7f0      	b.n	800e046 <_vfiprintf_r+0x1b6>
 800e064:	ab03      	add	r3, sp, #12
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	4622      	mov	r2, r4
 800e06a:	4b13      	ldr	r3, [pc, #76]	; (800e0b8 <_vfiprintf_r+0x228>)
 800e06c:	a904      	add	r1, sp, #16
 800e06e:	4630      	mov	r0, r6
 800e070:	f3af 8000 	nop.w
 800e074:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e078:	4681      	mov	r9, r0
 800e07a:	d1d5      	bne.n	800e028 <_vfiprintf_r+0x198>
 800e07c:	89a3      	ldrh	r3, [r4, #12]
 800e07e:	065b      	lsls	r3, r3, #25
 800e080:	f53f af7e 	bmi.w	800df80 <_vfiprintf_r+0xf0>
 800e084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e086:	e77d      	b.n	800df84 <_vfiprintf_r+0xf4>
 800e088:	ab03      	add	r3, sp, #12
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	4622      	mov	r2, r4
 800e08e:	4b0a      	ldr	r3, [pc, #40]	; (800e0b8 <_vfiprintf_r+0x228>)
 800e090:	a904      	add	r1, sp, #16
 800e092:	4630      	mov	r0, r6
 800e094:	f000 f888 	bl	800e1a8 <_printf_i>
 800e098:	e7ec      	b.n	800e074 <_vfiprintf_r+0x1e4>
 800e09a:	bf00      	nop
 800e09c:	08011408 	.word	0x08011408
 800e0a0:	08011448 	.word	0x08011448
 800e0a4:	08011428 	.word	0x08011428
 800e0a8:	080113e8 	.word	0x080113e8
 800e0ac:	0801144e 	.word	0x0801144e
 800e0b0:	08011452 	.word	0x08011452
 800e0b4:	00000000 	.word	0x00000000
 800e0b8:	0800de6b 	.word	0x0800de6b

0800e0bc <_printf_common>:
 800e0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c0:	4691      	mov	r9, r2
 800e0c2:	461f      	mov	r7, r3
 800e0c4:	688a      	ldr	r2, [r1, #8]
 800e0c6:	690b      	ldr	r3, [r1, #16]
 800e0c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	bfb8      	it	lt
 800e0d0:	4613      	movlt	r3, r2
 800e0d2:	f8c9 3000 	str.w	r3, [r9]
 800e0d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0da:	4606      	mov	r6, r0
 800e0dc:	460c      	mov	r4, r1
 800e0de:	b112      	cbz	r2, 800e0e6 <_printf_common+0x2a>
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	f8c9 3000 	str.w	r3, [r9]
 800e0e6:	6823      	ldr	r3, [r4, #0]
 800e0e8:	0699      	lsls	r1, r3, #26
 800e0ea:	bf42      	ittt	mi
 800e0ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e0f0:	3302      	addmi	r3, #2
 800e0f2:	f8c9 3000 	strmi.w	r3, [r9]
 800e0f6:	6825      	ldr	r5, [r4, #0]
 800e0f8:	f015 0506 	ands.w	r5, r5, #6
 800e0fc:	d107      	bne.n	800e10e <_printf_common+0x52>
 800e0fe:	f104 0a19 	add.w	sl, r4, #25
 800e102:	68e3      	ldr	r3, [r4, #12]
 800e104:	f8d9 2000 	ldr.w	r2, [r9]
 800e108:	1a9b      	subs	r3, r3, r2
 800e10a:	42ab      	cmp	r3, r5
 800e10c:	dc28      	bgt.n	800e160 <_printf_common+0xa4>
 800e10e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e112:	6822      	ldr	r2, [r4, #0]
 800e114:	3300      	adds	r3, #0
 800e116:	bf18      	it	ne
 800e118:	2301      	movne	r3, #1
 800e11a:	0692      	lsls	r2, r2, #26
 800e11c:	d42d      	bmi.n	800e17a <_printf_common+0xbe>
 800e11e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e122:	4639      	mov	r1, r7
 800e124:	4630      	mov	r0, r6
 800e126:	47c0      	blx	r8
 800e128:	3001      	adds	r0, #1
 800e12a:	d020      	beq.n	800e16e <_printf_common+0xb2>
 800e12c:	6823      	ldr	r3, [r4, #0]
 800e12e:	68e5      	ldr	r5, [r4, #12]
 800e130:	f8d9 2000 	ldr.w	r2, [r9]
 800e134:	f003 0306 	and.w	r3, r3, #6
 800e138:	2b04      	cmp	r3, #4
 800e13a:	bf08      	it	eq
 800e13c:	1aad      	subeq	r5, r5, r2
 800e13e:	68a3      	ldr	r3, [r4, #8]
 800e140:	6922      	ldr	r2, [r4, #16]
 800e142:	bf0c      	ite	eq
 800e144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e148:	2500      	movne	r5, #0
 800e14a:	4293      	cmp	r3, r2
 800e14c:	bfc4      	itt	gt
 800e14e:	1a9b      	subgt	r3, r3, r2
 800e150:	18ed      	addgt	r5, r5, r3
 800e152:	f04f 0900 	mov.w	r9, #0
 800e156:	341a      	adds	r4, #26
 800e158:	454d      	cmp	r5, r9
 800e15a:	d11a      	bne.n	800e192 <_printf_common+0xd6>
 800e15c:	2000      	movs	r0, #0
 800e15e:	e008      	b.n	800e172 <_printf_common+0xb6>
 800e160:	2301      	movs	r3, #1
 800e162:	4652      	mov	r2, sl
 800e164:	4639      	mov	r1, r7
 800e166:	4630      	mov	r0, r6
 800e168:	47c0      	blx	r8
 800e16a:	3001      	adds	r0, #1
 800e16c:	d103      	bne.n	800e176 <_printf_common+0xba>
 800e16e:	f04f 30ff 	mov.w	r0, #4294967295
 800e172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e176:	3501      	adds	r5, #1
 800e178:	e7c3      	b.n	800e102 <_printf_common+0x46>
 800e17a:	18e1      	adds	r1, r4, r3
 800e17c:	1c5a      	adds	r2, r3, #1
 800e17e:	2030      	movs	r0, #48	; 0x30
 800e180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e184:	4422      	add	r2, r4
 800e186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e18a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e18e:	3302      	adds	r3, #2
 800e190:	e7c5      	b.n	800e11e <_printf_common+0x62>
 800e192:	2301      	movs	r3, #1
 800e194:	4622      	mov	r2, r4
 800e196:	4639      	mov	r1, r7
 800e198:	4630      	mov	r0, r6
 800e19a:	47c0      	blx	r8
 800e19c:	3001      	adds	r0, #1
 800e19e:	d0e6      	beq.n	800e16e <_printf_common+0xb2>
 800e1a0:	f109 0901 	add.w	r9, r9, #1
 800e1a4:	e7d8      	b.n	800e158 <_printf_common+0x9c>
	...

0800e1a8 <_printf_i>:
 800e1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e1b0:	460c      	mov	r4, r1
 800e1b2:	7e09      	ldrb	r1, [r1, #24]
 800e1b4:	b085      	sub	sp, #20
 800e1b6:	296e      	cmp	r1, #110	; 0x6e
 800e1b8:	4617      	mov	r7, r2
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	4698      	mov	r8, r3
 800e1be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1c0:	f000 80b3 	beq.w	800e32a <_printf_i+0x182>
 800e1c4:	d822      	bhi.n	800e20c <_printf_i+0x64>
 800e1c6:	2963      	cmp	r1, #99	; 0x63
 800e1c8:	d036      	beq.n	800e238 <_printf_i+0x90>
 800e1ca:	d80a      	bhi.n	800e1e2 <_printf_i+0x3a>
 800e1cc:	2900      	cmp	r1, #0
 800e1ce:	f000 80b9 	beq.w	800e344 <_printf_i+0x19c>
 800e1d2:	2958      	cmp	r1, #88	; 0x58
 800e1d4:	f000 8083 	beq.w	800e2de <_printf_i+0x136>
 800e1d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e1e0:	e032      	b.n	800e248 <_printf_i+0xa0>
 800e1e2:	2964      	cmp	r1, #100	; 0x64
 800e1e4:	d001      	beq.n	800e1ea <_printf_i+0x42>
 800e1e6:	2969      	cmp	r1, #105	; 0x69
 800e1e8:	d1f6      	bne.n	800e1d8 <_printf_i+0x30>
 800e1ea:	6820      	ldr	r0, [r4, #0]
 800e1ec:	6813      	ldr	r3, [r2, #0]
 800e1ee:	0605      	lsls	r5, r0, #24
 800e1f0:	f103 0104 	add.w	r1, r3, #4
 800e1f4:	d52a      	bpl.n	800e24c <_printf_i+0xa4>
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6011      	str	r1, [r2, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	da03      	bge.n	800e206 <_printf_i+0x5e>
 800e1fe:	222d      	movs	r2, #45	; 0x2d
 800e200:	425b      	negs	r3, r3
 800e202:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e206:	486f      	ldr	r0, [pc, #444]	; (800e3c4 <_printf_i+0x21c>)
 800e208:	220a      	movs	r2, #10
 800e20a:	e039      	b.n	800e280 <_printf_i+0xd8>
 800e20c:	2973      	cmp	r1, #115	; 0x73
 800e20e:	f000 809d 	beq.w	800e34c <_printf_i+0x1a4>
 800e212:	d808      	bhi.n	800e226 <_printf_i+0x7e>
 800e214:	296f      	cmp	r1, #111	; 0x6f
 800e216:	d020      	beq.n	800e25a <_printf_i+0xb2>
 800e218:	2970      	cmp	r1, #112	; 0x70
 800e21a:	d1dd      	bne.n	800e1d8 <_printf_i+0x30>
 800e21c:	6823      	ldr	r3, [r4, #0]
 800e21e:	f043 0320 	orr.w	r3, r3, #32
 800e222:	6023      	str	r3, [r4, #0]
 800e224:	e003      	b.n	800e22e <_printf_i+0x86>
 800e226:	2975      	cmp	r1, #117	; 0x75
 800e228:	d017      	beq.n	800e25a <_printf_i+0xb2>
 800e22a:	2978      	cmp	r1, #120	; 0x78
 800e22c:	d1d4      	bne.n	800e1d8 <_printf_i+0x30>
 800e22e:	2378      	movs	r3, #120	; 0x78
 800e230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e234:	4864      	ldr	r0, [pc, #400]	; (800e3c8 <_printf_i+0x220>)
 800e236:	e055      	b.n	800e2e4 <_printf_i+0x13c>
 800e238:	6813      	ldr	r3, [r2, #0]
 800e23a:	1d19      	adds	r1, r3, #4
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	6011      	str	r1, [r2, #0]
 800e240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e248:	2301      	movs	r3, #1
 800e24a:	e08c      	b.n	800e366 <_printf_i+0x1be>
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	6011      	str	r1, [r2, #0]
 800e250:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e254:	bf18      	it	ne
 800e256:	b21b      	sxthne	r3, r3
 800e258:	e7cf      	b.n	800e1fa <_printf_i+0x52>
 800e25a:	6813      	ldr	r3, [r2, #0]
 800e25c:	6825      	ldr	r5, [r4, #0]
 800e25e:	1d18      	adds	r0, r3, #4
 800e260:	6010      	str	r0, [r2, #0]
 800e262:	0628      	lsls	r0, r5, #24
 800e264:	d501      	bpl.n	800e26a <_printf_i+0xc2>
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	e002      	b.n	800e270 <_printf_i+0xc8>
 800e26a:	0668      	lsls	r0, r5, #25
 800e26c:	d5fb      	bpl.n	800e266 <_printf_i+0xbe>
 800e26e:	881b      	ldrh	r3, [r3, #0]
 800e270:	4854      	ldr	r0, [pc, #336]	; (800e3c4 <_printf_i+0x21c>)
 800e272:	296f      	cmp	r1, #111	; 0x6f
 800e274:	bf14      	ite	ne
 800e276:	220a      	movne	r2, #10
 800e278:	2208      	moveq	r2, #8
 800e27a:	2100      	movs	r1, #0
 800e27c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e280:	6865      	ldr	r5, [r4, #4]
 800e282:	60a5      	str	r5, [r4, #8]
 800e284:	2d00      	cmp	r5, #0
 800e286:	f2c0 8095 	blt.w	800e3b4 <_printf_i+0x20c>
 800e28a:	6821      	ldr	r1, [r4, #0]
 800e28c:	f021 0104 	bic.w	r1, r1, #4
 800e290:	6021      	str	r1, [r4, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d13d      	bne.n	800e312 <_printf_i+0x16a>
 800e296:	2d00      	cmp	r5, #0
 800e298:	f040 808e 	bne.w	800e3b8 <_printf_i+0x210>
 800e29c:	4665      	mov	r5, ip
 800e29e:	2a08      	cmp	r2, #8
 800e2a0:	d10b      	bne.n	800e2ba <_printf_i+0x112>
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	07db      	lsls	r3, r3, #31
 800e2a6:	d508      	bpl.n	800e2ba <_printf_i+0x112>
 800e2a8:	6923      	ldr	r3, [r4, #16]
 800e2aa:	6862      	ldr	r2, [r4, #4]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	bfde      	ittt	le
 800e2b0:	2330      	movle	r3, #48	; 0x30
 800e2b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e2b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e2ba:	ebac 0305 	sub.w	r3, ip, r5
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	f8cd 8000 	str.w	r8, [sp]
 800e2c4:	463b      	mov	r3, r7
 800e2c6:	aa03      	add	r2, sp, #12
 800e2c8:	4621      	mov	r1, r4
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	f7ff fef6 	bl	800e0bc <_printf_common>
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	d14d      	bne.n	800e370 <_printf_i+0x1c8>
 800e2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d8:	b005      	add	sp, #20
 800e2da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2de:	4839      	ldr	r0, [pc, #228]	; (800e3c4 <_printf_i+0x21c>)
 800e2e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e2e4:	6813      	ldr	r3, [r2, #0]
 800e2e6:	6821      	ldr	r1, [r4, #0]
 800e2e8:	1d1d      	adds	r5, r3, #4
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6015      	str	r5, [r2, #0]
 800e2ee:	060a      	lsls	r2, r1, #24
 800e2f0:	d50b      	bpl.n	800e30a <_printf_i+0x162>
 800e2f2:	07ca      	lsls	r2, r1, #31
 800e2f4:	bf44      	itt	mi
 800e2f6:	f041 0120 	orrmi.w	r1, r1, #32
 800e2fa:	6021      	strmi	r1, [r4, #0]
 800e2fc:	b91b      	cbnz	r3, 800e306 <_printf_i+0x15e>
 800e2fe:	6822      	ldr	r2, [r4, #0]
 800e300:	f022 0220 	bic.w	r2, r2, #32
 800e304:	6022      	str	r2, [r4, #0]
 800e306:	2210      	movs	r2, #16
 800e308:	e7b7      	b.n	800e27a <_printf_i+0xd2>
 800e30a:	064d      	lsls	r5, r1, #25
 800e30c:	bf48      	it	mi
 800e30e:	b29b      	uxthmi	r3, r3
 800e310:	e7ef      	b.n	800e2f2 <_printf_i+0x14a>
 800e312:	4665      	mov	r5, ip
 800e314:	fbb3 f1f2 	udiv	r1, r3, r2
 800e318:	fb02 3311 	mls	r3, r2, r1, r3
 800e31c:	5cc3      	ldrb	r3, [r0, r3]
 800e31e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e322:	460b      	mov	r3, r1
 800e324:	2900      	cmp	r1, #0
 800e326:	d1f5      	bne.n	800e314 <_printf_i+0x16c>
 800e328:	e7b9      	b.n	800e29e <_printf_i+0xf6>
 800e32a:	6813      	ldr	r3, [r2, #0]
 800e32c:	6825      	ldr	r5, [r4, #0]
 800e32e:	6961      	ldr	r1, [r4, #20]
 800e330:	1d18      	adds	r0, r3, #4
 800e332:	6010      	str	r0, [r2, #0]
 800e334:	0628      	lsls	r0, r5, #24
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	d501      	bpl.n	800e33e <_printf_i+0x196>
 800e33a:	6019      	str	r1, [r3, #0]
 800e33c:	e002      	b.n	800e344 <_printf_i+0x19c>
 800e33e:	066a      	lsls	r2, r5, #25
 800e340:	d5fb      	bpl.n	800e33a <_printf_i+0x192>
 800e342:	8019      	strh	r1, [r3, #0]
 800e344:	2300      	movs	r3, #0
 800e346:	6123      	str	r3, [r4, #16]
 800e348:	4665      	mov	r5, ip
 800e34a:	e7b9      	b.n	800e2c0 <_printf_i+0x118>
 800e34c:	6813      	ldr	r3, [r2, #0]
 800e34e:	1d19      	adds	r1, r3, #4
 800e350:	6011      	str	r1, [r2, #0]
 800e352:	681d      	ldr	r5, [r3, #0]
 800e354:	6862      	ldr	r2, [r4, #4]
 800e356:	2100      	movs	r1, #0
 800e358:	4628      	mov	r0, r5
 800e35a:	f7f1 ff49 	bl	80001f0 <memchr>
 800e35e:	b108      	cbz	r0, 800e364 <_printf_i+0x1bc>
 800e360:	1b40      	subs	r0, r0, r5
 800e362:	6060      	str	r0, [r4, #4]
 800e364:	6863      	ldr	r3, [r4, #4]
 800e366:	6123      	str	r3, [r4, #16]
 800e368:	2300      	movs	r3, #0
 800e36a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e36e:	e7a7      	b.n	800e2c0 <_printf_i+0x118>
 800e370:	6923      	ldr	r3, [r4, #16]
 800e372:	462a      	mov	r2, r5
 800e374:	4639      	mov	r1, r7
 800e376:	4630      	mov	r0, r6
 800e378:	47c0      	blx	r8
 800e37a:	3001      	adds	r0, #1
 800e37c:	d0aa      	beq.n	800e2d4 <_printf_i+0x12c>
 800e37e:	6823      	ldr	r3, [r4, #0]
 800e380:	079b      	lsls	r3, r3, #30
 800e382:	d413      	bmi.n	800e3ac <_printf_i+0x204>
 800e384:	68e0      	ldr	r0, [r4, #12]
 800e386:	9b03      	ldr	r3, [sp, #12]
 800e388:	4298      	cmp	r0, r3
 800e38a:	bfb8      	it	lt
 800e38c:	4618      	movlt	r0, r3
 800e38e:	e7a3      	b.n	800e2d8 <_printf_i+0x130>
 800e390:	2301      	movs	r3, #1
 800e392:	464a      	mov	r2, r9
 800e394:	4639      	mov	r1, r7
 800e396:	4630      	mov	r0, r6
 800e398:	47c0      	blx	r8
 800e39a:	3001      	adds	r0, #1
 800e39c:	d09a      	beq.n	800e2d4 <_printf_i+0x12c>
 800e39e:	3501      	adds	r5, #1
 800e3a0:	68e3      	ldr	r3, [r4, #12]
 800e3a2:	9a03      	ldr	r2, [sp, #12]
 800e3a4:	1a9b      	subs	r3, r3, r2
 800e3a6:	42ab      	cmp	r3, r5
 800e3a8:	dcf2      	bgt.n	800e390 <_printf_i+0x1e8>
 800e3aa:	e7eb      	b.n	800e384 <_printf_i+0x1dc>
 800e3ac:	2500      	movs	r5, #0
 800e3ae:	f104 0919 	add.w	r9, r4, #25
 800e3b2:	e7f5      	b.n	800e3a0 <_printf_i+0x1f8>
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1ac      	bne.n	800e312 <_printf_i+0x16a>
 800e3b8:	7803      	ldrb	r3, [r0, #0]
 800e3ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e3be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3c2:	e76c      	b.n	800e29e <_printf_i+0xf6>
 800e3c4:	08011459 	.word	0x08011459
 800e3c8:	0801146a 	.word	0x0801146a

0800e3cc <_sbrk_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4c06      	ldr	r4, [pc, #24]	; (800e3e8 <_sbrk_r+0x1c>)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4605      	mov	r5, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	6023      	str	r3, [r4, #0]
 800e3d8:	f7f2 fce0 	bl	8000d9c <_sbrk>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_sbrk_r+0x1a>
 800e3e0:	6823      	ldr	r3, [r4, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_sbrk_r+0x1a>
 800e3e4:	602b      	str	r3, [r5, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	20006520 	.word	0x20006520

0800e3ec <__sread>:
 800e3ec:	b510      	push	{r4, lr}
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f4:	f000 fa48 	bl	800e888 <_read_r>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	bfab      	itete	ge
 800e3fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3fe:	89a3      	ldrhlt	r3, [r4, #12]
 800e400:	181b      	addge	r3, r3, r0
 800e402:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e406:	bfac      	ite	ge
 800e408:	6563      	strge	r3, [r4, #84]	; 0x54
 800e40a:	81a3      	strhlt	r3, [r4, #12]
 800e40c:	bd10      	pop	{r4, pc}

0800e40e <__swrite>:
 800e40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e412:	461f      	mov	r7, r3
 800e414:	898b      	ldrh	r3, [r1, #12]
 800e416:	05db      	lsls	r3, r3, #23
 800e418:	4605      	mov	r5, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	4616      	mov	r6, r2
 800e41e:	d505      	bpl.n	800e42c <__swrite+0x1e>
 800e420:	2302      	movs	r3, #2
 800e422:	2200      	movs	r2, #0
 800e424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e428:	f000 f9b6 	bl	800e798 <_lseek_r>
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	4632      	mov	r2, r6
 800e43a:	463b      	mov	r3, r7
 800e43c:	4628      	mov	r0, r5
 800e43e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e442:	f000 b869 	b.w	800e518 <_write_r>

0800e446 <__sseek>:
 800e446:	b510      	push	{r4, lr}
 800e448:	460c      	mov	r4, r1
 800e44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e44e:	f000 f9a3 	bl	800e798 <_lseek_r>
 800e452:	1c43      	adds	r3, r0, #1
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	bf15      	itete	ne
 800e458:	6560      	strne	r0, [r4, #84]	; 0x54
 800e45a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e45e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e462:	81a3      	strheq	r3, [r4, #12]
 800e464:	bf18      	it	ne
 800e466:	81a3      	strhne	r3, [r4, #12]
 800e468:	bd10      	pop	{r4, pc}

0800e46a <__sclose>:
 800e46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e46e:	f000 b8d3 	b.w	800e618 <_close_r>
	...

0800e474 <__swbuf_r>:
 800e474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e476:	460e      	mov	r6, r1
 800e478:	4614      	mov	r4, r2
 800e47a:	4605      	mov	r5, r0
 800e47c:	b118      	cbz	r0, 800e486 <__swbuf_r+0x12>
 800e47e:	6983      	ldr	r3, [r0, #24]
 800e480:	b90b      	cbnz	r3, 800e486 <__swbuf_r+0x12>
 800e482:	f7ff fba1 	bl	800dbc8 <__sinit>
 800e486:	4b21      	ldr	r3, [pc, #132]	; (800e50c <__swbuf_r+0x98>)
 800e488:	429c      	cmp	r4, r3
 800e48a:	d12a      	bne.n	800e4e2 <__swbuf_r+0x6e>
 800e48c:	686c      	ldr	r4, [r5, #4]
 800e48e:	69a3      	ldr	r3, [r4, #24]
 800e490:	60a3      	str	r3, [r4, #8]
 800e492:	89a3      	ldrh	r3, [r4, #12]
 800e494:	071a      	lsls	r2, r3, #28
 800e496:	d52e      	bpl.n	800e4f6 <__swbuf_r+0x82>
 800e498:	6923      	ldr	r3, [r4, #16]
 800e49a:	b363      	cbz	r3, 800e4f6 <__swbuf_r+0x82>
 800e49c:	6923      	ldr	r3, [r4, #16]
 800e49e:	6820      	ldr	r0, [r4, #0]
 800e4a0:	1ac0      	subs	r0, r0, r3
 800e4a2:	6963      	ldr	r3, [r4, #20]
 800e4a4:	b2f6      	uxtb	r6, r6
 800e4a6:	4283      	cmp	r3, r0
 800e4a8:	4637      	mov	r7, r6
 800e4aa:	dc04      	bgt.n	800e4b6 <__swbuf_r+0x42>
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f000 f948 	bl	800e744 <_fflush_r>
 800e4b4:	bb28      	cbnz	r0, 800e502 <__swbuf_r+0x8e>
 800e4b6:	68a3      	ldr	r3, [r4, #8]
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	60a3      	str	r3, [r4, #8]
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	1c5a      	adds	r2, r3, #1
 800e4c0:	6022      	str	r2, [r4, #0]
 800e4c2:	701e      	strb	r6, [r3, #0]
 800e4c4:	6963      	ldr	r3, [r4, #20]
 800e4c6:	3001      	adds	r0, #1
 800e4c8:	4283      	cmp	r3, r0
 800e4ca:	d004      	beq.n	800e4d6 <__swbuf_r+0x62>
 800e4cc:	89a3      	ldrh	r3, [r4, #12]
 800e4ce:	07db      	lsls	r3, r3, #31
 800e4d0:	d519      	bpl.n	800e506 <__swbuf_r+0x92>
 800e4d2:	2e0a      	cmp	r6, #10
 800e4d4:	d117      	bne.n	800e506 <__swbuf_r+0x92>
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	4628      	mov	r0, r5
 800e4da:	f000 f933 	bl	800e744 <_fflush_r>
 800e4de:	b190      	cbz	r0, 800e506 <__swbuf_r+0x92>
 800e4e0:	e00f      	b.n	800e502 <__swbuf_r+0x8e>
 800e4e2:	4b0b      	ldr	r3, [pc, #44]	; (800e510 <__swbuf_r+0x9c>)
 800e4e4:	429c      	cmp	r4, r3
 800e4e6:	d101      	bne.n	800e4ec <__swbuf_r+0x78>
 800e4e8:	68ac      	ldr	r4, [r5, #8]
 800e4ea:	e7d0      	b.n	800e48e <__swbuf_r+0x1a>
 800e4ec:	4b09      	ldr	r3, [pc, #36]	; (800e514 <__swbuf_r+0xa0>)
 800e4ee:	429c      	cmp	r4, r3
 800e4f0:	bf08      	it	eq
 800e4f2:	68ec      	ldreq	r4, [r5, #12]
 800e4f4:	e7cb      	b.n	800e48e <__swbuf_r+0x1a>
 800e4f6:	4621      	mov	r1, r4
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f000 f81f 	bl	800e53c <__swsetup_r>
 800e4fe:	2800      	cmp	r0, #0
 800e500:	d0cc      	beq.n	800e49c <__swbuf_r+0x28>
 800e502:	f04f 37ff 	mov.w	r7, #4294967295
 800e506:	4638      	mov	r0, r7
 800e508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e50a:	bf00      	nop
 800e50c:	08011408 	.word	0x08011408
 800e510:	08011428 	.word	0x08011428
 800e514:	080113e8 	.word	0x080113e8

0800e518 <_write_r>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4c07      	ldr	r4, [pc, #28]	; (800e538 <_write_r+0x20>)
 800e51c:	4605      	mov	r5, r0
 800e51e:	4608      	mov	r0, r1
 800e520:	4611      	mov	r1, r2
 800e522:	2200      	movs	r2, #0
 800e524:	6022      	str	r2, [r4, #0]
 800e526:	461a      	mov	r2, r3
 800e528:	f7f2 fbe7 	bl	8000cfa <_write>
 800e52c:	1c43      	adds	r3, r0, #1
 800e52e:	d102      	bne.n	800e536 <_write_r+0x1e>
 800e530:	6823      	ldr	r3, [r4, #0]
 800e532:	b103      	cbz	r3, 800e536 <_write_r+0x1e>
 800e534:	602b      	str	r3, [r5, #0]
 800e536:	bd38      	pop	{r3, r4, r5, pc}
 800e538:	20006520 	.word	0x20006520

0800e53c <__swsetup_r>:
 800e53c:	4b32      	ldr	r3, [pc, #200]	; (800e608 <__swsetup_r+0xcc>)
 800e53e:	b570      	push	{r4, r5, r6, lr}
 800e540:	681d      	ldr	r5, [r3, #0]
 800e542:	4606      	mov	r6, r0
 800e544:	460c      	mov	r4, r1
 800e546:	b125      	cbz	r5, 800e552 <__swsetup_r+0x16>
 800e548:	69ab      	ldr	r3, [r5, #24]
 800e54a:	b913      	cbnz	r3, 800e552 <__swsetup_r+0x16>
 800e54c:	4628      	mov	r0, r5
 800e54e:	f7ff fb3b 	bl	800dbc8 <__sinit>
 800e552:	4b2e      	ldr	r3, [pc, #184]	; (800e60c <__swsetup_r+0xd0>)
 800e554:	429c      	cmp	r4, r3
 800e556:	d10f      	bne.n	800e578 <__swsetup_r+0x3c>
 800e558:	686c      	ldr	r4, [r5, #4]
 800e55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e55e:	b29a      	uxth	r2, r3
 800e560:	0715      	lsls	r5, r2, #28
 800e562:	d42c      	bmi.n	800e5be <__swsetup_r+0x82>
 800e564:	06d0      	lsls	r0, r2, #27
 800e566:	d411      	bmi.n	800e58c <__swsetup_r+0x50>
 800e568:	2209      	movs	r2, #9
 800e56a:	6032      	str	r2, [r6, #0]
 800e56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e570:	81a3      	strh	r3, [r4, #12]
 800e572:	f04f 30ff 	mov.w	r0, #4294967295
 800e576:	e03e      	b.n	800e5f6 <__swsetup_r+0xba>
 800e578:	4b25      	ldr	r3, [pc, #148]	; (800e610 <__swsetup_r+0xd4>)
 800e57a:	429c      	cmp	r4, r3
 800e57c:	d101      	bne.n	800e582 <__swsetup_r+0x46>
 800e57e:	68ac      	ldr	r4, [r5, #8]
 800e580:	e7eb      	b.n	800e55a <__swsetup_r+0x1e>
 800e582:	4b24      	ldr	r3, [pc, #144]	; (800e614 <__swsetup_r+0xd8>)
 800e584:	429c      	cmp	r4, r3
 800e586:	bf08      	it	eq
 800e588:	68ec      	ldreq	r4, [r5, #12]
 800e58a:	e7e6      	b.n	800e55a <__swsetup_r+0x1e>
 800e58c:	0751      	lsls	r1, r2, #29
 800e58e:	d512      	bpl.n	800e5b6 <__swsetup_r+0x7a>
 800e590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e592:	b141      	cbz	r1, 800e5a6 <__swsetup_r+0x6a>
 800e594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e598:	4299      	cmp	r1, r3
 800e59a:	d002      	beq.n	800e5a2 <__swsetup_r+0x66>
 800e59c:	4630      	mov	r0, r6
 800e59e:	f7ff fba5 	bl	800dcec <_free_r>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	6363      	str	r3, [r4, #52]	; 0x34
 800e5a6:	89a3      	ldrh	r3, [r4, #12]
 800e5a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5ac:	81a3      	strh	r3, [r4, #12]
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	6063      	str	r3, [r4, #4]
 800e5b2:	6923      	ldr	r3, [r4, #16]
 800e5b4:	6023      	str	r3, [r4, #0]
 800e5b6:	89a3      	ldrh	r3, [r4, #12]
 800e5b8:	f043 0308 	orr.w	r3, r3, #8
 800e5bc:	81a3      	strh	r3, [r4, #12]
 800e5be:	6923      	ldr	r3, [r4, #16]
 800e5c0:	b94b      	cbnz	r3, 800e5d6 <__swsetup_r+0x9a>
 800e5c2:	89a3      	ldrh	r3, [r4, #12]
 800e5c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5cc:	d003      	beq.n	800e5d6 <__swsetup_r+0x9a>
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	f000 f917 	bl	800e804 <__smakebuf_r>
 800e5d6:	89a2      	ldrh	r2, [r4, #12]
 800e5d8:	f012 0301 	ands.w	r3, r2, #1
 800e5dc:	d00c      	beq.n	800e5f8 <__swsetup_r+0xbc>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	60a3      	str	r3, [r4, #8]
 800e5e2:	6963      	ldr	r3, [r4, #20]
 800e5e4:	425b      	negs	r3, r3
 800e5e6:	61a3      	str	r3, [r4, #24]
 800e5e8:	6923      	ldr	r3, [r4, #16]
 800e5ea:	b953      	cbnz	r3, 800e602 <__swsetup_r+0xc6>
 800e5ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e5f4:	d1ba      	bne.n	800e56c <__swsetup_r+0x30>
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}
 800e5f8:	0792      	lsls	r2, r2, #30
 800e5fa:	bf58      	it	pl
 800e5fc:	6963      	ldrpl	r3, [r4, #20]
 800e5fe:	60a3      	str	r3, [r4, #8]
 800e600:	e7f2      	b.n	800e5e8 <__swsetup_r+0xac>
 800e602:	2000      	movs	r0, #0
 800e604:	e7f7      	b.n	800e5f6 <__swsetup_r+0xba>
 800e606:	bf00      	nop
 800e608:	20000014 	.word	0x20000014
 800e60c:	08011408 	.word	0x08011408
 800e610:	08011428 	.word	0x08011428
 800e614:	080113e8 	.word	0x080113e8

0800e618 <_close_r>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	4c06      	ldr	r4, [pc, #24]	; (800e634 <_close_r+0x1c>)
 800e61c:	2300      	movs	r3, #0
 800e61e:	4605      	mov	r5, r0
 800e620:	4608      	mov	r0, r1
 800e622:	6023      	str	r3, [r4, #0]
 800e624:	f7f2 fb85 	bl	8000d32 <_close>
 800e628:	1c43      	adds	r3, r0, #1
 800e62a:	d102      	bne.n	800e632 <_close_r+0x1a>
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	b103      	cbz	r3, 800e632 <_close_r+0x1a>
 800e630:	602b      	str	r3, [r5, #0]
 800e632:	bd38      	pop	{r3, r4, r5, pc}
 800e634:	20006520 	.word	0x20006520

0800e638 <__sflush_r>:
 800e638:	898a      	ldrh	r2, [r1, #12]
 800e63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e63e:	4605      	mov	r5, r0
 800e640:	0710      	lsls	r0, r2, #28
 800e642:	460c      	mov	r4, r1
 800e644:	d458      	bmi.n	800e6f8 <__sflush_r+0xc0>
 800e646:	684b      	ldr	r3, [r1, #4]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	dc05      	bgt.n	800e658 <__sflush_r+0x20>
 800e64c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e64e:	2b00      	cmp	r3, #0
 800e650:	dc02      	bgt.n	800e658 <__sflush_r+0x20>
 800e652:	2000      	movs	r0, #0
 800e654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e65a:	2e00      	cmp	r6, #0
 800e65c:	d0f9      	beq.n	800e652 <__sflush_r+0x1a>
 800e65e:	2300      	movs	r3, #0
 800e660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e664:	682f      	ldr	r7, [r5, #0]
 800e666:	6a21      	ldr	r1, [r4, #32]
 800e668:	602b      	str	r3, [r5, #0]
 800e66a:	d032      	beq.n	800e6d2 <__sflush_r+0x9a>
 800e66c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e66e:	89a3      	ldrh	r3, [r4, #12]
 800e670:	075a      	lsls	r2, r3, #29
 800e672:	d505      	bpl.n	800e680 <__sflush_r+0x48>
 800e674:	6863      	ldr	r3, [r4, #4]
 800e676:	1ac0      	subs	r0, r0, r3
 800e678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e67a:	b10b      	cbz	r3, 800e680 <__sflush_r+0x48>
 800e67c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e67e:	1ac0      	subs	r0, r0, r3
 800e680:	2300      	movs	r3, #0
 800e682:	4602      	mov	r2, r0
 800e684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e686:	6a21      	ldr	r1, [r4, #32]
 800e688:	4628      	mov	r0, r5
 800e68a:	47b0      	blx	r6
 800e68c:	1c43      	adds	r3, r0, #1
 800e68e:	89a3      	ldrh	r3, [r4, #12]
 800e690:	d106      	bne.n	800e6a0 <__sflush_r+0x68>
 800e692:	6829      	ldr	r1, [r5, #0]
 800e694:	291d      	cmp	r1, #29
 800e696:	d848      	bhi.n	800e72a <__sflush_r+0xf2>
 800e698:	4a29      	ldr	r2, [pc, #164]	; (800e740 <__sflush_r+0x108>)
 800e69a:	40ca      	lsrs	r2, r1
 800e69c:	07d6      	lsls	r6, r2, #31
 800e69e:	d544      	bpl.n	800e72a <__sflush_r+0xf2>
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	6062      	str	r2, [r4, #4]
 800e6a4:	04d9      	lsls	r1, r3, #19
 800e6a6:	6922      	ldr	r2, [r4, #16]
 800e6a8:	6022      	str	r2, [r4, #0]
 800e6aa:	d504      	bpl.n	800e6b6 <__sflush_r+0x7e>
 800e6ac:	1c42      	adds	r2, r0, #1
 800e6ae:	d101      	bne.n	800e6b4 <__sflush_r+0x7c>
 800e6b0:	682b      	ldr	r3, [r5, #0]
 800e6b2:	b903      	cbnz	r3, 800e6b6 <__sflush_r+0x7e>
 800e6b4:	6560      	str	r0, [r4, #84]	; 0x54
 800e6b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6b8:	602f      	str	r7, [r5, #0]
 800e6ba:	2900      	cmp	r1, #0
 800e6bc:	d0c9      	beq.n	800e652 <__sflush_r+0x1a>
 800e6be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6c2:	4299      	cmp	r1, r3
 800e6c4:	d002      	beq.n	800e6cc <__sflush_r+0x94>
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	f7ff fb10 	bl	800dcec <_free_r>
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	6360      	str	r0, [r4, #52]	; 0x34
 800e6d0:	e7c0      	b.n	800e654 <__sflush_r+0x1c>
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	47b0      	blx	r6
 800e6d8:	1c41      	adds	r1, r0, #1
 800e6da:	d1c8      	bne.n	800e66e <__sflush_r+0x36>
 800e6dc:	682b      	ldr	r3, [r5, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d0c5      	beq.n	800e66e <__sflush_r+0x36>
 800e6e2:	2b1d      	cmp	r3, #29
 800e6e4:	d001      	beq.n	800e6ea <__sflush_r+0xb2>
 800e6e6:	2b16      	cmp	r3, #22
 800e6e8:	d101      	bne.n	800e6ee <__sflush_r+0xb6>
 800e6ea:	602f      	str	r7, [r5, #0]
 800e6ec:	e7b1      	b.n	800e652 <__sflush_r+0x1a>
 800e6ee:	89a3      	ldrh	r3, [r4, #12]
 800e6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6f4:	81a3      	strh	r3, [r4, #12]
 800e6f6:	e7ad      	b.n	800e654 <__sflush_r+0x1c>
 800e6f8:	690f      	ldr	r7, [r1, #16]
 800e6fa:	2f00      	cmp	r7, #0
 800e6fc:	d0a9      	beq.n	800e652 <__sflush_r+0x1a>
 800e6fe:	0793      	lsls	r3, r2, #30
 800e700:	680e      	ldr	r6, [r1, #0]
 800e702:	bf08      	it	eq
 800e704:	694b      	ldreq	r3, [r1, #20]
 800e706:	600f      	str	r7, [r1, #0]
 800e708:	bf18      	it	ne
 800e70a:	2300      	movne	r3, #0
 800e70c:	eba6 0807 	sub.w	r8, r6, r7
 800e710:	608b      	str	r3, [r1, #8]
 800e712:	f1b8 0f00 	cmp.w	r8, #0
 800e716:	dd9c      	ble.n	800e652 <__sflush_r+0x1a>
 800e718:	4643      	mov	r3, r8
 800e71a:	463a      	mov	r2, r7
 800e71c:	6a21      	ldr	r1, [r4, #32]
 800e71e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e720:	4628      	mov	r0, r5
 800e722:	47b0      	blx	r6
 800e724:	2800      	cmp	r0, #0
 800e726:	dc06      	bgt.n	800e736 <__sflush_r+0xfe>
 800e728:	89a3      	ldrh	r3, [r4, #12]
 800e72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e72e:	81a3      	strh	r3, [r4, #12]
 800e730:	f04f 30ff 	mov.w	r0, #4294967295
 800e734:	e78e      	b.n	800e654 <__sflush_r+0x1c>
 800e736:	4407      	add	r7, r0
 800e738:	eba8 0800 	sub.w	r8, r8, r0
 800e73c:	e7e9      	b.n	800e712 <__sflush_r+0xda>
 800e73e:	bf00      	nop
 800e740:	20400001 	.word	0x20400001

0800e744 <_fflush_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	690b      	ldr	r3, [r1, #16]
 800e748:	4605      	mov	r5, r0
 800e74a:	460c      	mov	r4, r1
 800e74c:	b1db      	cbz	r3, 800e786 <_fflush_r+0x42>
 800e74e:	b118      	cbz	r0, 800e758 <_fflush_r+0x14>
 800e750:	6983      	ldr	r3, [r0, #24]
 800e752:	b90b      	cbnz	r3, 800e758 <_fflush_r+0x14>
 800e754:	f7ff fa38 	bl	800dbc8 <__sinit>
 800e758:	4b0c      	ldr	r3, [pc, #48]	; (800e78c <_fflush_r+0x48>)
 800e75a:	429c      	cmp	r4, r3
 800e75c:	d109      	bne.n	800e772 <_fflush_r+0x2e>
 800e75e:	686c      	ldr	r4, [r5, #4]
 800e760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e764:	b17b      	cbz	r3, 800e786 <_fflush_r+0x42>
 800e766:	4621      	mov	r1, r4
 800e768:	4628      	mov	r0, r5
 800e76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e76e:	f7ff bf63 	b.w	800e638 <__sflush_r>
 800e772:	4b07      	ldr	r3, [pc, #28]	; (800e790 <_fflush_r+0x4c>)
 800e774:	429c      	cmp	r4, r3
 800e776:	d101      	bne.n	800e77c <_fflush_r+0x38>
 800e778:	68ac      	ldr	r4, [r5, #8]
 800e77a:	e7f1      	b.n	800e760 <_fflush_r+0x1c>
 800e77c:	4b05      	ldr	r3, [pc, #20]	; (800e794 <_fflush_r+0x50>)
 800e77e:	429c      	cmp	r4, r3
 800e780:	bf08      	it	eq
 800e782:	68ec      	ldreq	r4, [r5, #12]
 800e784:	e7ec      	b.n	800e760 <_fflush_r+0x1c>
 800e786:	2000      	movs	r0, #0
 800e788:	bd38      	pop	{r3, r4, r5, pc}
 800e78a:	bf00      	nop
 800e78c:	08011408 	.word	0x08011408
 800e790:	08011428 	.word	0x08011428
 800e794:	080113e8 	.word	0x080113e8

0800e798 <_lseek_r>:
 800e798:	b538      	push	{r3, r4, r5, lr}
 800e79a:	4c07      	ldr	r4, [pc, #28]	; (800e7b8 <_lseek_r+0x20>)
 800e79c:	4605      	mov	r5, r0
 800e79e:	4608      	mov	r0, r1
 800e7a0:	4611      	mov	r1, r2
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	6022      	str	r2, [r4, #0]
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	f7f2 faea 	bl	8000d80 <_lseek>
 800e7ac:	1c43      	adds	r3, r0, #1
 800e7ae:	d102      	bne.n	800e7b6 <_lseek_r+0x1e>
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	b103      	cbz	r3, 800e7b6 <_lseek_r+0x1e>
 800e7b4:	602b      	str	r3, [r5, #0]
 800e7b6:	bd38      	pop	{r3, r4, r5, pc}
 800e7b8:	20006520 	.word	0x20006520

0800e7bc <__swhatbuf_r>:
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	460e      	mov	r6, r1
 800e7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c4:	2900      	cmp	r1, #0
 800e7c6:	b096      	sub	sp, #88	; 0x58
 800e7c8:	4614      	mov	r4, r2
 800e7ca:	461d      	mov	r5, r3
 800e7cc:	da07      	bge.n	800e7de <__swhatbuf_r+0x22>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	602b      	str	r3, [r5, #0]
 800e7d2:	89b3      	ldrh	r3, [r6, #12]
 800e7d4:	061a      	lsls	r2, r3, #24
 800e7d6:	d410      	bmi.n	800e7fa <__swhatbuf_r+0x3e>
 800e7d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7dc:	e00e      	b.n	800e7fc <__swhatbuf_r+0x40>
 800e7de:	466a      	mov	r2, sp
 800e7e0:	f000 f864 	bl	800e8ac <_fstat_r>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	dbf2      	blt.n	800e7ce <__swhatbuf_r+0x12>
 800e7e8:	9a01      	ldr	r2, [sp, #4]
 800e7ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7f2:	425a      	negs	r2, r3
 800e7f4:	415a      	adcs	r2, r3
 800e7f6:	602a      	str	r2, [r5, #0]
 800e7f8:	e7ee      	b.n	800e7d8 <__swhatbuf_r+0x1c>
 800e7fa:	2340      	movs	r3, #64	; 0x40
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	6023      	str	r3, [r4, #0]
 800e800:	b016      	add	sp, #88	; 0x58
 800e802:	bd70      	pop	{r4, r5, r6, pc}

0800e804 <__smakebuf_r>:
 800e804:	898b      	ldrh	r3, [r1, #12]
 800e806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e808:	079d      	lsls	r5, r3, #30
 800e80a:	4606      	mov	r6, r0
 800e80c:	460c      	mov	r4, r1
 800e80e:	d507      	bpl.n	800e820 <__smakebuf_r+0x1c>
 800e810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	6123      	str	r3, [r4, #16]
 800e818:	2301      	movs	r3, #1
 800e81a:	6163      	str	r3, [r4, #20]
 800e81c:	b002      	add	sp, #8
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	ab01      	add	r3, sp, #4
 800e822:	466a      	mov	r2, sp
 800e824:	f7ff ffca 	bl	800e7bc <__swhatbuf_r>
 800e828:	9900      	ldr	r1, [sp, #0]
 800e82a:	4605      	mov	r5, r0
 800e82c:	4630      	mov	r0, r6
 800e82e:	f7ff faab 	bl	800dd88 <_malloc_r>
 800e832:	b948      	cbnz	r0, 800e848 <__smakebuf_r+0x44>
 800e834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e838:	059a      	lsls	r2, r3, #22
 800e83a:	d4ef      	bmi.n	800e81c <__smakebuf_r+0x18>
 800e83c:	f023 0303 	bic.w	r3, r3, #3
 800e840:	f043 0302 	orr.w	r3, r3, #2
 800e844:	81a3      	strh	r3, [r4, #12]
 800e846:	e7e3      	b.n	800e810 <__smakebuf_r+0xc>
 800e848:	4b0d      	ldr	r3, [pc, #52]	; (800e880 <__smakebuf_r+0x7c>)
 800e84a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	6020      	str	r0, [r4, #0]
 800e850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e854:	81a3      	strh	r3, [r4, #12]
 800e856:	9b00      	ldr	r3, [sp, #0]
 800e858:	6163      	str	r3, [r4, #20]
 800e85a:	9b01      	ldr	r3, [sp, #4]
 800e85c:	6120      	str	r0, [r4, #16]
 800e85e:	b15b      	cbz	r3, 800e878 <__smakebuf_r+0x74>
 800e860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e864:	4630      	mov	r0, r6
 800e866:	f000 f833 	bl	800e8d0 <_isatty_r>
 800e86a:	b128      	cbz	r0, 800e878 <__smakebuf_r+0x74>
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	f023 0303 	bic.w	r3, r3, #3
 800e872:	f043 0301 	orr.w	r3, r3, #1
 800e876:	81a3      	strh	r3, [r4, #12]
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	431d      	orrs	r5, r3
 800e87c:	81a5      	strh	r5, [r4, #12]
 800e87e:	e7cd      	b.n	800e81c <__smakebuf_r+0x18>
 800e880:	0800db91 	.word	0x0800db91

0800e884 <__malloc_lock>:
 800e884:	4770      	bx	lr

0800e886 <__malloc_unlock>:
 800e886:	4770      	bx	lr

0800e888 <_read_r>:
 800e888:	b538      	push	{r3, r4, r5, lr}
 800e88a:	4c07      	ldr	r4, [pc, #28]	; (800e8a8 <_read_r+0x20>)
 800e88c:	4605      	mov	r5, r0
 800e88e:	4608      	mov	r0, r1
 800e890:	4611      	mov	r1, r2
 800e892:	2200      	movs	r2, #0
 800e894:	6022      	str	r2, [r4, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	f7f2 fa12 	bl	8000cc0 <_read>
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	d102      	bne.n	800e8a6 <_read_r+0x1e>
 800e8a0:	6823      	ldr	r3, [r4, #0]
 800e8a2:	b103      	cbz	r3, 800e8a6 <_read_r+0x1e>
 800e8a4:	602b      	str	r3, [r5, #0]
 800e8a6:	bd38      	pop	{r3, r4, r5, pc}
 800e8a8:	20006520 	.word	0x20006520

0800e8ac <_fstat_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4c07      	ldr	r4, [pc, #28]	; (800e8cc <_fstat_r+0x20>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4605      	mov	r5, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	6023      	str	r3, [r4, #0]
 800e8ba:	f7f2 fa46 	bl	8000d4a <_fstat>
 800e8be:	1c43      	adds	r3, r0, #1
 800e8c0:	d102      	bne.n	800e8c8 <_fstat_r+0x1c>
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	b103      	cbz	r3, 800e8c8 <_fstat_r+0x1c>
 800e8c6:	602b      	str	r3, [r5, #0]
 800e8c8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20006520 	.word	0x20006520

0800e8d0 <_isatty_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4c06      	ldr	r4, [pc, #24]	; (800e8ec <_isatty_r+0x1c>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4605      	mov	r5, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	6023      	str	r3, [r4, #0]
 800e8dc:	f7f2 fa45 	bl	8000d6a <_isatty>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_isatty_r+0x1a>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_isatty_r+0x1a>
 800e8e8:	602b      	str	r3, [r5, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	20006520 	.word	0x20006520

0800e8f0 <_init>:
 800e8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f2:	bf00      	nop
 800e8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8f6:	bc08      	pop	{r3}
 800e8f8:	469e      	mov	lr, r3
 800e8fa:	4770      	bx	lr

0800e8fc <_fini>:
 800e8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fe:	bf00      	nop
 800e900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e902:	bc08      	pop	{r3}
 800e904:	469e      	mov	lr, r3
 800e906:	4770      	bx	lr
