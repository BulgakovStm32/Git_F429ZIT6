
f429zit6_proba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f28  0801088c  0801088c  0002088c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137b4  080137b4  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080137b4  080137b4  000237b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080137bc  080137bc  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080137bc  080137bc  000237bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080137c0  080137c0  000237c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080137c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064f4  2000007c  08013840  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006570  08013840  00036570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd55  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000555b  00000000  00000000  0005ce01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c0  00000000  00000000  00062360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001400  00000000  00000000  00063820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f877  00000000  00000000  00064c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ecca  00000000  00000000  00094497  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb813  00000000  00000000  000b3161  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019e974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c0  00000000  00000000  0019e9f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010874 	.word	0x08010874

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08010874 	.word	0x08010874

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t i2c_Buf[16] = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fc31 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f873 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f961 	bl	8000870 <MX_GPIO_Init>
  //MX_LWIP_Init();
  MX_I2C3_Init();
 80005ae:	f000 f91f 	bl	80007f0 <MX_I2C3_Init>
  MX_I2C2_Init();
 80005b2:	f000 f8dd 	bl	8000770 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //****************************************************
  //Работа с I2C.
  //Включение питания разъемов I2C_IMU и I2C.
  HAL_GPIO_WritePin(I2C_PWR_EN_GPIO_Port, I2C_PWR_EN_Pin, SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2108      	movs	r1, #8
 80005ba:	482f      	ldr	r0, [pc, #188]	; (8000678 <main+0xe8>)
 80005bc:	f002 f886 	bl	80026cc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fc93 	bl	8000eec <HAL_Delay>

  I2C_Init(I2C3); //иннициализация I2C_IMU(I2C3).
 80005c6:	482d      	ldr	r0, [pc, #180]	; (800067c <main+0xec>)
 80005c8:	f00f f8bc 	bl	800f744 <I2C_Init>
  I2C_Init(I2C2); //иннициализация I2C.
 80005cc:	482c      	ldr	r0, [pc, #176]	; (8000680 <main+0xf0>)
 80005ce:	f00f f8b9 	bl	800f744 <I2C_Init>
  //****************************************************
  //Работа с Ethernet.
  //Включение питания Ethernet.
  HAL_GPIO_WritePin(LAN_PWR_EN_GPIO_Port, LAN_PWR_EN_Pin, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	482a      	ldr	r0, [pc, #168]	; (8000684 <main+0xf4>)
 80005da:	f002 f877 	bl	80026cc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005de:	2064      	movs	r0, #100	; 0x64
 80005e0:	f000 fc84 	bl	8000eec <HAL_Delay>

  //Сброс LAN8742A.
  HAL_GPIO_WritePin(LAN_nRST_GPIO_Port, LAN_nRST_Pin, RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2108      	movs	r1, #8
 80005e8:	4827      	ldr	r0, [pc, #156]	; (8000688 <main+0xf8>)
 80005ea:	f002 f86f 	bl	80026cc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80005ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f2:	f000 fc7b 	bl	8000eec <HAL_Delay>
  HAL_GPIO_WritePin(LAN_nRST_GPIO_Port, LAN_nRST_Pin, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2108      	movs	r1, #8
 80005fa:	4823      	ldr	r0, [pc, #140]	; (8000688 <main+0xf8>)
 80005fc:	f002 f866 	bl	80026cc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000604:	f000 fc72 	bl	8000eec <HAL_Delay>


  MX_LWIP_Init();//инициализация LwIP.
 8000608:	f002 fee6 	bl	80033d8 <MX_LWIP_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//********************************************************************************
	HAL_Delay(50);
 800060c:	2032      	movs	r0, #50	; 0x32
 800060e:	f000 fc6d 	bl	8000eec <HAL_Delay>

	//********************************************
	//проверка работы светодиодов.и
	//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000612:	2120      	movs	r1, #32
 8000614:	481c      	ldr	r0, [pc, #112]	; (8000688 <main+0xf8>)
 8000616:	f002 f872 	bl	80026fe <HAL_GPIO_TogglePin>

	//********************************************
	//Проверка работы портов I2C.
	I2C_StartAndSendDeviceAddr(I2C3, (0x39 << 1));
 800061a:	2172      	movs	r1, #114	; 0x72
 800061c:	4817      	ldr	r0, [pc, #92]	; (800067c <main+0xec>)
 800061e:	f00f f8cb 	bl	800f7b8 <I2C_StartAndSendDeviceAddr>
	I2C_Stop(I2C3);
 8000622:	4816      	ldr	r0, [pc, #88]	; (800067c <main+0xec>)
 8000624:	f00f f92b 	bl	800f87e <I2C_Stop>

	I2C_StartAndSendDeviceAddr(I2C2, (0x39 << 1));
 8000628:	2172      	movs	r1, #114	; 0x72
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <main+0xf0>)
 800062c:	f00f f8c4 	bl	800f7b8 <I2C_StartAndSendDeviceAddr>
	I2C_Stop(I2C2);
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <main+0xf0>)
 8000632:	f00f f924 	bl	800f87e <I2C_Stop>
	//********************************************
	//Управление вентиляторами.
	HAL_GPIO_TogglePin(FAN1_EN_GPIO_Port, FAN1_EN_Pin);
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	4814      	ldr	r0, [pc, #80]	; (800068c <main+0xfc>)
 800063a:	f002 f860 	bl	80026fe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(FAN2_EN_GPIO_Port, FAN2_EN_Pin);
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	4812      	ldr	r0, [pc, #72]	; (800068c <main+0xfc>)
 8000642:	f002 f85c 	bl	80026fe <HAL_GPIO_TogglePin>
	//********************************************
	//Управление светодиодом PWR.
	HAL_GPIO_TogglePin(PWR_BUT_LED_GPIO_Port, PWR_BUT_LED_Pin);
 8000646:	2101      	movs	r1, #1
 8000648:	480e      	ldr	r0, [pc, #56]	; (8000684 <main+0xf4>)
 800064a:	f002 f858 	bl	80026fe <HAL_GPIO_TogglePin>

	if(!HAL_GPIO_ReadPin(PWR_BUT_GPIO_Port, PWR_BUT_Pin)) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800064e:	2101      	movs	r1, #1
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <main+0xf8>)
 8000652:	f002 f823 	bl	800269c <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <main+0xd8>
 800065c:	2201      	movs	r2, #1
 800065e:	2110      	movs	r1, #16
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <main+0xf8>)
 8000662:	f002 f833 	bl	80026cc <HAL_GPIO_WritePin>
 8000666:	e004      	b.n	8000672 <main+0xe2>
	else 												  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2110      	movs	r1, #16
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <main+0xf8>)
 800066e:	f002 f82d 	bl	80026cc <HAL_GPIO_WritePin>
	//********************************************
	//Работа с LWIP.
	MX_LWIP_Process();
 8000672:	f002 fef7 	bl	8003464 <MX_LWIP_Process>
	HAL_Delay(50);
 8000676:	e7c9      	b.n	800060c <main+0x7c>
 8000678:	40020800 	.word	0x40020800
 800067c:	40005c00 	.word	0x40005c00
 8000680:	40005800 	.word	0x40005800
 8000684:	40020400 	.word	0x40020400
 8000688:	40020000 	.word	0x40020000
 800068c:	40020c00 	.word	0x40020c00

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00f f9c0 	bl	800fa24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <SystemClock_Config+0xd8>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <SystemClock_Config+0xd8>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <SystemClock_Config+0xd8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xdc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a24      	ldr	r2, [pc, #144]	; (800076c <SystemClock_Config+0xdc>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0xdc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000704:	23b4      	movs	r3, #180	; 0xb4
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fa11 	bl	8002b3c <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 f996 	bl	8000a50 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000724:	f002 f9ba 	bl	8002a9c <HAL_PWREx_EnableOverDrive>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800072e:	f000 f98f 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2105      	movs	r1, #5
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fc63 	bl	800301c <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800075c:	f000 f978 	bl	8000a50 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	; 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_I2C2_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_I2C2_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_I2C2_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MX_I2C2_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_I2C2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_I2C2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_I2C2_Init+0x74>)
 800078e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C2_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007ae:	f001 ffc1 	bl	8002734 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 f94a 	bl	8000a50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007c0:	f002 f8f0 	bl	80029a4 <HAL_I2CEx_ConfigAnalogFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80007ca:	f000 f941 	bl	8000a50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C2_Init+0x74>)
 80007d2:	f002 f923 	bl	8002a1c <HAL_I2CEx_ConfigDigitalFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 f938 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000280 	.word	0x20000280
 80007e8:	40005800 	.word	0x40005800
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_I2C3_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_I2C3_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_I2C3_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <MX_I2C3_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_I2C3_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_I2C3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_I2C3_Init+0x74>)
 800080e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000812:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_I2C3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_I2C3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_I2C3_Init+0x74>)
 800082e:	f001 ff81 	bl	8002734 <HAL_I2C_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000838:	f000 f90a 	bl	8000a50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800083c:	2110      	movs	r1, #16
 800083e:	4809      	ldr	r0, [pc, #36]	; (8000864 <MX_I2C3_Init+0x74>)
 8000840:	f002 f8b0 	bl	80029a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800084a:	f000 f901 	bl	8000a50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_I2C3_Init+0x74>)
 8000852:	f002 f8e3 	bl	8002a1c <HAL_I2CEx_ConfigDigitalFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800085c:	f000 f8f8 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000022c 	.word	0x2000022c
 8000868:	40005c00 	.word	0x40005c00
 800086c:	000186a0 	.word	0x000186a0

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b6c      	ldr	r3, [pc, #432]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a6b      	ldr	r2, [pc, #428]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 8000890:	f043 0320 	orr.w	r3, r3, #32
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b69      	ldr	r3, [pc, #420]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0320 	and.w	r3, r3, #32
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b65      	ldr	r3, [pc, #404]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a64      	ldr	r2, [pc, #400]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b62      	ldr	r3, [pc, #392]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a5d      	ldr	r2, [pc, #372]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b5b      	ldr	r3, [pc, #364]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a56      	ldr	r2, [pc, #344]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b54      	ldr	r3, [pc, #336]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b50      	ldr	r3, [pc, #320]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a4f      	ldr	r2, [pc, #316]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b49      	ldr	r3, [pc, #292]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a48      	ldr	r2, [pc, #288]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a41      	ldr	r2, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b3f      	ldr	r3, [pc, #252]	; (8000a3c <MX_GPIO_Init+0x1cc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_PWR_EN_GPIO_Port, I2C_PWR_EN_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2108      	movs	r1, #8
 800094e:	483c      	ldr	r0, [pc, #240]	; (8000a40 <MX_GPIO_Init+0x1d0>)
 8000950:	f001 febc 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LAN_nRST_Pin|LED2_Pin|LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2178      	movs	r1, #120	; 0x78
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x1d4>)
 800095a:	f001 feb7 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_BUT_LED_Pin|LAN_PWR_EN_Pin|USB_PWR_EN_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f243 0101 	movw	r1, #12289	; 0x3001
 8000964:	4838      	ldr	r0, [pc, #224]	; (8000a48 <MX_GPIO_Init+0x1d8>)
 8000966:	f001 feb1 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FAN1_EN_Pin|FAN2_EN_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	21c0      	movs	r1, #192	; 0xc0
 800096e:	4837      	ldr	r0, [pc, #220]	; (8000a4c <MX_GPIO_Init+0x1dc>)
 8000970:	f001 feac 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : I2C_PWR_EN_Pin */
  GPIO_InitStruct.Pin = I2C_PWR_EN_Pin;
 8000974:	2308      	movs	r3, #8
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(I2C_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	482d      	ldr	r0, [pc, #180]	; (8000a40 <MX_GPIO_Init+0x1d0>)
 800098c:	f001 fcdc 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_BUT_Pin */
  GPIO_InitStruct.Pin = PWR_BUT_Pin;
 8000990:	2301      	movs	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PWR_BUT_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4828      	ldr	r0, [pc, #160]	; (8000a44 <MX_GPIO_Init+0x1d4>)
 80009a4:	f001 fcd0 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_nRST_Pin */
  GPIO_InitStruct.Pin = LAN_nRST_Pin;
 80009a8:	2308      	movs	r3, #8
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b4:	2302      	movs	r3, #2
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAN_nRST_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_GPIO_Init+0x1d4>)
 80009c0:	f001 fcc2 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin PA6 */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GPIO_PIN_6;
 80009c4:	2370      	movs	r3, #112	; 0x70
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	481a      	ldr	r0, [pc, #104]	; (8000a44 <MX_GPIO_Init+0x1d4>)
 80009dc:	f001 fcb4 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_BUT_LED_Pin LAN_PWR_EN_Pin USB_PWR_EN_Pin */
  GPIO_InitStruct.Pin = PWR_BUT_LED_Pin|LAN_PWR_EN_Pin|USB_PWR_EN_Pin;
 80009e0:	f243 0301 	movw	r3, #12289	; 0x3001
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4813      	ldr	r0, [pc, #76]	; (8000a48 <MX_GPIO_Init+0x1d8>)
 80009fa:	f001 fca5 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <MX_GPIO_Init+0x1dc>)
 8000a14:	f001 fc98 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAN1_EN_Pin FAN2_EN_Pin */
  GPIO_InitStruct.Pin = FAN1_EN_Pin|FAN2_EN_Pin;
 8000a18:	23c0      	movs	r3, #192	; 0xc0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_GPIO_Init+0x1dc>)
 8000a30:	f001 fc8a 	bl	8002348 <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <Error_Handler+0x6>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a42      	ldr	r2, [pc, #264]	; (8000bd0 <HAL_I2C_MspInit+0x128>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12c      	bne.n	8000b24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0320 	and.w	r3, r3, #32
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aea:	2312      	movs	r3, #18
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000af6:	2304      	movs	r3, #4
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4835      	ldr	r0, [pc, #212]	; (8000bd8 <HAL_I2C_MspInit+0x130>)
 8000b02:	f001 fc21 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a31      	ldr	r2, [pc, #196]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b22:	e050      	b.n	8000bc6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a2c      	ldr	r2, [pc, #176]	; (8000bdc <HAL_I2C_MspInit+0x134>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d14b      	bne.n	8000bc6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6c:	2312      	movs	r3, #18
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4817      	ldr	r0, [pc, #92]	; (8000be0 <HAL_I2C_MspInit+0x138>)
 8000b84:	f001 fbe0 	bl	8002348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8e:	2312      	movs	r3, #18
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480f      	ldr	r0, [pc, #60]	; (8000be4 <HAL_I2C_MspInit+0x13c>)
 8000ba6:	f001 fbcf 	bl	8002348 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_I2C_MspInit+0x12c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
}
 8000bc6:	bf00      	nop
 8000bc8:	3730      	adds	r7, #48	; 0x30
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40005800 	.word	0x40005800
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40021400 	.word	0x40021400
 8000bdc:	40005c00 	.word	0x40005c00
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020000 	.word	0x40020000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f93a 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4e:	f3af 8000 	nop.w
 8000c52:	4601      	mov	r1, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf0      	blt.n	8000c4e <_read+0x12>
	}

return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e009      	b.n	8000c9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf1      	blt.n	8000c88 <_write+0x12>
	}
	return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_close>:

int _close(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_isatty>:

int _isatty(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
	return 1;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
	return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d205      	bcs.n	8000d54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <_sbrk+0x6c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20030000 	.word	0x20030000
 8000d78:	00004000 	.word	0x00004000
 8000d7c:	20000098 	.word	0x20000098
 8000d80:	20006570 	.word	0x20006570
 8000d84:	2000656c 	.word	0x2000656c

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <SystemInit+0x28>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <SystemInit+0x28>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SystemInit+0x28>)
 8000d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da2:	609a      	str	r2, [r3, #8]
#endif
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
  ldr  r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffd3 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f00e fde1 	bl	800f9a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fbd3 	bl	8000590 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dec:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000df0:	080137c4 	.word	0x080137c4
  ldr  r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000df8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000dfc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000e00:	20006570 	.word	0x20006570

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f92f 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fe0c 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f939 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f90f 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200002d4 	.word	0x200002d4

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200002d4 	.word	0x200002d4

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_Delay+0x40>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff47 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff5c 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffb0 	bl	8001050 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800110c:	4baa      	ldr	r3, [pc, #680]	; (80013b8 <HAL_ETH_Init+0x2bc>)
 800110e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e185      	b.n	800142e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f002 f9a0 	bl	800347c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	4b9e      	ldr	r3, [pc, #632]	; (80013bc <HAL_ETH_Init+0x2c0>)
 8001142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001144:	4a9d      	ldr	r2, [pc, #628]	; (80013bc <HAL_ETH_Init+0x2c0>)
 8001146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114a:	6453      	str	r3, [r2, #68]	; 0x44
 800114c:	4b9b      	ldr	r3, [pc, #620]	; (80013bc <HAL_ETH_Init+0x2c0>)
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001158:	4b99      	ldr	r3, [pc, #612]	; (80013c0 <HAL_ETH_Init+0x2c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a98      	ldr	r2, [pc, #608]	; (80013c0 <HAL_ETH_Init+0x2c4>)
 800115e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001162:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001164:	4b96      	ldr	r3, [pc, #600]	; (80013c0 <HAL_ETH_Init+0x2c4>)
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	4994      	ldr	r1, [pc, #592]	; (80013c0 <HAL_ETH_Init+0x2c4>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0201 	orr.w	r2, r2, #1
 8001184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001188:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800118a:	f7ff fea3 	bl	8000ed4 <HAL_GetTick>
 800118e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001190:	e011      	b.n	80011b6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001192:	f7ff fe9f 	bl	8000ed4 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011a0:	d909      	bls.n	80011b6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2203      	movs	r2, #3
 80011a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e13b      	b.n	800142e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1e4      	bne.n	8001192 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f023 031c 	bic.w	r3, r3, #28
 80011d6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011d8:	f002 f8de 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 80011dc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4a78      	ldr	r2, [pc, #480]	; (80013c4 <HAL_ETH_Init+0x2c8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d908      	bls.n	80011f8 <HAL_ETH_Init+0xfc>
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4a77      	ldr	r2, [pc, #476]	; (80013c8 <HAL_ETH_Init+0x2cc>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d804      	bhi.n	80011f8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e027      	b.n	8001248 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	4a73      	ldr	r2, [pc, #460]	; (80013c8 <HAL_ETH_Init+0x2cc>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d908      	bls.n	8001212 <HAL_ETH_Init+0x116>
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	4a72      	ldr	r2, [pc, #456]	; (80013cc <HAL_ETH_Init+0x2d0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d804      	bhi.n	8001212 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f043 030c 	orr.w	r3, r3, #12
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	e01a      	b.n	8001248 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4a6d      	ldr	r2, [pc, #436]	; (80013cc <HAL_ETH_Init+0x2d0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d903      	bls.n	8001222 <HAL_ETH_Init+0x126>
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4a6c      	ldr	r2, [pc, #432]	; (80013d0 <HAL_ETH_Init+0x2d4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d911      	bls.n	8001246 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4a6a      	ldr	r2, [pc, #424]	; (80013d0 <HAL_ETH_Init+0x2d4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d908      	bls.n	800123c <HAL_ETH_Init+0x140>
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4a69      	ldr	r2, [pc, #420]	; (80013d4 <HAL_ETH_Init+0x2d8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d804      	bhi.n	800123c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e005      	b.n	8001248 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	e000      	b.n	8001248 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001246:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001250:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001254:	2100      	movs	r1, #0
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fb9a 	bl	8001990 <HAL_ETH_WritePHYRegister>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001266:	6939      	ldr	r1, [r7, #16]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 fd4f 	bl	8001d0c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0d9      	b.n	800142e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800127a:	20ff      	movs	r0, #255	; 0xff
 800127c:	f7ff fe36 	bl	8000eec <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80a7 	beq.w	80013d8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800128a:	f7ff fe23 	bl	8000ed4 <HAL_GetTick>
 800128e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	461a      	mov	r2, r3
 8001296:	2101      	movs	r1, #1
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fb11 	bl	80018c0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800129e:	f7ff fe19 	bl	8000ed4 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d90f      	bls.n	80012d0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fd28 	bl	8001d0c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0ae      	b.n	800142e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0da      	beq.n	8001290 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012de:	2100      	movs	r1, #0
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fb55 	bl	8001990 <HAL_ETH_WritePHYRegister>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00b      	beq.n	8001304 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012f0:	6939      	ldr	r1, [r7, #16]
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fd0a 	bl	8001d0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001300:	2301      	movs	r3, #1
 8001302:	e094      	b.n	800142e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001304:	f7ff fde6 	bl	8000ed4 <HAL_GetTick>
 8001308:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	461a      	mov	r2, r3
 8001310:	2101      	movs	r1, #1
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fad4 	bl	80018c0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001318:	f7ff fddc 	bl	8000ed4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	; 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d90f      	bls.n	800134a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800132e:	6939      	ldr	r1, [r7, #16]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fceb 	bl	8001d0c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e071      	b.n	800142e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0da      	beq.n	800130a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	461a      	mov	r2, r3
 800135a:	211f      	movs	r1, #31
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 faaf 	bl	80018c0 <HAL_ETH_ReadPHYRegister>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00b      	beq.n	8001380 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800136c:	6939      	ldr	r1, [r7, #16]
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 fccc 	bl	8001d0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800137c:	2301      	movs	r3, #1
 800137e:	e056      	b.n	800142e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	e002      	b.n	800139a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	e037      	b.n	800141c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	e032      	b.n	800141c <HAL_ETH_Init+0x320>
 80013b6:	bf00      	nop
 80013b8:	03938700 	.word	0x03938700
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40013800 	.word	0x40013800
 80013c4:	01312cff 	.word	0x01312cff
 80013c8:	02160ebf 	.word	0x02160ebf
 80013cc:	039386ff 	.word	0x039386ff
 80013d0:	05f5e0ff 	.word	0x05f5e0ff
 80013d4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	2100      	movs	r1, #0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 facd 	bl	8001990 <HAL_ETH_WritePHYRegister>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00b      	beq.n	8001414 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001400:	6939      	ldr	r1, [r7, #16]
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fc82 	bl	8001d0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e00c      	b.n	800142e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001414:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001418:	f7ff fd68 	bl	8000eec <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800141c:	6939      	ldr	r1, [r7, #16]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fc74 	bl	8001d0c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop

08001438 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_ETH_DMATxDescListInit+0x20>
 8001454:	2302      	movs	r3, #2
 8001456:	e052      	b.n	80014fe <HAL_ETH_DMATxDescListInit+0xc6>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2202      	movs	r2, #2
 8001464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	e030      	b.n	80014d6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	015b      	lsls	r3, r3, #5
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	4413      	add	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001484:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800148c:	fb02 f303 	mul.w	r3, r2, r3
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	461a      	mov	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d105      	bne.n	80014ae <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d208      	bcs.n	80014ca <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	015b      	lsls	r3, r3, #5
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	4413      	add	r3, r2
 80014c2:	461a      	mov	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	e002      	b.n	80014d0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3ca      	bcc.n	8001474 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	3310      	adds	r3, #16
 80014ea:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800150a:	b480      	push	{r7}
 800150c:	b087      	sub	sp, #28
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_ETH_DMARxDescListInit+0x20>
 8001526:	2302      	movs	r3, #2
 8001528:	e056      	b.n	80015d8 <HAL_ETH_DMARxDescListInit+0xce>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2202      	movs	r2, #2
 8001536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e034      	b.n	80015b0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	4413      	add	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001556:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800155e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	461a      	mov	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d105      	bne.n	8001588 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3b01      	subs	r3, #1
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	429a      	cmp	r2, r3
 8001590:	d208      	bcs.n	80015a4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	4413      	add	r3, r2
 800159c:	461a      	mov	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	e002      	b.n	80015aa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d3c6      	bcc.n	8001546 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c2:	330c      	adds	r3, #12
 80015c4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ETH_TransmitFrame+0x24>
 8001604:	2302      	movs	r3, #2
 8001606:	e0cd      	b.n	80017a4 <HAL_ETH_TransmitFrame+0x1c0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800162e:	2301      	movs	r3, #1
 8001630:	e0b8      	b.n	80017a4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	da09      	bge.n	8001650 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2212      	movs	r2, #18
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0a9      	b.n	80017a4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001656:	4293      	cmp	r3, r2
 8001658:	d915      	bls.n	8001686 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0a9b      	lsrs	r3, r3, #10
 8001664:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800166a:	fba3 1302 	umull	r1, r3, r3, r2
 800166e:	0a9b      	lsrs	r3, r3, #10
 8001670:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e001      	b.n	800168a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001686:	2301      	movs	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d11c      	bne.n	80016ca <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800169e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016aa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016ba:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	461a      	mov	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c8:	e04b      	b.n	8001762 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e044      	b.n	800175a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016de:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d107      	bne.n	80016f6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016f4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016fe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3b01      	subs	r3, #1
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	429a      	cmp	r2, r3
 8001708:	d116      	bne.n	8001738 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001718:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <HAL_ETH_TransmitFrame+0x1d0>)
 800171e:	fb02 f203 	mul.w	r2, r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800172a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001736:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001746:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	3301      	adds	r3, #1
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	429a      	cmp	r2, r3
 8001760:	d3b6      	bcc.n	80016d0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176a:	3314      	adds	r3, #20
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00d      	beq.n	8001792 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177e:	3314      	adds	r3, #20
 8001780:	2204      	movs	r2, #4
 8001782:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178c:	3304      	adds	r3, #4
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	ac02b00b 	.word	0xac02b00b
 80017b4:	fffffa0c 	.word	0xfffffa0c

080017b8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_ETH_GetReceivedFrame+0x1a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e070      	b.n	80018b4 <HAL_ETH_GetReceivedFrame+0xfc>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2202      	movs	r2, #2
 80017de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db5a      	blt.n	80018a2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d030      	beq.n	800185c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	2b01      	cmp	r3, #1
 800180a:	d103      	bne.n	8001814 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001828:	3b04      	subs	r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e02b      	b.n	80018b4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001866:	2b00      	cmp	r3, #0
 8001868:	d010      	beq.n	800188c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
 800188a:	e00a      	b.n	80018a2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	460b      	mov	r3, r1
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b82      	cmp	r3, #130	; 0x82
 80018e0:	d101      	bne.n	80018e6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
 80018e4:	e050      	b.n	8001988 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2282      	movs	r2, #130	; 0x82
 80018ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 031c 	and.w	r3, r3, #28
 80018fc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8a1b      	ldrh	r3, [r3, #16]
 8001902:	02db      	lsls	r3, r3, #11
 8001904:	b29b      	uxth	r3, r3
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4313      	orrs	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800190c:	897b      	ldrh	r3, [r7, #10]
 800190e:	019b      	lsls	r3, r3, #6
 8001910:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4313      	orrs	r3, r2
 8001918:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f023 0302 	bic.w	r3, r3, #2
 8001920:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001932:	f7ff facf 	bl	8000ed4 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001938:	e015      	b.n	8001966 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800193a:	f7ff facb 	bl	8000ed4 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d309      	bcc.n	800195e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e014      	b.n	8001988 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e4      	bne.n	800193a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	460b      	mov	r3, r1
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b42      	cmp	r3, #66	; 0x42
 80019b0:	d101      	bne.n	80019b6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
 80019b4:	e04e      	b.n	8001a54 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2242      	movs	r2, #66	; 0x42
 80019ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 031c 	and.w	r3, r3, #28
 80019cc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8a1b      	ldrh	r3, [r3, #16]
 80019d2:	02db      	lsls	r3, r3, #11
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	019b      	lsls	r3, r3, #6
 80019e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a0c:	f7ff fa62 	bl	8000ed4 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a12:	e015      	b.n	8001a40 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a14:	f7ff fa5e 	bl	8000ed4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a22:	d309      	bcc.n	8001a38 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e00d      	b.n	8001a54 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1e4      	bne.n	8001a14 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_ETH_Start+0x16>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e01f      	b.n	8001ab2 <HAL_ETH_Start+0x56>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fb44 	bl	8002110 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 fb7b 	bl	8002184 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fc12 	bl	80022b8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fbaf 	bl	80021f8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fbdc 	bl	8002258 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_ETH_Stop+0x16>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e01f      	b.n	8001b10 <HAL_ETH_Stop+0x56>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fba1 	bl	8002228 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fbce 	bl	8002288 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fb66 	bl	80021be <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fbe0 	bl	80022b8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fb26 	bl	800214a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_ETH_ConfigMAC+0x1c>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e0e4      	b.n	8001cfe <HAL_ETH_ConfigMAC+0x1e6>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80b1 	beq.w	8001cae <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4b6c      	ldr	r3, [pc, #432]	; (8001d08 <HAL_ETH_ConfigMAC+0x1f0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b64:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001b6a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001b70:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001b76:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001b7c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001b82:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001b88:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001b8e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001b94:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001b9a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001ba0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ba6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f7ff f994 	bl	8000eec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bd4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001bda:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001be0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001be6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001bec:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001bf2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001bfe:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c00:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f7ff f96e 	bl	8000eec <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c20:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c2a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c42:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c48:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c4e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001c54:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001c5a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001c60:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff f937 	bl	8000eec <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff f924 	bl	8000eec <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	61da      	str	r2, [r3, #28]
 8001cac:	e01e      	b.n	8001cec <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001cbc:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7ff f904 	bl	8000eec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	ff20810f 	.word	0xff20810f

08001d0c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0b0      	sub	sp, #192	; 0xc0
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d28:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d30:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d56:	663b      	str	r3, [r7, #96]	; 0x60
 8001d58:	e001      	b.n	8001d5e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d62:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d78:	2340      	movs	r3, #64	; 0x40
 8001d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001de0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001de4:	4bac      	ldr	r3, [pc, #688]	; (8002098 <ETH_MACDMAConfig+0x38c>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001df0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001df4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001df8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001dfe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e02:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e06:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001e0c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e10:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e14:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e18:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e1c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e20:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e34:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff f853 	bl	8000eec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e4e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e54:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e58:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e5e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001e64:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e6a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e70:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001e74:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001e7c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e7e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7ff f82e 	bl	8000eec <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e98:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ea2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001eac:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001eb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ebc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eca:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ecc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ed0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ed6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ed8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001edc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ee2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ee4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ee8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001eea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001efc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7fe ffef 	bl	8000eec <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f16:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f18:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f32:	2001      	movs	r0, #1
 8001f34:	f7fe ffda 	bl	8000eec <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f40:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f54:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f66:	2304      	movs	r3, #4
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f74:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f80:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f96:	3318      	adds	r3, #24
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	; (800209c <ETH_MACDMAConfig+0x390>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001faa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001fac:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fae:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001fb0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001fb2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001fb4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001fb6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001fb8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001fba:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001fbc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001fbe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001fc2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001fc6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001fca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fde:	3318      	adds	r3, #24
 8001fe0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fee:	3318      	adds	r3, #24
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7fe ff78 	bl	8000eec <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002004:	3318      	adds	r3, #24
 8002006:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800200c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002010:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002014:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002018:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800201a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800201c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800201e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002020:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002022:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002026:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002034:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002044:	2001      	movs	r0, #1
 8002046:	f7fe ff51 	bl	8000eec <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002052:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002056:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d10f      	bne.n	8002080 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002068:	331c      	adds	r3, #28
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207c:	331c      	adds	r3, #28
 800207e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	461a      	mov	r2, r3
 8002086:	2100      	movs	r1, #0
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f809 	bl	80020a0 <ETH_MACAddressConfig>
}
 800208e:	bf00      	nop
 8002090:	37c0      	adds	r7, #192	; 0xc0
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	ff20810f 	.word	0xff20810f
 800209c:	f8de3f23 	.word	0xf8de3f23

080020a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3305      	adds	r3, #5
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	3204      	adds	r2, #4
 80020b8:	7812      	ldrb	r2, [r2, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <ETH_MACAddressConfig+0x68>)
 80020c2:	4413      	add	r3, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3303      	adds	r3, #3
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	061a      	lsls	r2, r3, #24
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3302      	adds	r3, #2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3301      	adds	r3, #1
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	4313      	orrs	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <ETH_MACAddressConfig+0x6c>)
 80020f2:	4413      	add	r3, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40028040 	.word	0x40028040
 800210c:	40028044 	.word	0x40028044

08002110 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0208 	orr.w	r2, r2, #8
 800212a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002134:	2001      	movs	r0, #1
 8002136:	f000 f8e9 	bl	800230c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	601a      	str	r2, [r3, #0]
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0208 	bic.w	r2, r2, #8
 8002164:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800216e:	2001      	movs	r0, #1
 8002170:	f000 f8cc 	bl	800230c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0204 	orr.w	r2, r2, #4
 800219e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f000 f8af 	bl	800230c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0204 	bic.w	r2, r2, #4
 80021d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f000 f892 	bl	800230c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	601a      	str	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002208:	3318      	adds	r3, #24
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002218:	3318      	adds	r3, #24
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002238:	3318      	adds	r3, #24
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	3318      	adds	r3, #24
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002268:	3318      	adds	r3, #24
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0202 	orr.w	r2, r2, #2
 8002274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002278:	3318      	adds	r3, #24
 800227a:	601a      	str	r2, [r3, #0]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002298:	3318      	adds	r3, #24
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0202 	bic.w	r2, r2, #2
 80022a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a8:	3318      	adds	r3, #24
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022cc:	3318      	adds	r3, #24
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022dc:	3318      	adds	r3, #24
 80022de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e8:	3318      	adds	r3, #24
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022ee:	2001      	movs	r0, #1
 80022f0:	f000 f80c 	bl	800230c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fe:	3318      	adds	r3, #24
 8002300:	601a      	str	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <ETH_Delay+0x34>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <ETH_Delay+0x38>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0a5b      	lsrs	r3, r3, #9
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002328:	bf00      	nop
  } 
  while (Delay --);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1e5a      	subs	r2, r3, #1
 800232e:	60fa      	str	r2, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f9      	bne.n	8002328 <ETH_Delay+0x1c>
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	20000000 	.word	0x20000000
 8002344:	10624dd3 	.word	0x10624dd3

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e177      	b.n	8002654 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 8166 	bne.w	800264e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d00b      	beq.n	80023a2 <HAL_GPIO_Init+0x5a>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002396:	2b11      	cmp	r3, #17
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b12      	cmp	r3, #18
 80023a0:	d130      	bne.n	8002404 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 0201 	and.w	r2, r3, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0xfc>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b12      	cmp	r3, #18
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80c0 	beq.w	800264e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_GPIO_Init+0x320>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a64      	ldr	r2, [pc, #400]	; (8002668 <HAL_GPIO_Init+0x320>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b62      	ldr	r3, [pc, #392]	; (8002668 <HAL_GPIO_Init+0x320>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ea:	4a60      	ldr	r2, [pc, #384]	; (800266c <HAL_GPIO_Init+0x324>)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_GPIO_Init+0x328>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d037      	beq.n	8002586 <HAL_GPIO_Init+0x23e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a56      	ldr	r2, [pc, #344]	; (8002674 <HAL_GPIO_Init+0x32c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d031      	beq.n	8002582 <HAL_GPIO_Init+0x23a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a55      	ldr	r2, [pc, #340]	; (8002678 <HAL_GPIO_Init+0x330>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02b      	beq.n	800257e <HAL_GPIO_Init+0x236>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a54      	ldr	r2, [pc, #336]	; (800267c <HAL_GPIO_Init+0x334>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d025      	beq.n	800257a <HAL_GPIO_Init+0x232>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a53      	ldr	r2, [pc, #332]	; (8002680 <HAL_GPIO_Init+0x338>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01f      	beq.n	8002576 <HAL_GPIO_Init+0x22e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_GPIO_Init+0x33c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d019      	beq.n	8002572 <HAL_GPIO_Init+0x22a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a51      	ldr	r2, [pc, #324]	; (8002688 <HAL_GPIO_Init+0x340>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0x226>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a50      	ldr	r2, [pc, #320]	; (800268c <HAL_GPIO_Init+0x344>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <HAL_GPIO_Init+0x222>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4f      	ldr	r2, [pc, #316]	; (8002690 <HAL_GPIO_Init+0x348>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <HAL_GPIO_Init+0x21e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4e      	ldr	r2, [pc, #312]	; (8002694 <HAL_GPIO_Init+0x34c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_Init+0x21a>
 800255e:	2309      	movs	r3, #9
 8002560:	e012      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002562:	230a      	movs	r3, #10
 8002564:	e010      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002566:	2308      	movs	r3, #8
 8002568:	e00e      	b.n	8002588 <HAL_GPIO_Init+0x240>
 800256a:	2307      	movs	r3, #7
 800256c:	e00c      	b.n	8002588 <HAL_GPIO_Init+0x240>
 800256e:	2306      	movs	r3, #6
 8002570:	e00a      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002572:	2305      	movs	r3, #5
 8002574:	e008      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002576:	2304      	movs	r3, #4
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x240>
 800257a:	2303      	movs	r3, #3
 800257c:	e004      	b.n	8002588 <HAL_GPIO_Init+0x240>
 800257e:	2302      	movs	r3, #2
 8002580:	e002      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002586:	2300      	movs	r3, #0
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	f002 0203 	and.w	r2, r2, #3
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	4093      	lsls	r3, r2
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002598:	4934      	ldr	r1, [pc, #208]	; (800266c <HAL_GPIO_Init+0x324>)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a6:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ca:	4a33      	ldr	r2, [pc, #204]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025d0:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f4:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_GPIO_Init+0x350>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_GPIO_Init+0x350>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a13      	ldr	r2, [pc, #76]	; (8002698 <HAL_GPIO_Init+0x350>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b0f      	cmp	r3, #15
 8002658:	f67f ae84 	bls.w	8002364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800265c:	bf00      	nop
 800265e:	3724      	adds	r7, #36	; 0x24
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40023800 	.word	0x40023800
 800266c:	40013800 	.word	0x40013800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400
 8002678:	40020800 	.word	0x40020800
 800267c:	40020c00 	.word	0x40020c00
 8002680:	40021000 	.word	0x40021000
 8002684:	40021400 	.word	0x40021400
 8002688:	40021800 	.word	0x40021800
 800268c:	40021c00 	.word	0x40021c00
 8002690:	40022000 	.word	0x40022000
 8002694:	40022400 	.word	0x40022400
 8002698:	40013c00 	.word	0x40013c00

0800269c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	887b      	ldrh	r3, [r7, #2]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e001      	b.n	80026be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
 80026d8:	4613      	mov	r3, r2
 80026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e8:	e003      	b.n	80026f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	619a      	str	r2, [r3, #24]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	401a      	ands	r2, r3
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	429a      	cmp	r2, r3
 8002716:	d104      	bne.n	8002722 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002718:	887b      	ldrh	r3, [r7, #2]
 800271a:	041a      	lsls	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002720:	e002      	b.n	8002728 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e11f      	b.n	8002986 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe f9a4 	bl	8000aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002798:	f000 fe0a 	bl	80033b0 <HAL_RCC_GetPCLK1Freq>
 800279c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4a7b      	ldr	r2, [pc, #492]	; (8002990 <HAL_I2C_Init+0x25c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d807      	bhi.n	80027b8 <HAL_I2C_Init+0x84>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a7a      	ldr	r2, [pc, #488]	; (8002994 <HAL_I2C_Init+0x260>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e006      	b.n	80027c6 <HAL_I2C_Init+0x92>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a77      	ldr	r2, [pc, #476]	; (8002998 <HAL_I2C_Init+0x264>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0db      	b.n	8002986 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a72      	ldr	r2, [pc, #456]	; (800299c <HAL_I2C_Init+0x268>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0c9b      	lsrs	r3, r3, #18
 80027d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a64      	ldr	r2, [pc, #400]	; (8002990 <HAL_I2C_Init+0x25c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d802      	bhi.n	8002808 <HAL_I2C_Init+0xd4>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3301      	adds	r3, #1
 8002806:	e009      	b.n	800281c <HAL_I2C_Init+0xe8>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	4a63      	ldr	r2, [pc, #396]	; (80029a0 <HAL_I2C_Init+0x26c>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	3301      	adds	r3, #1
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	430b      	orrs	r3, r1
 8002822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800282e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4956      	ldr	r1, [pc, #344]	; (8002990 <HAL_I2C_Init+0x25c>)
 8002838:	428b      	cmp	r3, r1
 800283a:	d80d      	bhi.n	8002858 <HAL_I2C_Init+0x124>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e59      	subs	r1, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fbb1 f3f3 	udiv	r3, r1, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	2b04      	cmp	r3, #4
 8002852:	bf38      	it	cc
 8002854:	2304      	movcc	r3, #4
 8002856:	e04f      	b.n	80028f8 <HAL_I2C_Init+0x1c4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_I2C_Init+0x150>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e012      	b.n	80028aa <HAL_I2C_Init+0x176>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	0099      	lsls	r1, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x17e>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e022      	b.n	80028f8 <HAL_I2C_Init+0x1c4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_I2C_Init+0x1a4>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e58      	subs	r0, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	440b      	add	r3, r1
 80028c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Init+0x1c4>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	6809      	ldr	r1, [r1, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002926:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6911      	ldr	r1, [r2, #16]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	000186a0 	.word	0x000186a0
 8002994:	001e847f 	.word	0x001e847f
 8002998:	003d08ff 	.word	0x003d08ff
 800299c:	431bde83 	.word	0x431bde83
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d129      	bne.n	8002a0e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2224      	movs	r2, #36	; 0x24
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0210 	bic.w	r2, r2, #16
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
  }
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d12a      	bne.n	8002a8c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2224      	movs	r2, #36	; 0x24
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002a56:	89fb      	ldrh	r3, [r7, #14]
 8002a58:	f023 030f 	bic.w	r3, r3, #15
 8002a5c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	89fb      	ldrh	r3, [r7, #14]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	89fa      	ldrh	r2, [r7, #14]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_PWREx_EnableOverDrive+0x90>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_PWREx_EnableOverDrive+0x94>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac8:	f7fe fa04 	bl	8000ed4 <HAL_GetTick>
 8002acc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ace:	e009      	b.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ad0:	f7fe fa00 	bl	8000ed4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ade:	d901      	bls.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e01f      	b.n	8002b24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af8:	f7fe f9ec 	bl	8000ed4 <HAL_GetTick>
 8002afc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002afe:	e009      	b.n	8002b14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b00:	f7fe f9e8 	bl	8000ed4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b0e:	d901      	bls.n	8002b14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e007      	b.n	8002b24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b20:	d1ee      	bne.n	8002b00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	420e0040 	.word	0x420e0040
 8002b34:	40007000 	.word	0x40007000
 8002b38:	420e0044 	.word	0x420e0044

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e25b      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d075      	beq.n	8002c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5a:	4ba3      	ldr	r3, [pc, #652]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d00c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4ba0      	ldr	r3, [pc, #640]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d112      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b72:	4b9d      	ldr	r3, [pc, #628]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7e:	d10b      	bne.n	8002b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05b      	beq.n	8002c44 <HAL_RCC_OscConfig+0x108>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d157      	bne.n	8002c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e236      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x74>
 8002ba2:	4b91      	ldr	r3, [pc, #580]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a90      	ldr	r2, [pc, #576]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x98>
 8002bba:	4b8b      	ldr	r3, [pc, #556]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a8a      	ldr	r2, [pc, #552]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a87      	ldr	r2, [pc, #540]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xb0>
 8002bd4:	4b84      	ldr	r3, [pc, #528]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a83      	ldr	r2, [pc, #524]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe f96e 	bl	8000ed4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe f96a 	bl	8000ed4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1fb      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xc0>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f95a 	bl	8000ed4 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe f956 	bl	8000ed4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1e7      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0xe8>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d063      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1bb      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b56      	ldr	r3, [pc, #344]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4952      	ldr	r1, [pc, #328]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	e03a      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b4f      	ldr	r3, [pc, #316]	; (8002dec <HAL_RCC_OscConfig+0x2b0>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe f90f 	bl	8000ed4 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cba:	f7fe f90b 	bl	8000ed4 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e19c      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4940      	ldr	r1, [pc, #256]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_RCC_OscConfig+0x2b0>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f8ee 	bl	8000ed4 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fe f8ea 	bl	8000ed4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e17b      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d030      	beq.n	8002d88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2e:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCC_OscConfig+0x2b4>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe f8ce 	bl	8000ed4 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fe f8ca 	bl	8000ed4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e15b      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x200>
 8002d5a:	e015      	b.n	8002d88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x2b4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fe f8b7 	bl	8000ed4 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6a:	f7fe f8b3 	bl	8000ed4 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e144      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a0 	beq.w	8002ed6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_RCC_OscConfig+0x2b8>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7fe f879 	bl	8000ed4 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e011      	b.n	8002e0a <HAL_RCC_OscConfig+0x2ce>
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	42470000 	.word	0x42470000
 8002df0:	42470e80 	.word	0x42470e80
 8002df4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7fe f86c 	bl	8000ed4 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0fd      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b81      	ldr	r3, [pc, #516]	; (8003010 <HAL_RCC_OscConfig+0x4d4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
 8002e1e:	4b7d      	ldr	r3, [pc, #500]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a7c      	ldr	r2, [pc, #496]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	e01c      	b.n	8002e66 <HAL_RCC_OscConfig+0x32a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x312>
 8002e34:	4b77      	ldr	r3, [pc, #476]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a76      	ldr	r2, [pc, #472]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	4b74      	ldr	r3, [pc, #464]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a73      	ldr	r2, [pc, #460]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e00b      	b.n	8002e66 <HAL_RCC_OscConfig+0x32a>
 8002e4e:	4b71      	ldr	r3, [pc, #452]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a70      	ldr	r2, [pc, #448]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	4b6e      	ldr	r3, [pc, #440]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a6d      	ldr	r2, [pc, #436]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d015      	beq.n	8002e9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fe f831 	bl	8000ed4 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe f82d 	bl	8000ed4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e0bc      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCC_OscConfig+0x33a>
 8002e98:	e014      	b.n	8002ec4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9a:	f7fe f81b 	bl	8000ed4 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fe f817 	bl	8000ed4 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0a6      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb8:	4b56      	ldr	r3, [pc, #344]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b52      	ldr	r3, [pc, #328]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	4a51      	ldr	r2, [pc, #324]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8092 	beq.w	8003004 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee0:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d05c      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d141      	bne.n	8002f78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef4:	4b48      	ldr	r3, [pc, #288]	; (8003018 <HAL_RCC_OscConfig+0x4dc>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fd ffeb 	bl	8000ed4 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f02:	f7fd ffe7 	bl	8000ed4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e078      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f14:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f0      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	019b      	lsls	r3, r3, #6
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	4933      	ldr	r1, [pc, #204]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_RCC_OscConfig+0x4dc>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fd ffc0 	bl	8000ed4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fd ffbc 	bl	8000ed4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e04d      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x41c>
 8002f76:	e045      	b.n	8003004 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <HAL_RCC_OscConfig+0x4dc>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fd ffa9 	bl	8000ed4 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fd ffa5 	bl	8000ed4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e036      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x44a>
 8002fa4:	e02e      	b.n	8003004 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e029      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_RCC_OscConfig+0x4d8>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d11c      	bne.n	8003000 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d115      	bne.n	8003000 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fda:	4013      	ands	r3, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d10d      	bne.n	8003000 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40007000 	.word	0x40007000
 8003014:	40023800 	.word	0x40023800
 8003018:	42470060 	.word	0x42470060

0800301c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0cc      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003030:	4b68      	ldr	r3, [pc, #416]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d90c      	bls.n	8003058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b65      	ldr	r3, [pc, #404]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0b8      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003070:	4b59      	ldr	r3, [pc, #356]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a58      	ldr	r2, [pc, #352]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800307a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003088:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4a52      	ldr	r2, [pc, #328]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003094:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	494d      	ldr	r1, [pc, #308]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d044      	beq.n	800313c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d119      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e07f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d003      	beq.n	80030da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030da:	4b3f      	ldr	r3, [pc, #252]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e06f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ea:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e067      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fa:	4b37      	ldr	r3, [pc, #220]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f023 0203 	bic.w	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4934      	ldr	r1, [pc, #208]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800310c:	f7fd fee2 	bl	8000ed4 <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	e00a      	b.n	800312a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003114:	f7fd fede 	bl	8000ed4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e04f      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312a:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 020c 	and.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	429a      	cmp	r2, r3
 800313a:	d1eb      	bne.n	8003114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d20c      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e032      	b.n	80031ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4916      	ldr	r1, [pc, #88]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	490e      	ldr	r1, [pc, #56]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031a2:	f000 f821 	bl	80031e8 <HAL_RCC_GetSysClockFreq>
 80031a6:	4601      	mov	r1, r0
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	5cd3      	ldrb	r3, [r2, r3]
 80031b6:	fa21 f303 	lsr.w	r3, r1, r3
 80031ba:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd fe42 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023c00 	.word	0x40023c00
 80031d8:	40023800 	.word	0x40023800
 80031dc:	0801360c 	.word	0x0801360c
 80031e0:	20000000 	.word	0x20000000
 80031e4:	20000004 	.word	0x20000004

080031e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	2300      	movs	r3, #0
 80031f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031fe:	4b63      	ldr	r3, [pc, #396]	; (800338c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b04      	cmp	r3, #4
 8003208:	d007      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x32>
 800320a:	2b08      	cmp	r3, #8
 800320c:	d008      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x38>
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 80b4 	bne.w	800337c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003214:	4b5e      	ldr	r3, [pc, #376]	; (8003390 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003216:	60bb      	str	r3, [r7, #8]
       break;
 8003218:	e0b3      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800321a:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800321c:	60bb      	str	r3, [r7, #8]
      break;
 800321e:	e0b0      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003220:	4b5a      	ldr	r3, [pc, #360]	; (800338c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003228:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800322a:	4b58      	ldr	r3, [pc, #352]	; (800338c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d04a      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003236:	4b55      	ldr	r3, [pc, #340]	; (800338c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	099b      	lsrs	r3, r3, #6
 800323c:	f04f 0400 	mov.w	r4, #0
 8003240:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	ea03 0501 	and.w	r5, r3, r1
 800324c:	ea04 0602 	and.w	r6, r4, r2
 8003250:	4629      	mov	r1, r5
 8003252:	4632      	mov	r2, r6
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	f04f 0400 	mov.w	r4, #0
 800325c:	0154      	lsls	r4, r2, #5
 800325e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003262:	014b      	lsls	r3, r1, #5
 8003264:	4619      	mov	r1, r3
 8003266:	4622      	mov	r2, r4
 8003268:	1b49      	subs	r1, r1, r5
 800326a:	eb62 0206 	sbc.w	r2, r2, r6
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	f04f 0400 	mov.w	r4, #0
 8003276:	0194      	lsls	r4, r2, #6
 8003278:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800327c:	018b      	lsls	r3, r1, #6
 800327e:	1a5b      	subs	r3, r3, r1
 8003280:	eb64 0402 	sbc.w	r4, r4, r2
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	00e2      	lsls	r2, r4, #3
 800328e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003292:	00d9      	lsls	r1, r3, #3
 8003294:	460b      	mov	r3, r1
 8003296:	4614      	mov	r4, r2
 8003298:	195b      	adds	r3, r3, r5
 800329a:	eb44 0406 	adc.w	r4, r4, r6
 800329e:	f04f 0100 	mov.w	r1, #0
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	0262      	lsls	r2, r4, #9
 80032a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032ac:	0259      	lsls	r1, r3, #9
 80032ae:	460b      	mov	r3, r1
 80032b0:	4614      	mov	r4, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	4621      	mov	r1, r4
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f04f 0400 	mov.w	r4, #0
 80032bc:	461a      	mov	r2, r3
 80032be:	4623      	mov	r3, r4
 80032c0:	f7fc ffe6 	bl	8000290 <__aeabi_uldivmod>
 80032c4:	4603      	mov	r3, r0
 80032c6:	460c      	mov	r4, r1
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	e049      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032cc:	4b2f      	ldr	r3, [pc, #188]	; (800338c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	ea03 0501 	and.w	r5, r3, r1
 80032e2:	ea04 0602 	and.w	r6, r4, r2
 80032e6:	4629      	mov	r1, r5
 80032e8:	4632      	mov	r2, r6
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	f04f 0400 	mov.w	r4, #0
 80032f2:	0154      	lsls	r4, r2, #5
 80032f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032f8:	014b      	lsls	r3, r1, #5
 80032fa:	4619      	mov	r1, r3
 80032fc:	4622      	mov	r2, r4
 80032fe:	1b49      	subs	r1, r1, r5
 8003300:	eb62 0206 	sbc.w	r2, r2, r6
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	0194      	lsls	r4, r2, #6
 800330e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003312:	018b      	lsls	r3, r1, #6
 8003314:	1a5b      	subs	r3, r3, r1
 8003316:	eb64 0402 	sbc.w	r4, r4, r2
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	00e2      	lsls	r2, r4, #3
 8003324:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003328:	00d9      	lsls	r1, r3, #3
 800332a:	460b      	mov	r3, r1
 800332c:	4614      	mov	r4, r2
 800332e:	195b      	adds	r3, r3, r5
 8003330:	eb44 0406 	adc.w	r4, r4, r6
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	02a2      	lsls	r2, r4, #10
 800333e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003342:	0299      	lsls	r1, r3, #10
 8003344:	460b      	mov	r3, r1
 8003346:	4614      	mov	r4, r2
 8003348:	4618      	mov	r0, r3
 800334a:	4621      	mov	r1, r4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	461a      	mov	r2, r3
 8003354:	4623      	mov	r3, r4
 8003356:	f7fc ff9b 	bl	8000290 <__aeabi_uldivmod>
 800335a:	4603      	mov	r3, r0
 800335c:	460c      	mov	r4, r1
 800335e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	3301      	adds	r3, #1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	60bb      	str	r3, [r7, #8]
      break;
 800337a:	e002      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800337e:	60bb      	str	r3, [r7, #8]
      break;
 8003380:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003382:	68bb      	ldr	r3, [r7, #8]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	00f42400 	.word	0x00f42400
 8003394:	007a1200 	.word	0x007a1200

08003398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <HAL_RCC_GetHCLKFreq+0x14>)
 800339e:	681b      	ldr	r3, [r3, #0]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000000 	.word	0x20000000

080033b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033b4:	f7ff fff0 	bl	8003398 <HAL_RCC_GetHCLKFreq>
 80033b8:	4601      	mov	r1, r0
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	0a9b      	lsrs	r3, r3, #10
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4a03      	ldr	r2, [pc, #12]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c6:	5cd3      	ldrb	r3, [r2, r3]
 80033c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40023800 	.word	0x40023800
 80033d4:	0801361c 	.word	0x0801361c

080033d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80033de:	f000 fbfd 	bl	8003bdc <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80033e2:	4b19      	ldr	r3, [pc, #100]	; (8003448 <MX_LWIP_Init+0x70>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80033e8:	4b18      	ldr	r3, [pc, #96]	; (800344c <MX_LWIP_Init+0x74>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80033ee:	4b18      	ldr	r3, [pc, #96]	; (8003450 <MX_LWIP_Init+0x78>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80033f4:	4b17      	ldr	r3, [pc, #92]	; (8003454 <MX_LWIP_Init+0x7c>)
 80033f6:	9302      	str	r3, [sp, #8]
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <MX_LWIP_Init+0x80>)
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	2300      	movs	r3, #0
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <MX_LWIP_Init+0x78>)
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <MX_LWIP_Init+0x74>)
 8003404:	4910      	ldr	r1, [pc, #64]	; (8003448 <MX_LWIP_Init+0x70>)
 8003406:	4815      	ldr	r0, [pc, #84]	; (800345c <MX_LWIP_Init+0x84>)
 8003408:	f001 f88e 	bl	8004528 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800340c:	4813      	ldr	r0, [pc, #76]	; (800345c <MX_LWIP_Init+0x84>)
 800340e:	f001 fa45 	bl	800489c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <MX_LWIP_Init+0x84>)
 8003414:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <MX_LWIP_Init+0x84>)
 8003426:	f001 fa49 	bl	80048bc <netif_set_up>
 800342a:	e002      	b.n	8003432 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800342c:	480b      	ldr	r0, [pc, #44]	; (800345c <MX_LWIP_Init+0x84>)
 800342e:	f001 fab1 	bl	8004994 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003432:	490b      	ldr	r1, [pc, #44]	; (8003460 <MX_LWIP_Init+0x88>)
 8003434:	4809      	ldr	r0, [pc, #36]	; (800345c <MX_LWIP_Init+0x84>)
 8003436:	f001 fadf 	bl	80049f8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800343a:	4808      	ldr	r0, [pc, #32]	; (800345c <MX_LWIP_Init+0x84>)
 800343c:	f008 fbce 	bl	800bbdc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000310 	.word	0x20000310
 800344c:	20000314 	.word	0x20000314
 8003450:	20000318 	.word	0x20000318
 8003454:	0800f599 	.word	0x0800f599
 8003458:	08003a09 	.word	0x08003a09
 800345c:	200002d8 	.word	0x200002d8
 8003460:	08003a75 	.word	0x08003a75

08003464 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003468:	4803      	ldr	r0, [pc, #12]	; (8003478 <MX_LWIP_Process+0x14>)
 800346a:	f000 faad 	bl	80039c8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800346e:	f007 fb3b 	bl	800aae8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200002d8 	.word	0x200002d8

0800347c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08e      	sub	sp, #56	; 0x38
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a46      	ldr	r2, [pc, #280]	; (80035b4 <HAL_ETH_MspInit+0x138>)
 800349a:	4293      	cmp	r3, r2
 800349c:	f040 8085 	bne.w	80035aa <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80034a0:	2300      	movs	r3, #0
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	4a43      	ldr	r2, [pc, #268]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034ae:	6313      	str	r3, [r2, #48]	; 0x30
 80034b0:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	623b      	str	r3, [r7, #32]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	4a3c      	ldr	r2, [pc, #240]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ca:	6313      	str	r3, [r2, #48]	; 0x30
 80034cc:	4b3a      	ldr	r3, [pc, #232]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	4a35      	ldr	r2, [pc, #212]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034e6:	6313      	str	r3, [r2, #48]	; 0x30
 80034e8:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	4a2e      	ldr	r2, [pc, #184]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	6313      	str	r3, [r2, #48]	; 0x30
 8003504:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 8003536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800353a:	6313      	str	r3, [r2, #48]	; 0x30
 800353c:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_ETH_MspInit+0x13c>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003548:	2332      	movs	r3, #50	; 0x32
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003554:	2303      	movs	r3, #3
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003558:	230b      	movs	r3, #11
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003560:	4619      	mov	r1, r3
 8003562:	4816      	ldr	r0, [pc, #88]	; (80035bc <HAL_ETH_MspInit+0x140>)
 8003564:	f7fe fef0 	bl	8002348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003568:	2386      	movs	r3, #134	; 0x86
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356c:	2302      	movs	r3, #2
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003574:	2303      	movs	r3, #3
 8003576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003578:	230b      	movs	r3, #11
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003580:	4619      	mov	r1, r3
 8003582:	480f      	ldr	r0, [pc, #60]	; (80035c0 <HAL_ETH_MspInit+0x144>)
 8003584:	f7fe fee0 	bl	8002348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003588:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2302      	movs	r3, #2
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003596:	2303      	movs	r3, #3
 8003598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800359a:	230b      	movs	r3, #11
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800359e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a2:	4619      	mov	r1, r3
 80035a4:	4807      	ldr	r0, [pc, #28]	; (80035c4 <HAL_ETH_MspInit+0x148>)
 80035a6:	f7fe fecf 	bl	8002348 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80035aa:	bf00      	nop
 80035ac:	3738      	adds	r7, #56	; 0x38
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40028000 	.word	0x40028000
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020800 	.word	0x40020800
 80035c0:	40020000 	.word	0x40020000
 80035c4:	40021800 	.word	0x40021800

080035c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80035d4:	4b4d      	ldr	r3, [pc, #308]	; (800370c <low_level_init+0x144>)
 80035d6:	4a4e      	ldr	r2, [pc, #312]	; (8003710 <low_level_init+0x148>)
 80035d8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80035da:	4b4c      	ldr	r3, [pc, #304]	; (800370c <low_level_init+0x144>)
 80035dc:	2201      	movs	r2, #1
 80035de:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80035e0:	4b4a      	ldr	r3, [pc, #296]	; (800370c <low_level_init+0x144>)
 80035e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035e6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80035e8:	4b48      	ldr	r3, [pc, #288]	; (800370c <low_level_init+0x144>)
 80035ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ee:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80035f0:	4b46      	ldr	r3, [pc, #280]	; (800370c <low_level_init+0x144>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80035f6:	2300      	movs	r3, #0
 80035f8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80035fe:	23e1      	movs	r3, #225	; 0xe1
 8003600:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x01;
 8003602:	2301      	movs	r3, #1
 8003604:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x23;
 8003606:	2323      	movs	r3, #35	; 0x23
 8003608:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x45;
 800360a:	2345      	movs	r3, #69	; 0x45
 800360c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800360e:	4a3f      	ldr	r2, [pc, #252]	; (800370c <low_level_init+0x144>)
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003616:	4b3d      	ldr	r3, [pc, #244]	; (800370c <low_level_init+0x144>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800361c:	4b3b      	ldr	r3, [pc, #236]	; (800370c <low_level_init+0x144>)
 800361e:	2200      	movs	r2, #0
 8003620:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003622:	4b3a      	ldr	r3, [pc, #232]	; (800370c <low_level_init+0x144>)
 8003624:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003628:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800362a:	4838      	ldr	r0, [pc, #224]	; (800370c <low_level_init+0x144>)
 800362c:	f7fd fd66 	bl	80010fc <HAL_ETH_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003640:	f043 0304 	orr.w	r3, r3, #4
 8003644:	b2da      	uxtb	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800364c:	2304      	movs	r3, #4
 800364e:	4a31      	ldr	r2, [pc, #196]	; (8003714 <low_level_init+0x14c>)
 8003650:	4931      	ldr	r1, [pc, #196]	; (8003718 <low_level_init+0x150>)
 8003652:	482e      	ldr	r0, [pc, #184]	; (800370c <low_level_init+0x144>)
 8003654:	f7fd fef0 	bl	8001438 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003658:	2304      	movs	r3, #4
 800365a:	4a30      	ldr	r2, [pc, #192]	; (800371c <low_level_init+0x154>)
 800365c:	4930      	ldr	r1, [pc, #192]	; (8003720 <low_level_init+0x158>)
 800365e:	482b      	ldr	r0, [pc, #172]	; (800370c <low_level_init+0x144>)
 8003660:	f7fd ff53 	bl	800150a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2206      	movs	r2, #6
 8003668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <low_level_init+0x144>)
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <low_level_init+0x144>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	785a      	ldrb	r2, [r3, #1]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <low_level_init+0x144>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	789a      	ldrb	r2, [r3, #2]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003690:	4b1e      	ldr	r3, [pc, #120]	; (800370c <low_level_init+0x144>)
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	78da      	ldrb	r2, [r3, #3]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <low_level_init+0x144>)
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	791a      	ldrb	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80036a8:	4b18      	ldr	r3, [pc, #96]	; (800370c <low_level_init+0x144>)
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	795a      	ldrb	r2, [r3, #5]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036c2:	f043 030a 	orr.w	r3, r3, #10
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80036ce:	480f      	ldr	r0, [pc, #60]	; (800370c <low_level_init+0x144>)
 80036d0:	f7fe f9c4 	bl	8001a5c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	461a      	mov	r2, r3
 80036da:	211d      	movs	r1, #29
 80036dc:	480b      	ldr	r0, [pc, #44]	; (800370c <low_level_init+0x144>)
 80036de:	f7fe f8ef 	bl	80018c0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f043 030b 	orr.w	r3, r3, #11
 80036e8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	461a      	mov	r2, r3
 80036ee:	211d      	movs	r1, #29
 80036f0:	4806      	ldr	r0, [pc, #24]	; (800370c <low_level_init+0x144>)
 80036f2:	f7fe f94d 	bl	8001990 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80036f6:	f107 0310 	add.w	r3, r7, #16
 80036fa:	461a      	mov	r2, r3
 80036fc:	211d      	movs	r1, #29
 80036fe:	4803      	ldr	r0, [pc, #12]	; (800370c <low_level_init+0x144>)
 8003700:	f7fe f8de 	bl	80018c0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003704:	bf00      	nop
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20001bec 	.word	0x20001bec
 8003710:	40028000 	.word	0x40028000
 8003714:	20001c34 	.word	0x20001c34
 8003718:	2000031c 	.word	0x2000031c
 800371c:	2000039c 	.word	0x2000039c
 8003720:	20001b6c 	.word	0x20001b6c

08003724 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08a      	sub	sp, #40	; 0x28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800372e:	4b4b      	ldr	r3, [pc, #300]	; (800385c <low_level_output+0x138>)
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003746:	4b45      	ldr	r3, [pc, #276]	; (800385c <low_level_output+0x138>)
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	e05a      	b.n	800380c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	da03      	bge.n	8003766 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800375e:	23f8      	movs	r3, #248	; 0xf8
 8003760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003764:	e05c      	b.n	8003820 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	895b      	ldrh	r3, [r3, #10]
 800376a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003770:	e02f      	b.n	80037d2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	18d0      	adds	r0, r2, r3
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	18d1      	adds	r1, r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003786:	3304      	adds	r3, #4
 8003788:	461a      	mov	r2, r3
 800378a:	f00c f940 	bl	800fa0e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	da03      	bge.n	80037a4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800379c:	23f8      	movs	r3, #248	; 0xf8
 800379e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80037a2:	e03d      	b.n	8003820 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4413      	add	r3, r2
 80037b0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80037b4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80037c0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80037cc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80037dc:	4293      	cmp	r3, r2
 80037de:	d8c8      	bhi.n	8003772 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	18d0      	adds	r0, r2, r3
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4413      	add	r3, r2
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4619      	mov	r1, r3
 80037f2:	f00c f90c 	bl	800fa0e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1a1      	bne.n	8003756 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	4811      	ldr	r0, [pc, #68]	; (800385c <low_level_output+0x138>)
 8003816:	f7fd fee5 	bl	80015e4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <low_level_output+0x138>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003828:	3314      	adds	r3, #20
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <low_level_output+0x138>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800383c:	3314      	adds	r3, #20
 800383e:	2220      	movs	r2, #32
 8003840:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <low_level_output+0x138>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384a:	3304      	adds	r3, #4
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003850:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003854:	4618      	mov	r0, r3
 8003856:	3728      	adds	r7, #40	; 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20001bec 	.word	0x20001bec

08003860 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	; 0x30
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800386c:	2300      	movs	r3, #0
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003884:	484f      	ldr	r0, [pc, #316]	; (80039c4 <low_level_input+0x164>)
 8003886:	f7fd ff97 	bl	80017b8 <HAL_ETH_GetReceivedFrame>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <low_level_input+0x34>

    return NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	e092      	b.n	80039ba <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003894:	4b4b      	ldr	r3, [pc, #300]	; (80039c4 <low_level_input+0x164>)
 8003896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003898:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800389a:	4b4a      	ldr	r3, [pc, #296]	; (80039c4 <low_level_input+0x164>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80038a0:	89fb      	ldrh	r3, [r7, #14]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80038a6:	89fb      	ldrh	r3, [r7, #14]
 80038a8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80038ac:	4619      	mov	r1, r3
 80038ae:	2000      	movs	r0, #0
 80038b0:	f001 f93e 	bl	8004b30 <pbuf_alloc>
 80038b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d04b      	beq.n	8003954 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80038bc:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <low_level_input+0x164>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ca:	e040      	b.n	800394e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	895b      	ldrh	r3, [r3, #10]
 80038d0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80038d6:	e021      	b.n	800391c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	18d0      	adds	r0, r2, r3
 80038e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	18d1      	adds	r1, r2, r3
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80038ec:	3304      	adds	r3, #4
 80038ee:	461a      	mov	r2, r3
 80038f0:	f00c f88d 	bl	800fa0e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4413      	add	r3, r2
 8003906:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800390a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003916:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003926:	4293      	cmp	r3, r2
 8003928:	d8d6      	bhi.n	80038d8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	18d0      	adds	r0, r2, r3
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	4413      	add	r3, r2
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4619      	mov	r1, r3
 800393c:	f00c f867 	bl	800fa0e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4413      	add	r3, r2
 8003946:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1bb      	bne.n	80038cc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <low_level_input+0x164>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e00b      	b.n	8003978 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	3301      	adds	r3, #1
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <low_level_input+0x164>)
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d3ee      	bcc.n	8003960 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <low_level_input+0x164>)
 8003984:	2200      	movs	r2, #0
 8003986:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <low_level_input+0x164>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003990:	3314      	adds	r3, #20
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <low_level_input+0x164>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a4:	3314      	adds	r3, #20
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <low_level_input+0x164>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b2:	3308      	adds	r3, #8
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3730      	adds	r7, #48	; 0x30
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20001bec 	.word	0x20001bec

080039c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff45 	bl	8003860 <low_level_input>
 80039d6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	4798      	blx	r3
 80039e8:	4603      	mov	r3, r0
 80039ea:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80039ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d006      	beq.n	8003a02 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f001 fb7b 	bl	80050f0 <pbuf_free>
    p = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e000      	b.n	8003a02 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003a00:	bf00      	nop
  }
}
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <ethernetif_init+0x1c>
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <ethernetif_init+0x48>)
 8003a18:	f240 2207 	movw	r2, #519	; 0x207
 8003a1c:	490d      	ldr	r1, [pc, #52]	; (8003a54 <ethernetif_init+0x4c>)
 8003a1e:	480e      	ldr	r0, [pc, #56]	; (8003a58 <ethernetif_init+0x50>)
 8003a20:	f00c f808 	bl	800fa34 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2273      	movs	r2, #115	; 0x73
 8003a28:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2274      	movs	r2, #116	; 0x74
 8003a30:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <ethernetif_init+0x54>)
 8003a38:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <ethernetif_init+0x58>)
 8003a3e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff fdc1 	bl	80035c8 <low_level_init>

  return ERR_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	0801088c 	.word	0x0801088c
 8003a54:	080108a8 	.word	0x080108a8
 8003a58:	080108b8 	.word	0x080108b8
 8003a5c:	0800da2d 	.word	0x0800da2d
 8003a60:	08003725 	.word	0x08003725

08003a64 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003a68:	f7fd fa34 	bl	8000ed4 <HAL_GetTick>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d05d      	beq.n	8003b52 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003a96:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d03f      	beq.n	8003b1e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4830      	ldr	r0, [pc, #192]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003aa6:	f7fd ff73 	bl	8001990 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd fa13 	bl	8000ed4 <HAL_GetTick>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2101      	movs	r1, #1
 8003aba:	482b      	ldr	r0, [pc, #172]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003abc:	f7fd ff00 	bl	80018c0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003ac0:	f7fd fa08 	bl	8000ed4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ace:	d828      	bhi.n	8003b22 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0eb      	beq.n	8003ab2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	461a      	mov	r2, r3
 8003ae0:	211f      	movs	r1, #31
 8003ae2:	4821      	ldr	r0, [pc, #132]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003ae4:	f7fd feec 	bl	80018c0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	e002      	b.n	8003b02 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003afc:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003b0c:	4b16      	ldr	r3, [pc, #88]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
 8003b12:	e016      	b.n	8003b42 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	e011      	b.n	8003b42 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <ethernetif_update_config+0xb0>
          goto error;
 8003b22:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003b34:	4313      	orrs	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	480a      	ldr	r0, [pc, #40]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003b3e:	f7fd ff27 	bl	8001990 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003b42:	2100      	movs	r1, #0
 8003b44:	4808      	ldr	r0, [pc, #32]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003b46:	f7fd ffe7 	bl	8001b18 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003b4a:	4807      	ldr	r0, [pc, #28]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003b4c:	f7fd ff86 	bl	8001a5c <HAL_ETH_Start>
 8003b50:	e002      	b.n	8003b58 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003b52:	4805      	ldr	r0, [pc, #20]	; (8003b68 <ethernetif_update_config+0xf4>)
 8003b54:	f7fd ffb1 	bl	8001aba <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f807 	bl	8003b6c <ethernetif_notify_conn_changed>
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20001bec 	.word	0x20001bec

08003b6c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	b21a      	sxth	r2, r3
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	b21b      	sxth	r3, r3
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	b21b      	sxth	r3, r3
 8003b9c:	b29b      	uxth	r3, r3
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	061a      	lsls	r2, r3, #24
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	4313      	orrs	r3, r2
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003be6:	f000 f8d5 	bl	8003d94 <mem_init>
  memp_init();
 8003bea:	f000 fbdb 	bl	80043a4 <memp_init>
  pbuf_init();
  netif_init();
 8003bee:	f000 fc93 	bl	8004518 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003bf2:	f006 ffbb 	bl	800ab6c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003bf6:	f001 fd19 	bl	800562c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003bfa:	f006 ff2f 	bl	800aa5c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <ptr_to_mem+0x20>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	4413      	add	r3, r2
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	2000009c 	.word	0x2000009c

08003c2c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <mem_to_ptr+0x20>)
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	b29b      	uxth	r3, r3
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	2000009c 	.word	0x2000009c

08003c50 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003c58:	4b45      	ldr	r3, [pc, #276]	; (8003d70 <plug_holes+0x120>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d206      	bcs.n	8003c70 <plug_holes+0x20>
 8003c62:	4b44      	ldr	r3, [pc, #272]	; (8003d74 <plug_holes+0x124>)
 8003c64:	f240 12df 	movw	r2, #479	; 0x1df
 8003c68:	4943      	ldr	r1, [pc, #268]	; (8003d78 <plug_holes+0x128>)
 8003c6a:	4844      	ldr	r0, [pc, #272]	; (8003d7c <plug_holes+0x12c>)
 8003c6c:	f00b fee2 	bl	800fa34 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003c70:	4b43      	ldr	r3, [pc, #268]	; (8003d80 <plug_holes+0x130>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d306      	bcc.n	8003c88 <plug_holes+0x38>
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <plug_holes+0x124>)
 8003c7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003c80:	4940      	ldr	r1, [pc, #256]	; (8003d84 <plug_holes+0x134>)
 8003c82:	483e      	ldr	r0, [pc, #248]	; (8003d7c <plug_holes+0x12c>)
 8003c84:	f00b fed6 	bl	800fa34 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	791b      	ldrb	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d006      	beq.n	8003c9e <plug_holes+0x4e>
 8003c90:	4b38      	ldr	r3, [pc, #224]	; (8003d74 <plug_holes+0x124>)
 8003c92:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003c96:	493c      	ldr	r1, [pc, #240]	; (8003d88 <plug_holes+0x138>)
 8003c98:	4838      	ldr	r0, [pc, #224]	; (8003d7c <plug_holes+0x12c>)
 8003c9a:	f00b fecb 	bl	800fa34 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ca6:	d906      	bls.n	8003cb6 <plug_holes+0x66>
 8003ca8:	4b32      	ldr	r3, [pc, #200]	; (8003d74 <plug_holes+0x124>)
 8003caa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003cae:	4937      	ldr	r1, [pc, #220]	; (8003d8c <plug_holes+0x13c>)
 8003cb0:	4832      	ldr	r0, [pc, #200]	; (8003d7c <plug_holes+0x12c>)
 8003cb2:	f00b febf 	bl	800fa34 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff ffa4 	bl	8003c08 <ptr_to_mem>
 8003cc0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d024      	beq.n	8003d14 <plug_holes+0xc4>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	791b      	ldrb	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d120      	bne.n	8003d14 <plug_holes+0xc4>
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <plug_holes+0x130>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d01b      	beq.n	8003d14 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <plug_holes+0x140>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d102      	bne.n	8003cec <plug_holes+0x9c>
      lfree = mem;
 8003ce6:	4a2a      	ldr	r2, [pc, #168]	; (8003d90 <plug_holes+0x140>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003cfc:	d00a      	beq.n	8003d14 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ff80 	bl	8003c08 <ptr_to_mem>
 8003d08:	4604      	mov	r4, r0
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ff8e 	bl	8003c2c <mem_to_ptr>
 8003d10:	4603      	mov	r3, r0
 8003d12:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	885b      	ldrh	r3, [r3, #2]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff75 	bl	8003c08 <ptr_to_mem>
 8003d1e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d01f      	beq.n	8003d68 <plug_holes+0x118>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	791b      	ldrb	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11b      	bne.n	8003d68 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <plug_holes+0x140>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d102      	bne.n	8003d40 <plug_holes+0xf0>
      lfree = pmem;
 8003d3a:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <plug_holes+0x140>)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	881a      	ldrh	r2, [r3, #0]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003d50:	d00a      	beq.n	8003d68 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ff56 	bl	8003c08 <ptr_to_mem>
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	68b8      	ldr	r0, [r7, #8]
 8003d60:	f7ff ff64 	bl	8003c2c <mem_to_ptr>
 8003d64:	4603      	mov	r3, r0
 8003d66:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd90      	pop	{r4, r7, pc}
 8003d70:	2000009c 	.word	0x2000009c
 8003d74:	080108e0 	.word	0x080108e0
 8003d78:	08010910 	.word	0x08010910
 8003d7c:	08010928 	.word	0x08010928
 8003d80:	200000a0 	.word	0x200000a0
 8003d84:	08010950 	.word	0x08010950
 8003d88:	0801096c 	.word	0x0801096c
 8003d8c:	08010988 	.word	0x08010988
 8003d90:	200000a4 	.word	0x200000a4

08003d94 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003d9a:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <mem_init+0x68>)
 8003d9c:	3303      	adds	r3, #3
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	461a      	mov	r2, r3
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <mem_init+0x6c>)
 8003da6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <mem_init+0x6c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003db4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003dc2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8003dc6:	f7ff ff1f 	bl	8003c08 <ptr_to_mem>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <mem_init+0x70>)
 8003dce:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <mem_init+0x70>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <mem_init+0x70>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003de0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <mem_init+0x70>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003dea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <mem_init+0x6c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <mem_init+0x74>)
 8003df2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	2000341c 	.word	0x2000341c
 8003e00:	2000009c 	.word	0x2000009c
 8003e04:	200000a0 	.word	0x200000a0
 8003e08:	200000a4 	.word	0x200000a4

08003e0c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff ff09 	bl	8003c2c <mem_to_ptr>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fef0 	bl	8003c08 <ptr_to_mem>
 8003e28:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	885b      	ldrh	r3, [r3, #2]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff feea 	bl	8003c08 <ptr_to_mem>
 8003e34:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e3e:	d818      	bhi.n	8003e72 <mem_link_valid+0x66>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	885b      	ldrh	r3, [r3, #2]
 8003e44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e48:	d813      	bhi.n	8003e72 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003e4e:	8afa      	ldrh	r2, [r7, #22]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d004      	beq.n	8003e5e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	8afa      	ldrh	r2, [r7, #22]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d109      	bne.n	8003e72 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003e5e:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <mem_link_valid+0x74>)
 8003e60:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d006      	beq.n	8003e76 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	885b      	ldrh	r3, [r3, #2]
 8003e6c:	8afa      	ldrh	r2, [r7, #22]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <mem_link_valid+0x6a>
    return 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <mem_link_valid+0x6c>
  }
  return 1;
 8003e76:	2301      	movs	r3, #1
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	200000a0 	.word	0x200000a0

08003e84 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d04c      	beq.n	8003f2c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003e9c:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <mem_free+0xb0>)
 8003e9e:	f240 2273 	movw	r2, #627	; 0x273
 8003ea2:	4925      	ldr	r1, [pc, #148]	; (8003f38 <mem_free+0xb4>)
 8003ea4:	4825      	ldr	r0, [pc, #148]	; (8003f3c <mem_free+0xb8>)
 8003ea6:	f00b fdc5 	bl	800fa34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003eaa:	e040      	b.n	8003f2e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b08      	subs	r3, #8
 8003eb0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003eb2:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <mem_free+0xbc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d306      	bcc.n	8003eca <mem_free+0x46>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f103 020c 	add.w	r2, r3, #12
 8003ec2:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <mem_free+0xc0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d907      	bls.n	8003eda <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003eca:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <mem_free+0xb0>)
 8003ecc:	f240 227f 	movw	r2, #639	; 0x27f
 8003ed0:	491d      	ldr	r1, [pc, #116]	; (8003f48 <mem_free+0xc4>)
 8003ed2:	481a      	ldr	r0, [pc, #104]	; (8003f3c <mem_free+0xb8>)
 8003ed4:	f00b fdae 	bl	800fa34 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003ed8:	e029      	b.n	8003f2e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	791b      	ldrb	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d107      	bne.n	8003ef2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003ee2:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <mem_free+0xb0>)
 8003ee4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003ee8:	4918      	ldr	r1, [pc, #96]	; (8003f4c <mem_free+0xc8>)
 8003eea:	4814      	ldr	r0, [pc, #80]	; (8003f3c <mem_free+0xb8>)
 8003eec:	f00b fda2 	bl	800fa34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003ef0:	e01d      	b.n	8003f2e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff ff8a 	bl	8003e0c <mem_link_valid>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d107      	bne.n	8003f0e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <mem_free+0xb0>)
 8003f00:	f240 2295 	movw	r2, #661	; 0x295
 8003f04:	4912      	ldr	r1, [pc, #72]	; (8003f50 <mem_free+0xcc>)
 8003f06:	480d      	ldr	r0, [pc, #52]	; (8003f3c <mem_free+0xb8>)
 8003f08:	f00b fd94 	bl	800fa34 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003f0c:	e00f      	b.n	8003f2e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <mem_free+0xd0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d202      	bcs.n	8003f24 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003f1e:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <mem_free+0xd0>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff fe93 	bl	8003c50 <plug_holes>
 8003f2a:	e000      	b.n	8003f2e <mem_free+0xaa>
    return;
 8003f2c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	080108e0 	.word	0x080108e0
 8003f38:	080109b4 	.word	0x080109b4
 8003f3c:	08010928 	.word	0x08010928
 8003f40:	2000009c 	.word	0x2000009c
 8003f44:	200000a0 	.word	0x200000a0
 8003f48:	080109d8 	.word	0x080109d8
 8003f4c:	080109f4 	.word	0x080109f4
 8003f50:	08010a1c 	.word	0x08010a1c
 8003f54:	200000a4 	.word	0x200000a4

08003f58 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003f64:	887b      	ldrh	r3, [r7, #2]
 8003f66:	3303      	adds	r3, #3
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003f70:	8bfb      	ldrh	r3, [r7, #30]
 8003f72:	2b0b      	cmp	r3, #11
 8003f74:	d801      	bhi.n	8003f7a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003f76:	230c      	movs	r3, #12
 8003f78:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003f7a:	8bfb      	ldrh	r3, [r7, #30]
 8003f7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f80:	d803      	bhi.n	8003f8a <mem_trim+0x32>
 8003f82:	8bfa      	ldrh	r2, [r7, #30]
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d201      	bcs.n	8003f8e <mem_trim+0x36>
    return NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e0cc      	b.n	8004128 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003f8e:	4b68      	ldr	r3, [pc, #416]	; (8004130 <mem_trim+0x1d8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d304      	bcc.n	8003fa2 <mem_trim+0x4a>
 8003f98:	4b66      	ldr	r3, [pc, #408]	; (8004134 <mem_trim+0x1dc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d306      	bcc.n	8003fb0 <mem_trim+0x58>
 8003fa2:	4b65      	ldr	r3, [pc, #404]	; (8004138 <mem_trim+0x1e0>)
 8003fa4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8003fa8:	4964      	ldr	r1, [pc, #400]	; (800413c <mem_trim+0x1e4>)
 8003faa:	4865      	ldr	r0, [pc, #404]	; (8004140 <mem_trim+0x1e8>)
 8003fac:	f00b fd42 	bl	800fa34 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003fb0:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <mem_trim+0x1d8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d304      	bcc.n	8003fc4 <mem_trim+0x6c>
 8003fba:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <mem_trim+0x1dc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d301      	bcc.n	8003fc8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	e0af      	b.n	8004128 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3b08      	subs	r3, #8
 8003fcc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003fce:	69b8      	ldr	r0, [r7, #24]
 8003fd0:	f7ff fe2c 	bl	8003c2c <mem_to_ptr>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	881a      	ldrh	r2, [r3, #0]
 8003fdc:	8afb      	ldrh	r3, [r7, #22]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b08      	subs	r3, #8
 8003fe4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003fe6:	8bfa      	ldrh	r2, [r7, #30]
 8003fe8:	8abb      	ldrh	r3, [r7, #20]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d906      	bls.n	8003ffc <mem_trim+0xa4>
 8003fee:	4b52      	ldr	r3, [pc, #328]	; (8004138 <mem_trim+0x1e0>)
 8003ff0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003ff4:	4953      	ldr	r1, [pc, #332]	; (8004144 <mem_trim+0x1ec>)
 8003ff6:	4852      	ldr	r0, [pc, #328]	; (8004140 <mem_trim+0x1e8>)
 8003ff8:	f00b fd1c 	bl	800fa34 <iprintf>
  if (newsize > size) {
 8003ffc:	8bfa      	ldrh	r2, [r7, #30]
 8003ffe:	8abb      	ldrh	r3, [r7, #20]
 8004000:	429a      	cmp	r2, r3
 8004002:	d901      	bls.n	8004008 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004004:	2300      	movs	r3, #0
 8004006:	e08f      	b.n	8004128 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004008:	8bfa      	ldrh	r2, [r7, #30]
 800400a:	8abb      	ldrh	r3, [r7, #20]
 800400c:	429a      	cmp	r2, r3
 800400e:	d101      	bne.n	8004014 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	e089      	b.n	8004128 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fdf5 	bl	8003c08 <ptr_to_mem>
 800401e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	791b      	ldrb	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d13f      	bne.n	80040a8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004030:	d106      	bne.n	8004040 <mem_trim+0xe8>
 8004032:	4b41      	ldr	r3, [pc, #260]	; (8004138 <mem_trim+0x1e0>)
 8004034:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004038:	4943      	ldr	r1, [pc, #268]	; (8004148 <mem_trim+0x1f0>)
 800403a:	4841      	ldr	r0, [pc, #260]	; (8004140 <mem_trim+0x1e8>)
 800403c:	f00b fcfa 	bl	800fa34 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004046:	8afa      	ldrh	r2, [r7, #22]
 8004048:	8bfb      	ldrh	r3, [r7, #30]
 800404a:	4413      	add	r3, r2
 800404c:	b29b      	uxth	r3, r3
 800404e:	3308      	adds	r3, #8
 8004050:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004052:	4b3e      	ldr	r3, [pc, #248]	; (800414c <mem_trim+0x1f4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	429a      	cmp	r2, r3
 800405a:	d106      	bne.n	800406a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800405c:	89fb      	ldrh	r3, [r7, #14]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fdd2 	bl	8003c08 <ptr_to_mem>
 8004064:	4602      	mov	r2, r0
 8004066:	4b39      	ldr	r3, [pc, #228]	; (800414c <mem_trim+0x1f4>)
 8004068:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800406a:	89fb      	ldrh	r3, [r7, #14]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fdcb 	bl	8003c08 <ptr_to_mem>
 8004072:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2200      	movs	r2, #0
 8004078:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	89ba      	ldrh	r2, [r7, #12]
 800407e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	8afa      	ldrh	r2, [r7, #22]
 8004084:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	89fa      	ldrh	r2, [r7, #14]
 800408a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004094:	d047      	beq.n	8004126 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fdb4 	bl	8003c08 <ptr_to_mem>
 80040a0:	4602      	mov	r2, r0
 80040a2:	89fb      	ldrh	r3, [r7, #14]
 80040a4:	8053      	strh	r3, [r2, #2]
 80040a6:	e03e      	b.n	8004126 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80040a8:	8bfb      	ldrh	r3, [r7, #30]
 80040aa:	f103 0214 	add.w	r2, r3, #20
 80040ae:	8abb      	ldrh	r3, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d838      	bhi.n	8004126 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80040b4:	8afa      	ldrh	r2, [r7, #22]
 80040b6:	8bfb      	ldrh	r3, [r7, #30]
 80040b8:	4413      	add	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3308      	adds	r3, #8
 80040be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80040c8:	d106      	bne.n	80040d8 <mem_trim+0x180>
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <mem_trim+0x1e0>)
 80040cc:	f240 3216 	movw	r2, #790	; 0x316
 80040d0:	491d      	ldr	r1, [pc, #116]	; (8004148 <mem_trim+0x1f0>)
 80040d2:	481b      	ldr	r0, [pc, #108]	; (8004140 <mem_trim+0x1e8>)
 80040d4:	f00b fcae 	bl	800fa34 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80040d8:	89fb      	ldrh	r3, [r7, #14]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fd94 	bl	8003c08 <ptr_to_mem>
 80040e0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <mem_trim+0x1f4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d202      	bcs.n	80040f2 <mem_trim+0x19a>
      lfree = mem2;
 80040ec:	4a17      	ldr	r2, [pc, #92]	; (800414c <mem_trim+0x1f4>)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2200      	movs	r2, #0
 80040f6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	881a      	ldrh	r2, [r3, #0]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	8afa      	ldrh	r2, [r7, #22]
 8004104:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	89fa      	ldrh	r2, [r7, #14]
 800410a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004114:	d007      	beq.n	8004126 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fd74 	bl	8003c08 <ptr_to_mem>
 8004120:	4602      	mov	r2, r0
 8004122:	89fb      	ldrh	r3, [r7, #14]
 8004124:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004126:	687b      	ldr	r3, [r7, #4]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	2000009c 	.word	0x2000009c
 8004134:	200000a0 	.word	0x200000a0
 8004138:	080108e0 	.word	0x080108e0
 800413c:	08010a50 	.word	0x08010a50
 8004140:	08010928 	.word	0x08010928
 8004144:	08010a68 	.word	0x08010a68
 8004148:	08010a88 	.word	0x08010a88
 800414c:	200000a4 	.word	0x200000a4

08004150 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <mem_malloc+0x14>
    return NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	e0d9      	b.n	8004318 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	3303      	adds	r3, #3
 8004168:	b29b      	uxth	r3, r3
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004170:	8bbb      	ldrh	r3, [r7, #28]
 8004172:	2b0b      	cmp	r3, #11
 8004174:	d801      	bhi.n	800417a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004176:	230c      	movs	r3, #12
 8004178:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800417a:	8bbb      	ldrh	r3, [r7, #28]
 800417c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004180:	d803      	bhi.n	800418a <mem_malloc+0x3a>
 8004182:	8bba      	ldrh	r2, [r7, #28]
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	429a      	cmp	r2, r3
 8004188:	d201      	bcs.n	800418e <mem_malloc+0x3e>
    return NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	e0c4      	b.n	8004318 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800418e:	4b64      	ldr	r3, [pc, #400]	; (8004320 <mem_malloc+0x1d0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fd4a 	bl	8003c2c <mem_to_ptr>
 8004198:	4603      	mov	r3, r0
 800419a:	83fb      	strh	r3, [r7, #30]
 800419c:	e0b4      	b.n	8004308 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800419e:	8bfb      	ldrh	r3, [r7, #30]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fd31 	bl	8003c08 <ptr_to_mem>
 80041a6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	791b      	ldrb	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f040 80a4 	bne.w	80042fa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	8bfb      	ldrh	r3, [r7, #30]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f1a3 0208 	sub.w	r2, r3, #8
 80041c0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80041c2:	429a      	cmp	r2, r3
 80041c4:	f0c0 8099 	bcc.w	80042fa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	8bfb      	ldrh	r3, [r7, #30]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f1a3 0208 	sub.w	r2, r3, #8
 80041d6:	8bbb      	ldrh	r3, [r7, #28]
 80041d8:	3314      	adds	r3, #20
 80041da:	429a      	cmp	r2, r3
 80041dc:	d333      	bcc.n	8004246 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80041de:	8bfa      	ldrh	r2, [r7, #30]
 80041e0:	8bbb      	ldrh	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3308      	adds	r3, #8
 80041e8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80041ea:	8a7b      	ldrh	r3, [r7, #18]
 80041ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80041f0:	d106      	bne.n	8004200 <mem_malloc+0xb0>
 80041f2:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <mem_malloc+0x1d4>)
 80041f4:	f240 3287 	movw	r2, #903	; 0x387
 80041f8:	494b      	ldr	r1, [pc, #300]	; (8004328 <mem_malloc+0x1d8>)
 80041fa:	484c      	ldr	r0, [pc, #304]	; (800432c <mem_malloc+0x1dc>)
 80041fc:	f00b fc1a 	bl	800fa34 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004200:	8a7b      	ldrh	r3, [r7, #18]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fd00 	bl	8003c08 <ptr_to_mem>
 8004208:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	881a      	ldrh	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8bfa      	ldrh	r2, [r7, #30]
 800421c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	8a7a      	ldrh	r2, [r7, #18]
 8004222:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2201      	movs	r2, #1
 8004228:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004232:	d00b      	beq.n	800424c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fce5 	bl	8003c08 <ptr_to_mem>
 800423e:	4602      	mov	r2, r0
 8004240:	8a7b      	ldrh	r3, [r7, #18]
 8004242:	8053      	strh	r3, [r2, #2]
 8004244:	e002      	b.n	800424c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2201      	movs	r2, #1
 800424a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800424c:	4b34      	ldr	r3, [pc, #208]	; (8004320 <mem_malloc+0x1d0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	429a      	cmp	r2, r3
 8004254:	d127      	bne.n	80042a6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004256:	4b32      	ldr	r3, [pc, #200]	; (8004320 <mem_malloc+0x1d0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800425c:	e005      	b.n	800426a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fcd0 	bl	8003c08 <ptr_to_mem>
 8004268:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	791b      	ldrb	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <mem_malloc+0x12c>
 8004272:	4b2f      	ldr	r3, [pc, #188]	; (8004330 <mem_malloc+0x1e0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	429a      	cmp	r2, r3
 800427a:	d1f0      	bne.n	800425e <mem_malloc+0x10e>
          }
          lfree = cur;
 800427c:	4a28      	ldr	r2, [pc, #160]	; (8004320 <mem_malloc+0x1d0>)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004282:	4b27      	ldr	r3, [pc, #156]	; (8004320 <mem_malloc+0x1d0>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b2a      	ldr	r3, [pc, #168]	; (8004330 <mem_malloc+0x1e0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d00b      	beq.n	80042a6 <mem_malloc+0x156>
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <mem_malloc+0x1d0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	791b      	ldrb	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <mem_malloc+0x156>
 8004298:	4b22      	ldr	r3, [pc, #136]	; (8004324 <mem_malloc+0x1d4>)
 800429a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800429e:	4925      	ldr	r1, [pc, #148]	; (8004334 <mem_malloc+0x1e4>)
 80042a0:	4822      	ldr	r0, [pc, #136]	; (800432c <mem_malloc+0x1dc>)
 80042a2:	f00b fbc7 	bl	800fa34 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80042a6:	8bba      	ldrh	r2, [r7, #28]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	4413      	add	r3, r2
 80042ac:	3308      	adds	r3, #8
 80042ae:	4a20      	ldr	r2, [pc, #128]	; (8004330 <mem_malloc+0x1e0>)
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d906      	bls.n	80042c4 <mem_malloc+0x174>
 80042b6:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <mem_malloc+0x1d4>)
 80042b8:	f240 32ba 	movw	r2, #954	; 0x3ba
 80042bc:	491e      	ldr	r1, [pc, #120]	; (8004338 <mem_malloc+0x1e8>)
 80042be:	481b      	ldr	r0, [pc, #108]	; (800432c <mem_malloc+0x1dc>)
 80042c0:	f00b fbb8 	bl	800fa34 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d006      	beq.n	80042dc <mem_malloc+0x18c>
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <mem_malloc+0x1d4>)
 80042d0:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80042d4:	4919      	ldr	r1, [pc, #100]	; (800433c <mem_malloc+0x1ec>)
 80042d6:	4815      	ldr	r0, [pc, #84]	; (800432c <mem_malloc+0x1dc>)
 80042d8:	f00b fbac 	bl	800fa34 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d006      	beq.n	80042f4 <mem_malloc+0x1a4>
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <mem_malloc+0x1d4>)
 80042e8:	f240 32be 	movw	r2, #958	; 0x3be
 80042ec:	4914      	ldr	r1, [pc, #80]	; (8004340 <mem_malloc+0x1f0>)
 80042ee:	480f      	ldr	r0, [pc, #60]	; (800432c <mem_malloc+0x1dc>)
 80042f0:	f00b fba0 	bl	800fa34 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3308      	adds	r3, #8
 80042f8:	e00e      	b.n	8004318 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80042fa:	8bfb      	ldrh	r3, [r7, #30]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fc83 	bl	8003c08 <ptr_to_mem>
 8004302:	4603      	mov	r3, r0
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004308:	8bfa      	ldrh	r2, [r7, #30]
 800430a:	8bbb      	ldrh	r3, [r7, #28]
 800430c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004310:	429a      	cmp	r2, r3
 8004312:	f4ff af44 	bcc.w	800419e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	200000a4 	.word	0x200000a4
 8004324:	080108e0 	.word	0x080108e0
 8004328:	08010a88 	.word	0x08010a88
 800432c:	08010928 	.word	0x08010928
 8004330:	200000a0 	.word	0x200000a0
 8004334:	08010a9c 	.word	0x08010a9c
 8004338:	08010ab8 	.word	0x08010ab8
 800433c:	08010ae8 	.word	0x08010ae8
 8004340:	08010b18 	.word	0x08010b18

08004344 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	3303      	adds	r3, #3
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e011      	b.n	800438a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4413      	add	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3301      	adds	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	885b      	ldrh	r3, [r3, #2]
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4293      	cmp	r3, r2
 8004394:	dbe7      	blt.n	8004366 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80043aa:	2300      	movs	r3, #0
 80043ac:	80fb      	strh	r3, [r7, #6]
 80043ae:	e009      	b.n	80043c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <memp_init+0x30>)
 80043b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff ffc3 	bl	8004344 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	3301      	adds	r3, #1
 80043c2:	80fb      	strh	r3, [r7, #6]
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d9f2      	bls.n	80043b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	08013690 	.word	0x08013690

080043d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	6812      	ldr	r2, [r2, #0]
 80043f6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d006      	beq.n	8004410 <do_memp_malloc_pool+0x38>
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <do_memp_malloc_pool+0x48>)
 8004404:	f240 1219 	movw	r2, #281	; 0x119
 8004408:	4906      	ldr	r1, [pc, #24]	; (8004424 <do_memp_malloc_pool+0x4c>)
 800440a:	4807      	ldr	r0, [pc, #28]	; (8004428 <do_memp_malloc_pool+0x50>)
 800440c:	f00b fb12 	bl	800fa34 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	e000      	b.n	8004416 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	08010b3c 	.word	0x08010b3c
 8004424:	08010b6c 	.word	0x08010b6c
 8004428:	08010b90 	.word	0x08010b90

0800442c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d908      	bls.n	800444e <memp_malloc+0x22>
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <memp_malloc+0x3c>)
 800443e:	f240 1257 	movw	r2, #343	; 0x157
 8004442:	490a      	ldr	r1, [pc, #40]	; (800446c <memp_malloc+0x40>)
 8004444:	480a      	ldr	r0, [pc, #40]	; (8004470 <memp_malloc+0x44>)
 8004446:	f00b faf5 	bl	800fa34 <iprintf>
 800444a:	2300      	movs	r3, #0
 800444c:	e008      	b.n	8004460 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	4a08      	ldr	r2, [pc, #32]	; (8004474 <memp_malloc+0x48>)
 8004452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ffbe 	bl	80043d8 <do_memp_malloc_pool>
 800445c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	08010b3c 	.word	0x08010b3c
 800446c:	08010bcc 	.word	0x08010bcc
 8004470:	08010b90 	.word	0x08010b90
 8004474:	08013690 	.word	0x08013690

08004478 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d006      	beq.n	800449a <do_memp_free_pool+0x22>
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <do_memp_free_pool+0x40>)
 800448e:	f240 126d 	movw	r2, #365	; 0x16d
 8004492:	490a      	ldr	r1, [pc, #40]	; (80044bc <do_memp_free_pool+0x44>)
 8004494:	480a      	ldr	r0, [pc, #40]	; (80044c0 <do_memp_free_pool+0x48>)
 8004496:	f00b facd 	bl	800fa34 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	08010b3c 	.word	0x08010b3c
 80044bc:	08010bec 	.word	0x08010bec
 80044c0:	08010b90 	.word	0x08010b90

080044c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	6039      	str	r1, [r7, #0]
 80044ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d907      	bls.n	80044e6 <memp_free+0x22>
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <memp_free+0x44>)
 80044d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80044dc:	490b      	ldr	r1, [pc, #44]	; (800450c <memp_free+0x48>)
 80044de:	480c      	ldr	r0, [pc, #48]	; (8004510 <memp_free+0x4c>)
 80044e0:	f00b faa8 	bl	800fa34 <iprintf>
 80044e4:	e00c      	b.n	8004500 <memp_free+0x3c>

  if (mem == NULL) {
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <memp_free+0x50>)
 80044f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f4:	6839      	ldr	r1, [r7, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ffbe 	bl	8004478 <do_memp_free_pool>
 80044fc:	e000      	b.n	8004500 <memp_free+0x3c>
    return;
 80044fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	08010b3c 	.word	0x08010b3c
 800450c:	08010c0c 	.word	0x08010c0c
 8004510:	08010b90 	.word	0x08010b90
 8004514:	08013690 	.word	0x08013690

08004518 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <netif_add+0x26>
 800453c:	4b5b      	ldr	r3, [pc, #364]	; (80046ac <netif_add+0x184>)
 800453e:	f240 1227 	movw	r2, #295	; 0x127
 8004542:	495b      	ldr	r1, [pc, #364]	; (80046b0 <netif_add+0x188>)
 8004544:	485b      	ldr	r0, [pc, #364]	; (80046b4 <netif_add+0x18c>)
 8004546:	f00b fa75 	bl	800fa34 <iprintf>
 800454a:	2300      	movs	r3, #0
 800454c:	e0a9      	b.n	80046a2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	2b00      	cmp	r3, #0
 8004552:	d108      	bne.n	8004566 <netif_add+0x3e>
 8004554:	4b55      	ldr	r3, [pc, #340]	; (80046ac <netif_add+0x184>)
 8004556:	f44f 7294 	mov.w	r2, #296	; 0x128
 800455a:	4957      	ldr	r1, [pc, #348]	; (80046b8 <netif_add+0x190>)
 800455c:	4855      	ldr	r0, [pc, #340]	; (80046b4 <netif_add+0x18c>)
 800455e:	f00b fa69 	bl	800fa34 <iprintf>
 8004562:	2300      	movs	r3, #0
 8004564:	e09d      	b.n	80046a2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800456c:	4b53      	ldr	r3, [pc, #332]	; (80046bc <netif_add+0x194>)
 800456e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004576:	4b51      	ldr	r3, [pc, #324]	; (80046bc <netif_add+0x194>)
 8004578:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004580:	4b4e      	ldr	r3, [pc, #312]	; (80046bc <netif_add+0x194>)
 8004582:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a49      	ldr	r2, [pc, #292]	; (80046c0 <netif_add+0x198>)
 800459a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3324      	adds	r3, #36	; 0x24
 80045ae:	2204      	movs	r2, #4
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f00b fa36 	bl	800fa24 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80045c4:	4b3f      	ldr	r3, [pc, #252]	; (80046c4 <netif_add+0x19c>)
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f914 	bl	8004808 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	4798      	blx	r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <netif_add+0xc8>
    return NULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e058      	b.n	80046a2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045f6:	2bff      	cmp	r3, #255	; 0xff
 80045f8:	d103      	bne.n	8004602 <netif_add+0xda>
        netif->num = 0;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004606:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <netif_add+0x1a0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e02b      	b.n	8004666 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	429a      	cmp	r2, r3
 8004614:	d106      	bne.n	8004624 <netif_add+0xfc>
 8004616:	4b25      	ldr	r3, [pc, #148]	; (80046ac <netif_add+0x184>)
 8004618:	f240 128b 	movw	r2, #395	; 0x18b
 800461c:	492b      	ldr	r1, [pc, #172]	; (80046cc <netif_add+0x1a4>)
 800461e:	4825      	ldr	r0, [pc, #148]	; (80046b4 <netif_add+0x18c>)
 8004620:	f00b fa08 	bl	800fa34 <iprintf>
        num_netifs++;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	3301      	adds	r3, #1
 8004628:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2bff      	cmp	r3, #255	; 0xff
 800462e:	dd06      	ble.n	800463e <netif_add+0x116>
 8004630:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <netif_add+0x184>)
 8004632:	f240 128d 	movw	r2, #397	; 0x18d
 8004636:	4926      	ldr	r1, [pc, #152]	; (80046d0 <netif_add+0x1a8>)
 8004638:	481e      	ldr	r0, [pc, #120]	; (80046b4 <netif_add+0x18c>)
 800463a:	f00b f9fb 	bl	800fa34 <iprintf>
        if (netif2->num == netif->num) {
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800464a:	429a      	cmp	r2, r3
 800464c:	d108      	bne.n	8004660 <netif_add+0x138>
          netif->num++;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004654:	3301      	adds	r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800465e:	e005      	b.n	800466c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1d0      	bne.n	800460e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1be      	bne.n	80045f0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004678:	2bfe      	cmp	r3, #254	; 0xfe
 800467a:	d103      	bne.n	8004684 <netif_add+0x15c>
    netif_num = 0;
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <netif_add+0x19c>)
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e006      	b.n	8004692 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800468a:	3301      	adds	r3, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <netif_add+0x19c>)
 8004690:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004692:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <netif_add+0x1a0>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800469a:	4a0b      	ldr	r2, [pc, #44]	; (80046c8 <netif_add+0x1a0>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80046a0:	68fb      	ldr	r3, [r7, #12]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	08010c28 	.word	0x08010c28
 80046b0:	08010cbc 	.word	0x08010cbc
 80046b4:	08010c78 	.word	0x08010c78
 80046b8:	08010cd8 	.word	0x08010cd8
 80046bc:	08013704 	.word	0x08013704
 80046c0:	08004a1b 	.word	0x08004a1b
 80046c4:	200000cc 	.word	0x200000cc
 80046c8:	20006518 	.word	0x20006518
 80046cc:	08010cfc 	.word	0x08010cfc
 80046d0:	08010d10 	.word	0x08010d10

080046d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f002 fadf 	bl	8006ca4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f006 fecb 	bl	800b484 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <netif_do_set_ipaddr+0x20>
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <netif_do_set_ipaddr+0x88>)
 800470c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004710:	491c      	ldr	r1, [pc, #112]	; (8004784 <netif_do_set_ipaddr+0x8c>)
 8004712:	481d      	ldr	r0, [pc, #116]	; (8004788 <netif_do_set_ipaddr+0x90>)
 8004714:	f00b f98e 	bl	800fa34 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <netif_do_set_ipaddr+0x34>
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <netif_do_set_ipaddr+0x88>)
 8004720:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004724:	4917      	ldr	r1, [pc, #92]	; (8004784 <netif_do_set_ipaddr+0x8c>)
 8004726:	4818      	ldr	r0, [pc, #96]	; (8004788 <netif_do_set_ipaddr+0x90>)
 8004728:	f00b f984 	bl	800fa34 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3304      	adds	r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d01c      	beq.n	8004774 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3304      	adds	r3, #4
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800474a:	f107 0314 	add.w	r3, r7, #20
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ffbf 	bl	80046d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <netif_do_set_ipaddr+0x6a>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	e000      	b.n	8004764 <netif_do_set_ipaddr+0x6c>
 8004762:	2300      	movs	r3, #0
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004768:	2101      	movs	r1, #1
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f8d2 	bl	8004914 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	08010c28 	.word	0x08010c28
 8004784:	08010d40 	.word	0x08010d40
 8004788:	08010c78 	.word	0x08010c78

0800478c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3308      	adds	r3, #8
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d00a      	beq.n	80047bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <netif_do_set_netmask+0x26>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	e000      	b.n	80047b4 <netif_do_set_netmask+0x28>
 80047b2:	2300      	movs	r3, #0
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	330c      	adds	r3, #12
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d00a      	beq.n	80047fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <netif_do_set_gw+0x26>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	e000      	b.n	80047f2 <netif_do_set_gw+0x28>
 80047f0:	2300      	movs	r3, #0
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004824:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <netif_set_addr+0x90>)
 8004826:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <netif_set_addr+0x90>)
 8004830:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004838:	4b17      	ldr	r3, [pc, #92]	; (8004898 <netif_set_addr+0x90>)
 800483a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <netif_set_addr+0x42>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <netif_set_addr+0x46>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <netif_set_addr+0x48>
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d006      	beq.n	8004866 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004858:	f107 0310 	add.w	r3, r7, #16
 800485c:	461a      	mov	r2, r3
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff ff49 	bl	80046f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f7ff ff8e 	bl	800478c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff ffa8 	bl	80047ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	461a      	mov	r2, r3
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff ff35 	bl	80046f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800488e:	bf00      	nop
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	08013704 	.word	0x08013704

0800489c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <netif_set_default+0x1c>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	2000651c 	.word	0x2000651c

080048bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <netif_set_up+0x1e>
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <netif_set_up+0x4c>)
 80048cc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80048d0:	490e      	ldr	r1, [pc, #56]	; (800490c <netif_set_up+0x50>)
 80048d2:	480f      	ldr	r0, [pc, #60]	; (8004910 <netif_set_up+0x54>)
 80048d4:	f00b f8ae 	bl	800fa34 <iprintf>
 80048d8:	e013      	b.n	8004902 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10c      	bne.n	8004902 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80048fa:	2103      	movs	r1, #3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f809 	bl	8004914 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	08010c28 	.word	0x08010c28
 800490c:	08010db0 	.word	0x08010db0
 8004910:	08010c78 	.word	0x08010c78

08004914 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <netif_issue_reports+0x20>
 8004926:	4b18      	ldr	r3, [pc, #96]	; (8004988 <netif_issue_reports+0x74>)
 8004928:	f240 326d 	movw	r2, #877	; 0x36d
 800492c:	4917      	ldr	r1, [pc, #92]	; (800498c <netif_issue_reports+0x78>)
 800492e:	4818      	ldr	r0, [pc, #96]	; (8004990 <netif_issue_reports+0x7c>)
 8004930:	f00b f880 	bl	800fa34 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01e      	beq.n	8004980 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004948:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800494c:	2b00      	cmp	r3, #0
 800494e:	d017      	beq.n	8004980 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d013      	beq.n	8004982 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3304      	adds	r3, #4
 800495e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00e      	beq.n	8004982 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f009 fb45 	bl	800e008 <etharp_request>
 800497e:	e000      	b.n	8004982 <netif_issue_reports+0x6e>
    return;
 8004980:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	08010c28 	.word	0x08010c28
 800498c:	08010dcc 	.word	0x08010dcc
 8004990:	08010c78 	.word	0x08010c78

08004994 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <netif_set_down+0x1e>
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <netif_set_down+0x58>)
 80049a4:	f240 329b 	movw	r2, #923	; 0x39b
 80049a8:	4911      	ldr	r1, [pc, #68]	; (80049f0 <netif_set_down+0x5c>)
 80049aa:	4812      	ldr	r0, [pc, #72]	; (80049f4 <netif_set_down+0x60>)
 80049ac:	f00b f842 	bl	800fa34 <iprintf>
 80049b0:	e019      	b.n	80049e6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f008 fecb 	bl	800d77c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	08010c28 	.word	0x08010c28
 80049f0:	08010df0 	.word	0x08010df0
 80049f4:	08010c78 	.word	0x08010c78

080049f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	61da      	str	r2, [r3, #28]
  }
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004a26:	f06f 030b 	mvn.w	r3, #11
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d013      	beq.n	8004a70 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004a48:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <netif_get_by_index+0x48>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e00c      	b.n	8004a6a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a56:	3301      	adds	r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	79fa      	ldrb	r2, [r7, #7]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d101      	bne.n	8004a64 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	e006      	b.n	8004a72 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ef      	bne.n	8004a50 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20006518 	.word	0x20006518

08004a84 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <pbuf_free_ooseq+0x38>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <pbuf_free_ooseq+0x3c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	e00a      	b.n	8004aae <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f002 f93d 	bl	8006d20 <tcp_free_ooseq>
      return;
 8004aa6:	e005      	b.n	8004ab4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f1      	bne.n	8004a98 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20006520 	.word	0x20006520
 8004ac0:	20006528 	.word	0x20006528

08004ac4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <pbuf_pool_is_empty+0x14>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004ace:	bf00      	nop
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	20006520 	.word	0x20006520

08004adc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	461a      	mov	r2, r3
 8004aea:	460b      	mov	r3, r1
 8004aec:	80fb      	strh	r3, [r7, #6]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	88fa      	ldrh	r2, [r7, #6]
 8004b02:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	88ba      	ldrh	r2, [r7, #4]
 8004b08:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004b0a:	8b3b      	ldrh	r3, [r7, #24]
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	7f3a      	ldrb	r2, [r7, #28]
 8004b16:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	73da      	strb	r2, [r3, #15]
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	; 0x30
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	80bb      	strh	r3, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004b46:	887b      	ldrh	r3, [r7, #2]
 8004b48:	2b41      	cmp	r3, #65	; 0x41
 8004b4a:	d00b      	beq.n	8004b64 <pbuf_alloc+0x34>
 8004b4c:	2b41      	cmp	r3, #65	; 0x41
 8004b4e:	dc02      	bgt.n	8004b56 <pbuf_alloc+0x26>
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d007      	beq.n	8004b64 <pbuf_alloc+0x34>
 8004b54:	e0c2      	b.n	8004cdc <pbuf_alloc+0x1ac>
 8004b56:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004b5a:	d00b      	beq.n	8004b74 <pbuf_alloc+0x44>
 8004b5c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004b60:	d070      	beq.n	8004c44 <pbuf_alloc+0x114>
 8004b62:	e0bb      	b.n	8004cdc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004b64:	887a      	ldrh	r2, [r7, #2]
 8004b66:	88bb      	ldrh	r3, [r7, #4]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f000 f8d2 	bl	8004d14 <pbuf_alloc_reference>
 8004b70:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004b72:	e0bd      	b.n	8004cf0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004b7c:	88bb      	ldrh	r3, [r7, #4]
 8004b7e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004b80:	2008      	movs	r0, #8
 8004b82:	f7ff fc53 	bl	800442c <memp_malloc>
 8004b86:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8004b8e:	f7ff ff99 	bl	8004ac4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <pbuf_alloc+0x6e>
            pbuf_free(p);
 8004b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b9a:	f000 faa9 	bl	80050f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e0a7      	b.n	8004cf2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ba4:	3303      	adds	r3, #3
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f023 0303 	bic.w	r3, r3, #3
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8b7a      	ldrh	r2, [r7, #26]
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	bf28      	it	cs
 8004bba:	4613      	movcs	r3, r2
 8004bbc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004bbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bc0:	3310      	adds	r3, #16
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3303      	adds	r3, #3
 8004bc8:	f023 0303 	bic.w	r3, r3, #3
 8004bcc:	4618      	mov	r0, r3
 8004bce:	89f9      	ldrh	r1, [r7, #14]
 8004bd0:	8b7a      	ldrh	r2, [r7, #26]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	887b      	ldrh	r3, [r7, #2]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4601      	mov	r1, r0
 8004bde:	6938      	ldr	r0, [r7, #16]
 8004be0:	f7ff ff7c 	bl	8004adc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d006      	beq.n	8004bfe <pbuf_alloc+0xce>
 8004bf0:	4b42      	ldr	r3, [pc, #264]	; (8004cfc <pbuf_alloc+0x1cc>)
 8004bf2:	f240 1201 	movw	r2, #257	; 0x101
 8004bf6:	4942      	ldr	r1, [pc, #264]	; (8004d00 <pbuf_alloc+0x1d0>)
 8004bf8:	4842      	ldr	r0, [pc, #264]	; (8004d04 <pbuf_alloc+0x1d4>)
 8004bfa:	f00a ff1b 	bl	800fa34 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c00:	3303      	adds	r3, #3
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8004c0a:	d106      	bne.n	8004c1a <pbuf_alloc+0xea>
 8004c0c:	4b3b      	ldr	r3, [pc, #236]	; (8004cfc <pbuf_alloc+0x1cc>)
 8004c0e:	f240 1203 	movw	r2, #259	; 0x103
 8004c12:	493d      	ldr	r1, [pc, #244]	; (8004d08 <pbuf_alloc+0x1d8>)
 8004c14:	483b      	ldr	r0, [pc, #236]	; (8004d04 <pbuf_alloc+0x1d4>)
 8004c16:	f00a ff0d 	bl	800fa34 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
 8004c24:	e002      	b.n	8004c2c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004c30:	8b7a      	ldrh	r2, [r7, #26]
 8004c32:	89fb      	ldrh	r3, [r7, #14]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004c3c:	8b7b      	ldrh	r3, [r7, #26]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d19e      	bne.n	8004b80 <pbuf_alloc+0x50>
      break;
 8004c42:	e055      	b.n	8004cf0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004c44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c46:	3303      	adds	r3, #3
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	88bb      	ldrh	r3, [r7, #4]
 8004c52:	3303      	adds	r3, #3
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004c60:	8b3b      	ldrh	r3, [r7, #24]
 8004c62:	3310      	adds	r3, #16
 8004c64:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004c66:	8b3a      	ldrh	r2, [r7, #24]
 8004c68:	88bb      	ldrh	r3, [r7, #4]
 8004c6a:	3303      	adds	r3, #3
 8004c6c:	f023 0303 	bic.w	r3, r3, #3
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d306      	bcc.n	8004c82 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004c74:	8afa      	ldrh	r2, [r7, #22]
 8004c76:	88bb      	ldrh	r3, [r7, #4]
 8004c78:	3303      	adds	r3, #3
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d201      	bcs.n	8004c86 <pbuf_alloc+0x156>
        return NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e035      	b.n	8004cf2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004c86:	8afb      	ldrh	r3, [r7, #22]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fa61 	bl	8004150 <mem_malloc>
 8004c8e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <pbuf_alloc+0x16a>
        return NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e02b      	b.n	8004cf2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004c9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c9c:	3310      	adds	r3, #16
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3303      	adds	r3, #3
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	4618      	mov	r0, r3
 8004caa:	88b9      	ldrh	r1, [r7, #4]
 8004cac:	88ba      	ldrh	r2, [r7, #4]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	887b      	ldrh	r3, [r7, #2]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4601      	mov	r1, r0
 8004cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cbc:	f7ff ff0e 	bl	8004adc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <pbuf_alloc+0x1be>
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <pbuf_alloc+0x1cc>)
 8004cce:	f240 1223 	movw	r2, #291	; 0x123
 8004cd2:	490e      	ldr	r1, [pc, #56]	; (8004d0c <pbuf_alloc+0x1dc>)
 8004cd4:	480b      	ldr	r0, [pc, #44]	; (8004d04 <pbuf_alloc+0x1d4>)
 8004cd6:	f00a fead 	bl	800fa34 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004cda:	e008      	b.n	8004cee <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <pbuf_alloc+0x1cc>)
 8004cde:	f240 1227 	movw	r2, #295	; 0x127
 8004ce2:	490b      	ldr	r1, [pc, #44]	; (8004d10 <pbuf_alloc+0x1e0>)
 8004ce4:	4807      	ldr	r0, [pc, #28]	; (8004d04 <pbuf_alloc+0x1d4>)
 8004ce6:	f00a fea5 	bl	800fa34 <iprintf>
      return NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e001      	b.n	8004cf2 <pbuf_alloc+0x1c2>
      break;
 8004cee:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3728      	adds	r7, #40	; 0x28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	08010e58 	.word	0x08010e58
 8004d00:	08010e88 	.word	0x08010e88
 8004d04:	08010eb8 	.word	0x08010eb8
 8004d08:	08010ee0 	.word	0x08010ee0
 8004d0c:	08010f14 	.word	0x08010f14
 8004d10:	08010f40 	.word	0x08010f40

08004d14 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
 8004d20:	4613      	mov	r3, r2
 8004d22:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004d24:	883b      	ldrh	r3, [r7, #0]
 8004d26:	2b41      	cmp	r3, #65	; 0x41
 8004d28:	d009      	beq.n	8004d3e <pbuf_alloc_reference+0x2a>
 8004d2a:	883b      	ldrh	r3, [r7, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d006      	beq.n	8004d3e <pbuf_alloc_reference+0x2a>
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <pbuf_alloc_reference+0x5c>)
 8004d32:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004d36:	490f      	ldr	r1, [pc, #60]	; (8004d74 <pbuf_alloc_reference+0x60>)
 8004d38:	480f      	ldr	r0, [pc, #60]	; (8004d78 <pbuf_alloc_reference+0x64>)
 8004d3a:	f00a fe7b 	bl	800fa34 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004d3e:	2007      	movs	r0, #7
 8004d40:	f7ff fb74 	bl	800442c <memp_malloc>
 8004d44:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e00b      	b.n	8004d68 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004d50:	8879      	ldrh	r1, [r7, #2]
 8004d52:	887a      	ldrh	r2, [r7, #2]
 8004d54:	2300      	movs	r3, #0
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	883b      	ldrh	r3, [r7, #0]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff febb 	bl	8004adc <pbuf_init_alloced_pbuf>
  return p;
 8004d66:	68fb      	ldr	r3, [r7, #12]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	08010e58 	.word	0x08010e58
 8004d74:	08010f5c 	.word	0x08010f5c
 8004d78:	08010eb8 	.word	0x08010eb8

08004d7c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	4603      	mov	r3, r0
 8004d86:	73fb      	strb	r3, [r7, #15]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	81bb      	strh	r3, [r7, #12]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004d94:	8a7b      	ldrh	r3, [r7, #18]
 8004d96:	3303      	adds	r3, #3
 8004d98:	f023 0203 	bic.w	r2, r3, #3
 8004d9c:	89bb      	ldrh	r3, [r7, #12]
 8004d9e:	441a      	add	r2, r3
 8004da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d901      	bls.n	8004daa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e018      	b.n	8004ddc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004db0:	8a7b      	ldrh	r3, [r7, #18]
 8004db2:	3303      	adds	r3, #3
 8004db4:	f023 0303 	bic.w	r3, r3, #3
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	4413      	add	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e001      	b.n	8004dc4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	89b9      	ldrh	r1, [r7, #12]
 8004dc8:	89ba      	ldrh	r2, [r7, #12]
 8004dca:	2302      	movs	r3, #2
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	6979      	ldr	r1, [r7, #20]
 8004dd6:	f7ff fe81 	bl	8004adc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004dda:	687b      	ldr	r3, [r7, #4]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <pbuf_realloc+0x20>
 8004df6:	4b3a      	ldr	r3, [pc, #232]	; (8004ee0 <pbuf_realloc+0xfc>)
 8004df8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004dfc:	4939      	ldr	r1, [pc, #228]	; (8004ee4 <pbuf_realloc+0x100>)
 8004dfe:	483a      	ldr	r0, [pc, #232]	; (8004ee8 <pbuf_realloc+0x104>)
 8004e00:	f00a fe18 	bl	800fa34 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	891b      	ldrh	r3, [r3, #8]
 8004e08:	887a      	ldrh	r2, [r7, #2]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d264      	bcs.n	8004ed8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	891a      	ldrh	r2, [r3, #8]
 8004e12:	887b      	ldrh	r3, [r7, #2]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	817b      	strh	r3, [r7, #10]
  q = p;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004e20:	e018      	b.n	8004e54 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	895b      	ldrh	r3, [r3, #10]
 8004e26:	897a      	ldrh	r2, [r7, #10]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	891a      	ldrh	r2, [r3, #8]
 8004e30:	893b      	ldrh	r3, [r7, #8]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <pbuf_realloc+0x70>
 8004e46:	4b26      	ldr	r3, [pc, #152]	; (8004ee0 <pbuf_realloc+0xfc>)
 8004e48:	f240 12af 	movw	r2, #431	; 0x1af
 8004e4c:	4927      	ldr	r1, [pc, #156]	; (8004eec <pbuf_realloc+0x108>)
 8004e4e:	4826      	ldr	r0, [pc, #152]	; (8004ee8 <pbuf_realloc+0x104>)
 8004e50:	f00a fdf0 	bl	800fa34 <iprintf>
  while (rem_len > q->len) {
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	895b      	ldrh	r3, [r3, #10]
 8004e58:	897a      	ldrh	r2, [r7, #10]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d8e1      	bhi.n	8004e22 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	7b1b      	ldrb	r3, [r3, #12]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d122      	bne.n	8004eb0 <pbuf_realloc+0xcc>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	895b      	ldrh	r3, [r3, #10]
 8004e6e:	897a      	ldrh	r2, [r7, #10]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d01d      	beq.n	8004eb0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	7b5b      	ldrb	r3, [r3, #13]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d117      	bne.n	8004eb0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	461a      	mov	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	897b      	ldrh	r3, [r7, #10]
 8004e8e:	4413      	add	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	4619      	mov	r1, r3
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff f85f 	bl	8003f58 <mem_trim>
 8004e9a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <pbuf_realloc+0xcc>
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <pbuf_realloc+0xfc>)
 8004ea4:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004ea8:	4911      	ldr	r1, [pc, #68]	; (8004ef0 <pbuf_realloc+0x10c>)
 8004eaa:	480f      	ldr	r0, [pc, #60]	; (8004ee8 <pbuf_realloc+0x104>)
 8004eac:	f00a fdc2 	bl	800fa34 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	897a      	ldrh	r2, [r7, #10]
 8004eb4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	895a      	ldrh	r2, [r3, #10]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f910 	bl	80050f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e000      	b.n	8004eda <pbuf_realloc+0xf6>
    return;
 8004ed8:	bf00      	nop

}
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	08010e58 	.word	0x08010e58
 8004ee4:	08010f70 	.word	0x08010f70
 8004ee8:	08010eb8 	.word	0x08010eb8
 8004eec:	08010f88 	.word	0x08010f88
 8004ef0:	08010fa0 	.word	0x08010fa0

08004ef4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <pbuf_add_header_impl+0x22>
 8004f08:	4b2b      	ldr	r3, [pc, #172]	; (8004fb8 <pbuf_add_header_impl+0xc4>)
 8004f0a:	f240 12df 	movw	r2, #479	; 0x1df
 8004f0e:	492b      	ldr	r1, [pc, #172]	; (8004fbc <pbuf_add_header_impl+0xc8>)
 8004f10:	482b      	ldr	r0, [pc, #172]	; (8004fc0 <pbuf_add_header_impl+0xcc>)
 8004f12:	f00a fd8f 	bl	800fa34 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <pbuf_add_header_impl+0x30>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f22:	d301      	bcc.n	8004f28 <pbuf_add_header_impl+0x34>
    return 1;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e043      	b.n	8004fb0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <pbuf_add_header_impl+0x3e>
    return 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e03e      	b.n	8004fb0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	891a      	ldrh	r2, [r3, #8]
 8004f3a:	8a7b      	ldrh	r3, [r7, #18]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8a7a      	ldrh	r2, [r7, #18]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d901      	bls.n	8004f4a <pbuf_add_header_impl+0x56>
    return 1;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e032      	b.n	8004fb0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	7b1b      	ldrb	r3, [r3, #12]
 8004f4e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004f50:	8a3b      	ldrh	r3, [r7, #16]
 8004f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	425b      	negs	r3, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3310      	adds	r3, #16
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d20d      	bcs.n	8004f8c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e01d      	b.n	8004fb0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d006      	beq.n	8004f88 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	425b      	negs	r3, r3
 8004f82:	4413      	add	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e001      	b.n	8004f8c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e011      	b.n	8004fb0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	895a      	ldrh	r2, [r3, #10]
 8004f96:	8a7b      	ldrh	r3, [r7, #18]
 8004f98:	4413      	add	r3, r2
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	891a      	ldrh	r2, [r3, #8]
 8004fa4:	8a7b      	ldrh	r3, [r7, #18]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	811a      	strh	r2, [r3, #8]


  return 0;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08010e58 	.word	0x08010e58
 8004fbc:	08010fbc 	.word	0x08010fbc
 8004fc0:	08010eb8 	.word	0x08010eb8

08004fc4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004fce:	2200      	movs	r2, #0
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ff8e 	bl	8004ef4 <pbuf_add_header_impl>
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <pbuf_remove_header+0x1e>
 8004ff4:	4b20      	ldr	r3, [pc, #128]	; (8005078 <pbuf_remove_header+0x94>)
 8004ff6:	f240 224b 	movw	r2, #587	; 0x24b
 8004ffa:	4920      	ldr	r1, [pc, #128]	; (800507c <pbuf_remove_header+0x98>)
 8004ffc:	4820      	ldr	r0, [pc, #128]	; (8005080 <pbuf_remove_header+0x9c>)
 8004ffe:	f00a fd19 	bl	800fa34 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <pbuf_remove_header+0x2c>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500e:	d301      	bcc.n	8005014 <pbuf_remove_header+0x30>
    return 1;
 8005010:	2301      	movs	r3, #1
 8005012:	e02c      	b.n	800506e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <pbuf_remove_header+0x3a>
    return 0;
 800501a:	2300      	movs	r3, #0
 800501c:	e027      	b.n	800506e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	895b      	ldrh	r3, [r3, #10]
 8005026:	89fa      	ldrh	r2, [r7, #14]
 8005028:	429a      	cmp	r2, r3
 800502a:	d908      	bls.n	800503e <pbuf_remove_header+0x5a>
 800502c:	4b12      	ldr	r3, [pc, #72]	; (8005078 <pbuf_remove_header+0x94>)
 800502e:	f240 2255 	movw	r2, #597	; 0x255
 8005032:	4914      	ldr	r1, [pc, #80]	; (8005084 <pbuf_remove_header+0xa0>)
 8005034:	4812      	ldr	r0, [pc, #72]	; (8005080 <pbuf_remove_header+0x9c>)
 8005036:	f00a fcfd 	bl	800fa34 <iprintf>
 800503a:	2301      	movs	r3, #1
 800503c:	e017      	b.n	800506e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	441a      	add	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	895a      	ldrh	r2, [r3, #10]
 8005054:	89fb      	ldrh	r3, [r7, #14]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	b29a      	uxth	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	891a      	ldrh	r2, [r3, #8]
 8005062:	89fb      	ldrh	r3, [r7, #14]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	08010e58 	.word	0x08010e58
 800507c:	08010fbc 	.word	0x08010fbc
 8005080:	08010eb8 	.word	0x08010eb8
 8005084:	08010fc8 	.word	0x08010fc8

08005088 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
 8005094:	4613      	mov	r3, r2
 8005096:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005098:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800509c:	2b00      	cmp	r3, #0
 800509e:	da08      	bge.n	80050b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80050a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050a4:	425b      	negs	r3, r3
 80050a6:	4619      	mov	r1, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff ff9b 	bl	8004fe4 <pbuf_remove_header>
 80050ae:	4603      	mov	r3, r0
 80050b0:	e007      	b.n	80050c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80050b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050b6:	787a      	ldrb	r2, [r7, #1]
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff ff1a 	bl	8004ef4 <pbuf_add_header_impl>
 80050c0:	4603      	mov	r3, r0
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80050d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80050da:	2201      	movs	r2, #1
 80050dc:	4619      	mov	r1, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff ffd2 	bl	8005088 <pbuf_header_impl>
 80050e4:	4603      	mov	r3, r0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10b      	bne.n	8005116 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <pbuf_free+0x22>
 8005104:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <pbuf_free+0xf8>)
 8005106:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800510a:	4938      	ldr	r1, [pc, #224]	; (80051ec <pbuf_free+0xfc>)
 800510c:	4838      	ldr	r0, [pc, #224]	; (80051f0 <pbuf_free+0x100>)
 800510e:	f00a fc91 	bl	800fa34 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005112:	2300      	movs	r3, #0
 8005114:	e063      	b.n	80051de <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800511a:	e05c      	b.n	80051d6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	7b9b      	ldrb	r3, [r3, #14]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <pbuf_free+0x42>
 8005124:	4b30      	ldr	r3, [pc, #192]	; (80051e8 <pbuf_free+0xf8>)
 8005126:	f240 22f1 	movw	r2, #753	; 0x2f1
 800512a:	4932      	ldr	r1, [pc, #200]	; (80051f4 <pbuf_free+0x104>)
 800512c:	4830      	ldr	r0, [pc, #192]	; (80051f0 <pbuf_free+0x100>)
 800512e:	f00a fc81 	bl	800fa34 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	7b9b      	ldrb	r3, [r3, #14]
 8005136:	3b01      	subs	r3, #1
 8005138:	b2da      	uxtb	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	739a      	strb	r2, [r3, #14]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7b9b      	ldrb	r3, [r3, #14]
 8005142:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005144:	7dbb      	ldrb	r3, [r7, #22]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d143      	bne.n	80051d2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	7b1b      	ldrb	r3, [r3, #12]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7b5b      	ldrb	r3, [r3, #13]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d011      	beq.n	800518a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <pbuf_free+0x90>
 8005172:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <pbuf_free+0xf8>)
 8005174:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005178:	491f      	ldr	r1, [pc, #124]	; (80051f8 <pbuf_free+0x108>)
 800517a:	481d      	ldr	r0, [pc, #116]	; (80051f0 <pbuf_free+0x100>)
 800517c:	f00a fc5a 	bl	800fa34 <iprintf>
        pc->custom_free_function(p);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
 8005188:	e01d      	b.n	80051c6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d104      	bne.n	800519a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	2008      	movs	r0, #8
 8005194:	f7ff f996 	bl	80044c4 <memp_free>
 8005198:	e015      	b.n	80051c6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d104      	bne.n	80051aa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	2007      	movs	r0, #7
 80051a4:	f7ff f98e 	bl	80044c4 <memp_free>
 80051a8:	e00d      	b.n	80051c6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d103      	bne.n	80051b8 <pbuf_free+0xc8>
          mem_free(p);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fe fe67 	bl	8003e84 <mem_free>
 80051b6:	e006      	b.n	80051c6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <pbuf_free+0xf8>)
 80051ba:	f240 320f 	movw	r2, #783	; 0x30f
 80051be:	490f      	ldr	r1, [pc, #60]	; (80051fc <pbuf_free+0x10c>)
 80051c0:	480b      	ldr	r0, [pc, #44]	; (80051f0 <pbuf_free+0x100>)
 80051c2:	f00a fc37 	bl	800fa34 <iprintf>
        }
      }
      count++;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	3301      	adds	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	e001      	b.n	80051d6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d19f      	bne.n	800511c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	08010e58 	.word	0x08010e58
 80051ec:	08010fbc 	.word	0x08010fbc
 80051f0:	08010eb8 	.word	0x08010eb8
 80051f4:	08010fe8 	.word	0x08010fe8
 80051f8:	08011000 	.word	0x08011000
 80051fc:	08011024 	.word	0x08011024

08005200 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800520c:	e005      	b.n	800521a <pbuf_clen+0x1a>
    ++len;
 800520e:	89fb      	ldrh	r3, [r7, #14]
 8005210:	3301      	adds	r3, #1
 8005212:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f6      	bne.n	800520e <pbuf_clen+0xe>
  }
  return len;
 8005220:	89fb      	ldrh	r3, [r7, #14]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d010      	beq.n	8005260 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	7b9b      	ldrb	r3, [r3, #14]
 8005242:	3301      	adds	r3, #1
 8005244:	b2da      	uxtb	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	7b9b      	ldrb	r3, [r3, #14]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <pbuf_ref+0x30>
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <pbuf_ref+0x38>)
 8005254:	f240 3242 	movw	r2, #834	; 0x342
 8005258:	4904      	ldr	r1, [pc, #16]	; (800526c <pbuf_ref+0x3c>)
 800525a:	4805      	ldr	r0, [pc, #20]	; (8005270 <pbuf_ref+0x40>)
 800525c:	f00a fbea 	bl	800fa34 <iprintf>
  }
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	08010e58 	.word	0x08010e58
 800526c:	08011038 	.word	0x08011038
 8005270:	08010eb8 	.word	0x08010eb8

08005274 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <pbuf_cat+0x16>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d107      	bne.n	800529a <pbuf_cat+0x26>
 800528a:	4b20      	ldr	r3, [pc, #128]	; (800530c <pbuf_cat+0x98>)
 800528c:	f240 325a 	movw	r2, #858	; 0x35a
 8005290:	491f      	ldr	r1, [pc, #124]	; (8005310 <pbuf_cat+0x9c>)
 8005292:	4820      	ldr	r0, [pc, #128]	; (8005314 <pbuf_cat+0xa0>)
 8005294:	f00a fbce 	bl	800fa34 <iprintf>
 8005298:	e034      	b.n	8005304 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e00a      	b.n	80052b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	891a      	ldrh	r2, [r3, #8]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	891b      	ldrh	r3, [r3, #8]
 80052a8:	4413      	add	r3, r2
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	891a      	ldrh	r2, [r3, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	895b      	ldrh	r3, [r3, #10]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d006      	beq.n	80052d8 <pbuf_cat+0x64>
 80052ca:	4b10      	ldr	r3, [pc, #64]	; (800530c <pbuf_cat+0x98>)
 80052cc:	f240 3262 	movw	r2, #866	; 0x362
 80052d0:	4911      	ldr	r1, [pc, #68]	; (8005318 <pbuf_cat+0xa4>)
 80052d2:	4810      	ldr	r0, [pc, #64]	; (8005314 <pbuf_cat+0xa0>)
 80052d4:	f00a fbae 	bl	800fa34 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d006      	beq.n	80052ee <pbuf_cat+0x7a>
 80052e0:	4b0a      	ldr	r3, [pc, #40]	; (800530c <pbuf_cat+0x98>)
 80052e2:	f240 3263 	movw	r2, #867	; 0x363
 80052e6:	490d      	ldr	r1, [pc, #52]	; (800531c <pbuf_cat+0xa8>)
 80052e8:	480a      	ldr	r0, [pc, #40]	; (8005314 <pbuf_cat+0xa0>)
 80052ea:	f00a fba3 	bl	800fa34 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	891a      	ldrh	r2, [r3, #8]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	891b      	ldrh	r3, [r3, #8]
 80052f6:	4413      	add	r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	08010e58 	.word	0x08010e58
 8005310:	0801104c 	.word	0x0801104c
 8005314:	08010eb8 	.word	0x08010eb8
 8005318:	08011084 	.word	0x08011084
 800531c:	080110b4 	.word	0x080110b4

08005320 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff ffa1 	bl	8005274 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005332:	6838      	ldr	r0, [r7, #0]
 8005334:	f7ff ff7c 	bl	8005230 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <pbuf_copy+0x2a>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <pbuf_copy+0x2a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	891a      	ldrh	r2, [r3, #8]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	891b      	ldrh	r3, [r3, #8]
 8005366:	429a      	cmp	r2, r3
 8005368:	d209      	bcs.n	800537e <pbuf_copy+0x3e>
 800536a:	4b57      	ldr	r3, [pc, #348]	; (80054c8 <pbuf_copy+0x188>)
 800536c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8005370:	4956      	ldr	r1, [pc, #344]	; (80054cc <pbuf_copy+0x18c>)
 8005372:	4857      	ldr	r0, [pc, #348]	; (80054d0 <pbuf_copy+0x190>)
 8005374:	f00a fb5e 	bl	800fa34 <iprintf>
 8005378:	f06f 030f 	mvn.w	r3, #15
 800537c:	e09f      	b.n	80054be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	895b      	ldrh	r3, [r3, #10]
 8005382:	461a      	mov	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad2      	subs	r2, r2, r3
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	895b      	ldrh	r3, [r3, #10]
 800538c:	4619      	mov	r1, r3
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1acb      	subs	r3, r1, r3
 8005392:	429a      	cmp	r2, r3
 8005394:	d306      	bcc.n	80053a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	895b      	ldrh	r3, [r3, #10]
 800539a:	461a      	mov	r2, r3
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e005      	b.n	80053b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	895b      	ldrh	r3, [r3, #10]
 80053a8:	461a      	mov	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	18d0      	adds	r0, r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4619      	mov	r1, r3
 80053c4:	f00a fb23 	bl	800fa0e <memcpy>
    offset_to += len;
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	895b      	ldrh	r3, [r3, #10]
 80053dc:	461a      	mov	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d906      	bls.n	80053f2 <pbuf_copy+0xb2>
 80053e4:	4b38      	ldr	r3, [pc, #224]	; (80054c8 <pbuf_copy+0x188>)
 80053e6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80053ea:	493a      	ldr	r1, [pc, #232]	; (80054d4 <pbuf_copy+0x194>)
 80053ec:	4838      	ldr	r0, [pc, #224]	; (80054d0 <pbuf_copy+0x190>)
 80053ee:	f00a fb21 	bl	800fa34 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	895b      	ldrh	r3, [r3, #10]
 80053f6:	461a      	mov	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d906      	bls.n	800540c <pbuf_copy+0xcc>
 80053fe:	4b32      	ldr	r3, [pc, #200]	; (80054c8 <pbuf_copy+0x188>)
 8005400:	f240 32da 	movw	r2, #986	; 0x3da
 8005404:	4934      	ldr	r1, [pc, #208]	; (80054d8 <pbuf_copy+0x198>)
 8005406:	4832      	ldr	r0, [pc, #200]	; (80054d0 <pbuf_copy+0x190>)
 8005408:	f00a fb14 	bl	800fa34 <iprintf>
    if (offset_from >= p_from->len) {
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	895b      	ldrh	r3, [r3, #10]
 8005410:	461a      	mov	r2, r3
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	4293      	cmp	r3, r2
 8005416:	d304      	bcc.n	8005422 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	895b      	ldrh	r3, [r3, #10]
 8005426:	461a      	mov	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	4293      	cmp	r3, r2
 800542c:	d114      	bne.n	8005458 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10c      	bne.n	8005458 <pbuf_copy+0x118>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <pbuf_copy+0x118>
 8005444:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <pbuf_copy+0x188>)
 8005446:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800544a:	4924      	ldr	r1, [pc, #144]	; (80054dc <pbuf_copy+0x19c>)
 800544c:	4820      	ldr	r0, [pc, #128]	; (80054d0 <pbuf_copy+0x190>)
 800544e:	f00a faf1 	bl	800fa34 <iprintf>
 8005452:	f06f 030f 	mvn.w	r3, #15
 8005456:	e032      	b.n	80054be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d013      	beq.n	8005486 <pbuf_copy+0x146>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	895a      	ldrh	r2, [r3, #10]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	891b      	ldrh	r3, [r3, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d10d      	bne.n	8005486 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <pbuf_copy+0x146>
 8005472:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <pbuf_copy+0x188>)
 8005474:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8005478:	4919      	ldr	r1, [pc, #100]	; (80054e0 <pbuf_copy+0x1a0>)
 800547a:	4815      	ldr	r0, [pc, #84]	; (80054d0 <pbuf_copy+0x190>)
 800547c:	f00a fada 	bl	800fa34 <iprintf>
 8005480:	f06f 0305 	mvn.w	r3, #5
 8005484:	e01b      	b.n	80054be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d013      	beq.n	80054b4 <pbuf_copy+0x174>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	895a      	ldrh	r2, [r3, #10]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	891b      	ldrh	r3, [r3, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	d10d      	bne.n	80054b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <pbuf_copy+0x174>
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <pbuf_copy+0x188>)
 80054a2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80054a6:	490e      	ldr	r1, [pc, #56]	; (80054e0 <pbuf_copy+0x1a0>)
 80054a8:	4809      	ldr	r0, [pc, #36]	; (80054d0 <pbuf_copy+0x190>)
 80054aa:	f00a fac3 	bl	800fa34 <iprintf>
 80054ae:	f06f 0305 	mvn.w	r3, #5
 80054b2:	e004      	b.n	80054be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f47f af61 	bne.w	800537e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	08010e58 	.word	0x08010e58
 80054cc:	08011100 	.word	0x08011100
 80054d0:	08010eb8 	.word	0x08010eb8
 80054d4:	08011130 	.word	0x08011130
 80054d8:	08011148 	.word	0x08011148
 80054dc:	08011164 	.word	0x08011164
 80054e0:	08011174 	.word	0x08011174

080054e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4611      	mov	r1, r2
 80054f0:	461a      	mov	r2, r3
 80054f2:	460b      	mov	r3, r1
 80054f4:	80fb      	strh	r3, [r7, #6]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d108      	bne.n	800551a <pbuf_copy_partial+0x36>
 8005508:	4b2b      	ldr	r3, [pc, #172]	; (80055b8 <pbuf_copy_partial+0xd4>)
 800550a:	f240 420a 	movw	r2, #1034	; 0x40a
 800550e:	492b      	ldr	r1, [pc, #172]	; (80055bc <pbuf_copy_partial+0xd8>)
 8005510:	482b      	ldr	r0, [pc, #172]	; (80055c0 <pbuf_copy_partial+0xdc>)
 8005512:	f00a fa8f 	bl	800fa34 <iprintf>
 8005516:	2300      	movs	r3, #0
 8005518:	e04a      	b.n	80055b0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d108      	bne.n	8005532 <pbuf_copy_partial+0x4e>
 8005520:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <pbuf_copy_partial+0xd4>)
 8005522:	f240 420b 	movw	r2, #1035	; 0x40b
 8005526:	4927      	ldr	r1, [pc, #156]	; (80055c4 <pbuf_copy_partial+0xe0>)
 8005528:	4825      	ldr	r0, [pc, #148]	; (80055c0 <pbuf_copy_partial+0xdc>)
 800552a:	f00a fa83 	bl	800fa34 <iprintf>
 800552e:	2300      	movs	r3, #0
 8005530:	e03e      	b.n	80055b0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e034      	b.n	80055a2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005538:	88bb      	ldrh	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <pbuf_copy_partial+0x70>
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	895b      	ldrh	r3, [r3, #10]
 8005542:	88ba      	ldrh	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d305      	bcc.n	8005554 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	895b      	ldrh	r3, [r3, #10]
 800554c:	88ba      	ldrh	r2, [r7, #4]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	80bb      	strh	r3, [r7, #4]
 8005552:	e023      	b.n	800559c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	895a      	ldrh	r2, [r3, #10]
 8005558:	88bb      	ldrh	r3, [r7, #4]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800555e:	8b3a      	ldrh	r2, [r7, #24]
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	429a      	cmp	r2, r3
 8005564:	d901      	bls.n	800556a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800556a:	8b7b      	ldrh	r3, [r7, #26]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	18d0      	adds	r0, r2, r3
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	88bb      	ldrh	r3, [r7, #4]
 8005576:	4413      	add	r3, r2
 8005578:	8b3a      	ldrh	r2, [r7, #24]
 800557a:	4619      	mov	r1, r3
 800557c:	f00a fa47 	bl	800fa0e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005580:	8afa      	ldrh	r2, [r7, #22]
 8005582:	8b3b      	ldrh	r3, [r7, #24]
 8005584:	4413      	add	r3, r2
 8005586:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005588:	8b7a      	ldrh	r2, [r7, #26]
 800558a:	8b3b      	ldrh	r3, [r7, #24]
 800558c:	4413      	add	r3, r2
 800558e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005590:	88fa      	ldrh	r2, [r7, #6]
 8005592:	8b3b      	ldrh	r3, [r7, #24]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <pbuf_copy_partial+0xca>
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1c4      	bne.n	8005538 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80055ae:	8afb      	ldrh	r3, [r7, #22]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	08010e58 	.word	0x08010e58
 80055bc:	080111a0 	.word	0x080111a0
 80055c0:	08010eb8 	.word	0x08010eb8
 80055c4:	080111c0 	.word	0x080111c0

080055c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	603a      	str	r2, [r7, #0]
 80055d2:	71fb      	strb	r3, [r7, #7]
 80055d4:	460b      	mov	r3, r1
 80055d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	8919      	ldrh	r1, [r3, #8]
 80055dc:	88ba      	ldrh	r2, [r7, #4]
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff faa5 	bl	8004b30 <pbuf_alloc>
 80055e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <pbuf_clone+0x2a>
    return NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e011      	b.n	8005616 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7ff fea3 	bl	8005340 <pbuf_copy>
 80055fa:	4603      	mov	r3, r0
 80055fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80055fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <pbuf_clone+0x4c>
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <pbuf_clone+0x58>)
 8005608:	f240 5224 	movw	r2, #1316	; 0x524
 800560c:	4905      	ldr	r1, [pc, #20]	; (8005624 <pbuf_clone+0x5c>)
 800560e:	4806      	ldr	r0, [pc, #24]	; (8005628 <pbuf_clone+0x60>)
 8005610:	f00a fa10 	bl	800fa34 <iprintf>
  return q;
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	08010e58 	.word	0x08010e58
 8005624:	080112cc 	.word	0x080112cc
 8005628:	08010eb8 	.word	0x08010eb8

0800562c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005630:	f00a fa18 	bl	800fa64 <rand>
 8005634:	4603      	mov	r3, r0
 8005636:	b29b      	uxth	r3, r3
 8005638:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800563c:	b29b      	uxth	r3, r3
 800563e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005642:	b29a      	uxth	r2, r3
 8005644:	4b01      	ldr	r3, [pc, #4]	; (800564c <tcp_init+0x20>)
 8005646:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005648:	bf00      	nop
 800564a:	bd80      	pop	{r7, pc}
 800564c:	2000000a 	.word	0x2000000a

08005650 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	7d1b      	ldrb	r3, [r3, #20]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d105      	bne.n	800566c <tcp_free+0x1c>
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <tcp_free+0x2c>)
 8005662:	22d4      	movs	r2, #212	; 0xd4
 8005664:	4906      	ldr	r1, [pc, #24]	; (8005680 <tcp_free+0x30>)
 8005666:	4807      	ldr	r0, [pc, #28]	; (8005684 <tcp_free+0x34>)
 8005668:	f00a f9e4 	bl	800fa34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	2001      	movs	r0, #1
 8005670:	f7fe ff28 	bl	80044c4 <memp_free>
}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	08011358 	.word	0x08011358
 8005680:	08011388 	.word	0x08011388
 8005684:	0801139c 	.word	0x0801139c

08005688 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	7d1b      	ldrb	r3, [r3, #20]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d105      	bne.n	80056a4 <tcp_free_listen+0x1c>
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <tcp_free_listen+0x2c>)
 800569a:	22df      	movs	r2, #223	; 0xdf
 800569c:	4906      	ldr	r1, [pc, #24]	; (80056b8 <tcp_free_listen+0x30>)
 800569e:	4807      	ldr	r0, [pc, #28]	; (80056bc <tcp_free_listen+0x34>)
 80056a0:	f00a f9c8 	bl	800fa34 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	2002      	movs	r0, #2
 80056a8:	f7fe ff0c 	bl	80044c4 <memp_free>
}
 80056ac:	bf00      	nop
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	08011358 	.word	0x08011358
 80056b8:	080113c4 	.word	0x080113c4
 80056bc:	0801139c 	.word	0x0801139c

080056c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80056c4:	f000 fe98 	bl	80063f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80056c8:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <tcp_tmr+0x28>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <tcp_tmr+0x28>)
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <tcp_tmr+0x28>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80056e0:	f000 fb4c 	bl	8005d7c <tcp_slowtmr>
  }
}
 80056e4:	bf00      	nop
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	200000cd 	.word	0x200000cd

080056ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <tcp_remove_listener+0x1c>
 80056fc:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <tcp_remove_listener+0x48>)
 80056fe:	22ff      	movs	r2, #255	; 0xff
 8005700:	490d      	ldr	r1, [pc, #52]	; (8005738 <tcp_remove_listener+0x4c>)
 8005702:	480e      	ldr	r0, [pc, #56]	; (800573c <tcp_remove_listener+0x50>)
 8005704:	f00a f996 	bl	800fa34 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e00a      	b.n	8005724 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d102      	bne.n	800571e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f1      	bne.n	800570e <tcp_remove_listener+0x22>
    }
  }
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	08011358 	.word	0x08011358
 8005738:	080113e0 	.word	0x080113e0
 800573c:	0801139c 	.word	0x0801139c

08005740 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <tcp_listen_closed+0x1c>
 800574e:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <tcp_listen_closed+0x60>)
 8005750:	f240 1211 	movw	r2, #273	; 0x111
 8005754:	4913      	ldr	r1, [pc, #76]	; (80057a4 <tcp_listen_closed+0x64>)
 8005756:	4814      	ldr	r0, [pc, #80]	; (80057a8 <tcp_listen_closed+0x68>)
 8005758:	f00a f96c 	bl	800fa34 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	7d1b      	ldrb	r3, [r3, #20]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d006      	beq.n	8005772 <tcp_listen_closed+0x32>
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <tcp_listen_closed+0x60>)
 8005766:	f44f 7289 	mov.w	r2, #274	; 0x112
 800576a:	4910      	ldr	r1, [pc, #64]	; (80057ac <tcp_listen_closed+0x6c>)
 800576c:	480e      	ldr	r0, [pc, #56]	; (80057a8 <tcp_listen_closed+0x68>)
 800576e:	f00a f961 	bl	800fa34 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005772:	2301      	movs	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e00b      	b.n	8005790 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005778:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <tcp_listen_closed+0x70>)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff ffb1 	bl	80056ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b03      	cmp	r3, #3
 8005794:	d9f0      	bls.n	8005778 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	08011358 	.word	0x08011358
 80057a4:	08011408 	.word	0x08011408
 80057a8:	0801139c 	.word	0x0801139c
 80057ac:	08011414 	.word	0x08011414
 80057b0:	080136cc 	.word	0x080136cc

080057b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80057b4:	b5b0      	push	{r4, r5, r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af04      	add	r7, sp, #16
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <tcp_close_shutdown+0x20>
 80057c6:	4b61      	ldr	r3, [pc, #388]	; (800594c <tcp_close_shutdown+0x198>)
 80057c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80057cc:	4960      	ldr	r1, [pc, #384]	; (8005950 <tcp_close_shutdown+0x19c>)
 80057ce:	4861      	ldr	r0, [pc, #388]	; (8005954 <tcp_close_shutdown+0x1a0>)
 80057d0:	f00a f930 	bl	800fa34 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d066      	beq.n	80058a8 <tcp_close_shutdown+0xf4>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7d1b      	ldrb	r3, [r3, #20]
 80057de:	2b04      	cmp	r3, #4
 80057e0:	d003      	beq.n	80057ea <tcp_close_shutdown+0x36>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	7d1b      	ldrb	r3, [r3, #20]
 80057e6:	2b07      	cmp	r3, #7
 80057e8:	d15e      	bne.n	80058a8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <tcp_close_shutdown+0x48>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fa:	d055      	beq.n	80058a8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8b5b      	ldrh	r3, [r3, #26]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	d106      	bne.n	8005816 <tcp_close_shutdown+0x62>
 8005808:	4b50      	ldr	r3, [pc, #320]	; (800594c <tcp_close_shutdown+0x198>)
 800580a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800580e:	4952      	ldr	r1, [pc, #328]	; (8005958 <tcp_close_shutdown+0x1a4>)
 8005810:	4850      	ldr	r0, [pc, #320]	; (8005954 <tcp_close_shutdown+0x1a0>)
 8005812:	f00a f90f 	bl	800fa34 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800581e:	687d      	ldr	r5, [r7, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3304      	adds	r3, #4
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	8ad2      	ldrh	r2, [r2, #22]
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	8b09      	ldrh	r1, [r1, #24]
 800582c:	9102      	str	r1, [sp, #8]
 800582e:	9201      	str	r2, [sp, #4]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	462b      	mov	r3, r5
 8005834:	4622      	mov	r2, r4
 8005836:	4601      	mov	r1, r0
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f004 fe8f 	bl	800a55c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 f8ba 	bl	80069b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005844:	4b45      	ldr	r3, [pc, #276]	; (800595c <tcp_close_shutdown+0x1a8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	429a      	cmp	r2, r3
 800584c:	d105      	bne.n	800585a <tcp_close_shutdown+0xa6>
 800584e:	4b43      	ldr	r3, [pc, #268]	; (800595c <tcp_close_shutdown+0x1a8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	4a41      	ldr	r2, [pc, #260]	; (800595c <tcp_close_shutdown+0x1a8>)
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	e013      	b.n	8005882 <tcp_close_shutdown+0xce>
 800585a:	4b40      	ldr	r3, [pc, #256]	; (800595c <tcp_close_shutdown+0x1a8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e00c      	b.n	800587c <tcp_close_shutdown+0xc8>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d104      	bne.n	8005876 <tcp_close_shutdown+0xc2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	60da      	str	r2, [r3, #12]
 8005874:	e005      	b.n	8005882 <tcp_close_shutdown+0xce>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1ef      	bne.n	8005862 <tcp_close_shutdown+0xae>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	4b35      	ldr	r3, [pc, #212]	; (8005960 <tcp_close_shutdown+0x1ac>)
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800588e:	4b35      	ldr	r3, [pc, #212]	; (8005964 <tcp_close_shutdown+0x1b0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d102      	bne.n	800589e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005898:	f003 fd4c 	bl	8009334 <tcp_trigger_input_pcb_close>
 800589c:	e002      	b.n	80058a4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fed6 	bl	8005650 <tcp_free>
      }
      return ERR_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e04d      	b.n	8005944 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	7d1b      	ldrb	r3, [r3, #20]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d02d      	beq.n	800590c <tcp_close_shutdown+0x158>
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d036      	beq.n	8005922 <tcp_close_shutdown+0x16e>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d13f      	bne.n	8005938 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8adb      	ldrh	r3, [r3, #22]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d021      	beq.n	8005904 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80058c0:	4b29      	ldr	r3, [pc, #164]	; (8005968 <tcp_close_shutdown+0x1b4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d105      	bne.n	80058d6 <tcp_close_shutdown+0x122>
 80058ca:	4b27      	ldr	r3, [pc, #156]	; (8005968 <tcp_close_shutdown+0x1b4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a25      	ldr	r2, [pc, #148]	; (8005968 <tcp_close_shutdown+0x1b4>)
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	e013      	b.n	80058fe <tcp_close_shutdown+0x14a>
 80058d6:	4b24      	ldr	r3, [pc, #144]	; (8005968 <tcp_close_shutdown+0x1b4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	e00c      	b.n	80058f8 <tcp_close_shutdown+0x144>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d104      	bne.n	80058f2 <tcp_close_shutdown+0x13e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	e005      	b.n	80058fe <tcp_close_shutdown+0x14a>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	60bb      	str	r3, [r7, #8]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1ef      	bne.n	80058de <tcp_close_shutdown+0x12a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fea3 	bl	8005650 <tcp_free>
      break;
 800590a:	e01a      	b.n	8005942 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff ff17 	bl	8005740 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4815      	ldr	r0, [pc, #84]	; (800596c <tcp_close_shutdown+0x1b8>)
 8005916:	f001 f89f 	bl	8006a58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff feb4 	bl	8005688 <tcp_free_listen>
      break;
 8005920:	e00f      	b.n	8005942 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	480d      	ldr	r0, [pc, #52]	; (800595c <tcp_close_shutdown+0x1a8>)
 8005926:	f001 f897 	bl	8006a58 <tcp_pcb_remove>
 800592a:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <tcp_close_shutdown+0x1ac>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fe8d 	bl	8005650 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005936:	e004      	b.n	8005942 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f819 	bl	8005970 <tcp_close_shutdown_fin>
 800593e:	4603      	mov	r3, r0
 8005940:	e000      	b.n	8005944 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bdb0      	pop	{r4, r5, r7, pc}
 800594c:	08011358 	.word	0x08011358
 8005950:	0801142c 	.word	0x0801142c
 8005954:	0801139c 	.word	0x0801139c
 8005958:	0801144c 	.word	0x0801144c
 800595c:	20006528 	.word	0x20006528
 8005960:	20006524 	.word	0x20006524
 8005964:	2000653c 	.word	0x2000653c
 8005968:	20006534 	.word	0x20006534
 800596c:	20006530 	.word	0x20006530

08005970 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <tcp_close_shutdown_fin+0x1c>
 800597e:	4b2c      	ldr	r3, [pc, #176]	; (8005a30 <tcp_close_shutdown_fin+0xc0>)
 8005980:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005984:	492b      	ldr	r1, [pc, #172]	; (8005a34 <tcp_close_shutdown_fin+0xc4>)
 8005986:	482c      	ldr	r0, [pc, #176]	; (8005a38 <tcp_close_shutdown_fin+0xc8>)
 8005988:	f00a f854 	bl	800fa34 <iprintf>

  switch (pcb->state) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7d1b      	ldrb	r3, [r3, #20]
 8005990:	2b04      	cmp	r3, #4
 8005992:	d010      	beq.n	80059b6 <tcp_close_shutdown_fin+0x46>
 8005994:	2b07      	cmp	r3, #7
 8005996:	d01b      	beq.n	80059d0 <tcp_close_shutdown_fin+0x60>
 8005998:	2b03      	cmp	r3, #3
 800599a:	d126      	bne.n	80059ea <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f003 fedb 	bl	8009758 <tcp_send_fin>
 80059a2:	4603      	mov	r3, r0
 80059a4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80059a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d11f      	bne.n	80059ee <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2205      	movs	r2, #5
 80059b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80059b4:	e01b      	b.n	80059ee <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f003 fece 	bl	8009758 <tcp_send_fin>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80059c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d114      	bne.n	80059f2 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2205      	movs	r2, #5
 80059cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80059ce:	e010      	b.n	80059f2 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f003 fec1 	bl	8009758 <tcp_send_fin>
 80059d6:	4603      	mov	r3, r0
 80059d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80059da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2209      	movs	r2, #9
 80059e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80059e8:	e005      	b.n	80059f6 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e01c      	b.n	8005a28 <tcp_close_shutdown_fin+0xb8>
      break;
 80059ee:	bf00      	nop
 80059f0:	e002      	b.n	80059f8 <tcp_close_shutdown_fin+0x88>
      break;
 80059f2:	bf00      	nop
 80059f4:	e000      	b.n	80059f8 <tcp_close_shutdown_fin+0x88>
      break;
 80059f6:	bf00      	nop
  }

  if (err == ERR_OK) {
 80059f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f003 ffe7 	bl	80099d4 <tcp_output>
 8005a06:	e00d      	b.n	8005a24 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d108      	bne.n	8005a24 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8b5b      	ldrh	r3, [r3, #26]
 8005a16:	f043 0308 	orr.w	r3, r3, #8
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	e001      	b.n	8005a28 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8005a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	08011358 	.word	0x08011358
 8005a34:	08011408 	.word	0x08011408
 8005a38:	0801139c 	.word	0x0801139c

08005a3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <tcp_close+0x22>
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <tcp_close+0x4c>)
 8005a4c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005a50:	490e      	ldr	r1, [pc, #56]	; (8005a8c <tcp_close+0x50>)
 8005a52:	480f      	ldr	r0, [pc, #60]	; (8005a90 <tcp_close+0x54>)
 8005a54:	f009 ffee 	bl	800fa34 <iprintf>
 8005a58:	f06f 030f 	mvn.w	r3, #15
 8005a5c:	e00f      	b.n	8005a7e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	7d1b      	ldrb	r3, [r3, #20]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d006      	beq.n	8005a74 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8b5b      	ldrh	r3, [r3, #26]
 8005a6a:	f043 0310 	orr.w	r3, r3, #16
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005a74:	2101      	movs	r1, #1
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fe9c 	bl	80057b4 <tcp_close_shutdown>
 8005a7c:	4603      	mov	r3, r0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	08011358 	.word	0x08011358
 8005a8c:	08011468 	.word	0x08011468
 8005a90:	0801139c 	.word	0x0801139c

08005a94 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08e      	sub	sp, #56	; 0x38
 8005a98:	af04      	add	r7, sp, #16
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d107      	bne.n	8005ab4 <tcp_abandon+0x20>
 8005aa4:	4b52      	ldr	r3, [pc, #328]	; (8005bf0 <tcp_abandon+0x15c>)
 8005aa6:	f240 223d 	movw	r2, #573	; 0x23d
 8005aaa:	4952      	ldr	r1, [pc, #328]	; (8005bf4 <tcp_abandon+0x160>)
 8005aac:	4852      	ldr	r0, [pc, #328]	; (8005bf8 <tcp_abandon+0x164>)
 8005aae:	f009 ffc1 	bl	800fa34 <iprintf>
 8005ab2:	e099      	b.n	8005be8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	7d1b      	ldrb	r3, [r3, #20]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d106      	bne.n	8005aca <tcp_abandon+0x36>
 8005abc:	4b4c      	ldr	r3, [pc, #304]	; (8005bf0 <tcp_abandon+0x15c>)
 8005abe:	f240 2241 	movw	r2, #577	; 0x241
 8005ac2:	494e      	ldr	r1, [pc, #312]	; (8005bfc <tcp_abandon+0x168>)
 8005ac4:	484c      	ldr	r0, [pc, #304]	; (8005bf8 <tcp_abandon+0x164>)
 8005ac6:	f009 ffb5 	bl	800fa34 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7d1b      	ldrb	r3, [r3, #20]
 8005ace:	2b0a      	cmp	r3, #10
 8005ad0:	d107      	bne.n	8005ae2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	484a      	ldr	r0, [pc, #296]	; (8005c00 <tcp_abandon+0x16c>)
 8005ad6:	f000 ffbf 	bl	8006a58 <tcp_pcb_remove>
    tcp_free(pcb);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff fdb8 	bl	8005650 <tcp_free>
 8005ae0:	e082      	b.n	8005be8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	7d1b      	ldrb	r3, [r3, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d126      	bne.n	8005b5a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8adb      	ldrh	r3, [r3, #22]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d02e      	beq.n	8005b72 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005b14:	4b3b      	ldr	r3, [pc, #236]	; (8005c04 <tcp_abandon+0x170>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d105      	bne.n	8005b2a <tcp_abandon+0x96>
 8005b1e:	4b39      	ldr	r3, [pc, #228]	; (8005c04 <tcp_abandon+0x170>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a37      	ldr	r2, [pc, #220]	; (8005c04 <tcp_abandon+0x170>)
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e013      	b.n	8005b52 <tcp_abandon+0xbe>
 8005b2a:	4b36      	ldr	r3, [pc, #216]	; (8005c04 <tcp_abandon+0x170>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	e00c      	b.n	8005b4c <tcp_abandon+0xb8>
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d104      	bne.n	8005b46 <tcp_abandon+0xb2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	60da      	str	r2, [r3, #12]
 8005b44:	e005      	b.n	8005b52 <tcp_abandon+0xbe>
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1ef      	bne.n	8005b32 <tcp_abandon+0x9e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	e00b      	b.n	8005b72 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8adb      	ldrh	r3, [r3, #22]
 8005b62:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4828      	ldr	r0, [pc, #160]	; (8005c08 <tcp_abandon+0x174>)
 8005b68:	f000 ff76 	bl	8006a58 <tcp_pcb_remove>
 8005b6c:	4b27      	ldr	r3, [pc, #156]	; (8005c0c <tcp_abandon+0x178>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fd1a 	bl	80065b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fd11 	bl	80065b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fd08 	bl	80065b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00e      	beq.n	8005bcc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	8b12      	ldrh	r2, [r2, #24]
 8005bb8:	9202      	str	r2, [sp, #8]
 8005bba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005bbc:	9201      	str	r2, [sp, #4]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	69b9      	ldr	r1, [r7, #24]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f004 fcc8 	bl	800a55c <tcp_rst>
    }
    last_state = pcb->state;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	7d1b      	ldrb	r3, [r3, #20]
 8005bd0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff fd3c 	bl	8005650 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <tcp_abandon+0x154>
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f06f 010c 	mvn.w	r1, #12
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	4798      	blx	r3
  }
}
 8005be8:	3728      	adds	r7, #40	; 0x28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	08011358 	.word	0x08011358
 8005bf4:	0801149c 	.word	0x0801149c
 8005bf8:	0801139c 	.word	0x0801139c
 8005bfc:	080114b8 	.word	0x080114b8
 8005c00:	20006538 	.word	0x20006538
 8005c04:	20006534 	.word	0x20006534
 8005c08:	20006528 	.word	0x20006528
 8005c0c:	20006524 	.word	0x20006524

08005c10 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005c18:	2101      	movs	r1, #1
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff ff3a 	bl	8005a94 <tcp_abandon>
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <tcp_update_rcv_ann_wnd+0x1c>
 8005c36:	4b25      	ldr	r3, [pc, #148]	; (8005ccc <tcp_update_rcv_ann_wnd+0xa4>)
 8005c38:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005c3c:	4924      	ldr	r1, [pc, #144]	; (8005cd0 <tcp_update_rcv_ann_wnd+0xa8>)
 8005c3e:	4825      	ldr	r0, [pc, #148]	; (8005cd4 <tcp_update_rcv_ann_wnd+0xac>)
 8005c40:	f009 fef8 	bl	800fa34 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005c4c:	4413      	add	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005c58:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005c5c:	bf28      	it	cs
 8005c5e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8005c62:	b292      	uxth	r2, r2
 8005c64:	4413      	add	r3, r2
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	db08      	blt.n	8005c80 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	e020      	b.n	8005cc2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	dd03      	ble.n	8005c96 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c94:	e014      	b.n	8005cc0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca8:	d306      	bcc.n	8005cb8 <tcp_update_rcv_ann_wnd+0x90>
 8005caa:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <tcp_update_rcv_ann_wnd+0xa4>)
 8005cac:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005cb0:	4909      	ldr	r1, [pc, #36]	; (8005cd8 <tcp_update_rcv_ann_wnd+0xb0>)
 8005cb2:	4808      	ldr	r0, [pc, #32]	; (8005cd4 <tcp_update_rcv_ann_wnd+0xac>)
 8005cb4:	f009 febe 	bl	800fa34 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005cc0:	2300      	movs	r3, #0
  }
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	08011358 	.word	0x08011358
 8005cd0:	080115b4 	.word	0x080115b4
 8005cd4:	0801139c 	.word	0x0801139c
 8005cd8:	080115d8 	.word	0x080115d8

08005cdc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d107      	bne.n	8005cfe <tcp_recved+0x22>
 8005cee:	4b1f      	ldr	r3, [pc, #124]	; (8005d6c <tcp_recved+0x90>)
 8005cf0:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005cf4:	491e      	ldr	r1, [pc, #120]	; (8005d70 <tcp_recved+0x94>)
 8005cf6:	481f      	ldr	r0, [pc, #124]	; (8005d74 <tcp_recved+0x98>)
 8005cf8:	f009 fe9c 	bl	800fa34 <iprintf>
 8005cfc:	e032      	b.n	8005d64 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	7d1b      	ldrb	r3, [r3, #20]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d106      	bne.n	8005d14 <tcp_recved+0x38>
 8005d06:	4b19      	ldr	r3, [pc, #100]	; (8005d6c <tcp_recved+0x90>)
 8005d08:	f240 32d3 	movw	r2, #979	; 0x3d3
 8005d0c:	491a      	ldr	r1, [pc, #104]	; (8005d78 <tcp_recved+0x9c>)
 8005d0e:	4819      	ldr	r0, [pc, #100]	; (8005d74 <tcp_recved+0x98>)
 8005d10:	f009 fe90 	bl	800fa34 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005d18:	887b      	ldrh	r3, [r7, #2]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005d1e:	89fb      	ldrh	r3, [r7, #14]
 8005d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d24:	d804      	bhi.n	8005d30 <tcp_recved+0x54>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2a:	89fa      	ldrh	r2, [r7, #14]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d204      	bcs.n	8005d3a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d36:	851a      	strh	r2, [r3, #40]	; 0x28
 8005d38:	e002      	b.n	8005d40 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	89fa      	ldrh	r2, [r7, #14]
 8005d3e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff71 	bl	8005c28 <tcp_update_rcv_ann_wnd>
 8005d46:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4e:	d309      	bcc.n	8005d64 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8b5b      	ldrh	r3, [r3, #26]
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f003 fe38 	bl	80099d4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	08011358 	.word	0x08011358
 8005d70:	080115f4 	.word	0x080115f4
 8005d74:	0801139c 	.word	0x0801139c
 8005d78:	0801160c 	.word	0x0801160c

08005d7c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005d7c:	b5b0      	push	{r4, r5, r7, lr}
 8005d7e:	b090      	sub	sp, #64	; 0x40
 8005d80:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005d88:	4b94      	ldr	r3, [pc, #592]	; (8005fdc <tcp_slowtmr+0x260>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	4a93      	ldr	r2, [pc, #588]	; (8005fdc <tcp_slowtmr+0x260>)
 8005d90:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005d92:	4b93      	ldr	r3, [pc, #588]	; (8005fe0 <tcp_slowtmr+0x264>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	3301      	adds	r3, #1
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	4b91      	ldr	r3, [pc, #580]	; (8005fe0 <tcp_slowtmr+0x264>)
 8005d9c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005da2:	4b90      	ldr	r3, [pc, #576]	; (8005fe4 <tcp_slowtmr+0x268>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005da8:	e29f      	b.n	80062ea <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	7d1b      	ldrb	r3, [r3, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <tcp_slowtmr+0x44>
 8005db2:	4b8d      	ldr	r3, [pc, #564]	; (8005fe8 <tcp_slowtmr+0x26c>)
 8005db4:	f240 42be 	movw	r2, #1214	; 0x4be
 8005db8:	498c      	ldr	r1, [pc, #560]	; (8005fec <tcp_slowtmr+0x270>)
 8005dba:	488d      	ldr	r0, [pc, #564]	; (8005ff0 <tcp_slowtmr+0x274>)
 8005dbc:	f009 fe3a 	bl	800fa34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	7d1b      	ldrb	r3, [r3, #20]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d106      	bne.n	8005dd6 <tcp_slowtmr+0x5a>
 8005dc8:	4b87      	ldr	r3, [pc, #540]	; (8005fe8 <tcp_slowtmr+0x26c>)
 8005dca:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005dce:	4989      	ldr	r1, [pc, #548]	; (8005ff4 <tcp_slowtmr+0x278>)
 8005dd0:	4887      	ldr	r0, [pc, #540]	; (8005ff0 <tcp_slowtmr+0x274>)
 8005dd2:	f009 fe2f 	bl	800fa34 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	7d1b      	ldrb	r3, [r3, #20]
 8005dda:	2b0a      	cmp	r3, #10
 8005ddc:	d106      	bne.n	8005dec <tcp_slowtmr+0x70>
 8005dde:	4b82      	ldr	r3, [pc, #520]	; (8005fe8 <tcp_slowtmr+0x26c>)
 8005de0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005de4:	4984      	ldr	r1, [pc, #528]	; (8005ff8 <tcp_slowtmr+0x27c>)
 8005de6:	4882      	ldr	r0, [pc, #520]	; (8005ff0 <tcp_slowtmr+0x274>)
 8005de8:	f009 fe24 	bl	800fa34 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	7f9a      	ldrb	r2, [r3, #30]
 8005df0:	4b7b      	ldr	r3, [pc, #492]	; (8005fe0 <tcp_slowtmr+0x264>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d105      	bne.n	8005e04 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005e02:	e272      	b.n	80062ea <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005e04:	4b76      	ldr	r3, [pc, #472]	; (8005fe0 <tcp_slowtmr+0x264>)
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	7d1b      	ldrb	r3, [r3, #20]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d10a      	bne.n	8005e36 <tcp_slowtmr+0xba>
 8005e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	d905      	bls.n	8005e36 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e2e:	3301      	adds	r3, #1
 8005e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e34:	e11e      	b.n	8006074 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e3c:	2b0b      	cmp	r3, #11
 8005e3e:	d905      	bls.n	8005e4c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e44:	3301      	adds	r3, #1
 8005e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e4a:	e113      	b.n	8006074 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d075      	beq.n	8005f42 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d006      	beq.n	8005e6c <tcp_slowtmr+0xf0>
 8005e5e:	4b62      	ldr	r3, [pc, #392]	; (8005fe8 <tcp_slowtmr+0x26c>)
 8005e60:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005e64:	4965      	ldr	r1, [pc, #404]	; (8005ffc <tcp_slowtmr+0x280>)
 8005e66:	4862      	ldr	r0, [pc, #392]	; (8005ff0 <tcp_slowtmr+0x274>)
 8005e68:	f009 fde4 	bl	800fa34 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <tcp_slowtmr+0x106>
 8005e74:	4b5c      	ldr	r3, [pc, #368]	; (8005fe8 <tcp_slowtmr+0x26c>)
 8005e76:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005e7a:	4961      	ldr	r1, [pc, #388]	; (8006000 <tcp_slowtmr+0x284>)
 8005e7c:	485c      	ldr	r0, [pc, #368]	; (8005ff0 <tcp_slowtmr+0x274>)
 8005e7e:	f009 fdd9 	bl	800fa34 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005e88:	2b0b      	cmp	r3, #11
 8005e8a:	d905      	bls.n	8005e98 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e90:	3301      	adds	r3, #1
 8005e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e96:	e0ed      	b.n	8006074 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	4a58      	ldr	r2, [pc, #352]	; (8006004 <tcp_slowtmr+0x288>)
 8005ea2:	5cd3      	ldrb	r3, [r2, r3]
 8005ea4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005eac:	7c7a      	ldrb	r2, [r7, #17]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d907      	bls.n	8005ec2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005eb8:	3301      	adds	r3, #1
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005ec8:	7c7a      	ldrb	r2, [r7, #17]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	f200 80d2 	bhi.w	8006074 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d108      	bne.n	8005ef0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ee0:	f004 fc2e 	bl	800a740 <tcp_zero_window_probe>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005eea:	2300      	movs	r3, #0
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	e011      	b.n	8005f14 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005efa:	f003 fae5 	bl	80094c8 <tcp_split_unsent_seg>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d107      	bne.n	8005f14 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f06:	f003 fd65 	bl	80099d4 <tcp_output>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 80ac 	beq.w	8006074 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005f2a:	2b06      	cmp	r3, #6
 8005f2c:	f200 80a2 	bhi.w	8006074 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005f36:	3301      	adds	r3, #1
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005f40:	e098      	b.n	8006074 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	db0f      	blt.n	8005f6c <tcp_slowtmr+0x1f0>
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005f52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d008      	beq.n	8005f6c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3301      	adds	r3, #1
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	b21a      	sxth	r2, r3
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	db7b      	blt.n	8006074 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f7e:	f004 f821 	bl	8009fc4 <tcp_rexmit_rto_prepare>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <tcp_slowtmr+0x21c>
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d171      	bne.n	8006074 <tcp_slowtmr+0x2f8>
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d06d      	beq.n	8006074 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	7d1b      	ldrb	r3, [r3, #20]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d03a      	beq.n	8006016 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fa6:	2b0c      	cmp	r3, #12
 8005fa8:	bf28      	it	cs
 8005faa:	230c      	movcs	r3, #12
 8005fac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005fb4:	10db      	asrs	r3, r3, #3
 8005fb6:	b21b      	sxth	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005fc0:	4413      	add	r3, r2
 8005fc2:	7efa      	ldrb	r2, [r7, #27]
 8005fc4:	4910      	ldr	r1, [pc, #64]	; (8006008 <tcp_slowtmr+0x28c>)
 8005fc6:	5c8a      	ldrb	r2, [r1, r2]
 8005fc8:	4093      	lsls	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	dc1a      	bgt.n	800600c <tcp_slowtmr+0x290>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	b21a      	sxth	r2, r3
 8005fda:	e019      	b.n	8006010 <tcp_slowtmr+0x294>
 8005fdc:	2000652c 	.word	0x2000652c
 8005fe0:	200000ce 	.word	0x200000ce
 8005fe4:	20006528 	.word	0x20006528
 8005fe8:	08011358 	.word	0x08011358
 8005fec:	0801169c 	.word	0x0801169c
 8005ff0:	0801139c 	.word	0x0801139c
 8005ff4:	080116c8 	.word	0x080116c8
 8005ff8:	080116f4 	.word	0x080116f4
 8005ffc:	08011724 	.word	0x08011724
 8006000:	08011758 	.word	0x08011758
 8006004:	080136c4 	.word	0x080136c4
 8006008:	080136b4 	.word	0x080136b4
 800600c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	2200      	movs	r2, #0
 800601a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006028:	4293      	cmp	r3, r2
 800602a:	bf28      	it	cs
 800602c:	4613      	movcs	r3, r2
 800602e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006030:	8a7b      	ldrh	r3, [r7, #18]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	b29b      	uxth	r3, r3
 800604a:	429a      	cmp	r2, r3
 800604c:	d206      	bcs.n	800605c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	2200      	movs	r2, #0
 800606a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800606e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006070:	f004 f818 	bl	800a0a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	7d1b      	ldrb	r3, [r3, #20]
 8006078:	2b06      	cmp	r3, #6
 800607a:	d111      	bne.n	80060a0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	8b5b      	ldrh	r3, [r3, #26]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006088:	4b9d      	ldr	r3, [pc, #628]	; (8006300 <tcp_slowtmr+0x584>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b28      	cmp	r3, #40	; 0x28
 8006094:	d904      	bls.n	80060a0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800609a:	3301      	adds	r3, #1
 800609c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	7a5b      	ldrb	r3, [r3, #9]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d04c      	beq.n	8006146 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d003      	beq.n	80060bc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80060b8:	2b07      	cmp	r3, #7
 80060ba:	d144      	bne.n	8006146 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80060bc:	4b90      	ldr	r3, [pc, #576]	; (8006300 <tcp_slowtmr+0x584>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060cc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80060d0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80060d4:	498b      	ldr	r1, [pc, #556]	; (8006304 <tcp_slowtmr+0x588>)
 80060d6:	fba1 1303 	umull	r1, r3, r1, r3
 80060da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80060dc:	429a      	cmp	r2, r3
 80060de:	d90a      	bls.n	80060f6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80060e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060e4:	3301      	adds	r3, #1
 80060e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80060ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80060ee:	3301      	adds	r3, #1
 80060f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80060f4:	e027      	b.n	8006146 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80060f6:	4b82      	ldr	r3, [pc, #520]	; (8006300 <tcp_slowtmr+0x584>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800610c:	4618      	mov	r0, r3
 800610e:	4b7e      	ldr	r3, [pc, #504]	; (8006308 <tcp_slowtmr+0x58c>)
 8006110:	fb03 f300 	mul.w	r3, r3, r0
 8006114:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006116:	497b      	ldr	r1, [pc, #492]	; (8006304 <tcp_slowtmr+0x588>)
 8006118:	fba1 1303 	umull	r1, r3, r1, r3
 800611c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800611e:	429a      	cmp	r2, r3
 8006120:	d911      	bls.n	8006146 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006124:	f004 facc 	bl	800a6c0 <tcp_keepalive>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800612e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006132:	2b00      	cmp	r3, #0
 8006134:	d107      	bne.n	8006146 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800613c:	3301      	adds	r3, #1
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614a:	2b00      	cmp	r3, #0
 800614c:	d011      	beq.n	8006172 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800614e:	4b6c      	ldr	r3, [pc, #432]	; (8006300 <tcp_slowtmr+0x584>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800615e:	4619      	mov	r1, r3
 8006160:	460b      	mov	r3, r1
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	440b      	add	r3, r1
 8006166:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006168:	429a      	cmp	r2, r3
 800616a:	d302      	bcc.n	8006172 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800616c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800616e:	f000 fdd7 	bl	8006d20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	7d1b      	ldrb	r3, [r3, #20]
 8006176:	2b03      	cmp	r3, #3
 8006178:	d10b      	bne.n	8006192 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800617a:	4b61      	ldr	r3, [pc, #388]	; (8006300 <tcp_slowtmr+0x584>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b28      	cmp	r3, #40	; 0x28
 8006186:	d904      	bls.n	8006192 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800618c:	3301      	adds	r3, #1
 800618e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	7d1b      	ldrb	r3, [r3, #20]
 8006196:	2b09      	cmp	r3, #9
 8006198:	d10b      	bne.n	80061b2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800619a:	4b59      	ldr	r3, [pc, #356]	; (8006300 <tcp_slowtmr+0x584>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2bf0      	cmp	r3, #240	; 0xf0
 80061a6:	d904      	bls.n	80061b2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80061a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061ac:	3301      	adds	r3, #1
 80061ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80061b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d060      	beq.n	800627c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80061c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061c4:	f000 fbf8 	bl	80069b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d010      	beq.n	80061f0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80061ce:	4b4f      	ldr	r3, [pc, #316]	; (800630c <tcp_slowtmr+0x590>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d106      	bne.n	80061e6 <tcp_slowtmr+0x46a>
 80061d8:	4b4d      	ldr	r3, [pc, #308]	; (8006310 <tcp_slowtmr+0x594>)
 80061da:	f240 526d 	movw	r2, #1389	; 0x56d
 80061de:	494d      	ldr	r1, [pc, #308]	; (8006314 <tcp_slowtmr+0x598>)
 80061e0:	484d      	ldr	r0, [pc, #308]	; (8006318 <tcp_slowtmr+0x59c>)
 80061e2:	f009 fc27 	bl	800fa34 <iprintf>
        prev->next = pcb->next;
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	60da      	str	r2, [r3, #12]
 80061ee:	e00f      	b.n	8006210 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80061f0:	4b46      	ldr	r3, [pc, #280]	; (800630c <tcp_slowtmr+0x590>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d006      	beq.n	8006208 <tcp_slowtmr+0x48c>
 80061fa:	4b45      	ldr	r3, [pc, #276]	; (8006310 <tcp_slowtmr+0x594>)
 80061fc:	f240 5271 	movw	r2, #1393	; 0x571
 8006200:	4946      	ldr	r1, [pc, #280]	; (800631c <tcp_slowtmr+0x5a0>)
 8006202:	4845      	ldr	r0, [pc, #276]	; (8006318 <tcp_slowtmr+0x59c>)
 8006204:	f009 fc16 	bl	800fa34 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4a3f      	ldr	r2, [pc, #252]	; (800630c <tcp_slowtmr+0x590>)
 800620e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006214:	2b00      	cmp	r3, #0
 8006216:	d013      	beq.n	8006240 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006220:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	3304      	adds	r3, #4
 8006226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006228:	8ad2      	ldrh	r2, [r2, #22]
 800622a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800622c:	8b09      	ldrh	r1, [r1, #24]
 800622e:	9102      	str	r1, [sp, #8]
 8006230:	9201      	str	r2, [sp, #4]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	462b      	mov	r3, r5
 8006236:	4622      	mov	r2, r4
 8006238:	4601      	mov	r1, r0
 800623a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800623c:	f004 f98e 	bl	800a55c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	7d1b      	ldrb	r3, [r3, #20]
 800624a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006256:	6838      	ldr	r0, [r7, #0]
 8006258:	f7ff f9fa 	bl	8005650 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800625c:	4b30      	ldr	r3, [pc, #192]	; (8006320 <tcp_slowtmr+0x5a4>)
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <tcp_slowtmr+0x4f6>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f06f 010c 	mvn.w	r1, #12
 800626e:	68b8      	ldr	r0, [r7, #8]
 8006270:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006272:	4b2b      	ldr	r3, [pc, #172]	; (8006320 <tcp_slowtmr+0x5a4>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d037      	beq.n	80062ea <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800627a:	e590      	b.n	8005d9e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	7f1b      	ldrb	r3, [r3, #28]
 800628a:	3301      	adds	r3, #1
 800628c:	b2da      	uxtb	r2, r3
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	7f1a      	ldrb	r2, [r3, #28]
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	7f5b      	ldrb	r3, [r3, #29]
 800629a:	429a      	cmp	r2, r3
 800629c:	d325      	bcc.n	80062ea <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80062a4:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <tcp_slowtmr+0x5a4>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <tcp_slowtmr+0x550>
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062bc:	6912      	ldr	r2, [r2, #16]
 80062be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80062ca:	e002      	b.n	80062d2 <tcp_slowtmr+0x556>
 80062cc:	2300      	movs	r3, #0
 80062ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <tcp_slowtmr+0x5a4>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d000      	beq.n	80062dc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80062da:	e560      	b.n	8005d9e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80062dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80062e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e6:	f003 fb75 	bl	80099d4 <tcp_output>
  while (pcb != NULL) {
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f47f ad5c 	bne.w	8005daa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <tcp_slowtmr+0x5a8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80062fc:	e067      	b.n	80063ce <tcp_slowtmr+0x652>
 80062fe:	bf00      	nop
 8006300:	2000652c 	.word	0x2000652c
 8006304:	10624dd3 	.word	0x10624dd3
 8006308:	000124f8 	.word	0x000124f8
 800630c:	20006528 	.word	0x20006528
 8006310:	08011358 	.word	0x08011358
 8006314:	08011790 	.word	0x08011790
 8006318:	0801139c 	.word	0x0801139c
 800631c:	080117bc 	.word	0x080117bc
 8006320:	20006524 	.word	0x20006524
 8006324:	20006538 	.word	0x20006538
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	7d1b      	ldrb	r3, [r3, #20]
 800632c:	2b0a      	cmp	r3, #10
 800632e:	d006      	beq.n	800633e <tcp_slowtmr+0x5c2>
 8006330:	4b2a      	ldr	r3, [pc, #168]	; (80063dc <tcp_slowtmr+0x660>)
 8006332:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006336:	492a      	ldr	r1, [pc, #168]	; (80063e0 <tcp_slowtmr+0x664>)
 8006338:	482a      	ldr	r0, [pc, #168]	; (80063e4 <tcp_slowtmr+0x668>)
 800633a:	f009 fb7b 	bl	800fa34 <iprintf>
    pcb_remove = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006344:	4b28      	ldr	r3, [pc, #160]	; (80063e8 <tcp_slowtmr+0x66c>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2bf0      	cmp	r3, #240	; 0xf0
 8006350:	d904      	bls.n	800635c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006356:	3301      	adds	r3, #1
 8006358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800635c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006360:	2b00      	cmp	r3, #0
 8006362:	d02f      	beq.n	80063c4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006366:	f000 fb27 	bl	80069b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	2b00      	cmp	r3, #0
 800636e:	d010      	beq.n	8006392 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006370:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <tcp_slowtmr+0x670>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006376:	429a      	cmp	r2, r3
 8006378:	d106      	bne.n	8006388 <tcp_slowtmr+0x60c>
 800637a:	4b18      	ldr	r3, [pc, #96]	; (80063dc <tcp_slowtmr+0x660>)
 800637c:	f240 52af 	movw	r2, #1455	; 0x5af
 8006380:	491b      	ldr	r1, [pc, #108]	; (80063f0 <tcp_slowtmr+0x674>)
 8006382:	4818      	ldr	r0, [pc, #96]	; (80063e4 <tcp_slowtmr+0x668>)
 8006384:	f009 fb56 	bl	800fa34 <iprintf>
        prev->next = pcb->next;
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	60da      	str	r2, [r3, #12]
 8006390:	e00f      	b.n	80063b2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006392:	4b16      	ldr	r3, [pc, #88]	; (80063ec <tcp_slowtmr+0x670>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006398:	429a      	cmp	r2, r3
 800639a:	d006      	beq.n	80063aa <tcp_slowtmr+0x62e>
 800639c:	4b0f      	ldr	r3, [pc, #60]	; (80063dc <tcp_slowtmr+0x660>)
 800639e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80063a2:	4914      	ldr	r1, [pc, #80]	; (80063f4 <tcp_slowtmr+0x678>)
 80063a4:	480f      	ldr	r0, [pc, #60]	; (80063e4 <tcp_slowtmr+0x668>)
 80063a6:	f009 fb45 	bl	800fa34 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80063aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	4a0f      	ldr	r2, [pc, #60]	; (80063ec <tcp_slowtmr+0x670>)
 80063b0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80063bc:	69f8      	ldr	r0, [r7, #28]
 80063be:	f7ff f947 	bl	8005650 <tcp_free>
 80063c2:	e004      	b.n	80063ce <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1a9      	bne.n	8006328 <tcp_slowtmr+0x5ac>
    }
  }
}
 80063d4:	bf00      	nop
 80063d6:	3730      	adds	r7, #48	; 0x30
 80063d8:	46bd      	mov	sp, r7
 80063da:	bdb0      	pop	{r4, r5, r7, pc}
 80063dc:	08011358 	.word	0x08011358
 80063e0:	080117e8 	.word	0x080117e8
 80063e4:	0801139c 	.word	0x0801139c
 80063e8:	2000652c 	.word	0x2000652c
 80063ec:	20006538 	.word	0x20006538
 80063f0:	08011818 	.word	0x08011818
 80063f4:	08011840 	.word	0x08011840

080063f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80063fe:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <tcp_fasttmr+0xbc>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	4b2b      	ldr	r3, [pc, #172]	; (80064b4 <tcp_fasttmr+0xbc>)
 8006408:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800640a:	4b2b      	ldr	r3, [pc, #172]	; (80064b8 <tcp_fasttmr+0xc0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006410:	e048      	b.n	80064a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7f9a      	ldrb	r2, [r3, #30]
 8006416:	4b27      	ldr	r3, [pc, #156]	; (80064b4 <tcp_fasttmr+0xbc>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d03f      	beq.n	800649e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800641e:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <tcp_fasttmr+0xbc>)
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	8b5b      	ldrh	r3, [r3, #26]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d010      	beq.n	8006454 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	8b5b      	ldrh	r3, [r3, #26]
 8006436:	f043 0302 	orr.w	r3, r3, #2
 800643a:	b29a      	uxth	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f003 fac7 	bl	80099d4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	8b5b      	ldrh	r3, [r3, #26]
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8b5b      	ldrh	r3, [r3, #26]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8b5b      	ldrh	r3, [r3, #26]
 8006464:	f023 0308 	bic.w	r3, r3, #8
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fa7e 	bl	8005970 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00a      	beq.n	8006498 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006482:	4b0e      	ldr	r3, [pc, #56]	; (80064bc <tcp_fasttmr+0xc4>)
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f819 	bl	80064c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800648e:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <tcp_fasttmr+0xc4>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d000      	beq.n	8006498 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006496:	e7b8      	b.n	800640a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	607b      	str	r3, [r7, #4]
 800649c:	e002      	b.n	80064a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1b3      	bne.n	8006412 <tcp_fasttmr+0x1a>
    }
  }
}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200000ce 	.word	0x200000ce
 80064b8:	20006528 	.word	0x20006528
 80064bc:	20006524 	.word	0x20006524

080064c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <tcp_process_refused_data+0x22>
 80064ce:	4b37      	ldr	r3, [pc, #220]	; (80065ac <tcp_process_refused_data+0xec>)
 80064d0:	f240 6209 	movw	r2, #1545	; 0x609
 80064d4:	4936      	ldr	r1, [pc, #216]	; (80065b0 <tcp_process_refused_data+0xf0>)
 80064d6:	4837      	ldr	r0, [pc, #220]	; (80065b4 <tcp_process_refused_data+0xf4>)
 80064d8:	f009 faac 	bl	800fa34 <iprintf>
 80064dc:	f06f 030f 	mvn.w	r3, #15
 80064e0:	e060      	b.n	80065a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e6:	7b5b      	ldrb	r3, [r3, #13]
 80064e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <tcp_process_refused_data+0x58>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6918      	ldr	r0, [r3, #16]
 800650a:	2300      	movs	r3, #0
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	47a0      	blx	r4
 8006512:	4603      	mov	r3, r0
 8006514:	73fb      	strb	r3, [r7, #15]
 8006516:	e007      	b.n	8006528 <tcp_process_refused_data+0x68>
 8006518:	2300      	movs	r3, #0
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	2000      	movs	r0, #0
 8006520:	f000 f8a2 	bl	8006668 <tcp_recv_null>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d12a      	bne.n	8006586 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d033      	beq.n	80065a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006542:	d005      	beq.n	8006550 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006548:	3301      	adds	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <tcp_process_refused_data+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6918      	ldr	r0, [r3, #16]
 8006564:	2300      	movs	r3, #0
 8006566:	2200      	movs	r2, #0
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	47a0      	blx	r4
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]
 8006570:	e001      	b.n	8006576 <tcp_process_refused_data+0xb6>
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657a:	f113 0f0d 	cmn.w	r3, #13
 800657e:	d110      	bne.n	80065a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006580:	f06f 030c 	mvn.w	r3, #12
 8006584:	e00e      	b.n	80065a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800658a:	f113 0f0d 	cmn.w	r3, #13
 800658e:	d102      	bne.n	8006596 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006590:	f06f 030c 	mvn.w	r3, #12
 8006594:	e006      	b.n	80065a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800659c:	f06f 0304 	mvn.w	r3, #4
 80065a0:	e000      	b.n	80065a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd90      	pop	{r4, r7, pc}
 80065ac:	08011358 	.word	0x08011358
 80065b0:	08011868 	.word	0x08011868
 80065b4:	0801139c 	.word	0x0801139c

080065b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80065c0:	e007      	b.n	80065d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f809 	bl	80065e0 <tcp_seg_free>
    seg = next;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1f4      	bne.n	80065c2 <tcp_segs_free+0xa>
  }
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fd78 	bl	80050f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	2003      	movs	r0, #3
 8006604:	f7fd ff5e 	bl	80044c4 <memp_free>
  }
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <tcp_seg_copy+0x1c>
 800661e:	4b0f      	ldr	r3, [pc, #60]	; (800665c <tcp_seg_copy+0x4c>)
 8006620:	f240 6282 	movw	r2, #1666	; 0x682
 8006624:	490e      	ldr	r1, [pc, #56]	; (8006660 <tcp_seg_copy+0x50>)
 8006626:	480f      	ldr	r0, [pc, #60]	; (8006664 <tcp_seg_copy+0x54>)
 8006628:	f009 fa04 	bl	800fa34 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800662c:	2003      	movs	r0, #3
 800662e:	f7fd fefd 	bl	800442c <memp_malloc>
 8006632:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <tcp_seg_copy+0x2e>
    return NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	e00a      	b.n	8006654 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800663e:	2210      	movs	r2, #16
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f009 f9e3 	bl	800fa0e <memcpy>
  pbuf_ref(cseg->p);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fdef 	bl	8005230 <pbuf_ref>
  return cseg;
 8006652:	68fb      	ldr	r3, [r7, #12]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	08011358 	.word	0x08011358
 8006660:	080118ac 	.word	0x080118ac
 8006664:	0801139c 	.word	0x0801139c

08006668 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <tcp_recv_null+0x28>
 800667c:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <tcp_recv_null+0x60>)
 800667e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006682:	4912      	ldr	r1, [pc, #72]	; (80066cc <tcp_recv_null+0x64>)
 8006684:	4812      	ldr	r0, [pc, #72]	; (80066d0 <tcp_recv_null+0x68>)
 8006686:	f009 f9d5 	bl	800fa34 <iprintf>
 800668a:	f06f 030f 	mvn.w	r3, #15
 800668e:	e016      	b.n	80066be <tcp_recv_null+0x56>

  if (p != NULL) {
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	891b      	ldrh	r3, [r3, #8]
 800669a:	4619      	mov	r1, r3
 800669c:	68b8      	ldr	r0, [r7, #8]
 800669e:	f7ff fb1d 	bl	8005cdc <tcp_recved>
    pbuf_free(p);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fe fd24 	bl	80050f0 <pbuf_free>
 80066a8:	e008      	b.n	80066bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80066aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d104      	bne.n	80066bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80066b2:	68b8      	ldr	r0, [r7, #8]
 80066b4:	f7ff f9c2 	bl	8005a3c <tcp_close>
 80066b8:	4603      	mov	r3, r0
 80066ba:	e000      	b.n	80066be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	08011358 	.word	0x08011358
 80066cc:	080118c8 	.word	0x080118c8
 80066d0:	0801139c 	.word	0x0801139c

080066d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80066de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	db01      	blt.n	80066ea <tcp_kill_prio+0x16>
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	e000      	b.n	80066ec <tcp_kill_prio+0x18>
 80066ea:	237f      	movs	r3, #127	; 0x7f
 80066ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80066ee:	7afb      	ldrb	r3, [r7, #11]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d034      	beq.n	800675e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80066f4:	7afb      	ldrb	r3, [r7, #11]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006702:	4b19      	ldr	r3, [pc, #100]	; (8006768 <tcp_kill_prio+0x94>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e01f      	b.n	800674a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	7d5b      	ldrb	r3, [r3, #21]
 800670e:	7afa      	ldrb	r2, [r7, #11]
 8006710:	429a      	cmp	r2, r3
 8006712:	d80c      	bhi.n	800672e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006718:	7afa      	ldrb	r2, [r7, #11]
 800671a:	429a      	cmp	r2, r3
 800671c:	d112      	bne.n	8006744 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <tcp_kill_prio+0x98>)
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	429a      	cmp	r2, r3
 800672c:	d80a      	bhi.n	8006744 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800672e:	4b0f      	ldr	r3, [pc, #60]	; (800676c <tcp_kill_prio+0x98>)
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	7d5b      	ldrb	r3, [r3, #21]
 8006742:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1dc      	bne.n	800670a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006756:	6938      	ldr	r0, [r7, #16]
 8006758:	f7ff fa5a 	bl	8005c10 <tcp_abort>
 800675c:	e000      	b.n	8006760 <tcp_kill_prio+0x8c>
    return;
 800675e:	bf00      	nop
  }
}
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20006528 	.word	0x20006528
 800676c:	2000652c 	.word	0x2000652c

08006770 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	2b08      	cmp	r3, #8
 800677e:	d009      	beq.n	8006794 <tcp_kill_state+0x24>
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	2b09      	cmp	r3, #9
 8006784:	d006      	beq.n	8006794 <tcp_kill_state+0x24>
 8006786:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <tcp_kill_state+0x80>)
 8006788:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800678c:	4919      	ldr	r1, [pc, #100]	; (80067f4 <tcp_kill_state+0x84>)
 800678e:	481a      	ldr	r0, [pc, #104]	; (80067f8 <tcp_kill_state+0x88>)
 8006790:	f009 f950 	bl	800fa34 <iprintf>

  inactivity = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800679c:	4b17      	ldr	r3, [pc, #92]	; (80067fc <tcp_kill_state+0x8c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	e017      	b.n	80067d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	7d1b      	ldrb	r3, [r3, #20]
 80067a8:	79fa      	ldrb	r2, [r7, #7]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d10f      	bne.n	80067ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80067ae:	4b14      	ldr	r3, [pc, #80]	; (8006800 <tcp_kill_state+0x90>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d807      	bhi.n	80067ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80067be:	4b10      	ldr	r3, [pc, #64]	; (8006800 <tcp_kill_state+0x90>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e4      	bne.n	80067a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80067e0:	2100      	movs	r1, #0
 80067e2:	6938      	ldr	r0, [r7, #16]
 80067e4:	f7ff f956 	bl	8005a94 <tcp_abandon>
  }
}
 80067e8:	bf00      	nop
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	08011358 	.word	0x08011358
 80067f4:	080118e4 	.word	0x080118e4
 80067f8:	0801139c 	.word	0x0801139c
 80067fc:	20006528 	.word	0x20006528
 8006800:	2000652c 	.word	0x2000652c

08006804 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006812:	4b12      	ldr	r3, [pc, #72]	; (800685c <tcp_kill_timewait+0x58>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e012      	b.n	8006840 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800681a:	4b11      	ldr	r3, [pc, #68]	; (8006860 <tcp_kill_timewait+0x5c>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	d807      	bhi.n	800683a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800682a:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <tcp_kill_timewait+0x5c>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e9      	bne.n	800681a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800684c:	68b8      	ldr	r0, [r7, #8]
 800684e:	f7ff f9df 	bl	8005c10 <tcp_abort>
  }
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20006538 	.word	0x20006538
 8006860:	2000652c 	.word	0x2000652c

08006864 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800686a:	4b10      	ldr	r3, [pc, #64]	; (80068ac <tcp_handle_closepend+0x48>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006870:	e014      	b.n	800689c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8b5b      	ldrh	r3, [r3, #26]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b00      	cmp	r3, #0
 8006882:	d009      	beq.n	8006898 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8b5b      	ldrh	r3, [r3, #26]
 8006888:	f023 0308 	bic.w	r3, r3, #8
 800688c:	b29a      	uxth	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff f86c 	bl	8005970 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e7      	bne.n	8006872 <tcp_handle_closepend+0xe>
  }
}
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20006528 	.word	0x20006528

080068b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80068ba:	2001      	movs	r0, #1
 80068bc:	f7fd fdb6 	bl	800442c <memp_malloc>
 80068c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d126      	bne.n	8006916 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80068c8:	f7ff ffcc 	bl	8006864 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80068cc:	f7ff ff9a 	bl	8006804 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80068d0:	2001      	movs	r0, #1
 80068d2:	f7fd fdab 	bl	800442c <memp_malloc>
 80068d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d11b      	bne.n	8006916 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80068de:	2009      	movs	r0, #9
 80068e0:	f7ff ff46 	bl	8006770 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80068e4:	2001      	movs	r0, #1
 80068e6:	f7fd fda1 	bl	800442c <memp_malloc>
 80068ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d111      	bne.n	8006916 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80068f2:	2008      	movs	r0, #8
 80068f4:	f7ff ff3c 	bl	8006770 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80068f8:	2001      	movs	r0, #1
 80068fa:	f7fd fd97 	bl	800442c <memp_malloc>
 80068fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d107      	bne.n	8006916 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fee3 	bl	80066d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800690e:	2001      	movs	r0, #1
 8006910:	f7fd fd8c 	bl	800442c <memp_malloc>
 8006914:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d03f      	beq.n	800699c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800691c:	229c      	movs	r2, #156	; 0x9c
 800691e:	2100      	movs	r1, #0
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f009 f87f 	bl	800fa24 <memset>
    pcb->prio = prio;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	79fa      	ldrb	r2, [r7, #7]
 800692a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8006932:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800693c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	22ff      	movs	r2, #255	; 0xff
 800694a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006952:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2206      	movs	r2, #6
 8006958:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2206      	movs	r2, #6
 8006960:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006968:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006972:	4b0d      	ldr	r3, [pc, #52]	; (80069a8 <tcp_alloc+0xf8>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800697a:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <tcp_alloc+0xfc>)
 800697c:	781a      	ldrb	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8006988:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a08      	ldr	r2, [pc, #32]	; (80069b0 <tcp_alloc+0x100>)
 8006990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a07      	ldr	r2, [pc, #28]	; (80069b4 <tcp_alloc+0x104>)
 8006998:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800699c:	68fb      	ldr	r3, [r7, #12]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	2000652c 	.word	0x2000652c
 80069ac:	200000ce 	.word	0x200000ce
 80069b0:	08006669 	.word	0x08006669
 80069b4:	006ddd00 	.word	0x006ddd00

080069b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d107      	bne.n	80069d6 <tcp_pcb_purge+0x1e>
 80069c6:	4b21      	ldr	r3, [pc, #132]	; (8006a4c <tcp_pcb_purge+0x94>)
 80069c8:	f640 0251 	movw	r2, #2129	; 0x851
 80069cc:	4920      	ldr	r1, [pc, #128]	; (8006a50 <tcp_pcb_purge+0x98>)
 80069ce:	4821      	ldr	r0, [pc, #132]	; (8006a54 <tcp_pcb_purge+0x9c>)
 80069d0:	f009 f830 	bl	800fa34 <iprintf>
 80069d4:	e037      	b.n	8006a46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	7d1b      	ldrb	r3, [r3, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d033      	beq.n	8006a46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80069e2:	2b0a      	cmp	r3, #10
 80069e4:	d02f      	beq.n	8006a46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d02b      	beq.n	8006a46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fb78 	bl	80050f0 <pbuf_free>
      pcb->refused_data = NULL;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f986 	bl	8006d20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff fdc9 	bl	80065b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fdc4 	bl	80065b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	08011358 	.word	0x08011358
 8006a50:	080119a4 	.word	0x080119a4
 8006a54:	0801139c 	.word	0x0801139c

08006a58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d106      	bne.n	8006a76 <tcp_pcb_remove+0x1e>
 8006a68:	4b3e      	ldr	r3, [pc, #248]	; (8006b64 <tcp_pcb_remove+0x10c>)
 8006a6a:	f640 0283 	movw	r2, #2179	; 0x883
 8006a6e:	493e      	ldr	r1, [pc, #248]	; (8006b68 <tcp_pcb_remove+0x110>)
 8006a70:	483e      	ldr	r0, [pc, #248]	; (8006b6c <tcp_pcb_remove+0x114>)
 8006a72:	f008 ffdf 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d106      	bne.n	8006a8a <tcp_pcb_remove+0x32>
 8006a7c:	4b39      	ldr	r3, [pc, #228]	; (8006b64 <tcp_pcb_remove+0x10c>)
 8006a7e:	f640 0284 	movw	r2, #2180	; 0x884
 8006a82:	493b      	ldr	r1, [pc, #236]	; (8006b70 <tcp_pcb_remove+0x118>)
 8006a84:	4839      	ldr	r0, [pc, #228]	; (8006b6c <tcp_pcb_remove+0x114>)
 8006a86:	f008 ffd5 	bl	800fa34 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d105      	bne.n	8006aa0 <tcp_pcb_remove+0x48>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e013      	b.n	8006ac8 <tcp_pcb_remove+0x70>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	e00c      	b.n	8006ac2 <tcp_pcb_remove+0x6a>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d104      	bne.n	8006abc <tcp_pcb_remove+0x64>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	e005      	b.n	8006ac8 <tcp_pcb_remove+0x70>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1ef      	bne.n	8006aa8 <tcp_pcb_remove+0x50>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006ace:	6838      	ldr	r0, [r7, #0]
 8006ad0:	f7ff ff72 	bl	80069b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	7d1b      	ldrb	r3, [r3, #20]
 8006ad8:	2b0a      	cmp	r3, #10
 8006ada:	d013      	beq.n	8006b04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d00f      	beq.n	8006b04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	8b5b      	ldrh	r3, [r3, #26]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d009      	beq.n	8006b04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	8b5b      	ldrh	r3, [r3, #26]
 8006af4:	f043 0302 	orr.w	r3, r3, #2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006afe:	6838      	ldr	r0, [r7, #0]
 8006b00:	f002 ff68 	bl	80099d4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	7d1b      	ldrb	r3, [r3, #20]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d020      	beq.n	8006b4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d006      	beq.n	8006b22 <tcp_pcb_remove+0xca>
 8006b14:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <tcp_pcb_remove+0x10c>)
 8006b16:	f640 0293 	movw	r2, #2195	; 0x893
 8006b1a:	4916      	ldr	r1, [pc, #88]	; (8006b74 <tcp_pcb_remove+0x11c>)
 8006b1c:	4813      	ldr	r0, [pc, #76]	; (8006b6c <tcp_pcb_remove+0x114>)
 8006b1e:	f008 ff89 	bl	800fa34 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d006      	beq.n	8006b38 <tcp_pcb_remove+0xe0>
 8006b2a:	4b0e      	ldr	r3, [pc, #56]	; (8006b64 <tcp_pcb_remove+0x10c>)
 8006b2c:	f640 0294 	movw	r2, #2196	; 0x894
 8006b30:	4911      	ldr	r1, [pc, #68]	; (8006b78 <tcp_pcb_remove+0x120>)
 8006b32:	480e      	ldr	r0, [pc, #56]	; (8006b6c <tcp_pcb_remove+0x114>)
 8006b34:	f008 ff7e 	bl	800fa34 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d006      	beq.n	8006b4e <tcp_pcb_remove+0xf6>
 8006b40:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <tcp_pcb_remove+0x10c>)
 8006b42:	f640 0296 	movw	r2, #2198	; 0x896
 8006b46:	490d      	ldr	r1, [pc, #52]	; (8006b7c <tcp_pcb_remove+0x124>)
 8006b48:	4808      	ldr	r0, [pc, #32]	; (8006b6c <tcp_pcb_remove+0x114>)
 8006b4a:	f008 ff73 	bl	800fa34 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2200      	movs	r2, #0
 8006b52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	08011358 	.word	0x08011358
 8006b68:	080119c0 	.word	0x080119c0
 8006b6c:	0801139c 	.word	0x0801139c
 8006b70:	080119dc 	.word	0x080119dc
 8006b74:	080119fc 	.word	0x080119fc
 8006b78:	08011a14 	.word	0x08011a14
 8006b7c:	08011a30 	.word	0x08011a30

08006b80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <tcp_next_iss+0x1c>
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <tcp_next_iss+0x38>)
 8006b90:	f640 02af 	movw	r2, #2223	; 0x8af
 8006b94:	4909      	ldr	r1, [pc, #36]	; (8006bbc <tcp_next_iss+0x3c>)
 8006b96:	480a      	ldr	r0, [pc, #40]	; (8006bc0 <tcp_next_iss+0x40>)
 8006b98:	f008 ff4c 	bl	800fa34 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006b9c:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <tcp_next_iss+0x44>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <tcp_next_iss+0x48>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	4a07      	ldr	r2, [pc, #28]	; (8006bc4 <tcp_next_iss+0x44>)
 8006ba8:	6013      	str	r3, [r2, #0]
  return iss;
 8006baa:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <tcp_next_iss+0x44>)
 8006bac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	08011358 	.word	0x08011358
 8006bbc:	08011a48 	.word	0x08011a48
 8006bc0:	0801139c 	.word	0x0801139c
 8006bc4:	2000000c 	.word	0x2000000c
 8006bc8:	2000652c 	.word	0x2000652c

08006bcc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d106      	bne.n	8006bee <tcp_eff_send_mss_netif+0x22>
 8006be0:	4b14      	ldr	r3, [pc, #80]	; (8006c34 <tcp_eff_send_mss_netif+0x68>)
 8006be2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006be6:	4914      	ldr	r1, [pc, #80]	; (8006c38 <tcp_eff_send_mss_netif+0x6c>)
 8006be8:	4814      	ldr	r0, [pc, #80]	; (8006c3c <tcp_eff_send_mss_netif+0x70>)
 8006bea:	f008 ff23 	bl	800fa34 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006bf4:	89fb      	ldrh	r3, [r7, #14]
 8006bf6:	e019      	b.n	8006c2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bfc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006bfe:	8afb      	ldrh	r3, [r7, #22]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d012      	beq.n	8006c2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006c04:	2328      	movs	r3, #40	; 0x28
 8006c06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006c08:	8afa      	ldrh	r2, [r7, #22]
 8006c0a:	8abb      	ldrh	r3, [r7, #20]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d904      	bls.n	8006c1a <tcp_eff_send_mss_netif+0x4e>
 8006c10:	8afa      	ldrh	r2, [r7, #22]
 8006c12:	8abb      	ldrh	r3, [r7, #20]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	e000      	b.n	8006c1c <tcp_eff_send_mss_netif+0x50>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006c1e:	8a7a      	ldrh	r2, [r7, #18]
 8006c20:	89fb      	ldrh	r3, [r7, #14]
 8006c22:	4293      	cmp	r3, r2
 8006c24:	bf28      	it	cs
 8006c26:	4613      	movcs	r3, r2
 8006c28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006c2a:	89fb      	ldrh	r3, [r7, #14]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	08011358 	.word	0x08011358
 8006c38:	08011a64 	.word	0x08011a64
 8006c3c:	0801139c 	.word	0x0801139c

08006c40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d119      	bne.n	8006c88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006c54:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006c56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006c5a:	4910      	ldr	r1, [pc, #64]	; (8006c9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006c5c:	4810      	ldr	r0, [pc, #64]	; (8006ca0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006c5e:	f008 fee9 	bl	800fa34 <iprintf>

  while (pcb != NULL) {
 8006c62:	e011      	b.n	8006c88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d108      	bne.n	8006c82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f7fe ffca 	bl	8005c10 <tcp_abort>
      pcb = next;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	e002      	b.n	8006c88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1ea      	bne.n	8006c64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	08011358 	.word	0x08011358
 8006c9c:	08011a8c 	.word	0x08011a8c
 8006ca0:	0801139c 	.word	0x0801139c

08006ca4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d02a      	beq.n	8006d0a <tcp_netif_ip_addr_changed+0x66>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d026      	beq.n	8006d0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006cbc:	4b15      	ldr	r3, [pc, #84]	; (8006d14 <tcp_netif_ip_addr_changed+0x70>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff ffbc 	bl	8006c40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006cc8:	4b13      	ldr	r3, [pc, #76]	; (8006d18 <tcp_netif_ip_addr_changed+0x74>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff ffb6 	bl	8006c40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d017      	beq.n	8006d0a <tcp_netif_ip_addr_changed+0x66>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d013      	beq.n	8006d0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <tcp_netif_ip_addr_changed+0x78>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e00c      	b.n	8006d04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d103      	bne.n	8006cfe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1ef      	bne.n	8006cea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20006528 	.word	0x20006528
 8006d18:	20006534 	.word	0x20006534
 8006d1c:	20006530 	.word	0x20006530

08006d20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d007      	beq.n	8006d40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff fc3f 	bl	80065b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006d48:	b590      	push	{r4, r7, lr}
 8006d4a:	b08d      	sub	sp, #52	; 0x34
 8006d4c:	af04      	add	r7, sp, #16
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d105      	bne.n	8006d64 <tcp_input+0x1c>
 8006d58:	4b9b      	ldr	r3, [pc, #620]	; (8006fc8 <tcp_input+0x280>)
 8006d5a:	2283      	movs	r2, #131	; 0x83
 8006d5c:	499b      	ldr	r1, [pc, #620]	; (8006fcc <tcp_input+0x284>)
 8006d5e:	489c      	ldr	r0, [pc, #624]	; (8006fd0 <tcp_input+0x288>)
 8006d60:	f008 fe68 	bl	800fa34 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4a9a      	ldr	r2, [pc, #616]	; (8006fd4 <tcp_input+0x28c>)
 8006d6a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	895b      	ldrh	r3, [r3, #10]
 8006d70:	2b13      	cmp	r3, #19
 8006d72:	f240 83c4 	bls.w	80074fe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006d76:	4b98      	ldr	r3, [pc, #608]	; (8006fd8 <tcp_input+0x290>)
 8006d78:	695a      	ldr	r2, [r3, #20]
 8006d7a:	4b97      	ldr	r3, [pc, #604]	; (8006fd8 <tcp_input+0x290>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f007 fd93 	bl	800e8ac <ip4_addr_isbroadcast_u32>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f040 83ba 	bne.w	8007502 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006d8e:	4b92      	ldr	r3, [pc, #584]	; (8006fd8 <tcp_input+0x290>)
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006d96:	2be0      	cmp	r3, #224	; 0xe0
 8006d98:	f000 83b3 	beq.w	8007502 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006d9c:	4b8d      	ldr	r3, [pc, #564]	; (8006fd4 <tcp_input+0x28c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	899b      	ldrh	r3, [r3, #12]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fc feeb 	bl	8003b80 <lwip_htons>
 8006daa:	4603      	mov	r3, r0
 8006dac:	0b1b      	lsrs	r3, r3, #12
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006db6:	7cbb      	ldrb	r3, [r7, #18]
 8006db8:	2b13      	cmp	r3, #19
 8006dba:	f240 83a2 	bls.w	8007502 <tcp_input+0x7ba>
 8006dbe:	7cbb      	ldrb	r3, [r7, #18]
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	891b      	ldrh	r3, [r3, #8]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	f200 839b 	bhi.w	8007502 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006dcc:	7cbb      	ldrb	r3, [r7, #18]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b14      	subs	r3, #20
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	4b81      	ldr	r3, [pc, #516]	; (8006fdc <tcp_input+0x294>)
 8006dd6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006dd8:	4b81      	ldr	r3, [pc, #516]	; (8006fe0 <tcp_input+0x298>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	895a      	ldrh	r2, [r3, #10]
 8006de2:	7cbb      	ldrb	r3, [r7, #18]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d309      	bcc.n	8006dfe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006dea:	4b7c      	ldr	r3, [pc, #496]	; (8006fdc <tcp_input+0x294>)
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	4b7d      	ldr	r3, [pc, #500]	; (8006fe4 <tcp_input+0x29c>)
 8006df0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006df2:	7cbb      	ldrb	r3, [r7, #18]
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fe f8f4 	bl	8004fe4 <pbuf_remove_header>
 8006dfc:	e04e      	b.n	8006e9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d105      	bne.n	8006e12 <tcp_input+0xca>
 8006e06:	4b70      	ldr	r3, [pc, #448]	; (8006fc8 <tcp_input+0x280>)
 8006e08:	22c2      	movs	r2, #194	; 0xc2
 8006e0a:	4977      	ldr	r1, [pc, #476]	; (8006fe8 <tcp_input+0x2a0>)
 8006e0c:	4870      	ldr	r0, [pc, #448]	; (8006fd0 <tcp_input+0x288>)
 8006e0e:	f008 fe11 	bl	800fa34 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006e12:	2114      	movs	r1, #20
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7fe f8e5 	bl	8004fe4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	895a      	ldrh	r2, [r3, #10]
 8006e1e:	4b71      	ldr	r3, [pc, #452]	; (8006fe4 <tcp_input+0x29c>)
 8006e20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006e22:	4b6e      	ldr	r3, [pc, #440]	; (8006fdc <tcp_input+0x294>)
 8006e24:	881a      	ldrh	r2, [r3, #0]
 8006e26:	4b6f      	ldr	r3, [pc, #444]	; (8006fe4 <tcp_input+0x29c>)
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006e2e:	4b6d      	ldr	r3, [pc, #436]	; (8006fe4 <tcp_input+0x29c>)
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fe f8d5 	bl	8004fe4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	895b      	ldrh	r3, [r3, #10]
 8006e40:	8a3a      	ldrh	r2, [r7, #16]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	f200 835f 	bhi.w	8007506 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	4a64      	ldr	r2, [pc, #400]	; (8006fe0 <tcp_input+0x298>)
 8006e50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	8a3a      	ldrh	r2, [r7, #16]
 8006e58:	4611      	mov	r1, r2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe f8c2 	bl	8004fe4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	891a      	ldrh	r2, [r3, #8]
 8006e64:	8a3b      	ldrh	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	895b      	ldrh	r3, [r3, #10]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <tcp_input+0x13a>
 8006e76:	4b54      	ldr	r3, [pc, #336]	; (8006fc8 <tcp_input+0x280>)
 8006e78:	22df      	movs	r2, #223	; 0xdf
 8006e7a:	495c      	ldr	r1, [pc, #368]	; (8006fec <tcp_input+0x2a4>)
 8006e7c:	4854      	ldr	r0, [pc, #336]	; (8006fd0 <tcp_input+0x288>)
 8006e7e:	f008 fdd9 	bl	800fa34 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	891a      	ldrh	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	891b      	ldrh	r3, [r3, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d005      	beq.n	8006e9c <tcp_input+0x154>
 8006e90:	4b4d      	ldr	r3, [pc, #308]	; (8006fc8 <tcp_input+0x280>)
 8006e92:	22e0      	movs	r2, #224	; 0xe0
 8006e94:	4956      	ldr	r1, [pc, #344]	; (8006ff0 <tcp_input+0x2a8>)
 8006e96:	484e      	ldr	r0, [pc, #312]	; (8006fd0 <tcp_input+0x288>)
 8006e98:	f008 fdcc 	bl	800fa34 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006e9c:	4b4d      	ldr	r3, [pc, #308]	; (8006fd4 <tcp_input+0x28c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	4b4b      	ldr	r3, [pc, #300]	; (8006fd4 <tcp_input+0x28c>)
 8006ea6:	681c      	ldr	r4, [r3, #0]
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7fc fe69 	bl	8003b80 <lwip_htons>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006eb2:	4b48      	ldr	r3, [pc, #288]	; (8006fd4 <tcp_input+0x28c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	885b      	ldrh	r3, [r3, #2]
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	4b46      	ldr	r3, [pc, #280]	; (8006fd4 <tcp_input+0x28c>)
 8006ebc:	681c      	ldr	r4, [r3, #0]
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7fc fe5e 	bl	8003b80 <lwip_htons>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006ec8:	4b42      	ldr	r3, [pc, #264]	; (8006fd4 <tcp_input+0x28c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	4b41      	ldr	r3, [pc, #260]	; (8006fd4 <tcp_input+0x28c>)
 8006ed0:	681c      	ldr	r4, [r3, #0]
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7fc fe69 	bl	8003baa <lwip_htonl>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	6063      	str	r3, [r4, #4]
 8006edc:	6863      	ldr	r3, [r4, #4]
 8006ede:	4a45      	ldr	r2, [pc, #276]	; (8006ff4 <tcp_input+0x2ac>)
 8006ee0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006ee2:	4b3c      	ldr	r3, [pc, #240]	; (8006fd4 <tcp_input+0x28c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	4b3a      	ldr	r3, [pc, #232]	; (8006fd4 <tcp_input+0x28c>)
 8006eea:	681c      	ldr	r4, [r3, #0]
 8006eec:	4610      	mov	r0, r2
 8006eee:	f7fc fe5c 	bl	8003baa <lwip_htonl>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	60a3      	str	r3, [r4, #8]
 8006ef6:	68a3      	ldr	r3, [r4, #8]
 8006ef8:	4a3f      	ldr	r2, [pc, #252]	; (8006ff8 <tcp_input+0x2b0>)
 8006efa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006efc:	4b35      	ldr	r3, [pc, #212]	; (8006fd4 <tcp_input+0x28c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	89db      	ldrh	r3, [r3, #14]
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	4b33      	ldr	r3, [pc, #204]	; (8006fd4 <tcp_input+0x28c>)
 8006f06:	681c      	ldr	r4, [r3, #0]
 8006f08:	4610      	mov	r0, r2
 8006f0a:	f7fc fe39 	bl	8003b80 <lwip_htons>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006f12:	4b30      	ldr	r3, [pc, #192]	; (8006fd4 <tcp_input+0x28c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	899b      	ldrh	r3, [r3, #12]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fc fe30 	bl	8003b80 <lwip_htons>
 8006f20:	4603      	mov	r3, r0
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	4b34      	ldr	r3, [pc, #208]	; (8006ffc <tcp_input+0x2b4>)
 8006f2c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	891a      	ldrh	r2, [r3, #8]
 8006f32:	4b33      	ldr	r3, [pc, #204]	; (8007000 <tcp_input+0x2b8>)
 8006f34:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006f36:	4b31      	ldr	r3, [pc, #196]	; (8006ffc <tcp_input+0x2b4>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00c      	beq.n	8006f5c <tcp_input+0x214>
    tcplen++;
 8006f42:	4b2f      	ldr	r3, [pc, #188]	; (8007000 <tcp_input+0x2b8>)
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	4b2d      	ldr	r3, [pc, #180]	; (8007000 <tcp_input+0x2b8>)
 8006f4c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	891a      	ldrh	r2, [r3, #8]
 8006f52:	4b2b      	ldr	r3, [pc, #172]	; (8007000 <tcp_input+0x2b8>)
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	f200 82d7 	bhi.w	800750a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f60:	4b28      	ldr	r3, [pc, #160]	; (8007004 <tcp_input+0x2bc>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	61fb      	str	r3, [r7, #28]
 8006f66:	e09d      	b.n	80070a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	7d1b      	ldrb	r3, [r3, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d105      	bne.n	8006f7c <tcp_input+0x234>
 8006f70:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <tcp_input+0x280>)
 8006f72:	22fb      	movs	r2, #251	; 0xfb
 8006f74:	4924      	ldr	r1, [pc, #144]	; (8007008 <tcp_input+0x2c0>)
 8006f76:	4816      	ldr	r0, [pc, #88]	; (8006fd0 <tcp_input+0x288>)
 8006f78:	f008 fd5c 	bl	800fa34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	7d1b      	ldrb	r3, [r3, #20]
 8006f80:	2b0a      	cmp	r3, #10
 8006f82:	d105      	bne.n	8006f90 <tcp_input+0x248>
 8006f84:	4b10      	ldr	r3, [pc, #64]	; (8006fc8 <tcp_input+0x280>)
 8006f86:	22fc      	movs	r2, #252	; 0xfc
 8006f88:	4920      	ldr	r1, [pc, #128]	; (800700c <tcp_input+0x2c4>)
 8006f8a:	4811      	ldr	r0, [pc, #68]	; (8006fd0 <tcp_input+0x288>)
 8006f8c:	f008 fd52 	bl	800fa34 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	7d1b      	ldrb	r3, [r3, #20]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d105      	bne.n	8006fa4 <tcp_input+0x25c>
 8006f98:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <tcp_input+0x280>)
 8006f9a:	22fd      	movs	r2, #253	; 0xfd
 8006f9c:	491c      	ldr	r1, [pc, #112]	; (8007010 <tcp_input+0x2c8>)
 8006f9e:	480c      	ldr	r0, [pc, #48]	; (8006fd0 <tcp_input+0x288>)
 8006fa0:	f008 fd48 	bl	800fa34 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	7a1b      	ldrb	r3, [r3, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d033      	beq.n	8007014 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	7a1a      	ldrb	r2, [r3, #8]
 8006fb0:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <tcp_input+0x290>)
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006fb8:	3301      	adds	r3, #1
 8006fba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d029      	beq.n	8007014 <tcp_input+0x2cc>
      prev = pcb;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	61bb      	str	r3, [r7, #24]
      continue;
 8006fc4:	e06b      	b.n	800709e <tcp_input+0x356>
 8006fc6:	bf00      	nop
 8006fc8:	08011ac0 	.word	0x08011ac0
 8006fcc:	08011af4 	.word	0x08011af4
 8006fd0:	08011b0c 	.word	0x08011b0c
 8006fd4:	200000e0 	.word	0x200000e0
 8006fd8:	20003404 	.word	0x20003404
 8006fdc:	200000e4 	.word	0x200000e4
 8006fe0:	200000e8 	.word	0x200000e8
 8006fe4:	200000e6 	.word	0x200000e6
 8006fe8:	08011b34 	.word	0x08011b34
 8006fec:	08011b44 	.word	0x08011b44
 8006ff0:	08011b50 	.word	0x08011b50
 8006ff4:	200000f0 	.word	0x200000f0
 8006ff8:	200000f4 	.word	0x200000f4
 8006ffc:	200000fc 	.word	0x200000fc
 8007000:	200000fa 	.word	0x200000fa
 8007004:	20006528 	.word	0x20006528
 8007008:	08011b70 	.word	0x08011b70
 800700c:	08011b98 	.word	0x08011b98
 8007010:	08011bc4 	.word	0x08011bc4
    }

    if (pcb->remote_port == tcphdr->src &&
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	8b1a      	ldrh	r2, [r3, #24]
 8007018:	4b94      	ldr	r3, [pc, #592]	; (800726c <tcp_input+0x524>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	429a      	cmp	r2, r3
 8007022:	d13a      	bne.n	800709a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	8ada      	ldrh	r2, [r3, #22]
 8007028:	4b90      	ldr	r3, [pc, #576]	; (800726c <tcp_input+0x524>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	885b      	ldrh	r3, [r3, #2]
 800702e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007030:	429a      	cmp	r2, r3
 8007032:	d132      	bne.n	800709a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	4b8d      	ldr	r3, [pc, #564]	; (8007270 <tcp_input+0x528>)
 800703a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800703c:	429a      	cmp	r2, r3
 800703e:	d12c      	bne.n	800709a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4b8a      	ldr	r3, [pc, #552]	; (8007270 <tcp_input+0x528>)
 8007046:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007048:	429a      	cmp	r2, r3
 800704a:	d126      	bne.n	800709a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	429a      	cmp	r2, r3
 8007054:	d106      	bne.n	8007064 <tcp_input+0x31c>
 8007056:	4b87      	ldr	r3, [pc, #540]	; (8007274 <tcp_input+0x52c>)
 8007058:	f240 120d 	movw	r2, #269	; 0x10d
 800705c:	4986      	ldr	r1, [pc, #536]	; (8007278 <tcp_input+0x530>)
 800705e:	4887      	ldr	r0, [pc, #540]	; (800727c <tcp_input+0x534>)
 8007060:	f008 fce8 	bl	800fa34 <iprintf>
      if (prev != NULL) {
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <tcp_input+0x338>
        prev->next = pcb->next;
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007072:	4b83      	ldr	r3, [pc, #524]	; (8007280 <tcp_input+0x538>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800707a:	4a81      	ldr	r2, [pc, #516]	; (8007280 <tcp_input+0x538>)
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	429a      	cmp	r2, r3
 8007088:	d111      	bne.n	80070ae <tcp_input+0x366>
 800708a:	4b7a      	ldr	r3, [pc, #488]	; (8007274 <tcp_input+0x52c>)
 800708c:	f240 1215 	movw	r2, #277	; 0x115
 8007090:	497c      	ldr	r1, [pc, #496]	; (8007284 <tcp_input+0x53c>)
 8007092:	487a      	ldr	r0, [pc, #488]	; (800727c <tcp_input+0x534>)
 8007094:	f008 fcce 	bl	800fa34 <iprintf>
      break;
 8007098:	e009      	b.n	80070ae <tcp_input+0x366>
    }
    prev = pcb;
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f47f af5e 	bne.w	8006f68 <tcp_input+0x220>
 80070ac:	e000      	b.n	80070b0 <tcp_input+0x368>
      break;
 80070ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 8095 	bne.w	80071e2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070b8:	4b73      	ldr	r3, [pc, #460]	; (8007288 <tcp_input+0x540>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	e03f      	b.n	8007140 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	7d1b      	ldrb	r3, [r3, #20]
 80070c4:	2b0a      	cmp	r3, #10
 80070c6:	d006      	beq.n	80070d6 <tcp_input+0x38e>
 80070c8:	4b6a      	ldr	r3, [pc, #424]	; (8007274 <tcp_input+0x52c>)
 80070ca:	f240 121f 	movw	r2, #287	; 0x11f
 80070ce:	496f      	ldr	r1, [pc, #444]	; (800728c <tcp_input+0x544>)
 80070d0:	486a      	ldr	r0, [pc, #424]	; (800727c <tcp_input+0x534>)
 80070d2:	f008 fcaf 	bl	800fa34 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	7a1b      	ldrb	r3, [r3, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d009      	beq.n	80070f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	7a1a      	ldrb	r2, [r3, #8]
 80070e2:	4b63      	ldr	r3, [pc, #396]	; (8007270 <tcp_input+0x528>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070ea:	3301      	adds	r3, #1
 80070ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d122      	bne.n	8007138 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	8b1a      	ldrh	r2, [r3, #24]
 80070f6:	4b5d      	ldr	r3, [pc, #372]	; (800726c <tcp_input+0x524>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	429a      	cmp	r2, r3
 8007100:	d11b      	bne.n	800713a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	8ada      	ldrh	r2, [r3, #22]
 8007106:	4b59      	ldr	r3, [pc, #356]	; (800726c <tcp_input+0x524>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	885b      	ldrh	r3, [r3, #2]
 800710c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800710e:	429a      	cmp	r2, r3
 8007110:	d113      	bne.n	800713a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4b56      	ldr	r3, [pc, #344]	; (8007270 <tcp_input+0x528>)
 8007118:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800711a:	429a      	cmp	r2, r3
 800711c:	d10d      	bne.n	800713a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b53      	ldr	r3, [pc, #332]	; (8007270 <tcp_input+0x528>)
 8007124:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007126:	429a      	cmp	r2, r3
 8007128:	d107      	bne.n	800713a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800712a:	69f8      	ldr	r0, [r7, #28]
 800712c:	f000 fb52 	bl	80077d4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7fd ffdd 	bl	80050f0 <pbuf_free>
        return;
 8007136:	e1ee      	b.n	8007516 <tcp_input+0x7ce>
        continue;
 8007138:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1bc      	bne.n	80070c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007146:	2300      	movs	r3, #0
 8007148:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800714a:	4b51      	ldr	r3, [pc, #324]	; (8007290 <tcp_input+0x548>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	e02a      	b.n	80071a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	7a1b      	ldrb	r3, [r3, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00c      	beq.n	8007174 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	7a1a      	ldrb	r2, [r3, #8]
 800715e:	4b44      	ldr	r3, [pc, #272]	; (8007270 <tcp_input+0x528>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007166:	3301      	adds	r3, #1
 8007168:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800716a:	429a      	cmp	r2, r3
 800716c:	d002      	beq.n	8007174 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	61bb      	str	r3, [r7, #24]
        continue;
 8007172:	e016      	b.n	80071a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	8ada      	ldrh	r2, [r3, #22]
 8007178:	4b3c      	ldr	r3, [pc, #240]	; (800726c <tcp_input+0x524>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	885b      	ldrh	r3, [r3, #2]
 800717e:	b29b      	uxth	r3, r3
 8007180:	429a      	cmp	r2, r3
 8007182:	d10c      	bne.n	800719e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	4b39      	ldr	r3, [pc, #228]	; (8007270 <tcp_input+0x528>)
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	429a      	cmp	r2, r3
 800718e:	d00f      	beq.n	80071b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00d      	beq.n	80071b2 <tcp_input+0x46a>
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1d1      	bne.n	8007152 <tcp_input+0x40a>
 80071ae:	e000      	b.n	80071b2 <tcp_input+0x46a>
            break;
 80071b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d014      	beq.n	80071e2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80071c6:	4b32      	ldr	r3, [pc, #200]	; (8007290 <tcp_input+0x548>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80071ce:	4a30      	ldr	r2, [pc, #192]	; (8007290 <tcp_input+0x548>)
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80071d4:	6978      	ldr	r0, [r7, #20]
 80071d6:	f000 f9ff 	bl	80075d8 <tcp_listen_input>
      }
      pbuf_free(p);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fd ff88 	bl	80050f0 <pbuf_free>
      return;
 80071e0:	e199      	b.n	8007516 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8160 	beq.w	80074aa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80071ea:	4b2a      	ldr	r3, [pc, #168]	; (8007294 <tcp_input+0x54c>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	891a      	ldrh	r2, [r3, #8]
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <tcp_input+0x54c>)
 80071f6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80071f8:	4a26      	ldr	r2, [pc, #152]	; (8007294 <tcp_input+0x54c>)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80071fe:	4b1b      	ldr	r3, [pc, #108]	; (800726c <tcp_input+0x524>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a24      	ldr	r2, [pc, #144]	; (8007294 <tcp_input+0x54c>)
 8007204:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007206:	4b24      	ldr	r3, [pc, #144]	; (8007298 <tcp_input+0x550>)
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800720c:	4b23      	ldr	r3, [pc, #140]	; (800729c <tcp_input+0x554>)
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007212:	4b23      	ldr	r3, [pc, #140]	; (80072a0 <tcp_input+0x558>)
 8007214:	2200      	movs	r2, #0
 8007216:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007218:	4b22      	ldr	r3, [pc, #136]	; (80072a4 <tcp_input+0x55c>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d006      	beq.n	8007232 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7b5b      	ldrb	r3, [r3, #13]
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	b2da      	uxtb	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007236:	2b00      	cmp	r3, #0
 8007238:	d038      	beq.n	80072ac <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800723a:	69f8      	ldr	r0, [r7, #28]
 800723c:	f7ff f940 	bl	80064c0 <tcp_process_refused_data>
 8007240:	4603      	mov	r3, r0
 8007242:	f113 0f0d 	cmn.w	r3, #13
 8007246:	d007      	beq.n	8007258 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800724c:	2b00      	cmp	r3, #0
 800724e:	d02d      	beq.n	80072ac <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007250:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <tcp_input+0x560>)
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d029      	beq.n	80072ac <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725c:	2b00      	cmp	r3, #0
 800725e:	f040 8104 	bne.w	800746a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007262:	69f8      	ldr	r0, [r7, #28]
 8007264:	f003 f9ca 	bl	800a5fc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007268:	e0ff      	b.n	800746a <tcp_input+0x722>
 800726a:	bf00      	nop
 800726c:	200000e0 	.word	0x200000e0
 8007270:	20003404 	.word	0x20003404
 8007274:	08011ac0 	.word	0x08011ac0
 8007278:	08011bec 	.word	0x08011bec
 800727c:	08011b0c 	.word	0x08011b0c
 8007280:	20006528 	.word	0x20006528
 8007284:	08011c18 	.word	0x08011c18
 8007288:	20006538 	.word	0x20006538
 800728c:	08011c44 	.word	0x08011c44
 8007290:	20006530 	.word	0x20006530
 8007294:	200000d0 	.word	0x200000d0
 8007298:	20000100 	.word	0x20000100
 800729c:	200000fd 	.word	0x200000fd
 80072a0:	200000f8 	.word	0x200000f8
 80072a4:	200000fc 	.word	0x200000fc
 80072a8:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 80072ac:	4a9b      	ldr	r2, [pc, #620]	; (800751c <tcp_input+0x7d4>)
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80072b2:	69f8      	ldr	r0, [r7, #28]
 80072b4:	f000 fb0a 	bl	80078cc <tcp_process>
 80072b8:	4603      	mov	r3, r0
 80072ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80072bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80072c0:	f113 0f0d 	cmn.w	r3, #13
 80072c4:	f000 80d3 	beq.w	800746e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80072c8:	4b95      	ldr	r3, [pc, #596]	; (8007520 <tcp_input+0x7d8>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d015      	beq.n	8007300 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d008      	beq.n	80072f0 <tcp_input+0x5a8>
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	6912      	ldr	r2, [r2, #16]
 80072e8:	f06f 010d 	mvn.w	r1, #13
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80072f0:	69f9      	ldr	r1, [r7, #28]
 80072f2:	488c      	ldr	r0, [pc, #560]	; (8007524 <tcp_input+0x7dc>)
 80072f4:	f7ff fbb0 	bl	8006a58 <tcp_pcb_remove>
        tcp_free(pcb);
 80072f8:	69f8      	ldr	r0, [r7, #28]
 80072fa:	f7fe f9a9 	bl	8005650 <tcp_free>
 80072fe:	e0c1      	b.n	8007484 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007304:	4b88      	ldr	r3, [pc, #544]	; (8007528 <tcp_input+0x7e0>)
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01d      	beq.n	8007348 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800730c:	4b86      	ldr	r3, [pc, #536]	; (8007528 <tcp_input+0x7e0>)
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <tcp_input+0x5ea>
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	6910      	ldr	r0, [r2, #16]
 8007326:	89fa      	ldrh	r2, [r7, #14]
 8007328:	69f9      	ldr	r1, [r7, #28]
 800732a:	4798      	blx	r3
 800732c:	4603      	mov	r3, r0
 800732e:	74fb      	strb	r3, [r7, #19]
 8007330:	e001      	b.n	8007336 <tcp_input+0x5ee>
 8007332:	2300      	movs	r3, #0
 8007334:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800733a:	f113 0f0d 	cmn.w	r3, #13
 800733e:	f000 8098 	beq.w	8007472 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007342:	4b79      	ldr	r3, [pc, #484]	; (8007528 <tcp_input+0x7e0>)
 8007344:	2200      	movs	r2, #0
 8007346:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007348:	69f8      	ldr	r0, [r7, #28]
 800734a:	f000 f905 	bl	8007558 <tcp_input_delayed_close>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 8090 	bne.w	8007476 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007356:	4b75      	ldr	r3, [pc, #468]	; (800752c <tcp_input+0x7e4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d041      	beq.n	80073e2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007362:	2b00      	cmp	r3, #0
 8007364:	d006      	beq.n	8007374 <tcp_input+0x62c>
 8007366:	4b72      	ldr	r3, [pc, #456]	; (8007530 <tcp_input+0x7e8>)
 8007368:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800736c:	4971      	ldr	r1, [pc, #452]	; (8007534 <tcp_input+0x7ec>)
 800736e:	4872      	ldr	r0, [pc, #456]	; (8007538 <tcp_input+0x7f0>)
 8007370:	f008 fb60 	bl	800fa34 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	8b5b      	ldrh	r3, [r3, #26]
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	2b00      	cmp	r3, #0
 800737e:	d008      	beq.n	8007392 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007380:	4b6a      	ldr	r3, [pc, #424]	; (800752c <tcp_input+0x7e4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f7fd feb3 	bl	80050f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800738a:	69f8      	ldr	r0, [r7, #28]
 800738c:	f7fe fc40 	bl	8005c10 <tcp_abort>
            goto aborted;
 8007390:	e078      	b.n	8007484 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00c      	beq.n	80073b6 <tcp_input+0x66e>
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	6918      	ldr	r0, [r3, #16]
 80073a6:	4b61      	ldr	r3, [pc, #388]	; (800752c <tcp_input+0x7e4>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	2300      	movs	r3, #0
 80073ac:	69f9      	ldr	r1, [r7, #28]
 80073ae:	47a0      	blx	r4
 80073b0:	4603      	mov	r3, r0
 80073b2:	74fb      	strb	r3, [r7, #19]
 80073b4:	e008      	b.n	80073c8 <tcp_input+0x680>
 80073b6:	4b5d      	ldr	r3, [pc, #372]	; (800752c <tcp_input+0x7e4>)
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	2300      	movs	r3, #0
 80073bc:	69f9      	ldr	r1, [r7, #28]
 80073be:	2000      	movs	r0, #0
 80073c0:	f7ff f952 	bl	8006668 <tcp_recv_null>
 80073c4:	4603      	mov	r3, r0
 80073c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80073c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80073cc:	f113 0f0d 	cmn.w	r3, #13
 80073d0:	d053      	beq.n	800747a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80073d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80073da:	4b54      	ldr	r3, [pc, #336]	; (800752c <tcp_input+0x7e4>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80073e2:	4b4f      	ldr	r3, [pc, #316]	; (8007520 <tcp_input+0x7d8>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f003 0320 	and.w	r3, r3, #32
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d030      	beq.n	8007450 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073fa:	7b5a      	ldrb	r2, [r3, #13]
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007400:	f042 0220 	orr.w	r2, r2, #32
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	735a      	strb	r2, [r3, #13]
 8007408:	e022      	b.n	8007450 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007412:	d005      	beq.n	8007420 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007418:	3301      	adds	r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <tcp_input+0x6fa>
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	6918      	ldr	r0, [r3, #16]
 8007434:	2300      	movs	r3, #0
 8007436:	2200      	movs	r2, #0
 8007438:	69f9      	ldr	r1, [r7, #28]
 800743a:	47a0      	blx	r4
 800743c:	4603      	mov	r3, r0
 800743e:	74fb      	strb	r3, [r7, #19]
 8007440:	e001      	b.n	8007446 <tcp_input+0x6fe>
 8007442:	2300      	movs	r3, #0
 8007444:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007446:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800744a:	f113 0f0d 	cmn.w	r3, #13
 800744e:	d016      	beq.n	800747e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007450:	4b32      	ldr	r3, [pc, #200]	; (800751c <tcp_input+0x7d4>)
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007456:	69f8      	ldr	r0, [r7, #28]
 8007458:	f000 f87e 	bl	8007558 <tcp_input_delayed_close>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10f      	bne.n	8007482 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007462:	69f8      	ldr	r0, [r7, #28]
 8007464:	f002 fab6 	bl	80099d4 <tcp_output>
 8007468:	e00c      	b.n	8007484 <tcp_input+0x73c>
        goto aborted;
 800746a:	bf00      	nop
 800746c:	e00a      	b.n	8007484 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800746e:	bf00      	nop
 8007470:	e008      	b.n	8007484 <tcp_input+0x73c>
              goto aborted;
 8007472:	bf00      	nop
 8007474:	e006      	b.n	8007484 <tcp_input+0x73c>
          goto aborted;
 8007476:	bf00      	nop
 8007478:	e004      	b.n	8007484 <tcp_input+0x73c>
            goto aborted;
 800747a:	bf00      	nop
 800747c:	e002      	b.n	8007484 <tcp_input+0x73c>
              goto aborted;
 800747e:	bf00      	nop
 8007480:	e000      	b.n	8007484 <tcp_input+0x73c>
          goto aborted;
 8007482:	bf00      	nop
    tcp_input_pcb = NULL;
 8007484:	4b25      	ldr	r3, [pc, #148]	; (800751c <tcp_input+0x7d4>)
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800748a:	4b28      	ldr	r3, [pc, #160]	; (800752c <tcp_input+0x7e4>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007490:	4b2a      	ldr	r3, [pc, #168]	; (800753c <tcp_input+0x7f4>)
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d03d      	beq.n	8007514 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8007498:	4b28      	ldr	r3, [pc, #160]	; (800753c <tcp_input+0x7f4>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	4618      	mov	r0, r3
 800749e:	f7fd fe27 	bl	80050f0 <pbuf_free>
      inseg.p = NULL;
 80074a2:	4b26      	ldr	r3, [pc, #152]	; (800753c <tcp_input+0x7f4>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80074a8:	e034      	b.n	8007514 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80074aa:	4b25      	ldr	r3, [pc, #148]	; (8007540 <tcp_input+0x7f8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	899b      	ldrh	r3, [r3, #12]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fc fb64 	bl	8003b80 <lwip_htons>
 80074b8:	4603      	mov	r3, r0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d118      	bne.n	80074f6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80074c4:	4b1f      	ldr	r3, [pc, #124]	; (8007544 <tcp_input+0x7fc>)
 80074c6:	6819      	ldr	r1, [r3, #0]
 80074c8:	4b1f      	ldr	r3, [pc, #124]	; (8007548 <tcp_input+0x800>)
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	4b1f      	ldr	r3, [pc, #124]	; (800754c <tcp_input+0x804>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80074d4:	4b1a      	ldr	r3, [pc, #104]	; (8007540 <tcp_input+0x7f8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80074d8:	885b      	ldrh	r3, [r3, #2]
 80074da:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80074dc:	4a18      	ldr	r2, [pc, #96]	; (8007540 <tcp_input+0x7f8>)
 80074de:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80074e0:	8812      	ldrh	r2, [r2, #0]
 80074e2:	b292      	uxth	r2, r2
 80074e4:	9202      	str	r2, [sp, #8]
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	4b19      	ldr	r3, [pc, #100]	; (8007550 <tcp_input+0x808>)
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	4b19      	ldr	r3, [pc, #100]	; (8007554 <tcp_input+0x80c>)
 80074ee:	4602      	mov	r2, r0
 80074f0:	2000      	movs	r0, #0
 80074f2:	f003 f833 	bl	800a55c <tcp_rst>
    pbuf_free(p);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fd fdfa 	bl	80050f0 <pbuf_free>
  return;
 80074fc:	e00a      	b.n	8007514 <tcp_input+0x7cc>
    goto dropped;
 80074fe:	bf00      	nop
 8007500:	e004      	b.n	800750c <tcp_input+0x7c4>
dropped:
 8007502:	bf00      	nop
 8007504:	e002      	b.n	800750c <tcp_input+0x7c4>
      goto dropped;
 8007506:	bf00      	nop
 8007508:	e000      	b.n	800750c <tcp_input+0x7c4>
      goto dropped;
 800750a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fd fdef 	bl	80050f0 <pbuf_free>
 8007512:	e000      	b.n	8007516 <tcp_input+0x7ce>
  return;
 8007514:	bf00      	nop
}
 8007516:	3724      	adds	r7, #36	; 0x24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd90      	pop	{r4, r7, pc}
 800751c:	2000653c 	.word	0x2000653c
 8007520:	200000fd 	.word	0x200000fd
 8007524:	20006528 	.word	0x20006528
 8007528:	200000f8 	.word	0x200000f8
 800752c:	20000100 	.word	0x20000100
 8007530:	08011ac0 	.word	0x08011ac0
 8007534:	08011c74 	.word	0x08011c74
 8007538:	08011b0c 	.word	0x08011b0c
 800753c:	200000d0 	.word	0x200000d0
 8007540:	200000e0 	.word	0x200000e0
 8007544:	200000f4 	.word	0x200000f4
 8007548:	200000fa 	.word	0x200000fa
 800754c:	200000f0 	.word	0x200000f0
 8007550:	20003414 	.word	0x20003414
 8007554:	20003418 	.word	0x20003418

08007558 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <tcp_input_delayed_close+0x1c>
 8007566:	4b17      	ldr	r3, [pc, #92]	; (80075c4 <tcp_input_delayed_close+0x6c>)
 8007568:	f240 225a 	movw	r2, #602	; 0x25a
 800756c:	4916      	ldr	r1, [pc, #88]	; (80075c8 <tcp_input_delayed_close+0x70>)
 800756e:	4817      	ldr	r0, [pc, #92]	; (80075cc <tcp_input_delayed_close+0x74>)
 8007570:	f008 fa60 	bl	800fa34 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007574:	4b16      	ldr	r3, [pc, #88]	; (80075d0 <tcp_input_delayed_close+0x78>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01c      	beq.n	80075ba <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8b5b      	ldrh	r3, [r3, #26]
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10d      	bne.n	80075a8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007592:	2b00      	cmp	r3, #0
 8007594:	d008      	beq.n	80075a8 <tcp_input_delayed_close+0x50>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6912      	ldr	r2, [r2, #16]
 80075a0:	f06f 010e 	mvn.w	r1, #14
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	480a      	ldr	r0, [pc, #40]	; (80075d4 <tcp_input_delayed_close+0x7c>)
 80075ac:	f7ff fa54 	bl	8006a58 <tcp_pcb_remove>
    tcp_free(pcb);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7fe f84d 	bl	8005650 <tcp_free>
    return 1;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	08011ac0 	.word	0x08011ac0
 80075c8:	08011c90 	.word	0x08011c90
 80075cc:	08011b0c 	.word	0x08011b0c
 80075d0:	200000fd 	.word	0x200000fd
 80075d4:	20006528 	.word	0x20006528

080075d8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80075d8:	b590      	push	{r4, r7, lr}
 80075da:	b08b      	sub	sp, #44	; 0x2c
 80075dc:	af04      	add	r7, sp, #16
 80075de:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80075e0:	4b6f      	ldr	r3, [pc, #444]	; (80077a0 <tcp_listen_input+0x1c8>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 80d3 	bne.w	8007794 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <tcp_listen_input+0x2a>
 80075f4:	4b6b      	ldr	r3, [pc, #428]	; (80077a4 <tcp_listen_input+0x1cc>)
 80075f6:	f240 2281 	movw	r2, #641	; 0x281
 80075fa:	496b      	ldr	r1, [pc, #428]	; (80077a8 <tcp_listen_input+0x1d0>)
 80075fc:	486b      	ldr	r0, [pc, #428]	; (80077ac <tcp_listen_input+0x1d4>)
 80075fe:	f008 fa19 	bl	800fa34 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007602:	4b67      	ldr	r3, [pc, #412]	; (80077a0 <tcp_listen_input+0x1c8>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	f003 0310 	and.w	r3, r3, #16
 800760a:	2b00      	cmp	r3, #0
 800760c:	d019      	beq.n	8007642 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800760e:	4b68      	ldr	r3, [pc, #416]	; (80077b0 <tcp_listen_input+0x1d8>)
 8007610:	6819      	ldr	r1, [r3, #0]
 8007612:	4b68      	ldr	r3, [pc, #416]	; (80077b4 <tcp_listen_input+0x1dc>)
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	4b67      	ldr	r3, [pc, #412]	; (80077b8 <tcp_listen_input+0x1e0>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800761e:	4b67      	ldr	r3, [pc, #412]	; (80077bc <tcp_listen_input+0x1e4>)
 8007620:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007622:	885b      	ldrh	r3, [r3, #2]
 8007624:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007626:	4a65      	ldr	r2, [pc, #404]	; (80077bc <tcp_listen_input+0x1e4>)
 8007628:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800762a:	8812      	ldrh	r2, [r2, #0]
 800762c:	b292      	uxth	r2, r2
 800762e:	9202      	str	r2, [sp, #8]
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	4b63      	ldr	r3, [pc, #396]	; (80077c0 <tcp_listen_input+0x1e8>)
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4b63      	ldr	r3, [pc, #396]	; (80077c4 <tcp_listen_input+0x1ec>)
 8007638:	4602      	mov	r2, r0
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f002 ff8e 	bl	800a55c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007640:	e0aa      	b.n	8007798 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8007642:	4b57      	ldr	r3, [pc, #348]	; (80077a0 <tcp_listen_input+0x1c8>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 80a4 	beq.w	8007798 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7d5b      	ldrb	r3, [r3, #21]
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff f92b 	bl	80068b0 <tcp_alloc>
 800765a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d111      	bne.n	8007686 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <tcp_listen_input+0xa8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6910      	ldr	r0, [r2, #16]
 8007672:	f04f 32ff 	mov.w	r2, #4294967295
 8007676:	2100      	movs	r1, #0
 8007678:	4798      	blx	r3
 800767a:	4603      	mov	r3, r0
 800767c:	73bb      	strb	r3, [r7, #14]
      return;
 800767e:	e08c      	b.n	800779a <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007680:	23f0      	movs	r3, #240	; 0xf0
 8007682:	73bb      	strb	r3, [r7, #14]
      return;
 8007684:	e089      	b.n	800779a <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007686:	4b50      	ldr	r3, [pc, #320]	; (80077c8 <tcp_listen_input+0x1f0>)
 8007688:	695a      	ldr	r2, [r3, #20]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800768e:	4b4e      	ldr	r3, [pc, #312]	; (80077c8 <tcp_listen_input+0x1f0>)
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8ada      	ldrh	r2, [r3, #22]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800769e:	4b47      	ldr	r3, [pc, #284]	; (80077bc <tcp_listen_input+0x1e4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2203      	movs	r2, #3
 80076ae:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80076b0:	4b41      	ldr	r3, [pc, #260]	; (80077b8 <tcp_listen_input+0x1e0>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80076c2:	6978      	ldr	r0, [r7, #20]
 80076c4:	f7ff fa5c 	bl	8006b80 <tcp_next_iss>
 80076c8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80076e2:	4b35      	ldr	r3, [pc, #212]	; (80077b8 <tcp_listen_input+0x1e0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	1e5a      	subs	r2, r3, #1
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	7a5b      	ldrb	r3, [r3, #9]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	b2da      	uxtb	r2, r3
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	7a1a      	ldrb	r2, [r3, #8]
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007710:	4b2e      	ldr	r3, [pc, #184]	; (80077cc <tcp_listen_input+0x1f4>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	60da      	str	r2, [r3, #12]
 8007718:	4a2c      	ldr	r2, [pc, #176]	; (80077cc <tcp_listen_input+0x1f4>)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	f003 f8dd 	bl	800a8dc <tcp_timer_needed>
 8007722:	4b2b      	ldr	r3, [pc, #172]	; (80077d0 <tcp_listen_input+0x1f8>)
 8007724:	2201      	movs	r2, #1
 8007726:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007728:	6978      	ldr	r0, [r7, #20]
 800772a:	f001 fd8f 	bl	800924c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800772e:	4b23      	ldr	r3, [pc, #140]	; (80077bc <tcp_listen_input+0x1e4>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	89db      	ldrh	r3, [r3, #14]
 8007734:	b29a      	uxth	r2, r3
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	3304      	adds	r3, #4
 8007750:	4618      	mov	r0, r3
 8007752:	f006 fdf9 	bl	800e348 <ip4_route>
 8007756:	4601      	mov	r1, r0
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	3304      	adds	r3, #4
 800775c:	461a      	mov	r2, r3
 800775e:	4620      	mov	r0, r4
 8007760:	f7ff fa34 	bl	8006bcc <tcp_eff_send_mss_netif>
 8007764:	4603      	mov	r3, r0
 8007766:	461a      	mov	r2, r3
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800776c:	2112      	movs	r1, #18
 800776e:	6978      	ldr	r0, [r7, #20]
 8007770:	f002 f842 	bl	80097f8 <tcp_enqueue_flags>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007780:	2100      	movs	r1, #0
 8007782:	6978      	ldr	r0, [r7, #20]
 8007784:	f7fe f986 	bl	8005a94 <tcp_abandon>
      return;
 8007788:	e007      	b.n	800779a <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800778a:	6978      	ldr	r0, [r7, #20]
 800778c:	f002 f922 	bl	80099d4 <tcp_output>
  return;
 8007790:	bf00      	nop
 8007792:	e001      	b.n	8007798 <tcp_listen_input+0x1c0>
    return;
 8007794:	bf00      	nop
 8007796:	e000      	b.n	800779a <tcp_listen_input+0x1c2>
  return;
 8007798:	bf00      	nop
}
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	bd90      	pop	{r4, r7, pc}
 80077a0:	200000fc 	.word	0x200000fc
 80077a4:	08011ac0 	.word	0x08011ac0
 80077a8:	08011cb8 	.word	0x08011cb8
 80077ac:	08011b0c 	.word	0x08011b0c
 80077b0:	200000f4 	.word	0x200000f4
 80077b4:	200000fa 	.word	0x200000fa
 80077b8:	200000f0 	.word	0x200000f0
 80077bc:	200000e0 	.word	0x200000e0
 80077c0:	20003414 	.word	0x20003414
 80077c4:	20003418 	.word	0x20003418
 80077c8:	20003404 	.word	0x20003404
 80077cc:	20006528 	.word	0x20006528
 80077d0:	20006524 	.word	0x20006524

080077d4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af04      	add	r7, sp, #16
 80077da:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80077dc:	4b30      	ldr	r3, [pc, #192]	; (80078a0 <tcp_timewait_input+0xcc>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d154      	bne.n	8007892 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <tcp_timewait_input+0x28>
 80077ee:	4b2d      	ldr	r3, [pc, #180]	; (80078a4 <tcp_timewait_input+0xd0>)
 80077f0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80077f4:	492c      	ldr	r1, [pc, #176]	; (80078a8 <tcp_timewait_input+0xd4>)
 80077f6:	482d      	ldr	r0, [pc, #180]	; (80078ac <tcp_timewait_input+0xd8>)
 80077f8:	f008 f91c 	bl	800fa34 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80077fc:	4b28      	ldr	r3, [pc, #160]	; (80078a0 <tcp_timewait_input+0xcc>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d02a      	beq.n	800785e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007808:	4b29      	ldr	r3, [pc, #164]	; (80078b0 <tcp_timewait_input+0xdc>)
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	db2d      	blt.n	8007872 <tcp_timewait_input+0x9e>
 8007816:	4b26      	ldr	r3, [pc, #152]	; (80078b0 <tcp_timewait_input+0xdc>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007822:	440b      	add	r3, r1
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	dc23      	bgt.n	8007872 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800782a:	4b22      	ldr	r3, [pc, #136]	; (80078b4 <tcp_timewait_input+0xe0>)
 800782c:	6819      	ldr	r1, [r3, #0]
 800782e:	4b22      	ldr	r3, [pc, #136]	; (80078b8 <tcp_timewait_input+0xe4>)
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	4b1e      	ldr	r3, [pc, #120]	; (80078b0 <tcp_timewait_input+0xdc>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800783a:	4b20      	ldr	r3, [pc, #128]	; (80078bc <tcp_timewait_input+0xe8>)
 800783c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800783e:	885b      	ldrh	r3, [r3, #2]
 8007840:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007842:	4a1e      	ldr	r2, [pc, #120]	; (80078bc <tcp_timewait_input+0xe8>)
 8007844:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007846:	8812      	ldrh	r2, [r2, #0]
 8007848:	b292      	uxth	r2, r2
 800784a:	9202      	str	r2, [sp, #8]
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	4b1c      	ldr	r3, [pc, #112]	; (80078c0 <tcp_timewait_input+0xec>)
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <tcp_timewait_input+0xf0>)
 8007854:	4602      	mov	r2, r0
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f002 fe80 	bl	800a55c <tcp_rst>
      return;
 800785c:	e01c      	b.n	8007898 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800785e:	4b10      	ldr	r3, [pc, #64]	; (80078a0 <tcp_timewait_input+0xcc>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800786a:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <tcp_timewait_input+0xf4>)
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007872:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <tcp_timewait_input+0xe4>)
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00d      	beq.n	8007896 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	8b5b      	ldrh	r3, [r3, #26]
 800787e:	f043 0302 	orr.w	r3, r3, #2
 8007882:	b29a      	uxth	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f002 f8a3 	bl	80099d4 <tcp_output>
  }
  return;
 800788e:	bf00      	nop
 8007890:	e001      	b.n	8007896 <tcp_timewait_input+0xc2>
    return;
 8007892:	bf00      	nop
 8007894:	e000      	b.n	8007898 <tcp_timewait_input+0xc4>
  return;
 8007896:	bf00      	nop
}
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	200000fc 	.word	0x200000fc
 80078a4:	08011ac0 	.word	0x08011ac0
 80078a8:	08011cd8 	.word	0x08011cd8
 80078ac:	08011b0c 	.word	0x08011b0c
 80078b0:	200000f0 	.word	0x200000f0
 80078b4:	200000f4 	.word	0x200000f4
 80078b8:	200000fa 	.word	0x200000fa
 80078bc:	200000e0 	.word	0x200000e0
 80078c0:	20003414 	.word	0x20003414
 80078c4:	20003418 	.word	0x20003418
 80078c8:	2000652c 	.word	0x2000652c

080078cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80078cc:	b590      	push	{r4, r7, lr}
 80078ce:	b08d      	sub	sp, #52	; 0x34
 80078d0:	af04      	add	r7, sp, #16
 80078d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <tcp_process+0x24>
 80078e2:	4ba5      	ldr	r3, [pc, #660]	; (8007b78 <tcp_process+0x2ac>)
 80078e4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80078e8:	49a4      	ldr	r1, [pc, #656]	; (8007b7c <tcp_process+0x2b0>)
 80078ea:	48a5      	ldr	r0, [pc, #660]	; (8007b80 <tcp_process+0x2b4>)
 80078ec:	f008 f8a2 	bl	800fa34 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80078f0:	4ba4      	ldr	r3, [pc, #656]	; (8007b84 <tcp_process+0x2b8>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d04e      	beq.n	800799a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	7d1b      	ldrb	r3, [r3, #20]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d108      	bne.n	8007916 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007908:	4b9f      	ldr	r3, [pc, #636]	; (8007b88 <tcp_process+0x2bc>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	429a      	cmp	r2, r3
 800790e:	d123      	bne.n	8007958 <tcp_process+0x8c>
        acceptable = 1;
 8007910:	2301      	movs	r3, #1
 8007912:	76fb      	strb	r3, [r7, #27]
 8007914:	e020      	b.n	8007958 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800791a:	4b9c      	ldr	r3, [pc, #624]	; (8007b8c <tcp_process+0x2c0>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d102      	bne.n	8007928 <tcp_process+0x5c>
        acceptable = 1;
 8007922:	2301      	movs	r3, #1
 8007924:	76fb      	strb	r3, [r7, #27]
 8007926:	e017      	b.n	8007958 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007928:	4b98      	ldr	r3, [pc, #608]	; (8007b8c <tcp_process+0x2c0>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	db10      	blt.n	8007958 <tcp_process+0x8c>
 8007936:	4b95      	ldr	r3, [pc, #596]	; (8007b8c <tcp_process+0x2c0>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007942:	440b      	add	r3, r1
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	dc06      	bgt.n	8007958 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	8b5b      	ldrh	r3, [r3, #26]
 800794e:	f043 0302 	orr.w	r3, r3, #2
 8007952:	b29a      	uxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007958:	7efb      	ldrb	r3, [r7, #27]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d01b      	beq.n	8007996 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	7d1b      	ldrb	r3, [r3, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <tcp_process+0xa8>
 8007966:	4b84      	ldr	r3, [pc, #528]	; (8007b78 <tcp_process+0x2ac>)
 8007968:	f44f 724e 	mov.w	r2, #824	; 0x338
 800796c:	4988      	ldr	r1, [pc, #544]	; (8007b90 <tcp_process+0x2c4>)
 800796e:	4884      	ldr	r0, [pc, #528]	; (8007b80 <tcp_process+0x2b4>)
 8007970:	f008 f860 	bl	800fa34 <iprintf>
      recv_flags |= TF_RESET;
 8007974:	4b87      	ldr	r3, [pc, #540]	; (8007b94 <tcp_process+0x2c8>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	f043 0308 	orr.w	r3, r3, #8
 800797c:	b2da      	uxtb	r2, r3
 800797e:	4b85      	ldr	r3, [pc, #532]	; (8007b94 <tcp_process+0x2c8>)
 8007980:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8b5b      	ldrh	r3, [r3, #26]
 8007986:	f023 0301 	bic.w	r3, r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007990:	f06f 030d 	mvn.w	r3, #13
 8007994:	e37a      	b.n	800808c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e378      	b.n	800808c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800799a:	4b7a      	ldr	r3, [pc, #488]	; (8007b84 <tcp_process+0x2b8>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d010      	beq.n	80079c8 <tcp_process+0xfc>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	7d1b      	ldrb	r3, [r3, #20]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d00c      	beq.n	80079c8 <tcp_process+0xfc>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	7d1b      	ldrb	r3, [r3, #20]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d008      	beq.n	80079c8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	8b5b      	ldrh	r3, [r3, #26]
 80079ba:	f043 0302 	orr.w	r3, r3, #2
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	e361      	b.n	800808c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	8b5b      	ldrh	r3, [r3, #26]
 80079cc:	f003 0310 	and.w	r3, r3, #16
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d103      	bne.n	80079dc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80079d4:	4b70      	ldr	r3, [pc, #448]	; (8007b98 <tcp_process+0x2cc>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 fc2d 	bl	800924c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7d1b      	ldrb	r3, [r3, #20]
 80079f6:	3b02      	subs	r3, #2
 80079f8:	2b07      	cmp	r3, #7
 80079fa:	f200 8337 	bhi.w	800806c <tcp_process+0x7a0>
 80079fe:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <tcp_process+0x138>)
 8007a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a04:	08007a25 	.word	0x08007a25
 8007a08:	08007c55 	.word	0x08007c55
 8007a0c:	08007dcd 	.word	0x08007dcd
 8007a10:	08007df7 	.word	0x08007df7
 8007a14:	08007f1b 	.word	0x08007f1b
 8007a18:	08007dcd 	.word	0x08007dcd
 8007a1c:	08007fa7 	.word	0x08007fa7
 8007a20:	08008037 	.word	0x08008037
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007a24:	4b57      	ldr	r3, [pc, #348]	; (8007b84 <tcp_process+0x2b8>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80e4 	beq.w	8007bfa <tcp_process+0x32e>
 8007a32:	4b54      	ldr	r3, [pc, #336]	; (8007b84 <tcp_process+0x2b8>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80dd 	beq.w	8007bfa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	4b50      	ldr	r3, [pc, #320]	; (8007b88 <tcp_process+0x2bc>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	f040 80d5 	bne.w	8007bfa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007a50:	4b4e      	ldr	r3, [pc, #312]	; (8007b8c <tcp_process+0x2c0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007a62:	4b49      	ldr	r3, [pc, #292]	; (8007b88 <tcp_process+0x2bc>)
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007a6a:	4b4c      	ldr	r3, [pc, #304]	; (8007b9c <tcp_process+0x2d0>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	89db      	ldrh	r3, [r3, #14]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007a84:	4b41      	ldr	r3, [pc, #260]	; (8007b8c <tcp_process+0x2c0>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	1e5a      	subs	r2, r3, #1
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2204      	movs	r2, #4
 8007a92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f006 fc53 	bl	800e348 <ip4_route>
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7ff f88e 	bl	8006bcc <tcp_eff_send_mss_netif>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007abc:	009a      	lsls	r2, r3, #2
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	f241 111c 	movw	r1, #4380	; 0x111c
 8007ac8:	428b      	cmp	r3, r1
 8007aca:	bf38      	it	cc
 8007acc:	460b      	movcc	r3, r1
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d204      	bcs.n	8007adc <tcp_process+0x210>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	e00d      	b.n	8007af8 <tcp_process+0x22c>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	f241 121c 	movw	r2, #4380	; 0x111c
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d904      	bls.n	8007af4 <tcp_process+0x228>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	e001      	b.n	8007af8 <tcp_process+0x22c>
 8007af4:	f241 131c 	movw	r3, #4380	; 0x111c
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <tcp_process+0x24a>
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <tcp_process+0x2ac>)
 8007b0a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007b0e:	4924      	ldr	r1, [pc, #144]	; (8007ba0 <tcp_process+0x2d4>)
 8007b10:	481b      	ldr	r0, [pc, #108]	; (8007b80 <tcp_process+0x2b4>)
 8007b12:	f007 ff8f 	bl	800fa34 <iprintf>
        --pcb->snd_queuelen;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d111      	bne.n	8007b56 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <tcp_process+0x280>
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <tcp_process+0x2ac>)
 8007b40:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007b44:	4917      	ldr	r1, [pc, #92]	; (8007ba4 <tcp_process+0x2d8>)
 8007b46:	480e      	ldr	r0, [pc, #56]	; (8007b80 <tcp_process+0x2b4>)
 8007b48:	f007 ff74 	bl	800fa34 <iprintf>
          pcb->unsent = rseg->next;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	66da      	str	r2, [r3, #108]	; 0x6c
 8007b54:	e003      	b.n	8007b5e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007b5e:	69f8      	ldr	r0, [r7, #28]
 8007b60:	f7fe fd3e 	bl	80065e0 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d11d      	bne.n	8007ba8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b72:	861a      	strh	r2, [r3, #48]	; 0x30
 8007b74:	e01f      	b.n	8007bb6 <tcp_process+0x2ea>
 8007b76:	bf00      	nop
 8007b78:	08011ac0 	.word	0x08011ac0
 8007b7c:	08011cf8 	.word	0x08011cf8
 8007b80:	08011b0c 	.word	0x08011b0c
 8007b84:	200000fc 	.word	0x200000fc
 8007b88:	200000f4 	.word	0x200000f4
 8007b8c:	200000f0 	.word	0x200000f0
 8007b90:	08011d14 	.word	0x08011d14
 8007b94:	200000fd 	.word	0x200000fd
 8007b98:	2000652c 	.word	0x2000652c
 8007b9c:	200000e0 	.word	0x200000e0
 8007ba0:	08011d34 	.word	0x08011d34
 8007ba4:	08011d4c 	.word	0x08011d4c
        } else {
          pcb->rtime = 0;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <tcp_process+0x30a>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6910      	ldr	r0, [r2, #16]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	4798      	blx	r3
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	76bb      	strb	r3, [r7, #26]
 8007bd4:	e001      	b.n	8007bda <tcp_process+0x30e>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007bda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007bde:	f113 0f0d 	cmn.w	r3, #13
 8007be2:	d102      	bne.n	8007bea <tcp_process+0x31e>
          return ERR_ABRT;
 8007be4:	f06f 030c 	mvn.w	r3, #12
 8007be8:	e250      	b.n	800808c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	8b5b      	ldrh	r3, [r3, #26]
 8007bee:	f043 0302 	orr.w	r3, r3, #2
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007bf8:	e23a      	b.n	8008070 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007bfa:	4b9d      	ldr	r3, [pc, #628]	; (8007e70 <tcp_process+0x5a4>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 8234 	beq.w	8008070 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c08:	4b9a      	ldr	r3, [pc, #616]	; (8007e74 <tcp_process+0x5a8>)
 8007c0a:	6819      	ldr	r1, [r3, #0]
 8007c0c:	4b9a      	ldr	r3, [pc, #616]	; (8007e78 <tcp_process+0x5ac>)
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	4b9a      	ldr	r3, [pc, #616]	; (8007e7c <tcp_process+0x5b0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c18:	4b99      	ldr	r3, [pc, #612]	; (8007e80 <tcp_process+0x5b4>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c1c:	885b      	ldrh	r3, [r3, #2]
 8007c1e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c20:	4a97      	ldr	r2, [pc, #604]	; (8007e80 <tcp_process+0x5b4>)
 8007c22:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c24:	8812      	ldrh	r2, [r2, #0]
 8007c26:	b292      	uxth	r2, r2
 8007c28:	9202      	str	r2, [sp, #8]
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	4b95      	ldr	r3, [pc, #596]	; (8007e84 <tcp_process+0x5b8>)
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	4b95      	ldr	r3, [pc, #596]	; (8007e88 <tcp_process+0x5bc>)
 8007c32:	4602      	mov	r2, r0
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f002 fc91 	bl	800a55c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c40:	2b05      	cmp	r3, #5
 8007c42:	f200 8215 	bhi.w	8008070 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f002 fa51 	bl	800a0f4 <tcp_rexmit_rto>
      break;
 8007c52:	e20d      	b.n	8008070 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007c54:	4b86      	ldr	r3, [pc, #536]	; (8007e70 <tcp_process+0x5a4>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 80a1 	beq.w	8007da4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007c62:	4b84      	ldr	r3, [pc, #528]	; (8007e74 <tcp_process+0x5a8>)
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	db7e      	blt.n	8007d70 <tcp_process+0x4a4>
 8007c72:	4b80      	ldr	r3, [pc, #512]	; (8007e74 <tcp_process+0x5a8>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dc77      	bgt.n	8007d70 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2204      	movs	r2, #4
 8007c84:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007c8e:	23fa      	movs	r3, #250	; 0xfa
 8007c90:	76bb      	strb	r3, [r7, #26]
 8007c92:	e01d      	b.n	8007cd0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <tcp_process+0x3e0>
 8007c9e:	4b7b      	ldr	r3, [pc, #492]	; (8007e8c <tcp_process+0x5c0>)
 8007ca0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007ca4:	497a      	ldr	r1, [pc, #488]	; (8007e90 <tcp_process+0x5c4>)
 8007ca6:	487b      	ldr	r0, [pc, #492]	; (8007e94 <tcp_process+0x5c8>)
 8007ca8:	f007 fec4 	bl	800fa34 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <tcp_process+0x400>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6910      	ldr	r0, [r2, #16]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4798      	blx	r3
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	76bb      	strb	r3, [r7, #26]
 8007cca:	e001      	b.n	8007cd0 <tcp_process+0x404>
 8007ccc:	23f0      	movs	r3, #240	; 0xf0
 8007cce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007cd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007cd8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007cdc:	f113 0f0d 	cmn.w	r3, #13
 8007ce0:	d002      	beq.n	8007ce8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fd ff94 	bl	8005c10 <tcp_abort>
            }
            return ERR_ABRT;
 8007ce8:	f06f 030c 	mvn.w	r3, #12
 8007cec:	e1ce      	b.n	800808c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fae0 	bl	80082b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007cf4:	4b68      	ldr	r3, [pc, #416]	; (8007e98 <tcp_process+0x5cc>)
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <tcp_process+0x43c>
            recv_acked--;
 8007cfc:	4b66      	ldr	r3, [pc, #408]	; (8007e98 <tcp_process+0x5cc>)
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	4b64      	ldr	r3, [pc, #400]	; (8007e98 <tcp_process+0x5cc>)
 8007d06:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d0c:	009a      	lsls	r2, r3, #2
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	f241 111c 	movw	r1, #4380	; 0x111c
 8007d18:	428b      	cmp	r3, r1
 8007d1a:	bf38      	it	cc
 8007d1c:	460b      	movcc	r3, r1
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d204      	bcs.n	8007d2c <tcp_process+0x460>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	e00d      	b.n	8007d48 <tcp_process+0x47c>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	f241 121c 	movw	r2, #4380	; 0x111c
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d904      	bls.n	8007d44 <tcp_process+0x478>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	e001      	b.n	8007d48 <tcp_process+0x47c>
 8007d44:	f241 131c 	movw	r3, #4380	; 0x111c
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007d4e:	4b53      	ldr	r3, [pc, #332]	; (8007e9c <tcp_process+0x5d0>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d037      	beq.n	8007dca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	8b5b      	ldrh	r3, [r3, #26]
 8007d5e:	f043 0302 	orr.w	r3, r3, #2
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2207      	movs	r2, #7
 8007d6c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007d6e:	e02c      	b.n	8007dca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d70:	4b40      	ldr	r3, [pc, #256]	; (8007e74 <tcp_process+0x5a8>)
 8007d72:	6819      	ldr	r1, [r3, #0]
 8007d74:	4b40      	ldr	r3, [pc, #256]	; (8007e78 <tcp_process+0x5ac>)
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4b40      	ldr	r3, [pc, #256]	; (8007e7c <tcp_process+0x5b0>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007d80:	4b3f      	ldr	r3, [pc, #252]	; (8007e80 <tcp_process+0x5b4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d84:	885b      	ldrh	r3, [r3, #2]
 8007d86:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007d88:	4a3d      	ldr	r2, [pc, #244]	; (8007e80 <tcp_process+0x5b4>)
 8007d8a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d8c:	8812      	ldrh	r2, [r2, #0]
 8007d8e:	b292      	uxth	r2, r2
 8007d90:	9202      	str	r2, [sp, #8]
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	4b3b      	ldr	r3, [pc, #236]	; (8007e84 <tcp_process+0x5b8>)
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4b3b      	ldr	r3, [pc, #236]	; (8007e88 <tcp_process+0x5bc>)
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f002 fbdd 	bl	800a55c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007da2:	e167      	b.n	8008074 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007da4:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <tcp_process+0x5a4>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 8161 	beq.w	8008074 <tcp_process+0x7a8>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	1e5a      	subs	r2, r3, #1
 8007db8:	4b30      	ldr	r3, [pc, #192]	; (8007e7c <tcp_process+0x5b0>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	f040 8159 	bne.w	8008074 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f002 f9b8 	bl	800a138 <tcp_rexmit>
      break;
 8007dc8:	e154      	b.n	8008074 <tcp_process+0x7a8>
 8007dca:	e153      	b.n	8008074 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fa71 	bl	80082b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007dd2:	4b32      	ldr	r3, [pc, #200]	; (8007e9c <tcp_process+0x5d0>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 814c 	beq.w	8008078 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	8b5b      	ldrh	r3, [r3, #26]
 8007de4:	f043 0302 	orr.w	r3, r3, #2
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2207      	movs	r2, #7
 8007df2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007df4:	e140      	b.n	8008078 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa5c 	bl	80082b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007dfc:	4b27      	ldr	r3, [pc, #156]	; (8007e9c <tcp_process+0x5d0>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d071      	beq.n	8007eec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e08:	4b19      	ldr	r3, [pc, #100]	; (8007e70 <tcp_process+0x5a4>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d060      	beq.n	8007ed6 <tcp_process+0x60a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e18:	4b16      	ldr	r3, [pc, #88]	; (8007e74 <tcp_process+0x5a8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d15a      	bne.n	8007ed6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d156      	bne.n	8007ed6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8b5b      	ldrh	r3, [r3, #26]
 8007e2c:	f043 0302 	orr.w	r3, r3, #2
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7fe fdbe 	bl	80069b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007e3c:	4b18      	ldr	r3, [pc, #96]	; (8007ea0 <tcp_process+0x5d4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d105      	bne.n	8007e52 <tcp_process+0x586>
 8007e46:	4b16      	ldr	r3, [pc, #88]	; (8007ea0 <tcp_process+0x5d4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	4a14      	ldr	r2, [pc, #80]	; (8007ea0 <tcp_process+0x5d4>)
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	e02e      	b.n	8007eb0 <tcp_process+0x5e4>
 8007e52:	4b13      	ldr	r3, [pc, #76]	; (8007ea0 <tcp_process+0x5d4>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	e027      	b.n	8007eaa <tcp_process+0x5de>
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d11f      	bne.n	8007ea4 <tcp_process+0x5d8>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	60da      	str	r2, [r3, #12]
 8007e6c:	e020      	b.n	8007eb0 <tcp_process+0x5e4>
 8007e6e:	bf00      	nop
 8007e70:	200000fc 	.word	0x200000fc
 8007e74:	200000f4 	.word	0x200000f4
 8007e78:	200000fa 	.word	0x200000fa
 8007e7c:	200000f0 	.word	0x200000f0
 8007e80:	200000e0 	.word	0x200000e0
 8007e84:	20003414 	.word	0x20003414
 8007e88:	20003418 	.word	0x20003418
 8007e8c:	08011ac0 	.word	0x08011ac0
 8007e90:	08011d60 	.word	0x08011d60
 8007e94:	08011b0c 	.word	0x08011b0c
 8007e98:	200000f8 	.word	0x200000f8
 8007e9c:	200000fd 	.word	0x200000fd
 8007ea0:	20006528 	.word	0x20006528
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	617b      	str	r3, [r7, #20]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1d4      	bne.n	8007e5a <tcp_process+0x58e>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	60da      	str	r2, [r3, #12]
 8007eb6:	4b77      	ldr	r3, [pc, #476]	; (8008094 <tcp_process+0x7c8>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	220a      	movs	r2, #10
 8007ec0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007ec2:	4b75      	ldr	r3, [pc, #468]	; (8008098 <tcp_process+0x7cc>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60da      	str	r2, [r3, #12]
 8007eca:	4a73      	ldr	r2, [pc, #460]	; (8008098 <tcp_process+0x7cc>)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	f002 fd04 	bl	800a8dc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007ed4:	e0d2      	b.n	800807c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8b5b      	ldrh	r3, [r3, #26]
 8007eda:	f043 0302 	orr.w	r3, r3, #2
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	751a      	strb	r2, [r3, #20]
      break;
 8007eea:	e0c7      	b.n	800807c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007eec:	4b6b      	ldr	r3, [pc, #428]	; (800809c <tcp_process+0x7d0>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80c1 	beq.w	800807c <tcp_process+0x7b0>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007efe:	4b68      	ldr	r3, [pc, #416]	; (80080a0 <tcp_process+0x7d4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	f040 80ba 	bne.w	800807c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 80b5 	bne.w	800807c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2206      	movs	r2, #6
 8007f16:	751a      	strb	r2, [r3, #20]
      break;
 8007f18:	e0b0      	b.n	800807c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f9ca 	bl	80082b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007f20:	4b60      	ldr	r3, [pc, #384]	; (80080a4 <tcp_process+0x7d8>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 0320 	and.w	r3, r3, #32
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80a9 	beq.w	8008080 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	8b5b      	ldrh	r3, [r3, #26]
 8007f32:	f043 0302 	orr.w	r3, r3, #2
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7fe fd3b 	bl	80069b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007f42:	4b59      	ldr	r3, [pc, #356]	; (80080a8 <tcp_process+0x7dc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d105      	bne.n	8007f58 <tcp_process+0x68c>
 8007f4c:	4b56      	ldr	r3, [pc, #344]	; (80080a8 <tcp_process+0x7dc>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	4a55      	ldr	r2, [pc, #340]	; (80080a8 <tcp_process+0x7dc>)
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	e013      	b.n	8007f80 <tcp_process+0x6b4>
 8007f58:	4b53      	ldr	r3, [pc, #332]	; (80080a8 <tcp_process+0x7dc>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	613b      	str	r3, [r7, #16]
 8007f5e:	e00c      	b.n	8007f7a <tcp_process+0x6ae>
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d104      	bne.n	8007f74 <tcp_process+0x6a8>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	e005      	b.n	8007f80 <tcp_process+0x6b4>
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1ef      	bne.n	8007f60 <tcp_process+0x694>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	60da      	str	r2, [r3, #12]
 8007f86:	4b43      	ldr	r3, [pc, #268]	; (8008094 <tcp_process+0x7c8>)
 8007f88:	2201      	movs	r2, #1
 8007f8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	220a      	movs	r2, #10
 8007f90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007f92:	4b41      	ldr	r3, [pc, #260]	; (8008098 <tcp_process+0x7cc>)
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	60da      	str	r2, [r3, #12]
 8007f9a:	4a3f      	ldr	r2, [pc, #252]	; (8008098 <tcp_process+0x7cc>)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	f002 fc9c 	bl	800a8dc <tcp_timer_needed>
      }
      break;
 8007fa4:	e06c      	b.n	8008080 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f984 	bl	80082b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007fac:	4b3b      	ldr	r3, [pc, #236]	; (800809c <tcp_process+0x7d0>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d065      	beq.n	8008084 <tcp_process+0x7b8>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fbc:	4b38      	ldr	r3, [pc, #224]	; (80080a0 <tcp_process+0x7d4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d15f      	bne.n	8008084 <tcp_process+0x7b8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d15b      	bne.n	8008084 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fe fcf3 	bl	80069b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007fd2:	4b35      	ldr	r3, [pc, #212]	; (80080a8 <tcp_process+0x7dc>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d105      	bne.n	8007fe8 <tcp_process+0x71c>
 8007fdc:	4b32      	ldr	r3, [pc, #200]	; (80080a8 <tcp_process+0x7dc>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	4a31      	ldr	r2, [pc, #196]	; (80080a8 <tcp_process+0x7dc>)
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	e013      	b.n	8008010 <tcp_process+0x744>
 8007fe8:	4b2f      	ldr	r3, [pc, #188]	; (80080a8 <tcp_process+0x7dc>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e00c      	b.n	800800a <tcp_process+0x73e>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d104      	bne.n	8008004 <tcp_process+0x738>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	e005      	b.n	8008010 <tcp_process+0x744>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1ef      	bne.n	8007ff0 <tcp_process+0x724>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	60da      	str	r2, [r3, #12]
 8008016:	4b1f      	ldr	r3, [pc, #124]	; (8008094 <tcp_process+0x7c8>)
 8008018:	2201      	movs	r2, #1
 800801a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	220a      	movs	r2, #10
 8008020:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008022:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <tcp_process+0x7cc>)
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60da      	str	r2, [r3, #12]
 800802a:	4a1b      	ldr	r2, [pc, #108]	; (8008098 <tcp_process+0x7cc>)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	f002 fc54 	bl	800a8dc <tcp_timer_needed>
      }
      break;
 8008034:	e026      	b.n	8008084 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f93c 	bl	80082b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800803c:	4b17      	ldr	r3, [pc, #92]	; (800809c <tcp_process+0x7d0>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01f      	beq.n	8008088 <tcp_process+0x7bc>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800804c:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <tcp_process+0x7d4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d119      	bne.n	8008088 <tcp_process+0x7bc>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d115      	bne.n	8008088 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800805c:	4b11      	ldr	r3, [pc, #68]	; (80080a4 <tcp_process+0x7d8>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f043 0310 	orr.w	r3, r3, #16
 8008064:	b2da      	uxtb	r2, r3
 8008066:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <tcp_process+0x7d8>)
 8008068:	701a      	strb	r2, [r3, #0]
      }
      break;
 800806a:	e00d      	b.n	8008088 <tcp_process+0x7bc>
    default:
      break;
 800806c:	bf00      	nop
 800806e:	e00c      	b.n	800808a <tcp_process+0x7be>
      break;
 8008070:	bf00      	nop
 8008072:	e00a      	b.n	800808a <tcp_process+0x7be>
      break;
 8008074:	bf00      	nop
 8008076:	e008      	b.n	800808a <tcp_process+0x7be>
      break;
 8008078:	bf00      	nop
 800807a:	e006      	b.n	800808a <tcp_process+0x7be>
      break;
 800807c:	bf00      	nop
 800807e:	e004      	b.n	800808a <tcp_process+0x7be>
      break;
 8008080:	bf00      	nop
 8008082:	e002      	b.n	800808a <tcp_process+0x7be>
      break;
 8008084:	bf00      	nop
 8008086:	e000      	b.n	800808a <tcp_process+0x7be>
      break;
 8008088:	bf00      	nop
  }
  return ERR_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3724      	adds	r7, #36	; 0x24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd90      	pop	{r4, r7, pc}
 8008094:	20006524 	.word	0x20006524
 8008098:	20006538 	.word	0x20006538
 800809c:	200000fc 	.word	0x200000fc
 80080a0:	200000f4 	.word	0x200000f4
 80080a4:	200000fd 	.word	0x200000fd
 80080a8:	20006528 	.word	0x20006528

080080ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80080ac:	b590      	push	{r4, r7, lr}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d106      	bne.n	80080ca <tcp_oos_insert_segment+0x1e>
 80080bc:	4b3b      	ldr	r3, [pc, #236]	; (80081ac <tcp_oos_insert_segment+0x100>)
 80080be:	f240 421f 	movw	r2, #1055	; 0x41f
 80080c2:	493b      	ldr	r1, [pc, #236]	; (80081b0 <tcp_oos_insert_segment+0x104>)
 80080c4:	483b      	ldr	r0, [pc, #236]	; (80081b4 <tcp_oos_insert_segment+0x108>)
 80080c6:	f007 fcb5 	bl	800fa34 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	899b      	ldrh	r3, [r3, #12]
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fb fd54 	bl	8003b80 <lwip_htons>
 80080d8:	4603      	mov	r3, r0
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d028      	beq.n	8008136 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80080e4:	6838      	ldr	r0, [r7, #0]
 80080e6:	f7fe fa67 	bl	80065b8 <tcp_segs_free>
    next = NULL;
 80080ea:	2300      	movs	r3, #0
 80080ec:	603b      	str	r3, [r7, #0]
 80080ee:	e056      	b.n	800819e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	899b      	ldrh	r3, [r3, #12]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fb fd41 	bl	8003b80 <lwip_htons>
 80080fe:	4603      	mov	r3, r0
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00d      	beq.n	8008126 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	899b      	ldrh	r3, [r3, #12]
 8008110:	b29c      	uxth	r4, r3
 8008112:	2001      	movs	r0, #1
 8008114:	f7fb fd34 	bl	8003b80 <lwip_htons>
 8008118:	4603      	mov	r3, r0
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4322      	orrs	r2, r4
 8008122:	b292      	uxth	r2, r2
 8008124:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7fe fa55 	bl	80065e0 <tcp_seg_free>
    while (next &&
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00e      	beq.n	800815a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	891b      	ldrh	r3, [r3, #8]
 8008140:	461a      	mov	r2, r3
 8008142:	4b1d      	ldr	r3, [pc, #116]	; (80081b8 <tcp_oos_insert_segment+0x10c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	441a      	add	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	8909      	ldrh	r1, [r1, #8]
 8008152:	440b      	add	r3, r1
 8008154:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008156:	2b00      	cmp	r3, #0
 8008158:	daca      	bge.n	80080f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01e      	beq.n	800819e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	891b      	ldrh	r3, [r3, #8]
 8008164:	461a      	mov	r2, r3
 8008166:	4b14      	ldr	r3, [pc, #80]	; (80081b8 <tcp_oos_insert_segment+0x10c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	441a      	add	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008174:	2b00      	cmp	r3, #0
 8008176:	dd12      	ble.n	800819e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	b29a      	uxth	r2, r3
 8008180:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <tcp_oos_insert_segment+0x10c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	b29a      	uxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	891b      	ldrh	r3, [r3, #8]
 8008196:	4619      	mov	r1, r3
 8008198:	4610      	mov	r0, r2
 800819a:	f7fc fe23 	bl	8004de4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd90      	pop	{r4, r7, pc}
 80081ac:	08011ac0 	.word	0x08011ac0
 80081b0:	08011d80 	.word	0x08011d80
 80081b4:	08011b0c 	.word	0x08011b0c
 80081b8:	200000f0 	.word	0x200000f0

080081bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80081bc:	b5b0      	push	{r4, r5, r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80081ca:	e03e      	b.n	800824a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fd f810 	bl	8005200 <pbuf_clen>
 80081e0:	4603      	mov	r3, r0
 80081e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80081ea:	8a7a      	ldrh	r2, [r7, #18]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d906      	bls.n	80081fe <tcp_free_acked_segments+0x42>
 80081f0:	4b2a      	ldr	r3, [pc, #168]	; (800829c <tcp_free_acked_segments+0xe0>)
 80081f2:	f240 4257 	movw	r2, #1111	; 0x457
 80081f6:	492a      	ldr	r1, [pc, #168]	; (80082a0 <tcp_free_acked_segments+0xe4>)
 80081f8:	482a      	ldr	r0, [pc, #168]	; (80082a4 <tcp_free_acked_segments+0xe8>)
 80081fa:	f007 fc1b 	bl	800fa34 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008204:	8a7b      	ldrh	r3, [r7, #18]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	b29a      	uxth	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	891a      	ldrh	r2, [r3, #8]
 8008214:	4b24      	ldr	r3, [pc, #144]	; (80082a8 <tcp_free_acked_segments+0xec>)
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	4413      	add	r3, r2
 800821a:	b29a      	uxth	r2, r3
 800821c:	4b22      	ldr	r3, [pc, #136]	; (80082a8 <tcp_free_acked_segments+0xec>)
 800821e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008220:	6978      	ldr	r0, [r7, #20]
 8008222:	f7fe f9dd 	bl	80065e0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00c      	beq.n	800824a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <tcp_free_acked_segments+0x8e>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d106      	bne.n	800824a <tcp_free_acked_segments+0x8e>
 800823c:	4b17      	ldr	r3, [pc, #92]	; (800829c <tcp_free_acked_segments+0xe0>)
 800823e:	f240 4262 	movw	r2, #1122	; 0x462
 8008242:	491a      	ldr	r1, [pc, #104]	; (80082ac <tcp_free_acked_segments+0xf0>)
 8008244:	4817      	ldr	r0, [pc, #92]	; (80082a4 <tcp_free_acked_segments+0xe8>)
 8008246:	f007 fbf5 	bl	800fa34 <iprintf>
  while (seg_list != NULL &&
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d020      	beq.n	8008292 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	4618      	mov	r0, r3
 8008258:	f7fb fca7 	bl	8003baa <lwip_htonl>
 800825c:	4604      	mov	r4, r0
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	891b      	ldrh	r3, [r3, #8]
 8008262:	461d      	mov	r5, r3
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	899b      	ldrh	r3, [r3, #12]
 800826a:	b29b      	uxth	r3, r3
 800826c:	4618      	mov	r0, r3
 800826e:	f7fb fc87 	bl	8003b80 <lwip_htons>
 8008272:	4603      	mov	r3, r0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <tcp_free_acked_segments+0xc6>
 800827e:	2301      	movs	r3, #1
 8008280:	e000      	b.n	8008284 <tcp_free_acked_segments+0xc8>
 8008282:	2300      	movs	r3, #0
 8008284:	442b      	add	r3, r5
 8008286:	18e2      	adds	r2, r4, r3
 8008288:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <tcp_free_acked_segments+0xf4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800828e:	2b00      	cmp	r3, #0
 8008290:	dd9c      	ble.n	80081cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008292:	68bb      	ldr	r3, [r7, #8]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bdb0      	pop	{r4, r5, r7, pc}
 800829c:	08011ac0 	.word	0x08011ac0
 80082a0:	08011da8 	.word	0x08011da8
 80082a4:	08011b0c 	.word	0x08011b0c
 80082a8:	200000f8 	.word	0x200000f8
 80082ac:	08011dd0 	.word	0x08011dd0
 80082b0:	200000f4 	.word	0x200000f4

080082b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80082b4:	b5b0      	push	{r4, r5, r7, lr}
 80082b6:	b094      	sub	sp, #80	; 0x50
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <tcp_receive+0x20>
 80082c6:	4ba6      	ldr	r3, [pc, #664]	; (8008560 <tcp_receive+0x2ac>)
 80082c8:	f240 427b 	movw	r2, #1147	; 0x47b
 80082cc:	49a5      	ldr	r1, [pc, #660]	; (8008564 <tcp_receive+0x2b0>)
 80082ce:	48a6      	ldr	r0, [pc, #664]	; (8008568 <tcp_receive+0x2b4>)
 80082d0:	f007 fbb0 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7d1b      	ldrb	r3, [r3, #20]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d806      	bhi.n	80082ea <tcp_receive+0x36>
 80082dc:	4ba0      	ldr	r3, [pc, #640]	; (8008560 <tcp_receive+0x2ac>)
 80082de:	f240 427c 	movw	r2, #1148	; 0x47c
 80082e2:	49a2      	ldr	r1, [pc, #648]	; (800856c <tcp_receive+0x2b8>)
 80082e4:	48a0      	ldr	r0, [pc, #640]	; (8008568 <tcp_receive+0x2b4>)
 80082e6:	f007 fba5 	bl	800fa34 <iprintf>

  if (flags & TCP_ACK) {
 80082ea:	4ba1      	ldr	r3, [pc, #644]	; (8008570 <tcp_receive+0x2bc>)
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	f003 0310 	and.w	r3, r3, #16
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 8263 	beq.w	80087be <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082fe:	461a      	mov	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008304:	4413      	add	r3, r2
 8008306:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800830c:	4b99      	ldr	r3, [pc, #612]	; (8008574 <tcp_receive+0x2c0>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	db1b      	blt.n	800834e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800831a:	4b96      	ldr	r3, [pc, #600]	; (8008574 <tcp_receive+0x2c0>)
 800831c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800831e:	429a      	cmp	r2, r3
 8008320:	d106      	bne.n	8008330 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008326:	4b94      	ldr	r3, [pc, #592]	; (8008578 <tcp_receive+0x2c4>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	db0e      	blt.n	800834e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008334:	4b90      	ldr	r3, [pc, #576]	; (8008578 <tcp_receive+0x2c4>)
 8008336:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008338:	429a      	cmp	r2, r3
 800833a:	d125      	bne.n	8008388 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800833c:	4b8f      	ldr	r3, [pc, #572]	; (800857c <tcp_receive+0x2c8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	89db      	ldrh	r3, [r3, #14]
 8008342:	b29a      	uxth	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800834a:	429a      	cmp	r2, r3
 800834c:	d91c      	bls.n	8008388 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800834e:	4b8b      	ldr	r3, [pc, #556]	; (800857c <tcp_receive+0x2c8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	89db      	ldrh	r3, [r3, #14]
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008368:	429a      	cmp	r2, r3
 800836a:	d205      	bcs.n	8008378 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008378:	4b7e      	ldr	r3, [pc, #504]	; (8008574 <tcp_receive+0x2c0>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008380:	4b7d      	ldr	r3, [pc, #500]	; (8008578 <tcp_receive+0x2c4>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008388:	4b7b      	ldr	r3, [pc, #492]	; (8008578 <tcp_receive+0x2c4>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	dc58      	bgt.n	8008448 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008396:	4b7a      	ldr	r3, [pc, #488]	; (8008580 <tcp_receive+0x2cc>)
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d14b      	bne.n	8008436 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80083a8:	4413      	add	r3, r2
 80083aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d142      	bne.n	8008436 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	db3d      	blt.n	8008436 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083be:	4b6e      	ldr	r3, [pc, #440]	; (8008578 <tcp_receive+0x2c4>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d137      	bne.n	8008436 <tcp_receive+0x182>
              found_dupack = 1;
 80083c6:	2301      	movs	r3, #1
 80083c8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083d0:	2bff      	cmp	r3, #255	; 0xff
 80083d2:	d007      	beq.n	80083e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083da:	3301      	adds	r3, #1
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d91b      	bls.n	8008426 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083f8:	4413      	add	r3, r2
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008402:	429a      	cmp	r2, r3
 8008404:	d30a      	bcc.n	800841c <tcp_receive+0x168>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008410:	4413      	add	r3, r2
 8008412:	b29a      	uxth	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800841a:	e004      	b.n	8008426 <tcp_receive+0x172>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008422:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800842c:	2b02      	cmp	r3, #2
 800842e:	d902      	bls.n	8008436 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 feed 	bl	800a210 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008438:	2b00      	cmp	r3, #0
 800843a:	f040 8160 	bne.w	80086fe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008446:	e15a      	b.n	80086fe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008448:	4b4b      	ldr	r3, [pc, #300]	; (8008578 <tcp_receive+0x2c4>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	f2c0 814d 	blt.w	80086f4 <tcp_receive+0x440>
 800845a:	4b47      	ldr	r3, [pc, #284]	; (8008578 <tcp_receive+0x2c4>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	f300 8145 	bgt.w	80086f4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	8b5b      	ldrh	r3, [r3, #26]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b00      	cmp	r3, #0
 8008474:	d010      	beq.n	8008498 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	8b5b      	ldrh	r3, [r3, #26]
 800847a:	f023 0304 	bic.w	r3, r3, #4
 800847e:	b29a      	uxth	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084a6:	10db      	asrs	r3, r3, #3
 80084a8:	b21b      	sxth	r3, r3
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	4413      	add	r3, r2
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	b21a      	sxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80084c0:	4b2d      	ldr	r3, [pc, #180]	; (8008578 <tcp_receive+0x2c4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80084d8:	4b27      	ldr	r3, [pc, #156]	; (8008578 <tcp_receive+0x2c4>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7d1b      	ldrb	r3, [r3, #20]
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	f240 8096 	bls.w	8008616 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d244      	bcs.n	8008584 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	8b5b      	ldrh	r3, [r3, #26]
 80084fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <tcp_receive+0x256>
 8008506:	2301      	movs	r3, #1
 8008508:	e000      	b.n	800850c <tcp_receive+0x258>
 800850a:	2302      	movs	r3, #2
 800850c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008510:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800851a:	fb12 f303 	smulbb	r3, r2, r3
 800851e:	b29b      	uxth	r3, r3
 8008520:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008522:	4293      	cmp	r3, r2
 8008524:	bf28      	it	cs
 8008526:	4613      	movcs	r3, r2
 8008528:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008530:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008532:	4413      	add	r3, r2
 8008534:	b29a      	uxth	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800853c:	429a      	cmp	r2, r3
 800853e:	d309      	bcc.n	8008554 <tcp_receive+0x2a0>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008548:	4413      	add	r3, r2
 800854a:	b29a      	uxth	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008552:	e060      	b.n	8008616 <tcp_receive+0x362>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800855a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800855e:	e05a      	b.n	8008616 <tcp_receive+0x362>
 8008560:	08011ac0 	.word	0x08011ac0
 8008564:	08011df0 	.word	0x08011df0
 8008568:	08011b0c 	.word	0x08011b0c
 800856c:	08011e0c 	.word	0x08011e0c
 8008570:	200000fc 	.word	0x200000fc
 8008574:	200000f0 	.word	0x200000f0
 8008578:	200000f4 	.word	0x200000f4
 800857c:	200000e0 	.word	0x200000e0
 8008580:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800858a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800858c:	4413      	add	r3, r2
 800858e:	b29a      	uxth	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008596:	429a      	cmp	r2, r3
 8008598:	d309      	bcc.n	80085ae <tcp_receive+0x2fa>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80085a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80085a2:	4413      	add	r3, r2
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80085ac:	e004      	b.n	80085b8 <tcp_receive+0x304>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d326      	bcc.n	8008616 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80085e8:	4413      	add	r3, r2
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d30a      	bcc.n	800860c <tcp_receive+0x358>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008600:	4413      	add	r3, r2
 8008602:	b29a      	uxth	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800860a:	e004      	b.n	8008616 <tcp_receive+0x362>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800861e:	4a98      	ldr	r2, [pc, #608]	; (8008880 <tcp_receive+0x5cc>)
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff fdcb 	bl	80081bc <tcp_free_acked_segments>
 8008626:	4602      	mov	r2, r0
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008634:	4a93      	ldr	r2, [pc, #588]	; (8008884 <tcp_receive+0x5d0>)
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff fdc0 	bl	80081bc <tcp_free_acked_segments>
 800863c:	4602      	mov	r2, r0
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008646:	2b00      	cmp	r3, #0
 8008648:	d104      	bne.n	8008654 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008650:	861a      	strh	r2, [r3, #48]	; 0x30
 8008652:	e002      	b.n	800865a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008664:	2b00      	cmp	r3, #0
 8008666:	d103      	bne.n	8008670 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008676:	4b84      	ldr	r3, [pc, #528]	; (8008888 <tcp_receive+0x5d4>)
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	4413      	add	r3, r2
 800867c:	b29a      	uxth	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	8b5b      	ldrh	r3, [r3, #26]
 8008688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800868c:	2b00      	cmp	r3, #0
 800868e:	d035      	beq.n	80086fc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008694:	2b00      	cmp	r3, #0
 8008696:	d118      	bne.n	80086ca <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fb fa7c 	bl	8003baa <lwip_htonl>
 80086b2:	4603      	mov	r3, r0
 80086b4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dc20      	bgt.n	80086fc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	8b5b      	ldrh	r3, [r3, #26]
 80086be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80086c8:	e018      	b.n	80086fc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fb fa67 	bl	8003baa <lwip_htonl>
 80086dc:	4603      	mov	r3, r0
 80086de:	1ae3      	subs	r3, r4, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	dc0b      	bgt.n	80086fc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	8b5b      	ldrh	r3, [r3, #26]
 80086e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80086f2:	e003      	b.n	80086fc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 ff81 	bl	800a5fc <tcp_send_empty_ack>
 80086fa:	e000      	b.n	80086fe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80086fc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008702:	2b00      	cmp	r3, #0
 8008704:	d05b      	beq.n	80087be <tcp_receive+0x50a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800870a:	4b60      	ldr	r3, [pc, #384]	; (800888c <tcp_receive+0x5d8>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	da54      	bge.n	80087be <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008714:	4b5e      	ldr	r3, [pc, #376]	; (8008890 <tcp_receive+0x5dc>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	b29a      	uxth	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871e:	b29b      	uxth	r3, r3
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	b29b      	uxth	r3, r3
 8008724:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008728:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008732:	10db      	asrs	r3, r3, #3
 8008734:	b21b      	sxth	r3, r3
 8008736:	b29b      	uxth	r3, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	b29b      	uxth	r3, r3
 800873c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008746:	b29a      	uxth	r2, r3
 8008748:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800874c:	4413      	add	r3, r2
 800874e:	b29b      	uxth	r3, r3
 8008750:	b21a      	sxth	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008756:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800875a:	2b00      	cmp	r3, #0
 800875c:	da05      	bge.n	800876a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800875e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008762:	425b      	negs	r3, r3
 8008764:	b29b      	uxth	r3, r3
 8008766:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800876a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008774:	109b      	asrs	r3, r3, #2
 8008776:	b21b      	sxth	r3, r3
 8008778:	b29b      	uxth	r3, r3
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	b29b      	uxth	r3, r3
 800877e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008788:	b29a      	uxth	r2, r3
 800878a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800878e:	4413      	add	r3, r2
 8008790:	b29b      	uxth	r3, r3
 8008792:	b21a      	sxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800879e:	10db      	asrs	r3, r3, #3
 80087a0:	b21b      	sxth	r3, r3
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	4413      	add	r3, r2
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	b21a      	sxth	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80087be:	4b35      	ldr	r3, [pc, #212]	; (8008894 <tcp_receive+0x5e0>)
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 84e1 	beq.w	800918a <tcp_receive+0xed6>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	7d1b      	ldrb	r3, [r3, #20]
 80087cc:	2b06      	cmp	r3, #6
 80087ce:	f200 84dc 	bhi.w	800918a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087d6:	4b30      	ldr	r3, [pc, #192]	; (8008898 <tcp_receive+0x5e4>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	3b01      	subs	r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f2c0 808e 	blt.w	8008900 <tcp_receive+0x64c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087e8:	4b2a      	ldr	r3, [pc, #168]	; (8008894 <tcp_receive+0x5e0>)
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	4619      	mov	r1, r3
 80087ee:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <tcp_receive+0x5e4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	440b      	add	r3, r1
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	3301      	adds	r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f300 8081 	bgt.w	8008900 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80087fe:	4b27      	ldr	r3, [pc, #156]	; (800889c <tcp_receive+0x5e8>)
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008808:	4b23      	ldr	r3, [pc, #140]	; (8008898 <tcp_receive+0x5e4>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008810:	4b22      	ldr	r3, [pc, #136]	; (800889c <tcp_receive+0x5e8>)
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d106      	bne.n	8008826 <tcp_receive+0x572>
 8008818:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <tcp_receive+0x5ec>)
 800881a:	f240 5294 	movw	r2, #1428	; 0x594
 800881e:	4921      	ldr	r1, [pc, #132]	; (80088a4 <tcp_receive+0x5f0>)
 8008820:	4821      	ldr	r0, [pc, #132]	; (80088a8 <tcp_receive+0x5f4>)
 8008822:	f007 f907 	bl	800fa34 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800882c:	4293      	cmp	r3, r2
 800882e:	d906      	bls.n	800883e <tcp_receive+0x58a>
 8008830:	4b1b      	ldr	r3, [pc, #108]	; (80088a0 <tcp_receive+0x5ec>)
 8008832:	f240 5295 	movw	r2, #1429	; 0x595
 8008836:	491d      	ldr	r1, [pc, #116]	; (80088ac <tcp_receive+0x5f8>)
 8008838:	481b      	ldr	r0, [pc, #108]	; (80088a8 <tcp_receive+0x5f4>)
 800883a:	f007 f8fb 	bl	800fa34 <iprintf>
      off = (u16_t)off32;
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008844:	4b15      	ldr	r3, [pc, #84]	; (800889c <tcp_receive+0x5e8>)
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	891b      	ldrh	r3, [r3, #8]
 800884a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800884e:	429a      	cmp	r2, r3
 8008850:	d906      	bls.n	8008860 <tcp_receive+0x5ac>
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <tcp_receive+0x5ec>)
 8008854:	f240 5297 	movw	r2, #1431	; 0x597
 8008858:	4915      	ldr	r1, [pc, #84]	; (80088b0 <tcp_receive+0x5fc>)
 800885a:	4813      	ldr	r0, [pc, #76]	; (80088a8 <tcp_receive+0x5f4>)
 800885c:	f007 f8ea 	bl	800fa34 <iprintf>
      inseg.len -= off;
 8008860:	4b0e      	ldr	r3, [pc, #56]	; (800889c <tcp_receive+0x5e8>)
 8008862:	891a      	ldrh	r2, [r3, #8]
 8008864:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	b29a      	uxth	r2, r3
 800886c:	4b0b      	ldr	r3, [pc, #44]	; (800889c <tcp_receive+0x5e8>)
 800886e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <tcp_receive+0x5e8>)
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	891a      	ldrh	r2, [r3, #8]
 8008876:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800887e:	e029      	b.n	80088d4 <tcp_receive+0x620>
 8008880:	08011e28 	.word	0x08011e28
 8008884:	08011e30 	.word	0x08011e30
 8008888:	200000f8 	.word	0x200000f8
 800888c:	200000f4 	.word	0x200000f4
 8008890:	2000652c 	.word	0x2000652c
 8008894:	200000fa 	.word	0x200000fa
 8008898:	200000f0 	.word	0x200000f0
 800889c:	200000d0 	.word	0x200000d0
 80088a0:	08011ac0 	.word	0x08011ac0
 80088a4:	08011e38 	.word	0x08011e38
 80088a8:	08011b0c 	.word	0x08011b0c
 80088ac:	08011e48 	.word	0x08011e48
 80088b0:	08011e58 	.word	0x08011e58
        off -= p->len;
 80088b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b6:	895b      	ldrh	r3, [r3, #10]
 80088b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80088c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80088c6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80088c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ca:	2200      	movs	r2, #0
 80088cc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80088ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80088d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d6:	895b      	ldrh	r3, [r3, #10]
 80088d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80088dc:	429a      	cmp	r2, r3
 80088de:	d8e9      	bhi.n	80088b4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80088e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80088e4:	4619      	mov	r1, r3
 80088e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80088e8:	f7fc fb7c 	bl	8004fe4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	4a91      	ldr	r2, [pc, #580]	; (8008b38 <tcp_receive+0x884>)
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	4b91      	ldr	r3, [pc, #580]	; (8008b3c <tcp_receive+0x888>)
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	4a8f      	ldr	r2, [pc, #572]	; (8008b38 <tcp_receive+0x884>)
 80088fa:	6812      	ldr	r2, [r2, #0]
 80088fc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80088fe:	e00d      	b.n	800891c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008900:	4b8d      	ldr	r3, [pc, #564]	; (8008b38 <tcp_receive+0x884>)
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	da06      	bge.n	800891c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	8b5b      	ldrh	r3, [r3, #26]
 8008912:	f043 0302 	orr.w	r3, r3, #2
 8008916:	b29a      	uxth	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800891c:	4b86      	ldr	r3, [pc, #536]	; (8008b38 <tcp_receive+0x884>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	f2c0 842a 	blt.w	8009180 <tcp_receive+0xecc>
 800892c:	4b82      	ldr	r3, [pc, #520]	; (8008b38 <tcp_receive+0x884>)
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008938:	440b      	add	r3, r1
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	3301      	adds	r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	f300 841e 	bgt.w	8009180 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008948:	4b7b      	ldr	r3, [pc, #492]	; (8008b38 <tcp_receive+0x884>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	f040 829a 	bne.w	8008e86 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008952:	4b7a      	ldr	r3, [pc, #488]	; (8008b3c <tcp_receive+0x888>)
 8008954:	891c      	ldrh	r4, [r3, #8]
 8008956:	4b79      	ldr	r3, [pc, #484]	; (8008b3c <tcp_receive+0x888>)
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	899b      	ldrh	r3, [r3, #12]
 800895c:	b29b      	uxth	r3, r3
 800895e:	4618      	mov	r0, r3
 8008960:	f7fb f90e 	bl	8003b80 <lwip_htons>
 8008964:	4603      	mov	r3, r0
 8008966:	b2db      	uxtb	r3, r3
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <tcp_receive+0x6c0>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <tcp_receive+0x6c2>
 8008974:	2300      	movs	r3, #0
 8008976:	4423      	add	r3, r4
 8008978:	b29a      	uxth	r2, r3
 800897a:	4b71      	ldr	r3, [pc, #452]	; (8008b40 <tcp_receive+0x88c>)
 800897c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008982:	4b6f      	ldr	r3, [pc, #444]	; (8008b40 <tcp_receive+0x88c>)
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d275      	bcs.n	8008a76 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800898a:	4b6c      	ldr	r3, [pc, #432]	; (8008b3c <tcp_receive+0x888>)
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	899b      	ldrh	r3, [r3, #12]
 8008990:	b29b      	uxth	r3, r3
 8008992:	4618      	mov	r0, r3
 8008994:	f7fb f8f4 	bl	8003b80 <lwip_htons>
 8008998:	4603      	mov	r3, r0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01f      	beq.n	80089e4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80089a4:	4b65      	ldr	r3, [pc, #404]	; (8008b3c <tcp_receive+0x888>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	899b      	ldrh	r3, [r3, #12]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	b21b      	sxth	r3, r3
 80089ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80089b2:	b21c      	sxth	r4, r3
 80089b4:	4b61      	ldr	r3, [pc, #388]	; (8008b3c <tcp_receive+0x888>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	899b      	ldrh	r3, [r3, #12]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fb f8df 	bl	8003b80 <lwip_htons>
 80089c2:	4603      	mov	r3, r0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fb f8d6 	bl	8003b80 <lwip_htons>
 80089d4:	4603      	mov	r3, r0
 80089d6:	b21b      	sxth	r3, r3
 80089d8:	4323      	orrs	r3, r4
 80089da:	b21a      	sxth	r2, r3
 80089dc:	4b57      	ldr	r3, [pc, #348]	; (8008b3c <tcp_receive+0x888>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	b292      	uxth	r2, r2
 80089e2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089e8:	4b54      	ldr	r3, [pc, #336]	; (8008b3c <tcp_receive+0x888>)
 80089ea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80089ec:	4b53      	ldr	r3, [pc, #332]	; (8008b3c <tcp_receive+0x888>)
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	899b      	ldrh	r3, [r3, #12]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7fb f8c3 	bl	8003b80 <lwip_htons>
 80089fa:	4603      	mov	r3, r0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d005      	beq.n	8008a12 <tcp_receive+0x75e>
            inseg.len -= 1;
 8008a06:	4b4d      	ldr	r3, [pc, #308]	; (8008b3c <tcp_receive+0x888>)
 8008a08:	891b      	ldrh	r3, [r3, #8]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	4b4b      	ldr	r3, [pc, #300]	; (8008b3c <tcp_receive+0x888>)
 8008a10:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008a12:	4b4a      	ldr	r3, [pc, #296]	; (8008b3c <tcp_receive+0x888>)
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4b49      	ldr	r3, [pc, #292]	; (8008b3c <tcp_receive+0x888>)
 8008a18:	891b      	ldrh	r3, [r3, #8]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	f7fc f9e1 	bl	8004de4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008a22:	4b46      	ldr	r3, [pc, #280]	; (8008b3c <tcp_receive+0x888>)
 8008a24:	891c      	ldrh	r4, [r3, #8]
 8008a26:	4b45      	ldr	r3, [pc, #276]	; (8008b3c <tcp_receive+0x888>)
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	899b      	ldrh	r3, [r3, #12]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fb f8a6 	bl	8003b80 <lwip_htons>
 8008a34:	4603      	mov	r3, r0
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <tcp_receive+0x790>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e000      	b.n	8008a46 <tcp_receive+0x792>
 8008a44:	2300      	movs	r3, #0
 8008a46:	4423      	add	r3, r4
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	4b3d      	ldr	r3, [pc, #244]	; (8008b40 <tcp_receive+0x88c>)
 8008a4c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008a4e:	4b3c      	ldr	r3, [pc, #240]	; (8008b40 <tcp_receive+0x88c>)
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	4b38      	ldr	r3, [pc, #224]	; (8008b38 <tcp_receive+0x884>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	441a      	add	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a62:	440b      	add	r3, r1
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d006      	beq.n	8008a76 <tcp_receive+0x7c2>
 8008a68:	4b36      	ldr	r3, [pc, #216]	; (8008b44 <tcp_receive+0x890>)
 8008a6a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8008a6e:	4936      	ldr	r1, [pc, #216]	; (8008b48 <tcp_receive+0x894>)
 8008a70:	4836      	ldr	r0, [pc, #216]	; (8008b4c <tcp_receive+0x898>)
 8008a72:	f006 ffdf 	bl	800fa34 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 80e7 	beq.w	8008c4e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008a80:	4b2e      	ldr	r3, [pc, #184]	; (8008b3c <tcp_receive+0x888>)
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	899b      	ldrh	r3, [r3, #12]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fb f879 	bl	8003b80 <lwip_htons>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d010      	beq.n	8008abc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008a9a:	e00a      	b.n	8008ab2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7fd fd97 	bl	80065e0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f0      	bne.n	8008a9c <tcp_receive+0x7e8>
 8008aba:	e0c8      	b.n	8008c4e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008ac2:	e052      	b.n	8008b6a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	899b      	ldrh	r3, [r3, #12]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fb f857 	bl	8003b80 <lwip_htons>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d03d      	beq.n	8008b5a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008ade:	4b17      	ldr	r3, [pc, #92]	; (8008b3c <tcp_receive+0x888>)
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	899b      	ldrh	r3, [r3, #12]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fb f84a 	bl	8003b80 <lwip_htons>
 8008aec:	4603      	mov	r3, r0
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d130      	bne.n	8008b5a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008af8:	4b10      	ldr	r3, [pc, #64]	; (8008b3c <tcp_receive+0x888>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	899b      	ldrh	r3, [r3, #12]
 8008afe:	b29c      	uxth	r4, r3
 8008b00:	2001      	movs	r0, #1
 8008b02:	f7fb f83d 	bl	8003b80 <lwip_htons>
 8008b06:	4603      	mov	r3, r0
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <tcp_receive+0x888>)
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	4322      	orrs	r2, r4
 8008b10:	b292      	uxth	r2, r2
 8008b12:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008b14:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <tcp_receive+0x888>)
 8008b16:	891c      	ldrh	r4, [r3, #8]
 8008b18:	4b08      	ldr	r3, [pc, #32]	; (8008b3c <tcp_receive+0x888>)
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	899b      	ldrh	r3, [r3, #12]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fb f82d 	bl	8003b80 <lwip_htons>
 8008b26:	4603      	mov	r3, r0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 0303 	and.w	r3, r3, #3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00e      	beq.n	8008b50 <tcp_receive+0x89c>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e00d      	b.n	8008b52 <tcp_receive+0x89e>
 8008b36:	bf00      	nop
 8008b38:	200000f0 	.word	0x200000f0
 8008b3c:	200000d0 	.word	0x200000d0
 8008b40:	200000fa 	.word	0x200000fa
 8008b44:	08011ac0 	.word	0x08011ac0
 8008b48:	08011e68 	.word	0x08011e68
 8008b4c:	08011b0c 	.word	0x08011b0c
 8008b50:	2300      	movs	r3, #0
 8008b52:	4423      	add	r3, r4
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	4b98      	ldr	r3, [pc, #608]	; (8008db8 <tcp_receive+0xb04>)
 8008b58:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008b64:	6938      	ldr	r0, [r7, #16]
 8008b66:	f7fd fd3b 	bl	80065e0 <tcp_seg_free>
            while (next &&
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00e      	beq.n	8008b8e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008b70:	4b91      	ldr	r3, [pc, #580]	; (8008db8 <tcp_receive+0xb04>)
 8008b72:	881b      	ldrh	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	4b91      	ldr	r3, [pc, #580]	; (8008dbc <tcp_receive+0xb08>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	441a      	add	r2, r3
 8008b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b84:	8909      	ldrh	r1, [r1, #8]
 8008b86:	440b      	add	r3, r1
 8008b88:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	da9a      	bge.n	8008ac4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d059      	beq.n	8008c48 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008b94:	4b88      	ldr	r3, [pc, #544]	; (8008db8 <tcp_receive+0xb04>)
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4b88      	ldr	r3, [pc, #544]	; (8008dbc <tcp_receive+0xb08>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	441a      	add	r2, r3
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dd4d      	ble.n	8008c48 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	4b81      	ldr	r3, [pc, #516]	; (8008dbc <tcp_receive+0xb08>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	4b80      	ldr	r3, [pc, #512]	; (8008dc0 <tcp_receive+0xb0c>)
 8008bc0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008bc2:	4b7f      	ldr	r3, [pc, #508]	; (8008dc0 <tcp_receive+0xb0c>)
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	899b      	ldrh	r3, [r3, #12]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fa ffd8 	bl	8003b80 <lwip_htons>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d005      	beq.n	8008be8 <tcp_receive+0x934>
                inseg.len -= 1;
 8008bdc:	4b78      	ldr	r3, [pc, #480]	; (8008dc0 <tcp_receive+0xb0c>)
 8008bde:	891b      	ldrh	r3, [r3, #8]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	4b76      	ldr	r3, [pc, #472]	; (8008dc0 <tcp_receive+0xb0c>)
 8008be6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008be8:	4b75      	ldr	r3, [pc, #468]	; (8008dc0 <tcp_receive+0xb0c>)
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	4b74      	ldr	r3, [pc, #464]	; (8008dc0 <tcp_receive+0xb0c>)
 8008bee:	891b      	ldrh	r3, [r3, #8]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fc f8f6 	bl	8004de4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008bf8:	4b71      	ldr	r3, [pc, #452]	; (8008dc0 <tcp_receive+0xb0c>)
 8008bfa:	891c      	ldrh	r4, [r3, #8]
 8008bfc:	4b70      	ldr	r3, [pc, #448]	; (8008dc0 <tcp_receive+0xb0c>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	899b      	ldrh	r3, [r3, #12]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fa ffbb 	bl	8003b80 <lwip_htons>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <tcp_receive+0x966>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <tcp_receive+0x968>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4423      	add	r3, r4
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	4b65      	ldr	r3, [pc, #404]	; (8008db8 <tcp_receive+0xb04>)
 8008c22:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008c24:	4b64      	ldr	r3, [pc, #400]	; (8008db8 <tcp_receive+0xb04>)
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	4b64      	ldr	r3, [pc, #400]	; (8008dbc <tcp_receive+0xb08>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	441a      	add	r2, r3
 8008c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d006      	beq.n	8008c48 <tcp_receive+0x994>
 8008c3a:	4b62      	ldr	r3, [pc, #392]	; (8008dc4 <tcp_receive+0xb10>)
 8008c3c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8008c40:	4961      	ldr	r1, [pc, #388]	; (8008dc8 <tcp_receive+0xb14>)
 8008c42:	4862      	ldr	r0, [pc, #392]	; (8008dcc <tcp_receive+0xb18>)
 8008c44:	f006 fef6 	bl	800fa34 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c4c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008c4e:	4b5a      	ldr	r3, [pc, #360]	; (8008db8 <tcp_receive+0xb04>)
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	4b59      	ldr	r3, [pc, #356]	; (8008dbc <tcp_receive+0xb08>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	441a      	add	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c62:	4b55      	ldr	r3, [pc, #340]	; (8008db8 <tcp_receive+0xb04>)
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d206      	bcs.n	8008c78 <tcp_receive+0x9c4>
 8008c6a:	4b56      	ldr	r3, [pc, #344]	; (8008dc4 <tcp_receive+0xb10>)
 8008c6c:	f240 6207 	movw	r2, #1543	; 0x607
 8008c70:	4957      	ldr	r1, [pc, #348]	; (8008dd0 <tcp_receive+0xb1c>)
 8008c72:	4856      	ldr	r0, [pc, #344]	; (8008dcc <tcp_receive+0xb18>)
 8008c74:	f006 fede 	bl	800fa34 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c7c:	4b4e      	ldr	r3, [pc, #312]	; (8008db8 <tcp_receive+0xb04>)
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7fc ffcd 	bl	8005c28 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008c8e:	4b4c      	ldr	r3, [pc, #304]	; (8008dc0 <tcp_receive+0xb0c>)
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	891b      	ldrh	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d006      	beq.n	8008ca6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008c98:	4b49      	ldr	r3, [pc, #292]	; (8008dc0 <tcp_receive+0xb0c>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	4a4d      	ldr	r2, [pc, #308]	; (8008dd4 <tcp_receive+0xb20>)
 8008c9e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008ca0:	4b47      	ldr	r3, [pc, #284]	; (8008dc0 <tcp_receive+0xb0c>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008ca6:	4b46      	ldr	r3, [pc, #280]	; (8008dc0 <tcp_receive+0xb0c>)
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	899b      	ldrh	r3, [r3, #12]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fa ff66 	bl	8003b80 <lwip_htons>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 80b8 	beq.w	8008e32 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008cc2:	4b45      	ldr	r3, [pc, #276]	; (8008dd8 <tcp_receive+0xb24>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	f043 0320 	orr.w	r3, r3, #32
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	4b42      	ldr	r3, [pc, #264]	; (8008dd8 <tcp_receive+0xb24>)
 8008cce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008cd0:	e0af      	b.n	8008e32 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	4a36      	ldr	r2, [pc, #216]	; (8008dbc <tcp_receive+0xb08>)
 8008ce2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	891b      	ldrh	r3, [r3, #8]
 8008ce8:	461c      	mov	r4, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	899b      	ldrh	r3, [r3, #12]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fa ff44 	bl	8003b80 <lwip_htons>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	f003 0303 	and.w	r3, r3, #3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <tcp_receive+0xa54>
 8008d04:	2301      	movs	r3, #1
 8008d06:	e000      	b.n	8008d0a <tcp_receive+0xa56>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	191a      	adds	r2, r3, r4
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	441a      	add	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d1a:	461c      	mov	r4, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	891b      	ldrh	r3, [r3, #8]
 8008d20:	461d      	mov	r5, r3
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	899b      	ldrh	r3, [r3, #12]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fa ff28 	bl	8003b80 <lwip_htons>
 8008d30:	4603      	mov	r3, r0
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	f003 0303 	and.w	r3, r3, #3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <tcp_receive+0xa8c>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <tcp_receive+0xa8e>
 8008d40:	2300      	movs	r3, #0
 8008d42:	442b      	add	r3, r5
 8008d44:	429c      	cmp	r4, r3
 8008d46:	d206      	bcs.n	8008d56 <tcp_receive+0xaa2>
 8008d48:	4b1e      	ldr	r3, [pc, #120]	; (8008dc4 <tcp_receive+0xb10>)
 8008d4a:	f240 622c 	movw	r2, #1580	; 0x62c
 8008d4e:	4923      	ldr	r1, [pc, #140]	; (8008ddc <tcp_receive+0xb28>)
 8008d50:	481e      	ldr	r0, [pc, #120]	; (8008dcc <tcp_receive+0xb18>)
 8008d52:	f006 fe6f 	bl	800fa34 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	891b      	ldrh	r3, [r3, #8]
 8008d5a:	461c      	mov	r4, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	899b      	ldrh	r3, [r3, #12]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fa ff0b 	bl	8003b80 <lwip_htons>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <tcp_receive+0xac6>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e000      	b.n	8008d7c <tcp_receive+0xac8>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	1919      	adds	r1, r3, r4
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008d82:	b28b      	uxth	r3, r1
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7fc ff4b 	bl	8005c28 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	891b      	ldrh	r3, [r3, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d028      	beq.n	8008dee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008d9c:	4b0d      	ldr	r3, [pc, #52]	; (8008dd4 <tcp_receive+0xb20>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01d      	beq.n	8008de0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8008da4:	4b0b      	ldr	r3, [pc, #44]	; (8008dd4 <tcp_receive+0xb20>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	4619      	mov	r1, r3
 8008dae:	4610      	mov	r0, r2
 8008db0:	f7fc fa60 	bl	8005274 <pbuf_cat>
 8008db4:	e018      	b.n	8008de8 <tcp_receive+0xb34>
 8008db6:	bf00      	nop
 8008db8:	200000fa 	.word	0x200000fa
 8008dbc:	200000f0 	.word	0x200000f0
 8008dc0:	200000d0 	.word	0x200000d0
 8008dc4:	08011ac0 	.word	0x08011ac0
 8008dc8:	08011ea0 	.word	0x08011ea0
 8008dcc:	08011b0c 	.word	0x08011b0c
 8008dd0:	08011edc 	.word	0x08011edc
 8008dd4:	20000100 	.word	0x20000100
 8008dd8:	200000fd 	.word	0x200000fd
 8008ddc:	08011efc 	.word	0x08011efc
            } else {
              recv_data = cseg->p;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	4a70      	ldr	r2, [pc, #448]	; (8008fa8 <tcp_receive+0xcf4>)
 8008de6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2200      	movs	r2, #0
 8008dec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	899b      	ldrh	r3, [r3, #12]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fa fec2 	bl	8003b80 <lwip_htons>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00d      	beq.n	8008e24 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008e08:	4b68      	ldr	r3, [pc, #416]	; (8008fac <tcp_receive+0xcf8>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	f043 0320 	orr.w	r3, r3, #32
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	4b66      	ldr	r3, [pc, #408]	; (8008fac <tcp_receive+0xcf8>)
 8008e14:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	7d1b      	ldrb	r3, [r3, #20]
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	d102      	bne.n	8008e24 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2207      	movs	r2, #7
 8008e22:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008e2c:	68b8      	ldr	r0, [r7, #8]
 8008e2e:	f7fd fbd7 	bl	80065e0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d008      	beq.n	8008e4c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008e46:	429a      	cmp	r2, r3
 8008e48:	f43f af43 	beq.w	8008cd2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	8b5b      	ldrh	r3, [r3, #26]
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00e      	beq.n	8008e76 <tcp_receive+0xbc2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	8b5b      	ldrh	r3, [r3, #26]
 8008e5c:	f023 0301 	bic.w	r3, r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	835a      	strh	r2, [r3, #26]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	8b5b      	ldrh	r3, [r3, #26]
 8008e6a:	f043 0302 	orr.w	r3, r3, #2
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008e74:	e188      	b.n	8009188 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8b5b      	ldrh	r3, [r3, #26]
 8008e7a:	f043 0301 	orr.w	r3, r3, #1
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008e84:	e180      	b.n	8009188 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d106      	bne.n	8008e9c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008e8e:	4848      	ldr	r0, [pc, #288]	; (8008fb0 <tcp_receive+0xcfc>)
 8008e90:	f7fd fbbe 	bl	8006610 <tcp_seg_copy>
 8008e94:	4602      	mov	r2, r0
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	675a      	str	r2, [r3, #116]	; 0x74
 8008e9a:	e16d      	b.n	8009178 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ea6:	e157      	b.n	8009158 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	4b41      	ldr	r3, [pc, #260]	; (8008fb4 <tcp_receive+0xd00>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d11d      	bne.n	8008ef2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008eb6:	4b3e      	ldr	r3, [pc, #248]	; (8008fb0 <tcp_receive+0xcfc>)
 8008eb8:	891a      	ldrh	r2, [r3, #8]
 8008eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebc:	891b      	ldrh	r3, [r3, #8]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	f240 814f 	bls.w	8009162 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008ec4:	483a      	ldr	r0, [pc, #232]	; (8008fb0 <tcp_receive+0xcfc>)
 8008ec6:	f7fd fba3 	bl	8006610 <tcp_seg_copy>
 8008eca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f000 8149 	beq.w	8009166 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8008eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	e002      	b.n	8008ee8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008ee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008eea:	6978      	ldr	r0, [r7, #20]
 8008eec:	f7ff f8de 	bl	80080ac <tcp_oos_insert_segment>
                }
                break;
 8008ef0:	e139      	b.n	8009166 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d117      	bne.n	8008f28 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008ef8:	4b2e      	ldr	r3, [pc, #184]	; (8008fb4 <tcp_receive+0xd00>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	da57      	bge.n	8008fb8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008f08:	4829      	ldr	r0, [pc, #164]	; (8008fb0 <tcp_receive+0xcfc>)
 8008f0a:	f7fd fb81 	bl	8006610 <tcp_seg_copy>
 8008f0e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8129 	beq.w	800916a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f20:	69b8      	ldr	r0, [r7, #24]
 8008f22:	f7ff f8c3 	bl	80080ac <tcp_oos_insert_segment>
                  }
                  break;
 8008f26:	e120      	b.n	800916a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008f28:	4b22      	ldr	r3, [pc, #136]	; (8008fb4 <tcp_receive+0xd00>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	db3e      	blt.n	8008fb8 <tcp_receive+0xd04>
 8008f3a:	4b1e      	ldr	r3, [pc, #120]	; (8008fb4 <tcp_receive+0xd00>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	3301      	adds	r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dc35      	bgt.n	8008fb8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008f4c:	4818      	ldr	r0, [pc, #96]	; (8008fb0 <tcp_receive+0xcfc>)
 8008f4e:	f7fd fb5f 	bl	8006610 <tcp_seg_copy>
 8008f52:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 8109 	beq.w	800916e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f64:	8912      	ldrh	r2, [r2, #8]
 8008f66:	441a      	add	r2, r3
 8008f68:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <tcp_receive+0xd00>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dd12      	ble.n	8008f98 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008f72:	4b10      	ldr	r3, [pc, #64]	; (8008fb4 <tcp_receive+0xd00>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f86:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8e:	891b      	ldrh	r3, [r3, #8]
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7fb ff26 	bl	8004de4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	69fa      	ldr	r2, [r7, #28]
 8008f9c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008f9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fa0:	69f8      	ldr	r0, [r7, #28]
 8008fa2:	f7ff f883 	bl	80080ac <tcp_oos_insert_segment>
                  }
                  break;
 8008fa6:	e0e2      	b.n	800916e <tcp_receive+0xeba>
 8008fa8:	20000100 	.word	0x20000100
 8008fac:	200000fd 	.word	0x200000fd
 8008fb0:	200000d0 	.word	0x200000d0
 8008fb4:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f040 80c6 	bne.w	8009152 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008fc6:	4b80      	ldr	r3, [pc, #512]	; (80091c8 <tcp_receive+0xf14>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f340 80bd 	ble.w	8009152 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	899b      	ldrh	r3, [r3, #12]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fa fdcd 	bl	8003b80 <lwip_htons>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f040 80bf 	bne.w	8009172 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008ff4:	4875      	ldr	r0, [pc, #468]	; (80091cc <tcp_receive+0xf18>)
 8008ff6:	f7fd fb0b 	bl	8006610 <tcp_seg_copy>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 80b6 	beq.w	8009176 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009012:	8912      	ldrh	r2, [r2, #8]
 8009014:	441a      	add	r2, r3
 8009016:	4b6c      	ldr	r3, [pc, #432]	; (80091c8 <tcp_receive+0xf14>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	dd12      	ble.n	8009046 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009020:	4b69      	ldr	r3, [pc, #420]	; (80091c8 <tcp_receive+0xf14>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	b29a      	uxth	r2, r3
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	b29b      	uxth	r3, r3
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	b29a      	uxth	r2, r3
 8009032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009034:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	891b      	ldrh	r3, [r3, #8]
 800903e:	4619      	mov	r1, r3
 8009040:	4610      	mov	r0, r2
 8009042:	f7fb fecf 	bl	8004de4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009046:	4b62      	ldr	r3, [pc, #392]	; (80091d0 <tcp_receive+0xf1c>)
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	4b5e      	ldr	r3, [pc, #376]	; (80091c8 <tcp_receive+0xf14>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	441a      	add	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	6879      	ldr	r1, [r7, #4]
 8009058:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800905a:	440b      	add	r3, r1
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	f340 8089 	ble.w	8009176 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	899b      	ldrh	r3, [r3, #12]
 800906c:	b29b      	uxth	r3, r3
 800906e:	4618      	mov	r0, r3
 8009070:	f7fa fd86 	bl	8003b80 <lwip_htons>
 8009074:	4603      	mov	r3, r0
 8009076:	b2db      	uxtb	r3, r3
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d022      	beq.n	80090c6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	899b      	ldrh	r3, [r3, #12]
 8009088:	b29b      	uxth	r3, r3
 800908a:	b21b      	sxth	r3, r3
 800908c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009090:	b21c      	sxth	r4, r3
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	899b      	ldrh	r3, [r3, #12]
 800909a:	b29b      	uxth	r3, r3
 800909c:	4618      	mov	r0, r3
 800909e:	f7fa fd6f 	bl	8003b80 <lwip_htons>
 80090a2:	4603      	mov	r3, r0
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fa fd66 	bl	8003b80 <lwip_htons>
 80090b4:	4603      	mov	r3, r0
 80090b6:	b21b      	sxth	r3, r3
 80090b8:	4323      	orrs	r3, r4
 80090ba:	b21a      	sxth	r2, r3
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	b292      	uxth	r2, r2
 80090c4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d0:	4413      	add	r3, r2
 80090d2:	b299      	uxth	r1, r3
 80090d4:	4b3c      	ldr	r3, [pc, #240]	; (80091c8 <tcp_receive+0xf14>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	b29a      	uxth	r2, r3
 80090da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	1a8a      	subs	r2, r1, r2
 80090e0:	b292      	uxth	r2, r2
 80090e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80090e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	891b      	ldrh	r3, [r3, #8]
 80090f0:	4619      	mov	r1, r3
 80090f2:	4610      	mov	r0, r2
 80090f4:	f7fb fe76 	bl	8004de4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	891c      	ldrh	r4, [r3, #8]
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	899b      	ldrh	r3, [r3, #12]
 8009106:	b29b      	uxth	r3, r3
 8009108:	4618      	mov	r0, r3
 800910a:	f7fa fd39 	bl	8003b80 <lwip_htons>
 800910e:	4603      	mov	r3, r0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <tcp_receive+0xe6a>
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <tcp_receive+0xe6c>
 800911e:	2300      	movs	r3, #0
 8009120:	4423      	add	r3, r4
 8009122:	b29a      	uxth	r2, r3
 8009124:	4b2a      	ldr	r3, [pc, #168]	; (80091d0 <tcp_receive+0xf1c>)
 8009126:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009128:	4b29      	ldr	r3, [pc, #164]	; (80091d0 <tcp_receive+0xf1c>)
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	4b26      	ldr	r3, [pc, #152]	; (80091c8 <tcp_receive+0xf14>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	441a      	add	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800913c:	440b      	add	r3, r1
 800913e:	429a      	cmp	r2, r3
 8009140:	d019      	beq.n	8009176 <tcp_receive+0xec2>
 8009142:	4b24      	ldr	r3, [pc, #144]	; (80091d4 <tcp_receive+0xf20>)
 8009144:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009148:	4923      	ldr	r1, [pc, #140]	; (80091d8 <tcp_receive+0xf24>)
 800914a:	4824      	ldr	r0, [pc, #144]	; (80091dc <tcp_receive+0xf28>)
 800914c:	f006 fc72 	bl	800fa34 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009150:	e011      	b.n	8009176 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	63bb      	str	r3, [r7, #56]	; 0x38
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	2b00      	cmp	r3, #0
 800915c:	f47f aea4 	bne.w	8008ea8 <tcp_receive+0xbf4>
 8009160:	e00a      	b.n	8009178 <tcp_receive+0xec4>
                break;
 8009162:	bf00      	nop
 8009164:	e008      	b.n	8009178 <tcp_receive+0xec4>
                break;
 8009166:	bf00      	nop
 8009168:	e006      	b.n	8009178 <tcp_receive+0xec4>
                  break;
 800916a:	bf00      	nop
 800916c:	e004      	b.n	8009178 <tcp_receive+0xec4>
                  break;
 800916e:	bf00      	nop
 8009170:	e002      	b.n	8009178 <tcp_receive+0xec4>
                  break;
 8009172:	bf00      	nop
 8009174:	e000      	b.n	8009178 <tcp_receive+0xec4>
                break;
 8009176:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f001 fa3f 	bl	800a5fc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800917e:	e003      	b.n	8009188 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 fa3b 	bl	800a5fc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009186:	e01a      	b.n	80091be <tcp_receive+0xf0a>
 8009188:	e019      	b.n	80091be <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800918a:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <tcp_receive+0xf14>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	db0a      	blt.n	80091ae <tcp_receive+0xefa>
 8009198:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <tcp_receive+0xf14>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80091a4:	440b      	add	r3, r1
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	3301      	adds	r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	dd07      	ble.n	80091be <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8b5b      	ldrh	r3, [r3, #26]
 80091b2:	f043 0302 	orr.w	r3, r3, #2
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80091bc:	e7ff      	b.n	80091be <tcp_receive+0xf0a>
 80091be:	bf00      	nop
 80091c0:	3750      	adds	r7, #80	; 0x50
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bdb0      	pop	{r4, r5, r7, pc}
 80091c6:	bf00      	nop
 80091c8:	200000f0 	.word	0x200000f0
 80091cc:	200000d0 	.word	0x200000d0
 80091d0:	200000fa 	.word	0x200000fa
 80091d4:	08011ac0 	.word	0x08011ac0
 80091d8:	08011e68 	.word	0x08011e68
 80091dc:	08011b0c 	.word	0x08011b0c

080091e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80091e6:	4b15      	ldr	r3, [pc, #84]	; (800923c <tcp_get_next_optbyte+0x5c>)
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	b291      	uxth	r1, r2
 80091ee:	4a13      	ldr	r2, [pc, #76]	; (800923c <tcp_get_next_optbyte+0x5c>)
 80091f0:	8011      	strh	r1, [r2, #0]
 80091f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80091f4:	4b12      	ldr	r3, [pc, #72]	; (8009240 <tcp_get_next_optbyte+0x60>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d004      	beq.n	8009206 <tcp_get_next_optbyte+0x26>
 80091fc:	4b11      	ldr	r3, [pc, #68]	; (8009244 <tcp_get_next_optbyte+0x64>)
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	88fa      	ldrh	r2, [r7, #6]
 8009202:	429a      	cmp	r2, r3
 8009204:	d208      	bcs.n	8009218 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <tcp_get_next_optbyte+0x68>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3314      	adds	r3, #20
 800920c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800920e:	88fb      	ldrh	r3, [r7, #6]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	4413      	add	r3, r2
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	e00b      	b.n	8009230 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	b2da      	uxtb	r2, r3
 800921c:	4b09      	ldr	r3, [pc, #36]	; (8009244 <tcp_get_next_optbyte+0x64>)
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	b2db      	uxtb	r3, r3
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009226:	4b06      	ldr	r3, [pc, #24]	; (8009240 <tcp_get_next_optbyte+0x60>)
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	797b      	ldrb	r3, [r7, #5]
 800922c:	4413      	add	r3, r2
 800922e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	200000ec 	.word	0x200000ec
 8009240:	200000e8 	.word	0x200000e8
 8009244:	200000e6 	.word	0x200000e6
 8009248:	200000e0 	.word	0x200000e0

0800924c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <tcp_parseopt+0x1c>
 800925a:	4b31      	ldr	r3, [pc, #196]	; (8009320 <tcp_parseopt+0xd4>)
 800925c:	f240 727d 	movw	r2, #1917	; 0x77d
 8009260:	4930      	ldr	r1, [pc, #192]	; (8009324 <tcp_parseopt+0xd8>)
 8009262:	4831      	ldr	r0, [pc, #196]	; (8009328 <tcp_parseopt+0xdc>)
 8009264:	f006 fbe6 	bl	800fa34 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009268:	4b30      	ldr	r3, [pc, #192]	; (800932c <tcp_parseopt+0xe0>)
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d053      	beq.n	8009318 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009270:	4b2f      	ldr	r3, [pc, #188]	; (8009330 <tcp_parseopt+0xe4>)
 8009272:	2200      	movs	r2, #0
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	e043      	b.n	8009300 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8009278:	f7ff ffb2 	bl	80091e0 <tcp_get_next_optbyte>
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d03c      	beq.n	8009300 <tcp_parseopt+0xb4>
 8009286:	2b02      	cmp	r3, #2
 8009288:	d002      	beq.n	8009290 <tcp_parseopt+0x44>
 800928a:	2b00      	cmp	r3, #0
 800928c:	d03f      	beq.n	800930e <tcp_parseopt+0xc2>
 800928e:	e026      	b.n	80092de <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009290:	f7ff ffa6 	bl	80091e0 <tcp_get_next_optbyte>
 8009294:	4603      	mov	r3, r0
 8009296:	2b04      	cmp	r3, #4
 8009298:	d13b      	bne.n	8009312 <tcp_parseopt+0xc6>
 800929a:	4b25      	ldr	r3, [pc, #148]	; (8009330 <tcp_parseopt+0xe4>)
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	3302      	adds	r3, #2
 80092a0:	4a22      	ldr	r2, [pc, #136]	; (800932c <tcp_parseopt+0xe0>)
 80092a2:	8812      	ldrh	r2, [r2, #0]
 80092a4:	4293      	cmp	r3, r2
 80092a6:	dc34      	bgt.n	8009312 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80092a8:	f7ff ff9a 	bl	80091e0 <tcp_get_next_optbyte>
 80092ac:	4603      	mov	r3, r0
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	021b      	lsls	r3, r3, #8
 80092b2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80092b4:	f7ff ff94 	bl	80091e0 <tcp_get_next_optbyte>
 80092b8:	4603      	mov	r3, r0
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	89bb      	ldrh	r3, [r7, #12]
 80092be:	4313      	orrs	r3, r2
 80092c0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80092c2:	89bb      	ldrh	r3, [r7, #12]
 80092c4:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80092c8:	d804      	bhi.n	80092d4 <tcp_parseopt+0x88>
 80092ca:	89bb      	ldrh	r3, [r7, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <tcp_parseopt+0x88>
 80092d0:	89ba      	ldrh	r2, [r7, #12]
 80092d2:	e001      	b.n	80092d8 <tcp_parseopt+0x8c>
 80092d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80092dc:	e010      	b.n	8009300 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80092de:	f7ff ff7f 	bl	80091e0 <tcp_get_next_optbyte>
 80092e2:	4603      	mov	r3, r0
 80092e4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d914      	bls.n	8009316 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	4b0f      	ldr	r3, [pc, #60]	; (8009330 <tcp_parseopt+0xe4>)
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	4413      	add	r3, r2
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	3b02      	subs	r3, #2
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	4b0c      	ldr	r3, [pc, #48]	; (8009330 <tcp_parseopt+0xe4>)
 80092fe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009300:	4b0b      	ldr	r3, [pc, #44]	; (8009330 <tcp_parseopt+0xe4>)
 8009302:	881a      	ldrh	r2, [r3, #0]
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <tcp_parseopt+0xe0>)
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	429a      	cmp	r2, r3
 800930a:	d3b5      	bcc.n	8009278 <tcp_parseopt+0x2c>
 800930c:	e004      	b.n	8009318 <tcp_parseopt+0xcc>
          return;
 800930e:	bf00      	nop
 8009310:	e002      	b.n	8009318 <tcp_parseopt+0xcc>
            return;
 8009312:	bf00      	nop
 8009314:	e000      	b.n	8009318 <tcp_parseopt+0xcc>
            return;
 8009316:	bf00      	nop
      }
    }
  }
}
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	08011ac0 	.word	0x08011ac0
 8009324:	08011f24 	.word	0x08011f24
 8009328:	08011b0c 	.word	0x08011b0c
 800932c:	200000e4 	.word	0x200000e4
 8009330:	200000ec 	.word	0x200000ec

08009334 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009334:	b480      	push	{r7}
 8009336:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009338:	4b05      	ldr	r3, [pc, #20]	; (8009350 <tcp_trigger_input_pcb_close+0x1c>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f043 0310 	orr.w	r3, r3, #16
 8009340:	b2da      	uxtb	r2, r3
 8009342:	4b03      	ldr	r3, [pc, #12]	; (8009350 <tcp_trigger_input_pcb_close+0x1c>)
 8009344:	701a      	strb	r2, [r3, #0]
}
 8009346:	bf00      	nop
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	200000fd 	.word	0x200000fd

08009354 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <tcp_route+0x28>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	7a1b      	ldrb	r3, [r3, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d006      	beq.n	800937c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	7a1b      	ldrb	r3, [r3, #8]
 8009372:	4618      	mov	r0, r3
 8009374:	f7fb fb60 	bl	8004a38 <netif_get_by_index>
 8009378:	4603      	mov	r3, r0
 800937a:	e003      	b.n	8009384 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f004 ffe3 	bl	800e348 <ip4_route>
 8009382:	4603      	mov	r3, r0
  }
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800938c:	b590      	push	{r4, r7, lr}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	603b      	str	r3, [r7, #0]
 8009398:	4613      	mov	r3, r2
 800939a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d105      	bne.n	80093ae <tcp_create_segment+0x22>
 80093a2:	4b44      	ldr	r3, [pc, #272]	; (80094b4 <tcp_create_segment+0x128>)
 80093a4:	22a3      	movs	r2, #163	; 0xa3
 80093a6:	4944      	ldr	r1, [pc, #272]	; (80094b8 <tcp_create_segment+0x12c>)
 80093a8:	4844      	ldr	r0, [pc, #272]	; (80094bc <tcp_create_segment+0x130>)
 80093aa:	f006 fb43 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d105      	bne.n	80093c0 <tcp_create_segment+0x34>
 80093b4:	4b3f      	ldr	r3, [pc, #252]	; (80094b4 <tcp_create_segment+0x128>)
 80093b6:	22a4      	movs	r2, #164	; 0xa4
 80093b8:	4941      	ldr	r1, [pc, #260]	; (80094c0 <tcp_create_segment+0x134>)
 80093ba:	4840      	ldr	r0, [pc, #256]	; (80094bc <tcp_create_segment+0x130>)
 80093bc:	f006 fb3a 	bl	800fa34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80093c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80093ce:	2003      	movs	r0, #3
 80093d0:	f7fb f82c 	bl	800442c <memp_malloc>
 80093d4:	6138      	str	r0, [r7, #16]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80093dc:	68b8      	ldr	r0, [r7, #8]
 80093de:	f7fb fe87 	bl	80050f0 <pbuf_free>
    return NULL;
 80093e2:	2300      	movs	r3, #0
 80093e4:	e061      	b.n	80094aa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80093ec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	891a      	ldrh	r2, [r3, #8]
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	b29b      	uxth	r3, r3
 8009402:	429a      	cmp	r2, r3
 8009404:	d205      	bcs.n	8009412 <tcp_create_segment+0x86>
 8009406:	4b2b      	ldr	r3, [pc, #172]	; (80094b4 <tcp_create_segment+0x128>)
 8009408:	22b0      	movs	r2, #176	; 0xb0
 800940a:	492e      	ldr	r1, [pc, #184]	; (80094c4 <tcp_create_segment+0x138>)
 800940c:	482b      	ldr	r0, [pc, #172]	; (80094bc <tcp_create_segment+0x130>)
 800940e:	f006 fb11 	bl	800fa34 <iprintf>
  seg->len = p->tot_len - optlen;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	891a      	ldrh	r2, [r3, #8]
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	b29b      	uxth	r3, r3
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	b29a      	uxth	r2, r3
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009422:	2114      	movs	r1, #20
 8009424:	68b8      	ldr	r0, [r7, #8]
 8009426:	f7fb fdcd 	bl	8004fc4 <pbuf_add_header>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009430:	6938      	ldr	r0, [r7, #16]
 8009432:	f7fd f8d5 	bl	80065e0 <tcp_seg_free>
    return NULL;
 8009436:	2300      	movs	r3, #0
 8009438:	e037      	b.n	80094aa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8ada      	ldrh	r2, [r3, #22]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	68dc      	ldr	r4, [r3, #12]
 800944c:	4610      	mov	r0, r2
 800944e:	f7fa fb97 	bl	8003b80 <lwip_htons>
 8009452:	4603      	mov	r3, r0
 8009454:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8b1a      	ldrh	r2, [r3, #24]
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	68dc      	ldr	r4, [r3, #12]
 800945e:	4610      	mov	r0, r2
 8009460:	f7fa fb8e 	bl	8003b80 <lwip_htons>
 8009464:	4603      	mov	r3, r0
 8009466:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	68dc      	ldr	r4, [r3, #12]
 800946c:	6838      	ldr	r0, [r7, #0]
 800946e:	f7fa fb9c 	bl	8003baa <lwip_htonl>
 8009472:	4603      	mov	r3, r0
 8009474:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	089b      	lsrs	r3, r3, #2
 800947a:	b2db      	uxtb	r3, r3
 800947c:	b29b      	uxth	r3, r3
 800947e:	3305      	adds	r3, #5
 8009480:	b29b      	uxth	r3, r3
 8009482:	031b      	lsls	r3, r3, #12
 8009484:	b29a      	uxth	r2, r3
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	b29b      	uxth	r3, r3
 800948a:	4313      	orrs	r3, r2
 800948c:	b29a      	uxth	r2, r3
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	68dc      	ldr	r4, [r3, #12]
 8009492:	4610      	mov	r0, r2
 8009494:	f7fa fb74 	bl	8003b80 <lwip_htons>
 8009498:	4603      	mov	r3, r0
 800949a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	749a      	strb	r2, [r3, #18]
 80094a4:	2200      	movs	r2, #0
 80094a6:	74da      	strb	r2, [r3, #19]
  return seg;
 80094a8:	693b      	ldr	r3, [r7, #16]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd90      	pop	{r4, r7, pc}
 80094b2:	bf00      	nop
 80094b4:	08011f40 	.word	0x08011f40
 80094b8:	08011f74 	.word	0x08011f74
 80094bc:	08011f94 	.word	0x08011f94
 80094c0:	08011fbc 	.word	0x08011fbc
 80094c4:	08011fe0 	.word	0x08011fe0

080094c8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80094c8:	b590      	push	{r4, r7, lr}
 80094ca:	b08b      	sub	sp, #44	; 0x2c
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	460b      	mov	r3, r1
 80094d2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]
 80094d8:	2300      	movs	r3, #0
 80094da:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d106      	bne.n	80094f4 <tcp_split_unsent_seg+0x2c>
 80094e6:	4b95      	ldr	r3, [pc, #596]	; (800973c <tcp_split_unsent_seg+0x274>)
 80094e8:	f240 324b 	movw	r2, #843	; 0x34b
 80094ec:	4994      	ldr	r1, [pc, #592]	; (8009740 <tcp_split_unsent_seg+0x278>)
 80094ee:	4895      	ldr	r0, [pc, #596]	; (8009744 <tcp_split_unsent_seg+0x27c>)
 80094f0:	f006 faa0 	bl	800fa34 <iprintf>

  useg = pcb->unsent;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009500:	f04f 33ff 	mov.w	r3, #4294967295
 8009504:	e116      	b.n	8009734 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009506:	887b      	ldrh	r3, [r7, #2]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d109      	bne.n	8009520 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800950c:	4b8b      	ldr	r3, [pc, #556]	; (800973c <tcp_split_unsent_seg+0x274>)
 800950e:	f240 3253 	movw	r2, #851	; 0x353
 8009512:	498d      	ldr	r1, [pc, #564]	; (8009748 <tcp_split_unsent_seg+0x280>)
 8009514:	488b      	ldr	r0, [pc, #556]	; (8009744 <tcp_split_unsent_seg+0x27c>)
 8009516:	f006 fa8d 	bl	800fa34 <iprintf>
    return ERR_VAL;
 800951a:	f06f 0305 	mvn.w	r3, #5
 800951e:	e109      	b.n	8009734 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	891b      	ldrh	r3, [r3, #8]
 8009524:	887a      	ldrh	r2, [r7, #2]
 8009526:	429a      	cmp	r2, r3
 8009528:	d301      	bcc.n	800952e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	e102      	b.n	8009734 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009532:	887a      	ldrh	r2, [r7, #2]
 8009534:	429a      	cmp	r2, r3
 8009536:	d906      	bls.n	8009546 <tcp_split_unsent_seg+0x7e>
 8009538:	4b80      	ldr	r3, [pc, #512]	; (800973c <tcp_split_unsent_seg+0x274>)
 800953a:	f240 325b 	movw	r2, #859	; 0x35b
 800953e:	4983      	ldr	r1, [pc, #524]	; (800974c <tcp_split_unsent_seg+0x284>)
 8009540:	4880      	ldr	r0, [pc, #512]	; (8009744 <tcp_split_unsent_seg+0x27c>)
 8009542:	f006 fa77 	bl	800fa34 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	891b      	ldrh	r3, [r3, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <tcp_split_unsent_seg+0x94>
 800954e:	4b7b      	ldr	r3, [pc, #492]	; (800973c <tcp_split_unsent_seg+0x274>)
 8009550:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009554:	497e      	ldr	r1, [pc, #504]	; (8009750 <tcp_split_unsent_seg+0x288>)
 8009556:	487b      	ldr	r0, [pc, #492]	; (8009744 <tcp_split_unsent_seg+0x27c>)
 8009558:	f006 fa6c 	bl	800fa34 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	7a9b      	ldrb	r3, [r3, #10]
 8009560:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	b2db      	uxtb	r3, r3
 8009568:	f003 0304 	and.w	r3, r3, #4
 800956c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	891a      	ldrh	r2, [r3, #8]
 8009572:	887b      	ldrh	r3, [r7, #2]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	b29a      	uxth	r2, r3
 800957c:	89bb      	ldrh	r3, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	b29b      	uxth	r3, r3
 8009582:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009586:	4619      	mov	r1, r3
 8009588:	2036      	movs	r0, #54	; 0x36
 800958a:	f7fb fad1 	bl	8004b30 <pbuf_alloc>
 800958e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80b7 	beq.w	8009706 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	891a      	ldrh	r2, [r3, #8]
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	891b      	ldrh	r3, [r3, #8]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	887b      	ldrh	r3, [r7, #2]
 80095a8:	4413      	add	r3, r2
 80095aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	6858      	ldr	r0, [r3, #4]
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	18d1      	adds	r1, r2, r3
 80095b8:	897b      	ldrh	r3, [r7, #10]
 80095ba:	89ba      	ldrh	r2, [r7, #12]
 80095bc:	f7fb ff92 	bl	80054e4 <pbuf_copy_partial>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	89bb      	ldrh	r3, [r7, #12]
 80095c6:	4293      	cmp	r3, r2
 80095c8:	f040 809f 	bne.w	800970a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	899b      	ldrh	r3, [r3, #12]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fa fad3 	bl	8003b80 <lwip_htons>
 80095da:	4603      	mov	r3, r0
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095e2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80095e4:	2300      	movs	r3, #0
 80095e6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80095e8:	7efb      	ldrb	r3, [r7, #27]
 80095ea:	f003 0308 	and.w	r3, r3, #8
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d007      	beq.n	8009602 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80095f2:	7efb      	ldrb	r3, [r7, #27]
 80095f4:	f023 0308 	bic.w	r3, r3, #8
 80095f8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80095fa:	7ebb      	ldrb	r3, [r7, #26]
 80095fc:	f043 0308 	orr.w	r3, r3, #8
 8009600:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009602:	7efb      	ldrb	r3, [r7, #27]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800960c:	7efb      	ldrb	r3, [r7, #27]
 800960e:	f023 0301 	bic.w	r3, r3, #1
 8009612:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009614:	7ebb      	ldrb	r3, [r7, #26]
 8009616:	f043 0301 	orr.w	r3, r3, #1
 800961a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	4618      	mov	r0, r3
 8009624:	f7fa fac1 	bl	8003baa <lwip_htonl>
 8009628:	4602      	mov	r2, r0
 800962a:	887b      	ldrh	r3, [r7, #2]
 800962c:	18d1      	adds	r1, r2, r3
 800962e:	7eba      	ldrb	r2, [r7, #26]
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	460b      	mov	r3, r1
 8009636:	6939      	ldr	r1, [r7, #16]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff fea7 	bl	800938c <tcp_create_segment>
 800963e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d063      	beq.n	800970e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	4618      	mov	r0, r3
 800964c:	f7fb fdd8 	bl	8005200 <pbuf_clen>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800965a:	1a9b      	subs	r3, r3, r2
 800965c:	b29a      	uxth	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	6858      	ldr	r0, [r3, #4]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	891a      	ldrh	r2, [r3, #8]
 800966e:	89bb      	ldrh	r3, [r7, #12]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	b29b      	uxth	r3, r3
 8009674:	4619      	mov	r1, r3
 8009676:	f7fb fbb5 	bl	8004de4 <pbuf_realloc>
  useg->len -= remainder;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	891a      	ldrh	r2, [r3, #8]
 800967e:	89bb      	ldrh	r3, [r7, #12]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	b29a      	uxth	r2, r3
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	899b      	ldrh	r3, [r3, #12]
 800968e:	b29c      	uxth	r4, r3
 8009690:	7efb      	ldrb	r3, [r7, #27]
 8009692:	b29b      	uxth	r3, r3
 8009694:	4618      	mov	r0, r3
 8009696:	f7fa fa73 	bl	8003b80 <lwip_htons>
 800969a:	4603      	mov	r3, r0
 800969c:	461a      	mov	r2, r3
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	4322      	orrs	r2, r4
 80096a4:	b292      	uxth	r2, r2
 80096a6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fb fda7 	bl	8005200 <pbuf_clen>
 80096b2:	4603      	mov	r3, r0
 80096b4:	461a      	mov	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80096bc:	4413      	add	r3, r2
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fb fd98 	bl	8005200 <pbuf_clen>
 80096d0:	4603      	mov	r3, r0
 80096d2:	461a      	mov	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80096da:	4413      	add	r3, r2
 80096dc:	b29a      	uxth	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d103      	bne.n	8009702 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	e016      	b.n	8009734 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009706:	bf00      	nop
 8009708:	e002      	b.n	8009710 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800970a:	bf00      	nop
 800970c:	e000      	b.n	8009710 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800970e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d006      	beq.n	8009724 <tcp_split_unsent_seg+0x25c>
 8009716:	4b09      	ldr	r3, [pc, #36]	; (800973c <tcp_split_unsent_seg+0x274>)
 8009718:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800971c:	490d      	ldr	r1, [pc, #52]	; (8009754 <tcp_split_unsent_seg+0x28c>)
 800971e:	4809      	ldr	r0, [pc, #36]	; (8009744 <tcp_split_unsent_seg+0x27c>)
 8009720:	f006 f988 	bl	800fa34 <iprintf>
  if (p != NULL) {
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800972a:	6938      	ldr	r0, [r7, #16]
 800972c:	f7fb fce0 	bl	80050f0 <pbuf_free>
  }

  return ERR_MEM;
 8009730:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009734:	4618      	mov	r0, r3
 8009736:	3724      	adds	r7, #36	; 0x24
 8009738:	46bd      	mov	sp, r7
 800973a:	bd90      	pop	{r4, r7, pc}
 800973c:	08011f40 	.word	0x08011f40
 8009740:	080122d4 	.word	0x080122d4
 8009744:	08011f94 	.word	0x08011f94
 8009748:	080122f8 	.word	0x080122f8
 800974c:	0801231c 	.word	0x0801231c
 8009750:	0801232c 	.word	0x0801232c
 8009754:	0801233c 	.word	0x0801233c

08009758 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009758:	b590      	push	{r4, r7, lr}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <tcp_send_fin+0x1c>
 8009766:	4b21      	ldr	r3, [pc, #132]	; (80097ec <tcp_send_fin+0x94>)
 8009768:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800976c:	4920      	ldr	r1, [pc, #128]	; (80097f0 <tcp_send_fin+0x98>)
 800976e:	4821      	ldr	r0, [pc, #132]	; (80097f4 <tcp_send_fin+0x9c>)
 8009770:	f006 f960 	bl	800fa34 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009778:	2b00      	cmp	r3, #0
 800977a:	d02e      	beq.n	80097da <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009780:	60fb      	str	r3, [r7, #12]
 8009782:	e002      	b.n	800978a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1f8      	bne.n	8009784 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	899b      	ldrh	r3, [r3, #12]
 8009798:	b29b      	uxth	r3, r3
 800979a:	4618      	mov	r0, r3
 800979c:	f7fa f9f0 	bl	8003b80 <lwip_htons>
 80097a0:	4603      	mov	r3, r0
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f003 0307 	and.w	r3, r3, #7
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d116      	bne.n	80097da <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	899b      	ldrh	r3, [r3, #12]
 80097b2:	b29c      	uxth	r4, r3
 80097b4:	2001      	movs	r0, #1
 80097b6:	f7fa f9e3 	bl	8003b80 <lwip_htons>
 80097ba:	4603      	mov	r3, r0
 80097bc:	461a      	mov	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	4322      	orrs	r2, r4
 80097c4:	b292      	uxth	r2, r2
 80097c6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	8b5b      	ldrh	r3, [r3, #26]
 80097cc:	f043 0320 	orr.w	r3, r3, #32
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e004      	b.n	80097e4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80097da:	2101      	movs	r1, #1
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f80b 	bl	80097f8 <tcp_enqueue_flags>
 80097e2:	4603      	mov	r3, r0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd90      	pop	{r4, r7, pc}
 80097ec:	08011f40 	.word	0x08011f40
 80097f0:	08012348 	.word	0x08012348
 80097f4:	08011f94 	.word	0x08011f94

080097f8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b08a      	sub	sp, #40	; 0x28
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <tcp_enqueue_flags+0x2c>
 8009816:	4b67      	ldr	r3, [pc, #412]	; (80099b4 <tcp_enqueue_flags+0x1bc>)
 8009818:	f240 4212 	movw	r2, #1042	; 0x412
 800981c:	4966      	ldr	r1, [pc, #408]	; (80099b8 <tcp_enqueue_flags+0x1c0>)
 800981e:	4867      	ldr	r0, [pc, #412]	; (80099bc <tcp_enqueue_flags+0x1c4>)
 8009820:	f006 f908 	bl	800fa34 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <tcp_enqueue_flags+0x40>
 800982a:	4b62      	ldr	r3, [pc, #392]	; (80099b4 <tcp_enqueue_flags+0x1bc>)
 800982c:	f240 4213 	movw	r2, #1043	; 0x413
 8009830:	4963      	ldr	r1, [pc, #396]	; (80099c0 <tcp_enqueue_flags+0x1c8>)
 8009832:	4862      	ldr	r0, [pc, #392]	; (80099bc <tcp_enqueue_flags+0x1c4>)
 8009834:	f006 f8fe 	bl	800fa34 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009842:	2301      	movs	r3, #1
 8009844:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009846:	7ffb      	ldrb	r3, [r7, #31]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	b29b      	uxth	r3, r3
 8009856:	f44f 7220 	mov.w	r2, #640	; 0x280
 800985a:	4619      	mov	r1, r3
 800985c:	2036      	movs	r0, #54	; 0x36
 800985e:	f7fb f967 	bl	8004b30 <pbuf_alloc>
 8009862:	6138      	str	r0, [r7, #16]
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d109      	bne.n	800987e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	8b5b      	ldrh	r3, [r3, #26]
 800986e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009878:	f04f 33ff 	mov.w	r3, #4294967295
 800987c:	e095      	b.n	80099aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	895a      	ldrh	r2, [r3, #10]
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	b29b      	uxth	r3, r3
 8009886:	429a      	cmp	r2, r3
 8009888:	d206      	bcs.n	8009898 <tcp_enqueue_flags+0xa0>
 800988a:	4b4a      	ldr	r3, [pc, #296]	; (80099b4 <tcp_enqueue_flags+0x1bc>)
 800988c:	f240 423a 	movw	r2, #1082	; 0x43a
 8009890:	494c      	ldr	r1, [pc, #304]	; (80099c4 <tcp_enqueue_flags+0x1cc>)
 8009892:	484a      	ldr	r0, [pc, #296]	; (80099bc <tcp_enqueue_flags+0x1c4>)
 8009894:	f006 f8ce 	bl	800fa34 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800989c:	78fa      	ldrb	r2, [r7, #3]
 800989e:	7ffb      	ldrb	r3, [r7, #31]
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	460b      	mov	r3, r1
 80098a4:	6939      	ldr	r1, [r7, #16]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7ff fd70 	bl	800938c <tcp_create_segment>
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d109      	bne.n	80098c8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8b5b      	ldrh	r3, [r3, #26]
 80098b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80098c2:	f04f 33ff 	mov.w	r3, #4294967295
 80098c6:	e070      	b.n	80099aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f003 0303 	and.w	r3, r3, #3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d006      	beq.n	80098e2 <tcp_enqueue_flags+0xea>
 80098d4:	4b37      	ldr	r3, [pc, #220]	; (80099b4 <tcp_enqueue_flags+0x1bc>)
 80098d6:	f240 4242 	movw	r2, #1090	; 0x442
 80098da:	493b      	ldr	r1, [pc, #236]	; (80099c8 <tcp_enqueue_flags+0x1d0>)
 80098dc:	4837      	ldr	r0, [pc, #220]	; (80099bc <tcp_enqueue_flags+0x1c4>)
 80098de:	f006 f8a9 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	891b      	ldrh	r3, [r3, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d006      	beq.n	80098f8 <tcp_enqueue_flags+0x100>
 80098ea:	4b32      	ldr	r3, [pc, #200]	; (80099b4 <tcp_enqueue_flags+0x1bc>)
 80098ec:	f240 4243 	movw	r2, #1091	; 0x443
 80098f0:	4936      	ldr	r1, [pc, #216]	; (80099cc <tcp_enqueue_flags+0x1d4>)
 80098f2:	4832      	ldr	r0, [pc, #200]	; (80099bc <tcp_enqueue_flags+0x1c4>)
 80098f4:	f006 f89e 	bl	800fa34 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d103      	bne.n	8009908 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	66da      	str	r2, [r3, #108]	; 0x6c
 8009906:	e00d      	b.n	8009924 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800990c:	61bb      	str	r3, [r7, #24]
 800990e:	e002      	b.n	8009916 <tcp_enqueue_flags+0x11e>
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	61bb      	str	r3, [r7, #24]
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1f8      	bne.n	8009910 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d104      	bne.n	8009940 <tcp_enqueue_flags+0x148>
 8009936:	78fb      	ldrb	r3, [r7, #3]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d004      	beq.n	800994a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d006      	beq.n	8009962 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	8b5b      	ldrh	r3, [r3, #26]
 8009958:	f043 0320 	orr.w	r3, r3, #32
 800995c:	b29a      	uxth	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	4618      	mov	r0, r3
 8009968:	f7fb fc4a 	bl	8005200 <pbuf_clen>
 800996c:	4603      	mov	r3, r0
 800996e:	461a      	mov	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009976:	4413      	add	r3, r2
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00e      	beq.n	80099a8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10a      	bne.n	80099a8 <tcp_enqueue_flags+0x1b0>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d106      	bne.n	80099a8 <tcp_enqueue_flags+0x1b0>
 800999a:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <tcp_enqueue_flags+0x1bc>)
 800999c:	f240 4266 	movw	r2, #1126	; 0x466
 80099a0:	490b      	ldr	r1, [pc, #44]	; (80099d0 <tcp_enqueue_flags+0x1d8>)
 80099a2:	4806      	ldr	r0, [pc, #24]	; (80099bc <tcp_enqueue_flags+0x1c4>)
 80099a4:	f006 f846 	bl	800fa34 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	08011f40 	.word	0x08011f40
 80099b8:	08012364 	.word	0x08012364
 80099bc:	08011f94 	.word	0x08011f94
 80099c0:	080123bc 	.word	0x080123bc
 80099c4:	080123dc 	.word	0x080123dc
 80099c8:	08012418 	.word	0x08012418
 80099cc:	08012430 	.word	0x08012430
 80099d0:	0801245c 	.word	0x0801245c

080099d4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80099d4:	b5b0      	push	{r4, r5, r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d106      	bne.n	80099f0 <tcp_output+0x1c>
 80099e2:	4ba0      	ldr	r3, [pc, #640]	; (8009c64 <tcp_output+0x290>)
 80099e4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80099e8:	499f      	ldr	r1, [pc, #636]	; (8009c68 <tcp_output+0x294>)
 80099ea:	48a0      	ldr	r0, [pc, #640]	; (8009c6c <tcp_output+0x298>)
 80099ec:	f006 f822 	bl	800fa34 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7d1b      	ldrb	r3, [r3, #20]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d106      	bne.n	8009a06 <tcp_output+0x32>
 80099f8:	4b9a      	ldr	r3, [pc, #616]	; (8009c64 <tcp_output+0x290>)
 80099fa:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80099fe:	499c      	ldr	r1, [pc, #624]	; (8009c70 <tcp_output+0x29c>)
 8009a00:	489a      	ldr	r0, [pc, #616]	; (8009c6c <tcp_output+0x298>)
 8009a02:	f006 f817 	bl	800fa34 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009a06:	4b9b      	ldr	r3, [pc, #620]	; (8009c74 <tcp_output+0x2a0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d101      	bne.n	8009a14 <tcp_output+0x40>
    return ERR_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	e1d2      	b.n	8009dba <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d203      	bcs.n	8009a2c <tcp_output+0x58>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a2a:	e002      	b.n	8009a32 <tcp_output+0x5e>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a32:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	8b5b      	ldrh	r3, [r3, #26]
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 81a9 	beq.w	8009da0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fdd4 	bl	800a5fc <tcp_send_empty_ack>
 8009a54:	4603      	mov	r3, r0
 8009a56:	e1b0      	b.n	8009dba <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009a58:	6879      	ldr	r1, [r7, #4]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	461a      	mov	r2, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7ff fc77 	bl	8009354 <tcp_route>
 8009a66:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d102      	bne.n	8009a74 <tcp_output+0xa0>
    return ERR_RTE;
 8009a6e:	f06f 0303 	mvn.w	r3, #3
 8009a72:	e1a2      	b.n	8009dba <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <tcp_output+0xae>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d111      	bne.n	8009aa6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <tcp_output+0xba>
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	e000      	b.n	8009a90 <tcp_output+0xbc>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <tcp_output+0xca>
      return ERR_RTE;
 8009a98:	f06f 0303 	mvn.w	r3, #3
 8009a9c:	e18d      	b.n	8009dba <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fa f87c 	bl	8003baa <lwip_htonl>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009abc:	8912      	ldrh	r2, [r2, #8]
 8009abe:	4413      	add	r3, r2
 8009ac0:	69ba      	ldr	r2, [r7, #24]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d227      	bcs.n	8009b16 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009acc:	461a      	mov	r2, r3
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d114      	bne.n	8009afe <tcp_output+0x12a>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d110      	bne.n	8009afe <tcp_output+0x12a>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10b      	bne.n	8009afe <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	8b5b      	ldrh	r3, [r3, #26]
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 814c 	beq.w	8009da4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fd75 	bl	800a5fc <tcp_send_empty_ack>
 8009b12:	4603      	mov	r3, r0
 8009b14:	e151      	b.n	8009dba <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b22:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 811b 	beq.w	8009d62 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8009b2c:	e002      	b.n	8009b34 <tcp_output+0x160>
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	623b      	str	r3, [r7, #32]
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f8      	bne.n	8009b2e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009b3c:	e111      	b.n	8009d62 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	899b      	ldrh	r3, [r3, #12]
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fa f81a 	bl	8003b80 <lwip_htons>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	f003 0304 	and.w	r3, r3, #4
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <tcp_output+0x192>
 8009b58:	4b42      	ldr	r3, [pc, #264]	; (8009c64 <tcp_output+0x290>)
 8009b5a:	f240 5237 	movw	r2, #1335	; 0x537
 8009b5e:	4946      	ldr	r1, [pc, #280]	; (8009c78 <tcp_output+0x2a4>)
 8009b60:	4842      	ldr	r0, [pc, #264]	; (8009c6c <tcp_output+0x298>)
 8009b62:	f005 ff67 	bl	800fa34 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d01f      	beq.n	8009bae <tcp_output+0x1da>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	8b5b      	ldrh	r3, [r3, #26]
 8009b72:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d119      	bne.n	8009bae <tcp_output+0x1da>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00b      	beq.n	8009b9a <tcp_output+0x1c6>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d110      	bne.n	8009bae <tcp_output+0x1da>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b90:	891a      	ldrh	r2, [r3, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d209      	bcs.n	8009bae <tcp_output+0x1da>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d004      	beq.n	8009bae <tcp_output+0x1da>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009baa:	2b0f      	cmp	r3, #15
 8009bac:	d901      	bls.n	8009bb2 <tcp_output+0x1de>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e000      	b.n	8009bb4 <tcp_output+0x1e0>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d106      	bne.n	8009bc6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	8b5b      	ldrh	r3, [r3, #26]
 8009bbc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 80e3 	beq.w	8009d8c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	7d1b      	ldrb	r3, [r3, #20]
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d00d      	beq.n	8009bea <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	899b      	ldrh	r3, [r3, #12]
 8009bd4:	b29c      	uxth	r4, r3
 8009bd6:	2010      	movs	r0, #16
 8009bd8:	f7f9 ffd2 	bl	8003b80 <lwip_htons>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	461a      	mov	r2, r3
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	4322      	orrs	r2, r4
 8009be6:	b292      	uxth	r2, r2
 8009be8:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bf0:	f000 f908 	bl	8009e04 <tcp_output_segment>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d009      	beq.n	8009c14 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	8b5b      	ldrh	r3, [r3, #26]
 8009c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	835a      	strh	r2, [r3, #26]
      return err;
 8009c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c12:	e0d2      	b.n	8009dba <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7d1b      	ldrb	r3, [r3, #20]
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d006      	beq.n	8009c32 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	8b5b      	ldrh	r3, [r3, #26]
 8009c28:	f023 0303 	bic.w	r3, r3, #3
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7f9 ffb6 	bl	8003baa <lwip_htonl>
 8009c3e:	4604      	mov	r4, r0
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	891b      	ldrh	r3, [r3, #8]
 8009c44:	461d      	mov	r5, r3
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	899b      	ldrh	r3, [r3, #12]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7f9 ff96 	bl	8003b80 <lwip_htons>
 8009c54:	4603      	mov	r3, r0
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 0303 	and.w	r3, r3, #3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00d      	beq.n	8009c7c <tcp_output+0x2a8>
 8009c60:	2301      	movs	r3, #1
 8009c62:	e00c      	b.n	8009c7e <tcp_output+0x2aa>
 8009c64:	08011f40 	.word	0x08011f40
 8009c68:	08012484 	.word	0x08012484
 8009c6c:	08011f94 	.word	0x08011f94
 8009c70:	0801249c 	.word	0x0801249c
 8009c74:	2000653c 	.word	0x2000653c
 8009c78:	080124c4 	.word	0x080124c4
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	442b      	add	r3, r5
 8009c80:	4423      	add	r3, r4
 8009c82:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	da02      	bge.n	8009c96 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	891b      	ldrh	r3, [r3, #8]
 8009c9a:	461c      	mov	r4, r3
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	899b      	ldrh	r3, [r3, #12]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7f9 ff6b 	bl	8003b80 <lwip_htons>
 8009caa:	4603      	mov	r3, r0
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	f003 0303 	and.w	r3, r3, #3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <tcp_output+0x2e6>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e000      	b.n	8009cbc <tcp_output+0x2e8>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	4423      	add	r3, r4
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d049      	beq.n	8009d56 <tcp_output+0x382>
      seg->next = NULL;
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d105      	bne.n	8009cdc <tcp_output+0x308>
        pcb->unacked = seg;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	623b      	str	r3, [r7, #32]
 8009cda:	e03f      	b.n	8009d5c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7f9 ff61 	bl	8003baa <lwip_htonl>
 8009ce8:	4604      	mov	r4, r0
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7f9 ff5a 	bl	8003baa <lwip_htonl>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	1ae3      	subs	r3, r4, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	da24      	bge.n	8009d48 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3370      	adds	r3, #112	; 0x70
 8009d02:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009d04:	e002      	b.n	8009d0c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d011      	beq.n	8009d38 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7f9 ff44 	bl	8003baa <lwip_htonl>
 8009d22:	4604      	mov	r4, r0
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7f9 ff3d 	bl	8003baa <lwip_htonl>
 8009d30:	4603      	mov	r3, r0
 8009d32:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	dbe6      	blt.n	8009d06 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	e009      	b.n	8009d5c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	623b      	str	r3, [r7, #32]
 8009d54:	e002      	b.n	8009d5c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d58:	f7fc fc42 	bl	80065e0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d012      	beq.n	8009d8e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7f9 ff1b 	bl	8003baa <lwip_htonl>
 8009d74:	4602      	mov	r2, r0
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7e:	8912      	ldrh	r2, [r2, #8]
 8009d80:	4413      	add	r3, r2
  while (seg != NULL &&
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	f4bf aeda 	bcs.w	8009b3e <tcp_output+0x16a>
 8009d8a:	e000      	b.n	8009d8e <tcp_output+0x3ba>
      break;
 8009d8c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d108      	bne.n	8009da8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009d9e:	e004      	b.n	8009daa <tcp_output+0x3d6>
    goto output_done;
 8009da0:	bf00      	nop
 8009da2:	e002      	b.n	8009daa <tcp_output+0x3d6>
    goto output_done;
 8009da4:	bf00      	nop
 8009da6:	e000      	b.n	8009daa <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009da8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	8b5b      	ldrh	r3, [r3, #26]
 8009dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3728      	adds	r7, #40	; 0x28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8009dc2:	bf00      	nop

08009dc4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d106      	bne.n	8009de0 <tcp_output_segment_busy+0x1c>
 8009dd2:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <tcp_output_segment_busy+0x34>)
 8009dd4:	f240 529a 	movw	r2, #1434	; 0x59a
 8009dd8:	4908      	ldr	r1, [pc, #32]	; (8009dfc <tcp_output_segment_busy+0x38>)
 8009dda:	4809      	ldr	r0, [pc, #36]	; (8009e00 <tcp_output_segment_busy+0x3c>)
 8009ddc:	f005 fe2a 	bl	800fa34 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	7b9b      	ldrb	r3, [r3, #14]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d001      	beq.n	8009dee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	08011f40 	.word	0x08011f40
 8009dfc:	080124dc 	.word	0x080124dc
 8009e00:	08011f94 	.word	0x08011f94

08009e04 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009e04:	b5b0      	push	{r4, r5, r7, lr}
 8009e06:	b08c      	sub	sp, #48	; 0x30
 8009e08:	af04      	add	r7, sp, #16
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d106      	bne.n	8009e24 <tcp_output_segment+0x20>
 8009e16:	4b64      	ldr	r3, [pc, #400]	; (8009fa8 <tcp_output_segment+0x1a4>)
 8009e18:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009e1c:	4963      	ldr	r1, [pc, #396]	; (8009fac <tcp_output_segment+0x1a8>)
 8009e1e:	4864      	ldr	r0, [pc, #400]	; (8009fb0 <tcp_output_segment+0x1ac>)
 8009e20:	f005 fe08 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d106      	bne.n	8009e38 <tcp_output_segment+0x34>
 8009e2a:	4b5f      	ldr	r3, [pc, #380]	; (8009fa8 <tcp_output_segment+0x1a4>)
 8009e2c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009e30:	4960      	ldr	r1, [pc, #384]	; (8009fb4 <tcp_output_segment+0x1b0>)
 8009e32:	485f      	ldr	r0, [pc, #380]	; (8009fb0 <tcp_output_segment+0x1ac>)
 8009e34:	f005 fdfe 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <tcp_output_segment+0x48>
 8009e3e:	4b5a      	ldr	r3, [pc, #360]	; (8009fa8 <tcp_output_segment+0x1a4>)
 8009e40:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009e44:	495c      	ldr	r1, [pc, #368]	; (8009fb8 <tcp_output_segment+0x1b4>)
 8009e46:	485a      	ldr	r0, [pc, #360]	; (8009fb0 <tcp_output_segment+0x1ac>)
 8009e48:	f005 fdf4 	bl	800fa34 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7ff ffb9 	bl	8009dc4 <tcp_output_segment_busy>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e0a0      	b.n	8009f9e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	68dc      	ldr	r4, [r3, #12]
 8009e64:	4610      	mov	r0, r2
 8009e66:	f7f9 fea0 	bl	8003baa <lwip_htonl>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68dc      	ldr	r4, [r3, #12]
 8009e76:	4610      	mov	r0, r2
 8009e78:	f7f9 fe82 	bl	8003b80 <lwip_htons>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009e88:	441a      	add	r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	3314      	adds	r3, #20
 8009e94:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	7a9b      	ldrb	r3, [r3, #10]
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d015      	beq.n	8009ece <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	6879      	ldr	r1, [r7, #4]
 8009eaa:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8009eae:	f7fc fe8d 	bl	8006bcc <tcp_eff_send_mss_netif>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009eb6:	8b7b      	ldrh	r3, [r7, #26]
 8009eb8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7f9 fe74 	bl	8003baa <lwip_htonl>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	da02      	bge.n	8009ede <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2200      	movs	r2, #0
 8009edc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10c      	bne.n	8009f00 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009ee6:	4b35      	ldr	r3, [pc, #212]	; (8009fbc <tcp_output_segment+0x1b8>)
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7f9 fe58 	bl	8003baa <lwip_htonl>
 8009efa:	4602      	mov	r2, r0
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	461a      	mov	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	8959      	ldrh	r1, [r3, #10]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	8b3a      	ldrh	r2, [r7, #24]
 8009f1c:	1a8a      	subs	r2, r1, r2
 8009f1e:	b292      	uxth	r2, r2
 8009f20:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	8919      	ldrh	r1, [r3, #8]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	8b3a      	ldrh	r2, [r7, #24]
 8009f2e:	1a8a      	subs	r2, r1, r2
 8009f30:	b292      	uxth	r2, r2
 8009f32:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	68d2      	ldr	r2, [r2, #12]
 8009f3c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	741a      	strb	r2, [r3, #16]
 8009f46:	2200      	movs	r2, #0
 8009f48:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	f103 0214 	add.w	r2, r3, #20
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	7a9b      	ldrb	r3, [r3, #10]
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	4413      	add	r3, r2
 8009f5e:	69fa      	ldr	r2, [r7, #28]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d006      	beq.n	8009f72 <tcp_output_segment+0x16e>
 8009f64:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <tcp_output_segment+0x1a4>)
 8009f66:	f240 621c 	movw	r2, #1564	; 0x61c
 8009f6a:	4915      	ldr	r1, [pc, #84]	; (8009fc0 <tcp_output_segment+0x1bc>)
 8009f6c:	4810      	ldr	r0, [pc, #64]	; (8009fb0 <tcp_output_segment+0x1ac>)
 8009f6e:	f005 fd61 	bl	800fa34 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6858      	ldr	r0, [r3, #4]
 8009f76:	68b9      	ldr	r1, [r7, #8]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	1d1c      	adds	r4, r3, #4
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	7add      	ldrb	r5, [r3, #11]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	7a9b      	ldrb	r3, [r3, #10]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	9202      	str	r2, [sp, #8]
 8009f88:	2206      	movs	r2, #6
 8009f8a:	9201      	str	r2, [sp, #4]
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	462b      	mov	r3, r5
 8009f90:	4622      	mov	r2, r4
 8009f92:	f004 fbb3 	bl	800e6fc <ip4_output_if>
 8009f96:	4603      	mov	r3, r0
 8009f98:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3720      	adds	r7, #32
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	08011f40 	.word	0x08011f40
 8009fac:	08012504 	.word	0x08012504
 8009fb0:	08011f94 	.word	0x08011f94
 8009fb4:	08012524 	.word	0x08012524
 8009fb8:	08012544 	.word	0x08012544
 8009fbc:	2000652c 	.word	0x2000652c
 8009fc0:	08012568 	.word	0x08012568

08009fc4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009fc4:	b5b0      	push	{r4, r5, r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <tcp_rexmit_rto_prepare+0x1c>
 8009fd2:	4b31      	ldr	r3, [pc, #196]	; (800a098 <tcp_rexmit_rto_prepare+0xd4>)
 8009fd4:	f240 6263 	movw	r2, #1635	; 0x663
 8009fd8:	4930      	ldr	r1, [pc, #192]	; (800a09c <tcp_rexmit_rto_prepare+0xd8>)
 8009fda:	4831      	ldr	r0, [pc, #196]	; (800a0a0 <tcp_rexmit_rto_prepare+0xdc>)
 8009fdc:	f005 fd2a 	bl	800fa34 <iprintf>

  if (pcb->unacked == NULL) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009fe8:	f06f 0305 	mvn.w	r3, #5
 8009fec:	e050      	b.n	800a090 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e00b      	b.n	800a00e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff fee4 	bl	8009dc4 <tcp_output_segment_busy>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d002      	beq.n	800a008 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a002:	f06f 0305 	mvn.w	r3, #5
 800a006:	e043      	b.n	800a090 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1ef      	bne.n	8009ff6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7ff fed4 	bl	8009dc4 <tcp_output_segment_busy>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a022:	f06f 0305 	mvn.w	r3, #5
 800a026:	e033      	b.n	800a090 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	8b5b      	ldrh	r3, [r3, #26]
 800a042:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a046:	b29a      	uxth	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	4618      	mov	r0, r3
 800a054:	f7f9 fda9 	bl	8003baa <lwip_htonl>
 800a058:	4604      	mov	r4, r0
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	891b      	ldrh	r3, [r3, #8]
 800a05e:	461d      	mov	r5, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	899b      	ldrh	r3, [r3, #12]
 800a066:	b29b      	uxth	r3, r3
 800a068:	4618      	mov	r0, r3
 800a06a:	f7f9 fd89 	bl	8003b80 <lwip_htons>
 800a06e:	4603      	mov	r3, r0
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f003 0303 	and.w	r3, r3, #3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <tcp_rexmit_rto_prepare+0xba>
 800a07a:	2301      	movs	r3, #1
 800a07c:	e000      	b.n	800a080 <tcp_rexmit_rto_prepare+0xbc>
 800a07e:	2300      	movs	r3, #0
 800a080:	442b      	add	r3, r5
 800a082:	18e2      	adds	r2, r4, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bdb0      	pop	{r4, r5, r7, pc}
 800a098:	08011f40 	.word	0x08011f40
 800a09c:	0801257c 	.word	0x0801257c
 800a0a0:	08011f94 	.word	0x08011f94

0800a0a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <tcp_rexmit_rto_commit+0x1c>
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <tcp_rexmit_rto_commit+0x44>)
 800a0b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a0b8:	490c      	ldr	r1, [pc, #48]	; (800a0ec <tcp_rexmit_rto_commit+0x48>)
 800a0ba:	480d      	ldr	r0, [pc, #52]	; (800a0f0 <tcp_rexmit_rto_commit+0x4c>)
 800a0bc:	f005 fcba 	bl	800fa34 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0c6:	2bff      	cmp	r3, #255	; 0xff
 800a0c8:	d007      	beq.n	800a0da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff fc7a 	bl	80099d4 <tcp_output>
}
 800a0e0:	bf00      	nop
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	08011f40 	.word	0x08011f40
 800a0ec:	080125a0 	.word	0x080125a0
 800a0f0:	08011f94 	.word	0x08011f94

0800a0f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d106      	bne.n	800a110 <tcp_rexmit_rto+0x1c>
 800a102:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <tcp_rexmit_rto+0x38>)
 800a104:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a108:	4909      	ldr	r1, [pc, #36]	; (800a130 <tcp_rexmit_rto+0x3c>)
 800a10a:	480a      	ldr	r0, [pc, #40]	; (800a134 <tcp_rexmit_rto+0x40>)
 800a10c:	f005 fc92 	bl	800fa34 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff ff57 	bl	8009fc4 <tcp_rexmit_rto_prepare>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d102      	bne.n	800a122 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff ffc1 	bl	800a0a4 <tcp_rexmit_rto_commit>
  }
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	08011f40 	.word	0x08011f40
 800a130:	080125c4 	.word	0x080125c4
 800a134:	08011f94 	.word	0x08011f94

0800a138 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a138:	b590      	push	{r4, r7, lr}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d106      	bne.n	800a154 <tcp_rexmit+0x1c>
 800a146:	4b2f      	ldr	r3, [pc, #188]	; (800a204 <tcp_rexmit+0xcc>)
 800a148:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a14c:	492e      	ldr	r1, [pc, #184]	; (800a208 <tcp_rexmit+0xd0>)
 800a14e:	482f      	ldr	r0, [pc, #188]	; (800a20c <tcp_rexmit+0xd4>)
 800a150:	f005 fc70 	bl	800fa34 <iprintf>

  if (pcb->unacked == NULL) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a15c:	f06f 0305 	mvn.w	r3, #5
 800a160:	e04c      	b.n	800a1fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a166:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a168:	68b8      	ldr	r0, [r7, #8]
 800a16a:	f7ff fe2b 	bl	8009dc4 <tcp_output_segment_busy>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a174:	f06f 0305 	mvn.w	r3, #5
 800a178:	e040      	b.n	800a1fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	336c      	adds	r3, #108	; 0x6c
 800a186:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a188:	e002      	b.n	800a190 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d011      	beq.n	800a1bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7f9 fd02 	bl	8003baa <lwip_htonl>
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f9 fcfb 	bl	8003baa <lwip_htonl>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	dbe6      	blt.n	800a18a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d103      	bne.n	800a1da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1e0:	2bff      	cmp	r3, #255	; 0xff
 800a1e2:	d007      	beq.n	800a1f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	bd90      	pop	{r4, r7, pc}
 800a204:	08011f40 	.word	0x08011f40
 800a208:	080125e0 	.word	0x080125e0
 800a20c:	08011f94 	.word	0x08011f94

0800a210 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d106      	bne.n	800a22c <tcp_rexmit_fast+0x1c>
 800a21e:	4b2e      	ldr	r3, [pc, #184]	; (800a2d8 <tcp_rexmit_fast+0xc8>)
 800a220:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a224:	492d      	ldr	r1, [pc, #180]	; (800a2dc <tcp_rexmit_fast+0xcc>)
 800a226:	482e      	ldr	r0, [pc, #184]	; (800a2e0 <tcp_rexmit_fast+0xd0>)
 800a228:	f005 fc04 	bl	800fa34 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a230:	2b00      	cmp	r3, #0
 800a232:	d04d      	beq.n	800a2d0 <tcp_rexmit_fast+0xc0>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	8b5b      	ldrh	r3, [r3, #26]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d147      	bne.n	800a2d0 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7ff ff79 	bl	800a138 <tcp_rexmit>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d141      	bne.n	800a2d0 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a258:	429a      	cmp	r2, r3
 800a25a:	d207      	bcs.n	800a26c <tcp_rexmit_fast+0x5c>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a262:	0fda      	lsrs	r2, r3, #31
 800a264:	4413      	add	r3, r2
 800a266:	105b      	asrs	r3, r3, #1
 800a268:	b29b      	uxth	r3, r3
 800a26a:	e006      	b.n	800a27a <tcp_rexmit_fast+0x6a>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a272:	0fda      	lsrs	r2, r3, #31
 800a274:	4413      	add	r3, r2
 800a276:	105b      	asrs	r3, r3, #1
 800a278:	b29b      	uxth	r3, r3
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a286:	461a      	mov	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a28c:	005b      	lsls	r3, r3, #1
 800a28e:	429a      	cmp	r2, r3
 800a290:	d206      	bcs.n	800a2a0 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	b29a      	uxth	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	0049      	lsls	r1, r1, #1
 800a2ae:	440b      	add	r3, r1
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	4413      	add	r3, r2
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	8b5b      	ldrh	r3, [r3, #26]
 800a2c0:	f043 0304 	orr.w	r3, r3, #4
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	08011f40 	.word	0x08011f40
 800a2dc:	080125f8 	.word	0x080125f8
 800a2e0:	08011f94 	.word	0x08011f94

0800a2e4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	607b      	str	r3, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	817b      	strh	r3, [r7, #10]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a2f6:	897a      	ldrh	r2, [r7, #10]
 800a2f8:	893b      	ldrh	r3, [r7, #8]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	3314      	adds	r3, #20
 800a300:	b29b      	uxth	r3, r3
 800a302:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a306:	4619      	mov	r1, r3
 800a308:	2022      	movs	r0, #34	; 0x22
 800a30a:	f7fa fc11 	bl	8004b30 <pbuf_alloc>
 800a30e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d04e      	beq.n	800a3b4 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	895b      	ldrh	r3, [r3, #10]
 800a31a:	461a      	mov	r2, r3
 800a31c:	897b      	ldrh	r3, [r7, #10]
 800a31e:	3314      	adds	r3, #20
 800a320:	429a      	cmp	r2, r3
 800a322:	da06      	bge.n	800a332 <tcp_output_alloc_header_common+0x4e>
 800a324:	4b26      	ldr	r3, [pc, #152]	; (800a3c0 <tcp_output_alloc_header_common+0xdc>)
 800a326:	f240 7224 	movw	r2, #1828	; 0x724
 800a32a:	4926      	ldr	r1, [pc, #152]	; (800a3c4 <tcp_output_alloc_header_common+0xe0>)
 800a32c:	4826      	ldr	r0, [pc, #152]	; (800a3c8 <tcp_output_alloc_header_common+0xe4>)
 800a32e:	f005 fb81 	bl	800fa34 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a338:	8c3b      	ldrh	r3, [r7, #32]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f9 fc20 	bl	8003b80 <lwip_htons>
 800a340:	4603      	mov	r3, r0
 800a342:	461a      	mov	r2, r3
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a348:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7f9 fc18 	bl	8003b80 <lwip_htons>
 800a350:	4603      	mov	r3, r0
 800a352:	461a      	mov	r2, r3
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7f9 fc23 	bl	8003baa <lwip_htonl>
 800a364:	4602      	mov	r2, r0
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a36a:	897b      	ldrh	r3, [r7, #10]
 800a36c:	089b      	lsrs	r3, r3, #2
 800a36e:	b29b      	uxth	r3, r3
 800a370:	3305      	adds	r3, #5
 800a372:	b29b      	uxth	r3, r3
 800a374:	031b      	lsls	r3, r3, #12
 800a376:	b29a      	uxth	r2, r3
 800a378:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	4313      	orrs	r3, r2
 800a380:	b29b      	uxth	r3, r3
 800a382:	4618      	mov	r0, r3
 800a384:	f7f9 fbfc 	bl	8003b80 <lwip_htons>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a390:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a392:	4618      	mov	r0, r3
 800a394:	f7f9 fbf4 	bl	8003b80 <lwip_htons>
 800a398:	4603      	mov	r3, r0
 800a39a:	461a      	mov	r2, r3
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	741a      	strb	r2, [r3, #16]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	749a      	strb	r2, [r3, #18]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a3b4:	697b      	ldr	r3, [r7, #20]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	08011f40 	.word	0x08011f40
 800a3c4:	08012618 	.word	0x08012618
 800a3c8:	08011f94 	.word	0x08011f94

0800a3cc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a3cc:	b5b0      	push	{r4, r5, r7, lr}
 800a3ce:	b08a      	sub	sp, #40	; 0x28
 800a3d0:	af04      	add	r7, sp, #16
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	607b      	str	r3, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	817b      	strh	r3, [r7, #10]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d106      	bne.n	800a3f2 <tcp_output_alloc_header+0x26>
 800a3e4:	4b15      	ldr	r3, [pc, #84]	; (800a43c <tcp_output_alloc_header+0x70>)
 800a3e6:	f240 7242 	movw	r2, #1858	; 0x742
 800a3ea:	4915      	ldr	r1, [pc, #84]	; (800a440 <tcp_output_alloc_header+0x74>)
 800a3ec:	4815      	ldr	r0, [pc, #84]	; (800a444 <tcp_output_alloc_header+0x78>)
 800a3ee:	f005 fb21 	bl	800fa34 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	8adb      	ldrh	r3, [r3, #22]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	8b12      	ldrh	r2, [r2, #24]
 800a3fe:	68f9      	ldr	r1, [r7, #12]
 800a400:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a402:	893d      	ldrh	r5, [r7, #8]
 800a404:	897c      	ldrh	r4, [r7, #10]
 800a406:	9103      	str	r1, [sp, #12]
 800a408:	2110      	movs	r1, #16
 800a40a:	9102      	str	r1, [sp, #8]
 800a40c:	9201      	str	r2, [sp, #4]
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	462a      	mov	r2, r5
 800a414:	4621      	mov	r1, r4
 800a416:	f7ff ff65 	bl	800a2e4 <tcp_output_alloc_header_common>
 800a41a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d006      	beq.n	800a430 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a42a:	441a      	add	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a430:	697b      	ldr	r3, [r7, #20]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bdb0      	pop	{r4, r5, r7, pc}
 800a43a:	bf00      	nop
 800a43c:	08011f40 	.word	0x08011f40
 800a440:	08012648 	.word	0x08012648
 800a444:	08011f94 	.word	0x08011f94

0800a448 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4611      	mov	r1, r2
 800a454:	461a      	mov	r2, r3
 800a456:	460b      	mov	r3, r1
 800a458:	71fb      	strb	r3, [r7, #7]
 800a45a:	4613      	mov	r3, r2
 800a45c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <tcp_output_fill_options+0x2e>
 800a468:	4b13      	ldr	r3, [pc, #76]	; (800a4b8 <tcp_output_fill_options+0x70>)
 800a46a:	f240 7256 	movw	r2, #1878	; 0x756
 800a46e:	4913      	ldr	r1, [pc, #76]	; (800a4bc <tcp_output_fill_options+0x74>)
 800a470:	4813      	ldr	r0, [pc, #76]	; (800a4c0 <tcp_output_fill_options+0x78>)
 800a472:	f005 fadf 	bl	800fa34 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	3314      	adds	r3, #20
 800a480:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	f103 0214 	add.w	r2, r3, #20
 800a488:	8bfb      	ldrh	r3, [r7, #30]
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4619      	mov	r1, r3
 800a48e:	79fb      	ldrb	r3, [r7, #7]
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	f003 0304 	and.w	r3, r3, #4
 800a496:	440b      	add	r3, r1
 800a498:	4413      	add	r3, r2
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d006      	beq.n	800a4ae <tcp_output_fill_options+0x66>
 800a4a0:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <tcp_output_fill_options+0x70>)
 800a4a2:	f240 7275 	movw	r2, #1909	; 0x775
 800a4a6:	4907      	ldr	r1, [pc, #28]	; (800a4c4 <tcp_output_fill_options+0x7c>)
 800a4a8:	4805      	ldr	r0, [pc, #20]	; (800a4c0 <tcp_output_fill_options+0x78>)
 800a4aa:	f005 fac3 	bl	800fa34 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a4ae:	bf00      	nop
 800a4b0:	3720      	adds	r7, #32
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	08011f40 	.word	0x08011f40
 800a4bc:	08012670 	.word	0x08012670
 800a4c0:	08011f94 	.word	0x08011f94
 800a4c4:	08012568 	.word	0x08012568

0800a4c8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08a      	sub	sp, #40	; 0x28
 800a4cc:	af04      	add	r7, sp, #16
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d106      	bne.n	800a4ea <tcp_output_control_segment+0x22>
 800a4dc:	4b1c      	ldr	r3, [pc, #112]	; (800a550 <tcp_output_control_segment+0x88>)
 800a4de:	f240 7287 	movw	r2, #1927	; 0x787
 800a4e2:	491c      	ldr	r1, [pc, #112]	; (800a554 <tcp_output_control_segment+0x8c>)
 800a4e4:	481c      	ldr	r0, [pc, #112]	; (800a558 <tcp_output_control_segment+0x90>)
 800a4e6:	f005 faa5 	bl	800fa34 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	6879      	ldr	r1, [r7, #4]
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f7fe ff30 	bl	8009354 <tcp_route>
 800a4f4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d102      	bne.n	800a502 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a4fc:	23fc      	movs	r3, #252	; 0xfc
 800a4fe:	75fb      	strb	r3, [r7, #23]
 800a500:	e01c      	b.n	800a53c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d006      	beq.n	800a516 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	7adb      	ldrb	r3, [r3, #11]
 800a50c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	7a9b      	ldrb	r3, [r3, #10]
 800a512:	757b      	strb	r3, [r7, #21]
 800a514:	e003      	b.n	800a51e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a516:	23ff      	movs	r3, #255	; 0xff
 800a518:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a51e:	7dba      	ldrb	r2, [r7, #22]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	9302      	str	r3, [sp, #8]
 800a524:	2306      	movs	r3, #6
 800a526:	9301      	str	r3, [sp, #4]
 800a528:	7d7b      	ldrb	r3, [r7, #21]
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	4613      	mov	r3, r2
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	68b8      	ldr	r0, [r7, #8]
 800a534:	f004 f8e2 	bl	800e6fc <ip4_output_if>
 800a538:	4603      	mov	r3, r0
 800a53a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a53c:	68b8      	ldr	r0, [r7, #8]
 800a53e:	f7fa fdd7 	bl	80050f0 <pbuf_free>
  return err;
 800a542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	08011f40 	.word	0x08011f40
 800a554:	08012698 	.word	0x08012698
 800a558:	08011f94 	.word	0x08011f94

0800a55c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a55c:	b590      	push	{r4, r7, lr}
 800a55e:	b08b      	sub	sp, #44	; 0x2c
 800a560:	af04      	add	r7, sp, #16
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d106      	bne.n	800a57e <tcp_rst+0x22>
 800a570:	4b1e      	ldr	r3, [pc, #120]	; (800a5ec <tcp_rst+0x90>)
 800a572:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a576:	491e      	ldr	r1, [pc, #120]	; (800a5f0 <tcp_rst+0x94>)
 800a578:	481e      	ldr	r0, [pc, #120]	; (800a5f4 <tcp_rst+0x98>)
 800a57a:	f005 fa5b 	bl	800fa34 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	2b00      	cmp	r3, #0
 800a582:	d106      	bne.n	800a592 <tcp_rst+0x36>
 800a584:	4b19      	ldr	r3, [pc, #100]	; (800a5ec <tcp_rst+0x90>)
 800a586:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a58a:	491b      	ldr	r1, [pc, #108]	; (800a5f8 <tcp_rst+0x9c>)
 800a58c:	4819      	ldr	r0, [pc, #100]	; (800a5f4 <tcp_rst+0x98>)
 800a58e:	f005 fa51 	bl	800fa34 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a596:	2308      	movs	r3, #8
 800a598:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	b29c      	uxth	r4, r3
 800a59e:	68b8      	ldr	r0, [r7, #8]
 800a5a0:	f7f9 fb03 	bl	8003baa <lwip_htonl>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	8abb      	ldrh	r3, [r7, #20]
 800a5a8:	9303      	str	r3, [sp, #12]
 800a5aa:	2314      	movs	r3, #20
 800a5ac:	9302      	str	r3, [sp, #8]
 800a5ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff fe91 	bl	800a2e4 <tcp_output_alloc_header_common>
 800a5c2:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00c      	beq.n	800a5e4 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	6939      	ldr	r1, [r7, #16]
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f7ff ff39 	bl	800a448 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	6939      	ldr	r1, [r7, #16]
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f7ff ff73 	bl	800a4c8 <tcp_output_control_segment>
 800a5e2:	e000      	b.n	800a5e6 <tcp_rst+0x8a>
    return;
 800a5e4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a5e6:	371c      	adds	r7, #28
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd90      	pop	{r4, r7, pc}
 800a5ec:	08011f40 	.word	0x08011f40
 800a5f0:	080126c4 	.word	0x080126c4
 800a5f4:	08011f94 	.word	0x08011f94
 800a5f8:	080126e0 	.word	0x080126e0

0800a5fc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a5fc:	b590      	push	{r4, r7, lr}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <tcp_send_empty_ack+0x24>
 800a612:	4b28      	ldr	r3, [pc, #160]	; (800a6b4 <tcp_send_empty_ack+0xb8>)
 800a614:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a618:	4927      	ldr	r1, [pc, #156]	; (800a6b8 <tcp_send_empty_ack+0xbc>)
 800a61a:	4828      	ldr	r0, [pc, #160]	; (800a6bc <tcp_send_empty_ack+0xc0>)
 800a61c:	f005 fa0a 	bl	800fa34 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a620:	7dfb      	ldrb	r3, [r7, #23]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	b2db      	uxtb	r3, r3
 800a626:	f003 0304 	and.w	r3, r3, #4
 800a62a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a62c:	7d7b      	ldrb	r3, [r7, #21]
 800a62e:	b29c      	uxth	r4, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a634:	4618      	mov	r0, r3
 800a636:	f7f9 fab8 	bl	8003baa <lwip_htonl>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2200      	movs	r2, #0
 800a63e:	4621      	mov	r1, r4
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff fec3 	bl	800a3cc <tcp_output_alloc_header>
 800a646:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d109      	bne.n	800a662 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	8b5b      	ldrh	r3, [r3, #26]
 800a652:	f043 0303 	orr.w	r3, r3, #3
 800a656:	b29a      	uxth	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a65c:	f06f 0301 	mvn.w	r3, #1
 800a660:	e023      	b.n	800a6aa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a662:	7dbb      	ldrb	r3, [r7, #22]
 800a664:	7dfa      	ldrb	r2, [r7, #23]
 800a666:	6939      	ldr	r1, [r7, #16]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f7ff feed 	bl	800a448 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3304      	adds	r3, #4
 800a674:	6939      	ldr	r1, [r7, #16]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7ff ff26 	bl	800a4c8 <tcp_output_control_segment>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d007      	beq.n	800a698 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	8b5b      	ldrh	r3, [r3, #26]
 800a68c:	f043 0303 	orr.w	r3, r3, #3
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	835a      	strh	r2, [r3, #26]
 800a696:	e006      	b.n	800a6a6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	8b5b      	ldrh	r3, [r3, #26]
 800a69c:	f023 0303 	bic.w	r3, r3, #3
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	371c      	adds	r7, #28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd90      	pop	{r4, r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	08011f40 	.word	0x08011f40
 800a6b8:	080126fc 	.word	0x080126fc
 800a6bc:	08011f94 	.word	0x08011f94

0800a6c0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d106      	bne.n	800a6e0 <tcp_keepalive+0x20>
 800a6d2:	4b18      	ldr	r3, [pc, #96]	; (800a734 <tcp_keepalive+0x74>)
 800a6d4:	f640 0224 	movw	r2, #2084	; 0x824
 800a6d8:	4917      	ldr	r1, [pc, #92]	; (800a738 <tcp_keepalive+0x78>)
 800a6da:	4818      	ldr	r0, [pc, #96]	; (800a73c <tcp_keepalive+0x7c>)
 800a6dc:	f005 f9aa 	bl	800fa34 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
 800a6e2:	b29c      	uxth	r4, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7f9 fa5d 	bl	8003baa <lwip_htonl>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fe68 	bl	800a3cc <tcp_output_alloc_header>
 800a6fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a704:	f04f 33ff 	mov.w	r3, #4294967295
 800a708:	e010      	b.n	800a72c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
 800a70c:	2200      	movs	r2, #0
 800a70e:	6939      	ldr	r1, [r7, #16]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff fe99 	bl	800a448 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3304      	adds	r3, #4
 800a71c:	6939      	ldr	r1, [r7, #16]
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff fed2 	bl	800a4c8 <tcp_output_control_segment>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	371c      	adds	r7, #28
 800a730:	46bd      	mov	sp, r7
 800a732:	bd90      	pop	{r4, r7, pc}
 800a734:	08011f40 	.word	0x08011f40
 800a738:	0801271c 	.word	0x0801271c
 800a73c:	08011f94 	.word	0x08011f94

0800a740 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a740:	b590      	push	{r4, r7, lr}
 800a742:	b08b      	sub	sp, #44	; 0x2c
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a748:	2300      	movs	r3, #0
 800a74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d106      	bne.n	800a762 <tcp_zero_window_probe+0x22>
 800a754:	4b4c      	ldr	r3, [pc, #304]	; (800a888 <tcp_zero_window_probe+0x148>)
 800a756:	f640 024f 	movw	r2, #2127	; 0x84f
 800a75a:	494c      	ldr	r1, [pc, #304]	; (800a88c <tcp_zero_window_probe+0x14c>)
 800a75c:	484c      	ldr	r0, [pc, #304]	; (800a890 <tcp_zero_window_probe+0x150>)
 800a75e:	f005 f969 	bl	800fa34 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a766:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	e086      	b.n	800a880 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a778:	2bff      	cmp	r3, #255	; 0xff
 800a77a:	d007      	beq.n	800a78c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a782:	3301      	adds	r3, #1
 800a784:	b2da      	uxtb	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	899b      	ldrh	r3, [r3, #12]
 800a792:	b29b      	uxth	r3, r3
 800a794:	4618      	mov	r0, r3
 800a796:	f7f9 f9f3 	bl	8003b80 <lwip_htons>
 800a79a:	4603      	mov	r3, r0
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d005      	beq.n	800a7b2 <tcp_zero_window_probe+0x72>
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
 800a7a8:	891b      	ldrh	r3, [r3, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <tcp_zero_window_probe+0x72>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e000      	b.n	800a7b4 <tcp_zero_window_probe+0x74>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a7b6:	7ffb      	ldrb	r3, [r7, #31]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bf0c      	ite	eq
 800a7bc:	2301      	moveq	r3, #1
 800a7be:	2300      	movne	r3, #0
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7c8:	b299      	uxth	r1, r3
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	8bba      	ldrh	r2, [r7, #28]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff fdfa 	bl	800a3cc <tcp_output_alloc_header>
 800a7d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d102      	bne.n	800a7e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e4:	e04c      	b.n	800a880 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a7ec:	7ffb      	ldrb	r3, [r7, #31]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d011      	beq.n	800a816 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	899b      	ldrh	r3, [r3, #12]
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	b21b      	sxth	r3, r3
 800a7fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7fe:	b21c      	sxth	r4, r3
 800a800:	2011      	movs	r0, #17
 800a802:	f7f9 f9bd 	bl	8003b80 <lwip_htons>
 800a806:	4603      	mov	r3, r0
 800a808:	b21b      	sxth	r3, r3
 800a80a:	4323      	orrs	r3, r4
 800a80c:	b21b      	sxth	r3, r3
 800a80e:	b29a      	uxth	r2, r3
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	819a      	strh	r2, [r3, #12]
 800a814:	e010      	b.n	800a838 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	3314      	adds	r3, #20
 800a81c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	6858      	ldr	r0, [r3, #4]
 800a822:	6a3b      	ldr	r3, [r7, #32]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	891a      	ldrh	r2, [r3, #8]
 800a828:	6a3b      	ldr	r3, [r7, #32]
 800a82a:	891b      	ldrh	r3, [r3, #8]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	b29b      	uxth	r3, r3
 800a830:	2201      	movs	r2, #1
 800a832:	6939      	ldr	r1, [r7, #16]
 800a834:	f7fa fe56 	bl	80054e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a838:	6a3b      	ldr	r3, [r7, #32]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	4618      	mov	r0, r3
 800a840:	f7f9 f9b3 	bl	8003baa <lwip_htonl>
 800a844:	4603      	mov	r3, r0
 800a846:	3301      	adds	r3, #1
 800a848:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	da02      	bge.n	800a85c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a85c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a860:	2200      	movs	r2, #0
 800a862:	69b9      	ldr	r1, [r7, #24]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff fdef 	bl	800a448 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	3304      	adds	r3, #4
 800a870:	69b9      	ldr	r1, [r7, #24]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff fe28 	bl	800a4c8 <tcp_output_control_segment>
 800a878:	4603      	mov	r3, r0
 800a87a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a87c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a880:	4618      	mov	r0, r3
 800a882:	372c      	adds	r7, #44	; 0x2c
 800a884:	46bd      	mov	sp, r7
 800a886:	bd90      	pop	{r4, r7, pc}
 800a888:	08011f40 	.word	0x08011f40
 800a88c:	08012738 	.word	0x08012738
 800a890:	08011f94 	.word	0x08011f94

0800a894 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a89c:	f7fa ff10 	bl	80056c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a8a0:	4b0a      	ldr	r3, [pc, #40]	; (800a8cc <tcpip_tcp_timer+0x38>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d103      	bne.n	800a8b0 <tcpip_tcp_timer+0x1c>
 800a8a8:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <tcpip_tcp_timer+0x3c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4908      	ldr	r1, [pc, #32]	; (800a8d4 <tcpip_tcp_timer+0x40>)
 800a8b4:	20fa      	movs	r0, #250	; 0xfa
 800a8b6:	f000 f8f1 	bl	800aa9c <sys_timeout>
 800a8ba:	e002      	b.n	800a8c2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a8bc:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <tcpip_tcp_timer+0x44>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	601a      	str	r2, [r3, #0]
  }
}
 800a8c2:	bf00      	nop
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20006528 	.word	0x20006528
 800a8d0:	20006538 	.word	0x20006538
 800a8d4:	0800a895 	.word	0x0800a895
 800a8d8:	2000010c 	.word	0x2000010c

0800a8dc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <tcp_timer_needed+0x30>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10f      	bne.n	800a908 <tcp_timer_needed+0x2c>
 800a8e8:	4b09      	ldr	r3, [pc, #36]	; (800a910 <tcp_timer_needed+0x34>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d103      	bne.n	800a8f8 <tcp_timer_needed+0x1c>
 800a8f0:	4b08      	ldr	r3, [pc, #32]	; (800a914 <tcp_timer_needed+0x38>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d007      	beq.n	800a908 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a8f8:	4b04      	ldr	r3, [pc, #16]	; (800a90c <tcp_timer_needed+0x30>)
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a8fe:	2200      	movs	r2, #0
 800a900:	4905      	ldr	r1, [pc, #20]	; (800a918 <tcp_timer_needed+0x3c>)
 800a902:	20fa      	movs	r0, #250	; 0xfa
 800a904:	f000 f8ca 	bl	800aa9c <sys_timeout>
  }
}
 800a908:	bf00      	nop
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	2000010c 	.word	0x2000010c
 800a910:	20006528 	.word	0x20006528
 800a914:	20006538 	.word	0x20006538
 800a918:	0800a895 	.word	0x0800a895

0800a91c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a928:	2006      	movs	r0, #6
 800a92a:	f7f9 fd7f 	bl	800442c <memp_malloc>
 800a92e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d109      	bne.n	800a94a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d151      	bne.n	800a9e0 <sys_timeout_abs+0xc4>
 800a93c:	4b2a      	ldr	r3, [pc, #168]	; (800a9e8 <sys_timeout_abs+0xcc>)
 800a93e:	22be      	movs	r2, #190	; 0xbe
 800a940:	492a      	ldr	r1, [pc, #168]	; (800a9ec <sys_timeout_abs+0xd0>)
 800a942:	482b      	ldr	r0, [pc, #172]	; (800a9f0 <sys_timeout_abs+0xd4>)
 800a944:	f005 f876 	bl	800fa34 <iprintf>
    return;
 800a948:	e04a      	b.n	800a9e0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	2200      	movs	r2, #0
 800a94e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a962:	4b24      	ldr	r3, [pc, #144]	; (800a9f4 <sys_timeout_abs+0xd8>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a96a:	4a22      	ldr	r2, [pc, #136]	; (800a9f4 <sys_timeout_abs+0xd8>)
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	6013      	str	r3, [r2, #0]
    return;
 800a970:	e037      	b.n	800a9e2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	4b1f      	ldr	r3, [pc, #124]	; (800a9f4 <sys_timeout_abs+0xd8>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	0fdb      	lsrs	r3, r3, #31
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d007      	beq.n	800a99a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a98a:	4b1a      	ldr	r3, [pc, #104]	; (800a9f4 <sys_timeout_abs+0xd8>)
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a992:	4a18      	ldr	r2, [pc, #96]	; (800a9f4 <sys_timeout_abs+0xd8>)
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	e023      	b.n	800a9e2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a99a:	4b16      	ldr	r3, [pc, #88]	; (800a9f4 <sys_timeout_abs+0xd8>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	e01a      	b.n	800a9d8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00b      	beq.n	800a9c2 <sys_timeout_abs+0xa6>
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	0fdb      	lsrs	r3, r3, #31
 800a9b8:	f003 0301 	and.w	r3, r3, #1
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d007      	beq.n	800a9d2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	601a      	str	r2, [r3, #0]
        break;
 800a9d0:	e007      	b.n	800a9e2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	617b      	str	r3, [r7, #20]
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e1      	bne.n	800a9a2 <sys_timeout_abs+0x86>
 800a9de:	e000      	b.n	800a9e2 <sys_timeout_abs+0xc6>
    return;
 800a9e0:	bf00      	nop
      }
    }
  }
}
 800a9e2:	3718      	adds	r7, #24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	0801275c 	.word	0x0801275c
 800a9ec:	08012790 	.word	0x08012790
 800a9f0:	080127d0 	.word	0x080127d0
 800a9f4:	20000104 	.word	0x20000104

0800a9f8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	4798      	blx	r3

  now = sys_now();
 800aa0a:	f7f9 f82b 	bl	8003a64 <sys_now>
 800aa0e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <lwip_cyclic_timer+0x5c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4413      	add	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	0fdb      	lsrs	r3, r3, #31
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d009      	beq.n	800aa42 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	4413      	add	r3, r2
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	4907      	ldr	r1, [pc, #28]	; (800aa58 <lwip_cyclic_timer+0x60>)
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff ff6e 	bl	800a91c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800aa40:	e004      	b.n	800aa4c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	4904      	ldr	r1, [pc, #16]	; (800aa58 <lwip_cyclic_timer+0x60>)
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7ff ff68 	bl	800a91c <sys_timeout_abs>
}
 800aa4c:	bf00      	nop
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	20000108 	.word	0x20000108
 800aa58:	0800a9f9 	.word	0x0800a9f9

0800aa5c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aa62:	2301      	movs	r3, #1
 800aa64:	607b      	str	r3, [r7, #4]
 800aa66:	e00e      	b.n	800aa86 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800aa68:	4a0a      	ldr	r2, [pc, #40]	; (800aa94 <sys_timeouts_init+0x38>)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	4a07      	ldr	r2, [pc, #28]	; (800aa94 <sys_timeouts_init+0x38>)
 800aa76:	4413      	add	r3, r2
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4907      	ldr	r1, [pc, #28]	; (800aa98 <sys_timeouts_init+0x3c>)
 800aa7c:	f000 f80e 	bl	800aa9c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3301      	adds	r3, #1
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b04      	cmp	r3, #4
 800aa8a:	d9ed      	bls.n	800aa68 <sys_timeouts_init+0xc>
  }
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	080136dc 	.word	0x080136dc
 800aa98:	0800a9f9 	.word	0x0800a9f9

0800aa9c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaae:	d306      	bcc.n	800aabe <sys_timeout+0x22>
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <sys_timeout+0x40>)
 800aab2:	f240 1229 	movw	r2, #297	; 0x129
 800aab6:	490a      	ldr	r1, [pc, #40]	; (800aae0 <sys_timeout+0x44>)
 800aab8:	480a      	ldr	r0, [pc, #40]	; (800aae4 <sys_timeout+0x48>)
 800aaba:	f004 ffbb 	bl	800fa34 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800aabe:	f7f8 ffd1 	bl	8003a64 <sys_now>
 800aac2:	4602      	mov	r2, r0
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	68b9      	ldr	r1, [r7, #8]
 800aace:	6978      	ldr	r0, [r7, #20]
 800aad0:	f7ff ff24 	bl	800a91c <sys_timeout_abs>
#endif
}
 800aad4:	bf00      	nop
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	0801275c 	.word	0x0801275c
 800aae0:	080127f8 	.word	0x080127f8
 800aae4:	080127d0 	.word	0x080127d0

0800aae8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800aaee:	f7f8 ffb9 	bl	8003a64 <sys_now>
 800aaf2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800aaf4:	4b1a      	ldr	r3, [pc, #104]	; (800ab60 <sys_check_timeouts+0x78>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d001      	beq.n	800ab02 <sys_check_timeouts+0x1a>
 800aafe:	f7f9 ffc1 	bl	8004a84 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ab02:	4b18      	ldr	r3, [pc, #96]	; (800ab64 <sys_check_timeouts+0x7c>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d022      	beq.n	800ab54 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	0fdb      	lsrs	r3, r3, #31
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d11a      	bne.n	800ab58 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a0f      	ldr	r2, [pc, #60]	; (800ab64 <sys_check_timeouts+0x7c>)
 800ab28:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	4a0b      	ldr	r2, [pc, #44]	; (800ab68 <sys_check_timeouts+0x80>)
 800ab3c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	2006      	movs	r0, #6
 800ab42:	f7f9 fcbf 	bl	80044c4 <memp_free>
    if (handler != NULL) {
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d0d3      	beq.n	800aaf4 <sys_check_timeouts+0xc>
      handler(arg);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6838      	ldr	r0, [r7, #0]
 800ab50:	4798      	blx	r3
  do {
 800ab52:	e7cf      	b.n	800aaf4 <sys_check_timeouts+0xc>
      return;
 800ab54:	bf00      	nop
 800ab56:	e000      	b.n	800ab5a <sys_check_timeouts+0x72>
      return;
 800ab58:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20006520 	.word	0x20006520
 800ab64:	20000104 	.word	0x20000104
 800ab68:	20000108 	.word	0x20000108

0800ab6c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ab70:	f004 ff78 	bl	800fa64 <rand>
 800ab74:	4603      	mov	r3, r0
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	4b01      	ldr	r3, [pc, #4]	; (800ab8c <udp_init+0x20>)
 800ab86:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ab88:	bf00      	nop
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20000010 	.word	0x20000010

0800ab90 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ab9a:	4b17      	ldr	r3, [pc, #92]	; (800abf8 <udp_new_port+0x68>)
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	b291      	uxth	r1, r2
 800aba2:	4a15      	ldr	r2, [pc, #84]	; (800abf8 <udp_new_port+0x68>)
 800aba4:	8011      	strh	r1, [r2, #0]
 800aba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abaa:	4293      	cmp	r3, r2
 800abac:	d103      	bne.n	800abb6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800abae:	4b12      	ldr	r3, [pc, #72]	; (800abf8 <udp_new_port+0x68>)
 800abb0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800abb4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800abb6:	4b11      	ldr	r3, [pc, #68]	; (800abfc <udp_new_port+0x6c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	e011      	b.n	800abe2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	8a5a      	ldrh	r2, [r3, #18]
 800abc2:	4b0d      	ldr	r3, [pc, #52]	; (800abf8 <udp_new_port+0x68>)
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d108      	bne.n	800abdc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800abca:	88fb      	ldrh	r3, [r7, #6]
 800abcc:	3301      	adds	r3, #1
 800abce:	80fb      	strh	r3, [r7, #6]
 800abd0:	88fb      	ldrh	r3, [r7, #6]
 800abd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abd6:	d3e0      	bcc.n	800ab9a <udp_new_port+0xa>
        return 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	e007      	b.n	800abec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	603b      	str	r3, [r7, #0]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1ea      	bne.n	800abbe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800abe8:	4b03      	ldr	r3, [pc, #12]	; (800abf8 <udp_new_port+0x68>)
 800abea:	881b      	ldrh	r3, [r3, #0]
}
 800abec:	4618      	mov	r0, r3
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	20000010 	.word	0x20000010
 800abfc:	20006540 	.word	0x20006540

0800ac00 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d105      	bne.n	800ac20 <udp_input_local_match+0x20>
 800ac14:	4b27      	ldr	r3, [pc, #156]	; (800acb4 <udp_input_local_match+0xb4>)
 800ac16:	2287      	movs	r2, #135	; 0x87
 800ac18:	4927      	ldr	r1, [pc, #156]	; (800acb8 <udp_input_local_match+0xb8>)
 800ac1a:	4828      	ldr	r0, [pc, #160]	; (800acbc <udp_input_local_match+0xbc>)
 800ac1c:	f004 ff0a 	bl	800fa34 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d105      	bne.n	800ac32 <udp_input_local_match+0x32>
 800ac26:	4b23      	ldr	r3, [pc, #140]	; (800acb4 <udp_input_local_match+0xb4>)
 800ac28:	2288      	movs	r2, #136	; 0x88
 800ac2a:	4925      	ldr	r1, [pc, #148]	; (800acc0 <udp_input_local_match+0xc0>)
 800ac2c:	4823      	ldr	r0, [pc, #140]	; (800acbc <udp_input_local_match+0xbc>)
 800ac2e:	f004 ff01 	bl	800fa34 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	7a1b      	ldrb	r3, [r3, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00b      	beq.n	800ac52 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	7a1a      	ldrb	r2, [r3, #8]
 800ac3e:	4b21      	ldr	r3, [pc, #132]	; (800acc4 <udp_input_local_match+0xc4>)
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac46:	3301      	adds	r3, #1
 800ac48:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d001      	beq.n	800ac52 <udp_input_local_match+0x52>
    return 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e02b      	b.n	800acaa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ac52:	79fb      	ldrb	r3, [r7, #7]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d018      	beq.n	800ac8a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d013      	beq.n	800ac86 <udp_input_local_match+0x86>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00f      	beq.n	800ac86 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ac66:	4b17      	ldr	r3, [pc, #92]	; (800acc4 <udp_input_local_match+0xc4>)
 800ac68:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ac6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6e:	d00a      	beq.n	800ac86 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	4b13      	ldr	r3, [pc, #76]	; (800acc4 <udp_input_local_match+0xc4>)
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	405a      	eors	r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d110      	bne.n	800aca8 <udp_input_local_match+0xa8>
          return 1;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e00f      	b.n	800acaa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d009      	beq.n	800aca4 <udp_input_local_match+0xa4>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d005      	beq.n	800aca4 <udp_input_local_match+0xa4>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	4b09      	ldr	r3, [pc, #36]	; (800acc4 <udp_input_local_match+0xc4>)
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d101      	bne.n	800aca8 <udp_input_local_match+0xa8>
        return 1;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e000      	b.n	800acaa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	08012844 	.word	0x08012844
 800acb8:	08012874 	.word	0x08012874
 800acbc:	08012898 	.word	0x08012898
 800acc0:	080128c0 	.word	0x080128c0
 800acc4:	20003404 	.word	0x20003404

0800acc8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800acc8:	b590      	push	{r4, r7, lr}
 800acca:	b08d      	sub	sp, #52	; 0x34
 800accc:	af02      	add	r7, sp, #8
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d105      	bne.n	800ace8 <udp_input+0x20>
 800acdc:	4b7c      	ldr	r3, [pc, #496]	; (800aed0 <udp_input+0x208>)
 800acde:	22cf      	movs	r2, #207	; 0xcf
 800ace0:	497c      	ldr	r1, [pc, #496]	; (800aed4 <udp_input+0x20c>)
 800ace2:	487d      	ldr	r0, [pc, #500]	; (800aed8 <udp_input+0x210>)
 800ace4:	f004 fea6 	bl	800fa34 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d105      	bne.n	800acfa <udp_input+0x32>
 800acee:	4b78      	ldr	r3, [pc, #480]	; (800aed0 <udp_input+0x208>)
 800acf0:	22d0      	movs	r2, #208	; 0xd0
 800acf2:	497a      	ldr	r1, [pc, #488]	; (800aedc <udp_input+0x214>)
 800acf4:	4878      	ldr	r0, [pc, #480]	; (800aed8 <udp_input+0x210>)
 800acf6:	f004 fe9d 	bl	800fa34 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	895b      	ldrh	r3, [r3, #10]
 800acfe:	2b07      	cmp	r3, #7
 800ad00:	d803      	bhi.n	800ad0a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7fa f9f4 	bl	80050f0 <pbuf_free>
    goto end;
 800ad08:	e0de      	b.n	800aec8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ad10:	4b73      	ldr	r3, [pc, #460]	; (800aee0 <udp_input+0x218>)
 800ad12:	695a      	ldr	r2, [r3, #20]
 800ad14:	4b72      	ldr	r3, [pc, #456]	; (800aee0 <udp_input+0x218>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f003 fdc6 	bl	800e8ac <ip4_addr_isbroadcast_u32>
 800ad20:	4603      	mov	r3, r0
 800ad22:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7f8 ff28 	bl	8003b80 <lwip_htons>
 800ad30:	4603      	mov	r3, r0
 800ad32:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	885b      	ldrh	r3, [r3, #2]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7f8 ff20 	bl	8003b80 <lwip_htons>
 800ad40:	4603      	mov	r3, r0
 800ad42:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ad44:	2300      	movs	r3, #0
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad50:	4b64      	ldr	r3, [pc, #400]	; (800aee4 <udp_input+0x21c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	627b      	str	r3, [r7, #36]	; 0x24
 800ad56:	e054      	b.n	800ae02 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	8a5b      	ldrh	r3, [r3, #18]
 800ad5c:	89fa      	ldrh	r2, [r7, #14]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d14a      	bne.n	800adf8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ad62:	7cfb      	ldrb	r3, [r7, #19]
 800ad64:	461a      	mov	r2, r3
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad6a:	f7ff ff49 	bl	800ac00 <udp_input_local_match>
 800ad6e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d041      	beq.n	800adf8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	7c1b      	ldrb	r3, [r3, #16]
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d11d      	bne.n	800adbc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	61fb      	str	r3, [r7, #28]
 800ad8a:	e017      	b.n	800adbc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ad8c:	7cfb      	ldrb	r3, [r7, #19]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d014      	beq.n	800adbc <udp_input+0xf4>
 800ad92:	4b53      	ldr	r3, [pc, #332]	; (800aee0 <udp_input+0x218>)
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9a:	d10f      	bne.n	800adbc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	3304      	adds	r3, #4
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d008      	beq.n	800adbc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800adaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	3304      	adds	r3, #4
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d101      	bne.n	800adbc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	8a9b      	ldrh	r3, [r3, #20]
 800adc0:	8a3a      	ldrh	r2, [r7, #16]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d118      	bne.n	800adf8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	4b43      	ldr	r3, [pc, #268]	; (800aee0 <udp_input+0x218>)
 800add4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800add6:	429a      	cmp	r2, r3
 800add8:	d10e      	bne.n	800adf8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d014      	beq.n	800ae0a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ade8:	4b3e      	ldr	r3, [pc, #248]	; (800aee4 <udp_input+0x21c>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800adf0:	4a3c      	ldr	r2, [pc, #240]	; (800aee4 <udp_input+0x21c>)
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800adf6:	e008      	b.n	800ae0a <udp_input+0x142>
      }
    }

    prev = pcb;
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	627b      	str	r3, [r7, #36]	; 0x24
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1a7      	bne.n	800ad58 <udp_input+0x90>
 800ae08:	e000      	b.n	800ae0c <udp_input+0x144>
        break;
 800ae0a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <udp_input+0x15a>
    for_us = 1;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	76fb      	strb	r3, [r7, #27]
 800ae20:	e00a      	b.n	800ae38 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	3304      	adds	r3, #4
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	4b2d      	ldr	r3, [pc, #180]	; (800aee0 <udp_input+0x218>)
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	bf0c      	ite	eq
 800ae30:	2301      	moveq	r3, #1
 800ae32:	2300      	movne	r3, #0
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ae38:	7efb      	ldrb	r3, [r7, #27]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d041      	beq.n	800aec2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ae3e:	2108      	movs	r1, #8
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7fa f8cf 	bl	8004fe4 <pbuf_remove_header>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00a      	beq.n	800ae62 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ae4c:	4b20      	ldr	r3, [pc, #128]	; (800aed0 <udp_input+0x208>)
 800ae4e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ae52:	4925      	ldr	r1, [pc, #148]	; (800aee8 <udp_input+0x220>)
 800ae54:	4820      	ldr	r0, [pc, #128]	; (800aed8 <udp_input+0x210>)
 800ae56:	f004 fded 	bl	800fa34 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7fa f948 	bl	80050f0 <pbuf_free>
      goto end;
 800ae60:	e032      	b.n	800aec8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d012      	beq.n	800ae8e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00a      	beq.n	800ae86 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	699c      	ldr	r4, [r3, #24]
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	69d8      	ldr	r0, [r3, #28]
 800ae78:	8a3b      	ldrh	r3, [r7, #16]
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	4b1b      	ldr	r3, [pc, #108]	; (800aeec <udp_input+0x224>)
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae82:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ae84:	e021      	b.n	800aeca <udp_input+0x202>
        pbuf_free(p);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7fa f932 	bl	80050f0 <pbuf_free>
        goto end;
 800ae8c:	e01c      	b.n	800aec8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ae8e:	7cfb      	ldrb	r3, [r7, #19]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d112      	bne.n	800aeba <udp_input+0x1f2>
 800ae94:	4b12      	ldr	r3, [pc, #72]	; (800aee0 <udp_input+0x218>)
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae9c:	2be0      	cmp	r3, #224	; 0xe0
 800ae9e:	d00c      	beq.n	800aeba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800aea0:	4b0f      	ldr	r3, [pc, #60]	; (800aee0 <udp_input+0x218>)
 800aea2:	899b      	ldrh	r3, [r3, #12]
 800aea4:	3308      	adds	r3, #8
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	b21b      	sxth	r3, r3
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7fa f90c 	bl	80050ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800aeb2:	2103      	movs	r1, #3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f003 f9bd 	bl	800e234 <icmp_dest_unreach>
      pbuf_free(p);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7fa f918 	bl	80050f0 <pbuf_free>
  return;
 800aec0:	e003      	b.n	800aeca <udp_input+0x202>
    pbuf_free(p);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7fa f914 	bl	80050f0 <pbuf_free>
  return;
 800aec8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800aeca:	372c      	adds	r7, #44	; 0x2c
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd90      	pop	{r4, r7, pc}
 800aed0:	08012844 	.word	0x08012844
 800aed4:	080128e8 	.word	0x080128e8
 800aed8:	08012898 	.word	0x08012898
 800aedc:	08012900 	.word	0x08012900
 800aee0:	20003404 	.word	0x20003404
 800aee4:	20006540 	.word	0x20006540
 800aee8:	0801291c 	.word	0x0801291c
 800aeec:	20003414 	.word	0x20003414

0800aef0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b088      	sub	sp, #32
 800aef4:	af02      	add	r7, sp, #8
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
 800aefc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d109      	bne.n	800af18 <udp_sendto_if+0x28>
 800af04:	4b2e      	ldr	r3, [pc, #184]	; (800afc0 <udp_sendto_if+0xd0>)
 800af06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800af0a:	492e      	ldr	r1, [pc, #184]	; (800afc4 <udp_sendto_if+0xd4>)
 800af0c:	482e      	ldr	r0, [pc, #184]	; (800afc8 <udp_sendto_if+0xd8>)
 800af0e:	f004 fd91 	bl	800fa34 <iprintf>
 800af12:	f06f 030f 	mvn.w	r3, #15
 800af16:	e04f      	b.n	800afb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d109      	bne.n	800af32 <udp_sendto_if+0x42>
 800af1e:	4b28      	ldr	r3, [pc, #160]	; (800afc0 <udp_sendto_if+0xd0>)
 800af20:	f240 2281 	movw	r2, #641	; 0x281
 800af24:	4929      	ldr	r1, [pc, #164]	; (800afcc <udp_sendto_if+0xdc>)
 800af26:	4828      	ldr	r0, [pc, #160]	; (800afc8 <udp_sendto_if+0xd8>)
 800af28:	f004 fd84 	bl	800fa34 <iprintf>
 800af2c:	f06f 030f 	mvn.w	r3, #15
 800af30:	e042      	b.n	800afb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d109      	bne.n	800af4c <udp_sendto_if+0x5c>
 800af38:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <udp_sendto_if+0xd0>)
 800af3a:	f240 2282 	movw	r2, #642	; 0x282
 800af3e:	4924      	ldr	r1, [pc, #144]	; (800afd0 <udp_sendto_if+0xe0>)
 800af40:	4821      	ldr	r0, [pc, #132]	; (800afc8 <udp_sendto_if+0xd8>)
 800af42:	f004 fd77 	bl	800fa34 <iprintf>
 800af46:	f06f 030f 	mvn.w	r3, #15
 800af4a:	e035      	b.n	800afb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d109      	bne.n	800af66 <udp_sendto_if+0x76>
 800af52:	4b1b      	ldr	r3, [pc, #108]	; (800afc0 <udp_sendto_if+0xd0>)
 800af54:	f240 2283 	movw	r2, #643	; 0x283
 800af58:	491e      	ldr	r1, [pc, #120]	; (800afd4 <udp_sendto_if+0xe4>)
 800af5a:	481b      	ldr	r0, [pc, #108]	; (800afc8 <udp_sendto_if+0xd8>)
 800af5c:	f004 fd6a 	bl	800fa34 <iprintf>
 800af60:	f06f 030f 	mvn.w	r3, #15
 800af64:	e028      	b.n	800afb8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d009      	beq.n	800af80 <udp_sendto_if+0x90>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800af7c:	2be0      	cmp	r3, #224	; 0xe0
 800af7e:	d103      	bne.n	800af88 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	3304      	adds	r3, #4
 800af84:	617b      	str	r3, [r7, #20]
 800af86:	e00b      	b.n	800afa0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	3304      	adds	r3, #4
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	429a      	cmp	r2, r3
 800af94:	d002      	beq.n	800af9c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800af96:	f06f 0303 	mvn.w	r3, #3
 800af9a:	e00d      	b.n	800afb8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800afa0:	887a      	ldrh	r2, [r7, #2]
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	9301      	str	r3, [sp, #4]
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	4613      	mov	r3, r2
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	68b9      	ldr	r1, [r7, #8]
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f000 f811 	bl	800afd8 <udp_sendto_if_src>
 800afb6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	08012844 	.word	0x08012844
 800afc4:	080129b8 	.word	0x080129b8
 800afc8:	08012898 	.word	0x08012898
 800afcc:	080129d4 	.word	0x080129d4
 800afd0:	080129f0 	.word	0x080129f0
 800afd4:	08012a10 	.word	0x08012a10

0800afd8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08c      	sub	sp, #48	; 0x30
 800afdc:	af04      	add	r7, sp, #16
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
 800afe4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d109      	bne.n	800b000 <udp_sendto_if_src+0x28>
 800afec:	4b65      	ldr	r3, [pc, #404]	; (800b184 <udp_sendto_if_src+0x1ac>)
 800afee:	f240 22d1 	movw	r2, #721	; 0x2d1
 800aff2:	4965      	ldr	r1, [pc, #404]	; (800b188 <udp_sendto_if_src+0x1b0>)
 800aff4:	4865      	ldr	r0, [pc, #404]	; (800b18c <udp_sendto_if_src+0x1b4>)
 800aff6:	f004 fd1d 	bl	800fa34 <iprintf>
 800affa:	f06f 030f 	mvn.w	r3, #15
 800affe:	e0bc      	b.n	800b17a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d109      	bne.n	800b01a <udp_sendto_if_src+0x42>
 800b006:	4b5f      	ldr	r3, [pc, #380]	; (800b184 <udp_sendto_if_src+0x1ac>)
 800b008:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b00c:	4960      	ldr	r1, [pc, #384]	; (800b190 <udp_sendto_if_src+0x1b8>)
 800b00e:	485f      	ldr	r0, [pc, #380]	; (800b18c <udp_sendto_if_src+0x1b4>)
 800b010:	f004 fd10 	bl	800fa34 <iprintf>
 800b014:	f06f 030f 	mvn.w	r3, #15
 800b018:	e0af      	b.n	800b17a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d109      	bne.n	800b034 <udp_sendto_if_src+0x5c>
 800b020:	4b58      	ldr	r3, [pc, #352]	; (800b184 <udp_sendto_if_src+0x1ac>)
 800b022:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b026:	495b      	ldr	r1, [pc, #364]	; (800b194 <udp_sendto_if_src+0x1bc>)
 800b028:	4858      	ldr	r0, [pc, #352]	; (800b18c <udp_sendto_if_src+0x1b4>)
 800b02a:	f004 fd03 	bl	800fa34 <iprintf>
 800b02e:	f06f 030f 	mvn.w	r3, #15
 800b032:	e0a2      	b.n	800b17a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	2b00      	cmp	r3, #0
 800b038:	d109      	bne.n	800b04e <udp_sendto_if_src+0x76>
 800b03a:	4b52      	ldr	r3, [pc, #328]	; (800b184 <udp_sendto_if_src+0x1ac>)
 800b03c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b040:	4955      	ldr	r1, [pc, #340]	; (800b198 <udp_sendto_if_src+0x1c0>)
 800b042:	4852      	ldr	r0, [pc, #328]	; (800b18c <udp_sendto_if_src+0x1b4>)
 800b044:	f004 fcf6 	bl	800fa34 <iprintf>
 800b048:	f06f 030f 	mvn.w	r3, #15
 800b04c:	e095      	b.n	800b17a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	2b00      	cmp	r3, #0
 800b052:	d109      	bne.n	800b068 <udp_sendto_if_src+0x90>
 800b054:	4b4b      	ldr	r3, [pc, #300]	; (800b184 <udp_sendto_if_src+0x1ac>)
 800b056:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b05a:	4950      	ldr	r1, [pc, #320]	; (800b19c <udp_sendto_if_src+0x1c4>)
 800b05c:	484b      	ldr	r0, [pc, #300]	; (800b18c <udp_sendto_if_src+0x1b4>)
 800b05e:	f004 fce9 	bl	800fa34 <iprintf>
 800b062:	f06f 030f 	mvn.w	r3, #15
 800b066:	e088      	b.n	800b17a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8a5b      	ldrh	r3, [r3, #18]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10f      	bne.n	800b090 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b070:	68f9      	ldr	r1, [r7, #12]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	8a5b      	ldrh	r3, [r3, #18]
 800b076:	461a      	mov	r2, r3
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 f893 	bl	800b1a4 <udp_bind>
 800b07e:	4603      	mov	r3, r0
 800b080:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b082:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d002      	beq.n	800b090 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b08a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b08e:	e074      	b.n	800b17a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	891b      	ldrh	r3, [r3, #8]
 800b094:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b098:	4293      	cmp	r3, r2
 800b09a:	d902      	bls.n	800b0a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b09c:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a0:	e06b      	b.n	800b17a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b0a2:	2108      	movs	r1, #8
 800b0a4:	68b8      	ldr	r0, [r7, #8]
 800b0a6:	f7f9 ff8d 	bl	8004fc4 <pbuf_add_header>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d015      	beq.n	800b0dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b0b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0b4:	2108      	movs	r1, #8
 800b0b6:	2022      	movs	r0, #34	; 0x22
 800b0b8:	f7f9 fd3a 	bl	8004b30 <pbuf_alloc>
 800b0bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c8:	e057      	b.n	800b17a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	891b      	ldrh	r3, [r3, #8]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d006      	beq.n	800b0e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	69f8      	ldr	r0, [r7, #28]
 800b0d6:	f7fa f923 	bl	8005320 <pbuf_chain>
 800b0da:	e001      	b.n	800b0e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	895b      	ldrh	r3, [r3, #10]
 800b0e4:	2b07      	cmp	r3, #7
 800b0e6:	d806      	bhi.n	800b0f6 <udp_sendto_if_src+0x11e>
 800b0e8:	4b26      	ldr	r3, [pc, #152]	; (800b184 <udp_sendto_if_src+0x1ac>)
 800b0ea:	f240 320e 	movw	r2, #782	; 0x30e
 800b0ee:	492c      	ldr	r1, [pc, #176]	; (800b1a0 <udp_sendto_if_src+0x1c8>)
 800b0f0:	4826      	ldr	r0, [pc, #152]	; (800b18c <udp_sendto_if_src+0x1b4>)
 800b0f2:	f004 fc9f 	bl	800fa34 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	8a5b      	ldrh	r3, [r3, #18]
 800b100:	4618      	mov	r0, r3
 800b102:	f7f8 fd3d 	bl	8003b80 <lwip_htons>
 800b106:	4603      	mov	r3, r0
 800b108:	461a      	mov	r2, r3
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b10e:	887b      	ldrh	r3, [r7, #2]
 800b110:	4618      	mov	r0, r3
 800b112:	f7f8 fd35 	bl	8003b80 <lwip_htons>
 800b116:	4603      	mov	r3, r0
 800b118:	461a      	mov	r2, r3
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2200      	movs	r2, #0
 800b122:	719a      	strb	r2, [r3, #6]
 800b124:	2200      	movs	r2, #0
 800b126:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	891b      	ldrh	r3, [r3, #8]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7f8 fd27 	bl	8003b80 <lwip_htons>
 800b132:	4603      	mov	r3, r0
 800b134:	461a      	mov	r2, r3
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b13a:	2311      	movs	r3, #17
 800b13c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	7adb      	ldrb	r3, [r3, #11]
 800b142:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	7a9b      	ldrb	r3, [r3, #10]
 800b148:	7cb9      	ldrb	r1, [r7, #18]
 800b14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b14c:	9202      	str	r2, [sp, #8]
 800b14e:	7cfa      	ldrb	r2, [r7, #19]
 800b150:	9201      	str	r2, [sp, #4]
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	460b      	mov	r3, r1
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b15a:	69f8      	ldr	r0, [r7, #28]
 800b15c:	f003 faf8 	bl	800e750 <ip4_output_if_src>
 800b160:	4603      	mov	r3, r0
 800b162:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d004      	beq.n	800b176 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b16c:	69f8      	ldr	r0, [r7, #28]
 800b16e:	f7f9 ffbf 	bl	80050f0 <pbuf_free>
    q = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b176:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3720      	adds	r7, #32
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	08012844 	.word	0x08012844
 800b188:	08012a30 	.word	0x08012a30
 800b18c:	08012898 	.word	0x08012898
 800b190:	08012a50 	.word	0x08012a50
 800b194:	08012a70 	.word	0x08012a70
 800b198:	08012a94 	.word	0x08012a94
 800b19c:	08012ab8 	.word	0x08012ab8
 800b1a0:	08012adc 	.word	0x08012adc

0800b1a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b1b8:	4b39      	ldr	r3, [pc, #228]	; (800b2a0 <udp_bind+0xfc>)
 800b1ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d109      	bne.n	800b1d6 <udp_bind+0x32>
 800b1c2:	4b38      	ldr	r3, [pc, #224]	; (800b2a4 <udp_bind+0x100>)
 800b1c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b1c8:	4937      	ldr	r1, [pc, #220]	; (800b2a8 <udp_bind+0x104>)
 800b1ca:	4838      	ldr	r0, [pc, #224]	; (800b2ac <udp_bind+0x108>)
 800b1cc:	f004 fc32 	bl	800fa34 <iprintf>
 800b1d0:	f06f 030f 	mvn.w	r3, #15
 800b1d4:	e060      	b.n	800b298 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b1da:	4b35      	ldr	r3, [pc, #212]	; (800b2b0 <udp_bind+0x10c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	e009      	b.n	800b1f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d102      	bne.n	800b1f0 <udp_bind+0x4c>
      rebind = 1;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	74fb      	strb	r3, [r7, #19]
      break;
 800b1ee:	e005      	b.n	800b1fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	617b      	str	r3, [r7, #20]
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1f2      	bne.n	800b1e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b1fc:	88fb      	ldrh	r3, [r7, #6]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <udp_bind+0x72>
    port = udp_new_port();
 800b202:	f7ff fcc5 	bl	800ab90 <udp_new_port>
 800b206:	4603      	mov	r3, r0
 800b208:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b20a:	88fb      	ldrh	r3, [r7, #6]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d12c      	bne.n	800b26a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b210:	f06f 0307 	mvn.w	r3, #7
 800b214:	e040      	b.n	800b298 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b216:	4b26      	ldr	r3, [pc, #152]	; (800b2b0 <udp_bind+0x10c>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	617b      	str	r3, [r7, #20]
 800b21c:	e022      	b.n	800b264 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	429a      	cmp	r2, r3
 800b224:	d01b      	beq.n	800b25e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	8a5b      	ldrh	r3, [r3, #18]
 800b22a:	88fa      	ldrh	r2, [r7, #6]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d116      	bne.n	800b25e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b238:	429a      	cmp	r2, r3
 800b23a:	d00d      	beq.n	800b258 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00a      	beq.n	800b258 <udp_bind+0xb4>
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d006      	beq.n	800b258 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b24a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d102      	bne.n	800b25e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b258:	f06f 0307 	mvn.w	r3, #7
 800b25c:	e01c      	b.n	800b298 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	617b      	str	r3, [r7, #20]
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1d9      	bne.n	800b21e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <udp_bind+0xd2>
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	e000      	b.n	800b278 <udp_bind+0xd4>
 800b276:	2300      	movs	r3, #0
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	88fa      	ldrh	r2, [r7, #6]
 800b280:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b282:	7cfb      	ldrb	r3, [r7, #19]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d106      	bne.n	800b296 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b288:	4b09      	ldr	r3, [pc, #36]	; (800b2b0 <udp_bind+0x10c>)
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b290:	4a07      	ldr	r2, [pc, #28]	; (800b2b0 <udp_bind+0x10c>)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	08013704 	.word	0x08013704
 800b2a4:	08012844 	.word	0x08012844
 800b2a8:	08012b0c 	.word	0x08012b0c
 800b2ac:	08012898 	.word	0x08012898
 800b2b0:	20006540 	.word	0x20006540

0800b2b4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d109      	bne.n	800b2dc <udp_connect+0x28>
 800b2c8:	4b2c      	ldr	r3, [pc, #176]	; (800b37c <udp_connect+0xc8>)
 800b2ca:	f240 4235 	movw	r2, #1077	; 0x435
 800b2ce:	492c      	ldr	r1, [pc, #176]	; (800b380 <udp_connect+0xcc>)
 800b2d0:	482c      	ldr	r0, [pc, #176]	; (800b384 <udp_connect+0xd0>)
 800b2d2:	f004 fbaf 	bl	800fa34 <iprintf>
 800b2d6:	f06f 030f 	mvn.w	r3, #15
 800b2da:	e04b      	b.n	800b374 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d109      	bne.n	800b2f6 <udp_connect+0x42>
 800b2e2:	4b26      	ldr	r3, [pc, #152]	; (800b37c <udp_connect+0xc8>)
 800b2e4:	f240 4236 	movw	r2, #1078	; 0x436
 800b2e8:	4927      	ldr	r1, [pc, #156]	; (800b388 <udp_connect+0xd4>)
 800b2ea:	4826      	ldr	r0, [pc, #152]	; (800b384 <udp_connect+0xd0>)
 800b2ec:	f004 fba2 	bl	800fa34 <iprintf>
 800b2f0:	f06f 030f 	mvn.w	r3, #15
 800b2f4:	e03e      	b.n	800b374 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	8a5b      	ldrh	r3, [r3, #18]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10f      	bne.n	800b31e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b2fe:	68f9      	ldr	r1, [r7, #12]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	8a5b      	ldrh	r3, [r3, #18]
 800b304:	461a      	mov	r2, r3
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7ff ff4c 	bl	800b1a4 <udp_bind>
 800b30c:	4603      	mov	r3, r0
 800b30e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b310:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <udp_connect+0x6a>
      return err;
 800b318:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b31c:	e02a      	b.n	800b374 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <udp_connect+0x76>
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	e000      	b.n	800b32c <udp_connect+0x78>
 800b32a:	2300      	movs	r3, #0
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	88fa      	ldrh	r2, [r7, #6]
 800b334:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	7c1b      	ldrb	r3, [r3, #16]
 800b33a:	f043 0304 	orr.w	r3, r3, #4
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b344:	4b11      	ldr	r3, [pc, #68]	; (800b38c <udp_connect+0xd8>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	617b      	str	r3, [r7, #20]
 800b34a:	e008      	b.n	800b35e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	429a      	cmp	r2, r3
 800b352:	d101      	bne.n	800b358 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	e00d      	b.n	800b374 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	617b      	str	r3, [r7, #20]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1f3      	bne.n	800b34c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b364:	4b09      	ldr	r3, [pc, #36]	; (800b38c <udp_connect+0xd8>)
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b36c:	4a07      	ldr	r2, [pc, #28]	; (800b38c <udp_connect+0xd8>)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	08012844 	.word	0x08012844
 800b380:	08012b24 	.word	0x08012b24
 800b384:	08012898 	.word	0x08012898
 800b388:	08012b40 	.word	0x08012b40
 800b38c:	20006540 	.word	0x20006540

0800b390 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d107      	bne.n	800b3b2 <udp_recv+0x22>
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <udp_recv+0x34>)
 800b3a4:	f240 428a 	movw	r2, #1162	; 0x48a
 800b3a8:	4907      	ldr	r1, [pc, #28]	; (800b3c8 <udp_recv+0x38>)
 800b3aa:	4808      	ldr	r0, [pc, #32]	; (800b3cc <udp_recv+0x3c>)
 800b3ac:	f004 fb42 	bl	800fa34 <iprintf>
 800b3b0:	e005      	b.n	800b3be <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	61da      	str	r2, [r3, #28]
}
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	08012844 	.word	0x08012844
 800b3c8:	08012b78 	.word	0x08012b78
 800b3cc:	08012898 	.word	0x08012898

0800b3d0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d107      	bne.n	800b3ee <udp_remove+0x1e>
 800b3de:	4b19      	ldr	r3, [pc, #100]	; (800b444 <udp_remove+0x74>)
 800b3e0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b3e4:	4918      	ldr	r1, [pc, #96]	; (800b448 <udp_remove+0x78>)
 800b3e6:	4819      	ldr	r0, [pc, #100]	; (800b44c <udp_remove+0x7c>)
 800b3e8:	f004 fb24 	bl	800fa34 <iprintf>
 800b3ec:	e026      	b.n	800b43c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b3ee:	4b18      	ldr	r3, [pc, #96]	; (800b450 <udp_remove+0x80>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d105      	bne.n	800b404 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b3f8:	4b15      	ldr	r3, [pc, #84]	; (800b450 <udp_remove+0x80>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	4a14      	ldr	r2, [pc, #80]	; (800b450 <udp_remove+0x80>)
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	e017      	b.n	800b434 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b404:	4b12      	ldr	r3, [pc, #72]	; (800b450 <udp_remove+0x80>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	60fb      	str	r3, [r7, #12]
 800b40a:	e010      	b.n	800b42e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d009      	beq.n	800b428 <udp_remove+0x58>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d104      	bne.n	800b428 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68da      	ldr	r2, [r3, #12]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	60da      	str	r2, [r3, #12]
        break;
 800b426:	e005      	b.n	800b434 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	60fb      	str	r3, [r7, #12]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1eb      	bne.n	800b40c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b434:	6879      	ldr	r1, [r7, #4]
 800b436:	2000      	movs	r0, #0
 800b438:	f7f9 f844 	bl	80044c4 <memp_free>
}
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	08012844 	.word	0x08012844
 800b448:	08012b90 	.word	0x08012b90
 800b44c:	08012898 	.word	0x08012898
 800b450:	20006540 	.word	0x20006540

0800b454 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b45a:	2000      	movs	r0, #0
 800b45c:	f7f8 ffe6 	bl	800442c <memp_malloc>
 800b460:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d007      	beq.n	800b478 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b468:	2220      	movs	r2, #32
 800b46a:	2100      	movs	r1, #0
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f004 fad9 	bl	800fa24 <memset>
    pcb->ttl = UDP_TTL;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	22ff      	movs	r2, #255	; 0xff
 800b476:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b478:	687b      	ldr	r3, [r7, #4]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d01e      	beq.n	800b4d2 <udp_netif_ip_addr_changed+0x4e>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01a      	beq.n	800b4d2 <udp_netif_ip_addr_changed+0x4e>
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d017      	beq.n	800b4d2 <udp_netif_ip_addr_changed+0x4e>
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d013      	beq.n	800b4d2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b4aa:	4b0d      	ldr	r3, [pc, #52]	; (800b4e0 <udp_netif_ip_addr_changed+0x5c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	e00c      	b.n	800b4cc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d103      	bne.n	800b4c6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1ef      	bne.n	800b4b2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b4d2:	bf00      	nop
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	20006540 	.word	0x20006540

0800b4e4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800b4e8:	4b20      	ldr	r3, [pc, #128]	; (800b56c <dhcp_inc_pcb_refcount+0x88>)
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d133      	bne.n	800b558 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800b4f0:	4b1f      	ldr	r3, [pc, #124]	; (800b570 <dhcp_inc_pcb_refcount+0x8c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d005      	beq.n	800b504 <dhcp_inc_pcb_refcount+0x20>
 800b4f8:	4b1e      	ldr	r3, [pc, #120]	; (800b574 <dhcp_inc_pcb_refcount+0x90>)
 800b4fa:	22e5      	movs	r2, #229	; 0xe5
 800b4fc:	491e      	ldr	r1, [pc, #120]	; (800b578 <dhcp_inc_pcb_refcount+0x94>)
 800b4fe:	481f      	ldr	r0, [pc, #124]	; (800b57c <dhcp_inc_pcb_refcount+0x98>)
 800b500:	f004 fa98 	bl	800fa34 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800b504:	f7ff ffa6 	bl	800b454 <udp_new>
 800b508:	4602      	mov	r2, r0
 800b50a:	4b19      	ldr	r3, [pc, #100]	; (800b570 <dhcp_inc_pcb_refcount+0x8c>)
 800b50c:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800b50e:	4b18      	ldr	r3, [pc, #96]	; (800b570 <dhcp_inc_pcb_refcount+0x8c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d102      	bne.n	800b51c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800b516:	f04f 33ff 	mov.w	r3, #4294967295
 800b51a:	e024      	b.n	800b566 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800b51c:	4b14      	ldr	r3, [pc, #80]	; (800b570 <dhcp_inc_pcb_refcount+0x8c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	7a5a      	ldrb	r2, [r3, #9]
 800b522:	4b13      	ldr	r3, [pc, #76]	; (800b570 <dhcp_inc_pcb_refcount+0x8c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f042 0220 	orr.w	r2, r2, #32
 800b52a:	b2d2      	uxtb	r2, r2
 800b52c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800b52e:	4b10      	ldr	r3, [pc, #64]	; (800b570 <dhcp_inc_pcb_refcount+0x8c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2244      	movs	r2, #68	; 0x44
 800b534:	4912      	ldr	r1, [pc, #72]	; (800b580 <dhcp_inc_pcb_refcount+0x9c>)
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff fe34 	bl	800b1a4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800b53c:	4b0c      	ldr	r3, [pc, #48]	; (800b570 <dhcp_inc_pcb_refcount+0x8c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2243      	movs	r2, #67	; 0x43
 800b542:	490f      	ldr	r1, [pc, #60]	; (800b580 <dhcp_inc_pcb_refcount+0x9c>)
 800b544:	4618      	mov	r0, r3
 800b546:	f7ff feb5 	bl	800b2b4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800b54a:	4b09      	ldr	r3, [pc, #36]	; (800b570 <dhcp_inc_pcb_refcount+0x8c>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2200      	movs	r2, #0
 800b550:	490c      	ldr	r1, [pc, #48]	; (800b584 <dhcp_inc_pcb_refcount+0xa0>)
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff ff1c 	bl	800b390 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800b558:	4b04      	ldr	r3, [pc, #16]	; (800b56c <dhcp_inc_pcb_refcount+0x88>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	4b02      	ldr	r3, [pc, #8]	; (800b56c <dhcp_inc_pcb_refcount+0x88>)
 800b562:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20000114 	.word	0x20000114
 800b570:	20000110 	.word	0x20000110
 800b574:	08012ba8 	.word	0x08012ba8
 800b578:	08012be0 	.word	0x08012be0
 800b57c:	08012c08 	.word	0x08012c08
 800b580:	08013704 	.word	0x08013704
 800b584:	0800cda1 	.word	0x0800cda1

0800b588 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800b58c:	4b0e      	ldr	r3, [pc, #56]	; (800b5c8 <dhcp_dec_pcb_refcount+0x40>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d105      	bne.n	800b5a0 <dhcp_dec_pcb_refcount+0x18>
 800b594:	4b0d      	ldr	r3, [pc, #52]	; (800b5cc <dhcp_dec_pcb_refcount+0x44>)
 800b596:	22ff      	movs	r2, #255	; 0xff
 800b598:	490d      	ldr	r1, [pc, #52]	; (800b5d0 <dhcp_dec_pcb_refcount+0x48>)
 800b59a:	480e      	ldr	r0, [pc, #56]	; (800b5d4 <dhcp_dec_pcb_refcount+0x4c>)
 800b59c:	f004 fa4a 	bl	800fa34 <iprintf>
  dhcp_pcb_refcount--;
 800b5a0:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <dhcp_dec_pcb_refcount+0x40>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	4b07      	ldr	r3, [pc, #28]	; (800b5c8 <dhcp_dec_pcb_refcount+0x40>)
 800b5aa:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800b5ac:	4b06      	ldr	r3, [pc, #24]	; (800b5c8 <dhcp_dec_pcb_refcount+0x40>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d107      	bne.n	800b5c4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800b5b4:	4b08      	ldr	r3, [pc, #32]	; (800b5d8 <dhcp_dec_pcb_refcount+0x50>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff ff09 	bl	800b3d0 <udp_remove>
    dhcp_pcb = NULL;
 800b5be:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <dhcp_dec_pcb_refcount+0x50>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]
  }
}
 800b5c4:	bf00      	nop
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	20000114 	.word	0x20000114
 800b5cc:	08012ba8 	.word	0x08012ba8
 800b5d0:	08012c30 	.word	0x08012c30
 800b5d4:	08012c08 	.word	0x08012c08
 800b5d8:	20000110 	.word	0x20000110

0800b5dc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800b5ea:	210c      	movs	r1, #12
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f001 f819 	bl	800c624 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b5f2:	4b06      	ldr	r3, [pc, #24]	; (800b60c <dhcp_handle_nak+0x30>)
 800b5f4:	4a05      	ldr	r2, [pc, #20]	; (800b60c <dhcp_handle_nak+0x30>)
 800b5f6:	4905      	ldr	r1, [pc, #20]	; (800b60c <dhcp_handle_nak+0x30>)
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f7f9 f905 	bl	8004808 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fc0c 	bl	800be1c <dhcp_discover>
}
 800b604:	bf00      	nop
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	08013704 	.word	0x08013704

0800b610 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800b61e:	2108      	movs	r1, #8
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 ffff 	bl	800c624 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	331c      	adds	r3, #28
 800b62a:	2200      	movs	r2, #0
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f002 fafe 	bl	800dc30 <etharp_query>
 800b634:	4603      	mov	r3, r0
 800b636:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	799b      	ldrb	r3, [r3, #6]
 800b63c:	2bff      	cmp	r3, #255	; 0xff
 800b63e:	d005      	beq.n	800b64c <dhcp_check+0x3c>
    dhcp->tries++;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	799b      	ldrb	r3, [r3, #6]
 800b644:	3301      	adds	r3, #1
 800b646:	b2da      	uxtb	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800b64c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b650:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b652:	893b      	ldrh	r3, [r7, #8]
 800b654:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b658:	4a06      	ldr	r2, [pc, #24]	; (800b674 <dhcp_check+0x64>)
 800b65a:	fb82 1203 	smull	r1, r2, r2, r3
 800b65e:	1152      	asrs	r2, r2, #5
 800b660:	17db      	asrs	r3, r3, #31
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	b29a      	uxth	r2, r3
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800b66a:	bf00      	nop
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	10624dd3 	.word	0x10624dd3

0800b678 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b686:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800b688:	4b0c      	ldr	r3, [pc, #48]	; (800b6bc <dhcp_handle_offer+0x44>)
 800b68a:	789b      	ldrb	r3, [r3, #2]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d011      	beq.n	800b6b4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800b696:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <dhcp_handle_offer+0x48>)
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7f8 fa85 	bl	8003baa <lwip_htonl>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	691a      	ldr	r2, [r3, #16]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f808 	bl	800b6c4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800b6b4:	bf00      	nop
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20006544 	.word	0x20006544
 800b6c0:	2000654c 	.word	0x2000654c

0800b6c4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800b6c4:	b5b0      	push	{r4, r5, r7, lr}
 800b6c6:	b08a      	sub	sp, #40	; 0x28
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <dhcp_select+0x22>
 800b6d2:	4b71      	ldr	r3, [pc, #452]	; (800b898 <dhcp_select+0x1d4>)
 800b6d4:	f240 1277 	movw	r2, #375	; 0x177
 800b6d8:	4970      	ldr	r1, [pc, #448]	; (800b89c <dhcp_select+0x1d8>)
 800b6da:	4871      	ldr	r0, [pc, #452]	; (800b8a0 <dhcp_select+0x1dc>)
 800b6dc:	f004 f9aa 	bl	800fa34 <iprintf>
 800b6e0:	f06f 030f 	mvn.w	r3, #15
 800b6e4:	e0d3      	b.n	800b88e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d109      	bne.n	800b706 <dhcp_select+0x42>
 800b6f2:	4b69      	ldr	r3, [pc, #420]	; (800b898 <dhcp_select+0x1d4>)
 800b6f4:	f240 1279 	movw	r2, #377	; 0x179
 800b6f8:	496a      	ldr	r1, [pc, #424]	; (800b8a4 <dhcp_select+0x1e0>)
 800b6fa:	4869      	ldr	r0, [pc, #420]	; (800b8a0 <dhcp_select+0x1dc>)
 800b6fc:	f004 f99a 	bl	800fa34 <iprintf>
 800b700:	f06f 0305 	mvn.w	r3, #5
 800b704:	e0c3      	b.n	800b88e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800b706:	2101      	movs	r1, #1
 800b708:	69b8      	ldr	r0, [r7, #24]
 800b70a:	f000 ff8b 	bl	800c624 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800b70e:	f107 030c 	add.w	r3, r7, #12
 800b712:	2203      	movs	r2, #3
 800b714:	69b9      	ldr	r1, [r7, #24]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f001 fc0e 	bl	800cf38 <dhcp_create_msg>
 800b71c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	f000 8085 	beq.w	800b830 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b72c:	89b8      	ldrh	r0, [r7, #12]
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b734:	2302      	movs	r3, #2
 800b736:	2239      	movs	r2, #57	; 0x39
 800b738:	f000 ff8e 	bl	800c658 <dhcp_option>
 800b73c:	4603      	mov	r3, r0
 800b73e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800b740:	89b8      	ldrh	r0, [r7, #12]
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b74c:	461a      	mov	r2, r3
 800b74e:	f000 ffdd 	bl	800c70c <dhcp_option_short>
 800b752:	4603      	mov	r3, r0
 800b754:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800b756:	89b8      	ldrh	r0, [r7, #12]
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b75e:	2304      	movs	r3, #4
 800b760:	2232      	movs	r2, #50	; 0x32
 800b762:	f000 ff79 	bl	800c658 <dhcp_option>
 800b766:	4603      	mov	r3, r0
 800b768:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b76a:	89bc      	ldrh	r4, [r7, #12]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	4618      	mov	r0, r3
 800b778:	f7f8 fa17 	bl	8003baa <lwip_htonl>
 800b77c:	4603      	mov	r3, r0
 800b77e:	461a      	mov	r2, r3
 800b780:	4629      	mov	r1, r5
 800b782:	4620      	mov	r0, r4
 800b784:	f000 fff4 	bl	800c770 <dhcp_option_long>
 800b788:	4603      	mov	r3, r0
 800b78a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800b78c:	89b8      	ldrh	r0, [r7, #12]
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b794:	2304      	movs	r3, #4
 800b796:	2236      	movs	r2, #54	; 0x36
 800b798:	f000 ff5e 	bl	800c658 <dhcp_option>
 800b79c:	4603      	mov	r3, r0
 800b79e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800b7a0:	89bc      	ldrh	r4, [r7, #12]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	699b      	ldr	r3, [r3, #24]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7f8 f9fc 	bl	8003baa <lwip_htonl>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 ffd9 	bl	800c770 <dhcp_option_long>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b7c2:	89b8      	ldrh	r0, [r7, #12]
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	2237      	movs	r2, #55	; 0x37
 800b7ce:	f000 ff43 	bl	800c658 <dhcp_option>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	77bb      	strb	r3, [r7, #30]
 800b7da:	e00e      	b.n	800b7fa <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800b7dc:	89b8      	ldrh	r0, [r7, #12]
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b7e4:	7fbb      	ldrb	r3, [r7, #30]
 800b7e6:	4a30      	ldr	r2, [pc, #192]	; (800b8a8 <dhcp_select+0x1e4>)
 800b7e8:	5cd3      	ldrb	r3, [r2, r3]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f000 ff68 	bl	800c6c0 <dhcp_option_byte>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b7f4:	7fbb      	ldrb	r3, [r7, #30]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	77bb      	strb	r3, [r7, #30]
 800b7fa:	7fbb      	ldrb	r3, [r7, #30]
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d9ed      	bls.n	800b7dc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b800:	89b8      	ldrh	r0, [r7, #12]
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	33f0      	adds	r3, #240	; 0xf0
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	4619      	mov	r1, r3
 800b80a:	f001 fc6b 	bl	800d0e4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800b80e:	4b27      	ldr	r3, [pc, #156]	; (800b8ac <dhcp_select+0x1e8>)
 800b810:	6818      	ldr	r0, [r3, #0]
 800b812:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <dhcp_select+0x1ec>)
 800b814:	9301      	str	r3, [sp, #4]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	2343      	movs	r3, #67	; 0x43
 800b81c:	4a25      	ldr	r2, [pc, #148]	; (800b8b4 <dhcp_select+0x1f0>)
 800b81e:	6979      	ldr	r1, [r7, #20]
 800b820:	f7ff fbda 	bl	800afd8 <udp_sendto_if_src>
 800b824:	4603      	mov	r3, r0
 800b826:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800b828:	6978      	ldr	r0, [r7, #20]
 800b82a:	f7f9 fc61 	bl	80050f0 <pbuf_free>
 800b82e:	e001      	b.n	800b834 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800b830:	23ff      	movs	r3, #255	; 0xff
 800b832:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	799b      	ldrb	r3, [r3, #6]
 800b838:	2bff      	cmp	r3, #255	; 0xff
 800b83a:	d005      	beq.n	800b848 <dhcp_select+0x184>
    dhcp->tries++;
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	799b      	ldrb	r3, [r3, #6]
 800b840:	3301      	adds	r3, #1
 800b842:	b2da      	uxtb	r2, r3
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	799b      	ldrb	r3, [r3, #6]
 800b84c:	2b05      	cmp	r3, #5
 800b84e:	d80d      	bhi.n	800b86c <dhcp_select+0x1a8>
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	799b      	ldrb	r3, [r3, #6]
 800b854:	461a      	mov	r2, r3
 800b856:	2301      	movs	r3, #1
 800b858:	4093      	lsls	r3, r2
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	461a      	mov	r2, r3
 800b85e:	0152      	lsls	r2, r2, #5
 800b860:	1ad2      	subs	r2, r2, r3
 800b862:	0092      	lsls	r2, r2, #2
 800b864:	4413      	add	r3, r2
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	b29b      	uxth	r3, r3
 800b86a:	e001      	b.n	800b870 <dhcp_select+0x1ac>
 800b86c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b870:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b872:	89fb      	ldrh	r3, [r7, #14]
 800b874:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b878:	4a0f      	ldr	r2, [pc, #60]	; (800b8b8 <dhcp_select+0x1f4>)
 800b87a:	fb82 1203 	smull	r1, r2, r2, r3
 800b87e:	1152      	asrs	r2, r2, #5
 800b880:	17db      	asrs	r3, r3, #31
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	b29a      	uxth	r2, r3
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b88a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3720      	adds	r7, #32
 800b892:	46bd      	mov	sp, r7
 800b894:	bdb0      	pop	{r4, r5, r7, pc}
 800b896:	bf00      	nop
 800b898:	08012ba8 	.word	0x08012ba8
 800b89c:	08012c54 	.word	0x08012c54
 800b8a0:	08012c08 	.word	0x08012c08
 800b8a4:	08012c70 	.word	0x08012c70
 800b8a8:	20000014 	.word	0x20000014
 800b8ac:	20000110 	.word	0x20000110
 800b8b0:	08013704 	.word	0x08013704
 800b8b4:	08013708 	.word	0x08013708
 800b8b8:	10624dd3 	.word	0x10624dd3

0800b8bc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800b8c2:	4b27      	ldr	r3, [pc, #156]	; (800b960 <dhcp_coarse_tmr+0xa4>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	607b      	str	r3, [r7, #4]
 800b8c8:	e042      	b.n	800b950 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ce:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d039      	beq.n	800b94a <dhcp_coarse_tmr+0x8e>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	795b      	ldrb	r3, [r3, #5]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d035      	beq.n	800b94a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	8a9b      	ldrh	r3, [r3, #20]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d012      	beq.n	800b90c <dhcp_coarse_tmr+0x50>
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	8a5b      	ldrh	r3, [r3, #18]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	825a      	strh	r2, [r3, #18]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	8a5a      	ldrh	r2, [r3, #18]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	8a9b      	ldrh	r3, [r3, #20]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d106      	bne.n	800b90c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fdf6 	bl	800c4f0 <dhcp_release_and_stop>
        dhcp_start(netif);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f969 	bl	800bbdc <dhcp_start>
 800b90a:	e01e      	b.n	800b94a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	8a1b      	ldrh	r3, [r3, #16]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00b      	beq.n	800b92c <dhcp_coarse_tmr+0x70>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	8a1b      	ldrh	r3, [r3, #16]
 800b918:	1e5a      	subs	r2, r3, #1
 800b91a:	b291      	uxth	r1, r2
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	8211      	strh	r1, [r2, #16]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d103      	bne.n	800b92c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f8c6 	bl	800bab6 <dhcp_t2_timeout>
 800b92a:	e00e      	b.n	800b94a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	89db      	ldrh	r3, [r3, #14]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00a      	beq.n	800b94a <dhcp_coarse_tmr+0x8e>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	89db      	ldrh	r3, [r3, #14]
 800b938:	1e5a      	subs	r2, r3, #1
 800b93a:	b291      	uxth	r1, r2
 800b93c:	683a      	ldr	r2, [r7, #0]
 800b93e:	81d1      	strh	r1, [r2, #14]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d102      	bne.n	800b94a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f888 	bl	800ba5a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	607b      	str	r3, [r7, #4]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1b9      	bne.n	800b8ca <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800b956:	bf00      	nop
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	20006518 	.word	0x20006518

0800b964 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800b96a:	4b16      	ldr	r3, [pc, #88]	; (800b9c4 <dhcp_fine_tmr+0x60>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	607b      	str	r3, [r7, #4]
 800b970:	e020      	b.n	800b9b4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b976:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d017      	beq.n	800b9ae <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	891b      	ldrh	r3, [r3, #8]
 800b982:	2b01      	cmp	r3, #1
 800b984:	d906      	bls.n	800b994 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	891b      	ldrh	r3, [r3, #8]
 800b98a:	3b01      	subs	r3, #1
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	811a      	strh	r2, [r3, #8]
 800b992:	e00c      	b.n	800b9ae <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	891b      	ldrh	r3, [r3, #8]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d108      	bne.n	800b9ae <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	891b      	ldrh	r3, [r3, #8]
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f80d 	bl	800b9c8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	607b      	str	r3, [r7, #4]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1db      	bne.n	800b972 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800b9ba:	bf00      	nop
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20006518 	.word	0x20006518

0800b9c8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	795b      	ldrb	r3, [r3, #5]
 800b9da:	2b0c      	cmp	r3, #12
 800b9dc:	d003      	beq.n	800b9e6 <dhcp_timeout+0x1e>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	795b      	ldrb	r3, [r3, #5]
 800b9e2:	2b06      	cmp	r3, #6
 800b9e4:	d103      	bne.n	800b9ee <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fa18 	bl	800be1c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800b9ec:	e031      	b.n	800ba52 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	795b      	ldrb	r3, [r3, #5]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d10e      	bne.n	800ba14 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	799b      	ldrb	r3, [r3, #6]
 800b9fa:	2b05      	cmp	r3, #5
 800b9fc:	d803      	bhi.n	800ba06 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7ff fe60 	bl	800b6c4 <dhcp_select>
}
 800ba04:	e025      	b.n	800ba52 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fd72 	bl	800c4f0 <dhcp_release_and_stop>
      dhcp_start(netif);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f8e5 	bl	800bbdc <dhcp_start>
}
 800ba12:	e01e      	b.n	800ba52 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	795b      	ldrb	r3, [r3, #5]
 800ba18:	2b08      	cmp	r3, #8
 800ba1a:	d10b      	bne.n	800ba34 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	799b      	ldrb	r3, [r3, #6]
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d803      	bhi.n	800ba2c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff fdf3 	bl	800b610 <dhcp_check>
}
 800ba2a:	e012      	b.n	800ba52 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fa97 	bl	800bf60 <dhcp_bind>
}
 800ba32:	e00e      	b.n	800ba52 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	795b      	ldrb	r3, [r3, #5]
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d10a      	bne.n	800ba52 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	799b      	ldrb	r3, [r3, #6]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d803      	bhi.n	800ba4c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fc9d 	bl	800c384 <dhcp_reboot>
}
 800ba4a:	e002      	b.n	800ba52 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f9e5 	bl	800be1c <dhcp_discover>
}
 800ba52:	bf00      	nop
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba66:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	795b      	ldrb	r3, [r3, #5]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d007      	beq.n	800ba80 <dhcp_t1_timeout+0x26>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	795b      	ldrb	r3, [r3, #5]
 800ba74:	2b0a      	cmp	r3, #10
 800ba76:	d003      	beq.n	800ba80 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ba7c:	2b05      	cmp	r3, #5
 800ba7e:	d116      	bne.n	800baae <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fb47 	bl	800c114 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	899b      	ldrh	r3, [r3, #12]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	8a5b      	ldrh	r3, [r3, #18]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	dd0b      	ble.n	800baae <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	899b      	ldrh	r3, [r3, #12]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	8a5b      	ldrh	r3, [r3, #18]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	0fda      	lsrs	r2, r3, #31
 800baa4:	4413      	add	r3, r2
 800baa6:	105b      	asrs	r3, r3, #1
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800baae:	bf00      	nop
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	795b      	ldrb	r3, [r3, #5]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d00b      	beq.n	800bae4 <dhcp_t2_timeout+0x2e>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	795b      	ldrb	r3, [r3, #5]
 800bad0:	2b0a      	cmp	r3, #10
 800bad2:	d007      	beq.n	800bae4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bad8:	2b05      	cmp	r3, #5
 800bada:	d003      	beq.n	800bae4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	795b      	ldrb	r3, [r3, #5]
 800bae0:	2b04      	cmp	r3, #4
 800bae2:	d116      	bne.n	800bb12 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fbb1 	bl	800c24c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	8a9b      	ldrh	r3, [r3, #20]
 800baee:	461a      	mov	r2, r3
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	8a5b      	ldrh	r3, [r3, #18]
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	dd0b      	ble.n	800bb12 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	8a9b      	ldrh	r3, [r3, #20]
 800bafe:	461a      	mov	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	8a5b      	ldrh	r3, [r3, #18]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	0fda      	lsrs	r2, r3, #31
 800bb08:	4413      	add	r3, r2
 800bb0a:	105b      	asrs	r3, r3, #1
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800bb12:	bf00      	nop
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
	...

0800bb1c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb2a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800bb38:	4b26      	ldr	r3, [pc, #152]	; (800bbd4 <dhcp_handle_ack+0xb8>)
 800bb3a:	78db      	ldrb	r3, [r3, #3]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800bb40:	4b25      	ldr	r3, [pc, #148]	; (800bbd8 <dhcp_handle_ack+0xbc>)
 800bb42:	68da      	ldr	r2, [r3, #12]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800bb48:	4b22      	ldr	r3, [pc, #136]	; (800bbd4 <dhcp_handle_ack+0xb8>)
 800bb4a:	791b      	ldrb	r3, [r3, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d004      	beq.n	800bb5a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800bb50:	4b21      	ldr	r3, [pc, #132]	; (800bbd8 <dhcp_handle_ack+0xbc>)
 800bb52:	691a      	ldr	r2, [r3, #16]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	62da      	str	r2, [r3, #44]	; 0x2c
 800bb58:	e004      	b.n	800bb64 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5e:	085a      	lsrs	r2, r3, #1
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800bb64:	4b1b      	ldr	r3, [pc, #108]	; (800bbd4 <dhcp_handle_ack+0xb8>)
 800bb66:	795b      	ldrb	r3, [r3, #5]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800bb6c:	4b1a      	ldr	r3, [pc, #104]	; (800bbd8 <dhcp_handle_ack+0xbc>)
 800bb6e:	695a      	ldr	r2, [r3, #20]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	631a      	str	r2, [r3, #48]	; 0x30
 800bb74:	e007      	b.n	800bb86 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	00db      	lsls	r3, r3, #3
 800bb7e:	1a9b      	subs	r3, r3, r2
 800bb80:	08da      	lsrs	r2, r3, #3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	691a      	ldr	r2, [r3, #16]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800bb8e:	4b11      	ldr	r3, [pc, #68]	; (800bbd4 <dhcp_handle_ack+0xb8>)
 800bb90:	799b      	ldrb	r3, [r3, #6]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00b      	beq.n	800bbae <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800bb96:	4b10      	ldr	r3, [pc, #64]	; (800bbd8 <dhcp_handle_ack+0xbc>)
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f8 f805 	bl	8003baa <lwip_htonl>
 800bba0:	4602      	mov	r2, r0
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	71da      	strb	r2, [r3, #7]
 800bbac:	e002      	b.n	800bbb4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800bbb4:	4b07      	ldr	r3, [pc, #28]	; (800bbd4 <dhcp_handle_ack+0xb8>)
 800bbb6:	79db      	ldrb	r3, [r3, #7]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d007      	beq.n	800bbcc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800bbbc:	4b06      	ldr	r3, [pc, #24]	; (800bbd8 <dhcp_handle_ack+0xbc>)
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7f7 fff2 	bl	8003baa <lwip_htonl>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800bbcc:	bf00      	nop
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20006544 	.word	0x20006544
 800bbd8:	2000654c 	.word	0x2000654c

0800bbdc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d109      	bne.n	800bbfe <dhcp_start+0x22>
 800bbea:	4b37      	ldr	r3, [pc, #220]	; (800bcc8 <dhcp_start+0xec>)
 800bbec:	f240 22e7 	movw	r2, #743	; 0x2e7
 800bbf0:	4936      	ldr	r1, [pc, #216]	; (800bccc <dhcp_start+0xf0>)
 800bbf2:	4837      	ldr	r0, [pc, #220]	; (800bcd0 <dhcp_start+0xf4>)
 800bbf4:	f003 ff1e 	bl	800fa34 <iprintf>
 800bbf8:	f06f 030f 	mvn.w	r3, #15
 800bbfc:	e060      	b.n	800bcc0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc04:	f003 0301 	and.w	r3, r3, #1
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d109      	bne.n	800bc20 <dhcp_start+0x44>
 800bc0c:	4b2e      	ldr	r3, [pc, #184]	; (800bcc8 <dhcp_start+0xec>)
 800bc0e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800bc12:	4930      	ldr	r1, [pc, #192]	; (800bcd4 <dhcp_start+0xf8>)
 800bc14:	482e      	ldr	r0, [pc, #184]	; (800bcd0 <dhcp_start+0xf4>)
 800bc16:	f003 ff0d 	bl	800fa34 <iprintf>
 800bc1a:	f06f 030f 	mvn.w	r3, #15
 800bc1e:	e04f      	b.n	800bcc0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc2a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800bc2e:	d202      	bcs.n	800bc36 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800bc30:	f04f 33ff 	mov.w	r3, #4294967295
 800bc34:	e044      	b.n	800bcc0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10d      	bne.n	800bc58 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800bc3c:	2034      	movs	r0, #52	; 0x34
 800bc3e:	f7f8 fa87 	bl	8004150 <mem_malloc>
 800bc42:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d102      	bne.n	800bc50 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800bc4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc4e:	e037      	b.n	800bcc0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	625a      	str	r2, [r3, #36]	; 0x24
 800bc56:	e005      	b.n	800bc64 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	791b      	ldrb	r3, [r3, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800bc60:	f7ff fc92 	bl	800b588 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800bc64:	2234      	movs	r2, #52	; 0x34
 800bc66:	2100      	movs	r1, #0
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f003 fedb 	bl	800fa24 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800bc6e:	f7ff fc39 	bl	800b4e4 <dhcp_inc_pcb_refcount>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d002      	beq.n	800bc7e <dhcp_start+0xa2>
    return ERR_MEM;
 800bc78:	f04f 33ff 	mov.w	r3, #4294967295
 800bc7c:	e020      	b.n	800bcc0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2201      	movs	r2, #1
 800bc82:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bc8a:	f003 0304 	and.w	r3, r3, #4
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d105      	bne.n	800bc9e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800bc92:	2102      	movs	r1, #2
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f000 fcc5 	bl	800c624 <dhcp_set_state>
    return ERR_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	e010      	b.n	800bcc0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f8bc 	bl	800be1c <dhcp_discover>
 800bca4:	4603      	mov	r3, r0
 800bca6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800bca8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d005      	beq.n	800bcbc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 fc1d 	bl	800c4f0 <dhcp_release_and_stop>
    return ERR_MEM;
 800bcb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcba:	e001      	b.n	800bcc0 <dhcp_start+0xe4>
  }
  return result;
 800bcbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	08012ba8 	.word	0x08012ba8
 800bccc:	08012c8c 	.word	0x08012c8c
 800bcd0:	08012c08 	.word	0x08012c08
 800bcd4:	08012cd0 	.word	0x08012cd0

0800bcd8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d107      	bne.n	800bcf8 <dhcp_arp_reply+0x20>
 800bce8:	4b0e      	ldr	r3, [pc, #56]	; (800bd24 <dhcp_arp_reply+0x4c>)
 800bcea:	f240 328b 	movw	r2, #907	; 0x38b
 800bcee:	490e      	ldr	r1, [pc, #56]	; (800bd28 <dhcp_arp_reply+0x50>)
 800bcf0:	480e      	ldr	r0, [pc, #56]	; (800bd2c <dhcp_arp_reply+0x54>)
 800bcf2:	f003 fe9f 	bl	800fa34 <iprintf>
 800bcf6:	e012      	b.n	800bd1e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00c      	beq.n	800bd1e <dhcp_arp_reply+0x46>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	795b      	ldrb	r3, [r3, #5]
 800bd08:	2b08      	cmp	r3, #8
 800bd0a:	d108      	bne.n	800bd1e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	69db      	ldr	r3, [r3, #28]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d102      	bne.n	800bd1e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f809 	bl	800bd30 <dhcp_decline>
    }
  }
}
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	08012ba8 	.word	0x08012ba8
 800bd28:	08012c8c 	.word	0x08012c8c
 800bd2c:	08012c08 	.word	0x08012c08

0800bd30 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800bd30:	b5b0      	push	{r4, r5, r7, lr}
 800bd32:	b08a      	sub	sp, #40	; 0x28
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800bd3e:	210c      	movs	r1, #12
 800bd40:	69b8      	ldr	r0, [r7, #24]
 800bd42:	f000 fc6f 	bl	800c624 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800bd46:	f107 030c 	add.w	r3, r7, #12
 800bd4a:	2204      	movs	r2, #4
 800bd4c:	69b9      	ldr	r1, [r7, #24]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f001 f8f2 	bl	800cf38 <dhcp_create_msg>
 800bd54:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d035      	beq.n	800bdc8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800bd62:	89b8      	ldrh	r0, [r7, #12]
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bd6a:	2304      	movs	r3, #4
 800bd6c:	2232      	movs	r2, #50	; 0x32
 800bd6e:	f000 fc73 	bl	800c658 <dhcp_option>
 800bd72:	4603      	mov	r3, r0
 800bd74:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800bd76:	89bc      	ldrh	r4, [r7, #12]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	69db      	ldr	r3, [r3, #28]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7f7 ff11 	bl	8003baa <lwip_htonl>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 fcee 	bl	800c770 <dhcp_option_long>
 800bd94:	4603      	mov	r3, r0
 800bd96:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bd98:	89b8      	ldrh	r0, [r7, #12]
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	33f0      	adds	r3, #240	; 0xf0
 800bd9e:	697a      	ldr	r2, [r7, #20]
 800bda0:	4619      	mov	r1, r3
 800bda2:	f001 f99f 	bl	800d0e4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800bda6:	4b19      	ldr	r3, [pc, #100]	; (800be0c <dhcp_decline+0xdc>)
 800bda8:	6818      	ldr	r0, [r3, #0]
 800bdaa:	4b19      	ldr	r3, [pc, #100]	; (800be10 <dhcp_decline+0xe0>)
 800bdac:	9301      	str	r3, [sp, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	2343      	movs	r3, #67	; 0x43
 800bdb4:	4a17      	ldr	r2, [pc, #92]	; (800be14 <dhcp_decline+0xe4>)
 800bdb6:	6979      	ldr	r1, [r7, #20]
 800bdb8:	f7ff f90e 	bl	800afd8 <udp_sendto_if_src>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800bdc0:	6978      	ldr	r0, [r7, #20]
 800bdc2:	f7f9 f995 	bl	80050f0 <pbuf_free>
 800bdc6:	e001      	b.n	800bdcc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800bdc8:	23ff      	movs	r3, #255	; 0xff
 800bdca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	799b      	ldrb	r3, [r3, #6]
 800bdd0:	2bff      	cmp	r3, #255	; 0xff
 800bdd2:	d005      	beq.n	800bde0 <dhcp_decline+0xb0>
    dhcp->tries++;
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	799b      	ldrb	r3, [r3, #6]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	b2da      	uxtb	r2, r3
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800bde0:	f242 7310 	movw	r3, #10000	; 0x2710
 800bde4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bde6:	89fb      	ldrh	r3, [r7, #14]
 800bde8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bdec:	4a0a      	ldr	r2, [pc, #40]	; (800be18 <dhcp_decline+0xe8>)
 800bdee:	fb82 1203 	smull	r1, r2, r2, r3
 800bdf2:	1152      	asrs	r2, r2, #5
 800bdf4:	17db      	asrs	r3, r3, #31
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bdfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3720      	adds	r7, #32
 800be06:	46bd      	mov	sp, r7
 800be08:	bdb0      	pop	{r4, r5, r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20000110 	.word	0x20000110
 800be10:	08013704 	.word	0x08013704
 800be14:	08013708 	.word	0x08013708
 800be18:	10624dd3 	.word	0x10624dd3

0800be1c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b08a      	sub	sp, #40	; 0x28
 800be20:	af02      	add	r7, sp, #8
 800be22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	2200      	movs	r2, #0
 800be32:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800be34:	2106      	movs	r1, #6
 800be36:	69b8      	ldr	r0, [r7, #24]
 800be38:	f000 fbf4 	bl	800c624 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800be3c:	f107 0308 	add.w	r3, r7, #8
 800be40:	2201      	movs	r2, #1
 800be42:	69b9      	ldr	r1, [r7, #24]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f001 f877 	bl	800cf38 <dhcp_create_msg>
 800be4a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d04b      	beq.n	800beea <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800be58:	8938      	ldrh	r0, [r7, #8]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800be60:	2302      	movs	r3, #2
 800be62:	2239      	movs	r2, #57	; 0x39
 800be64:	f000 fbf8 	bl	800c658 <dhcp_option>
 800be68:	4603      	mov	r3, r0
 800be6a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800be6c:	8938      	ldrh	r0, [r7, #8]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be78:	461a      	mov	r2, r3
 800be7a:	f000 fc47 	bl	800c70c <dhcp_option_short>
 800be7e:	4603      	mov	r3, r0
 800be80:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800be82:	8938      	ldrh	r0, [r7, #8]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800be8a:	2303      	movs	r3, #3
 800be8c:	2237      	movs	r2, #55	; 0x37
 800be8e:	f000 fbe3 	bl	800c658 <dhcp_option>
 800be92:	4603      	mov	r3, r0
 800be94:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800be96:	2300      	movs	r3, #0
 800be98:	77fb      	strb	r3, [r7, #31]
 800be9a:	e00e      	b.n	800beba <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800be9c:	8938      	ldrh	r0, [r7, #8]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bea4:	7ffb      	ldrb	r3, [r7, #31]
 800bea6:	4a29      	ldr	r2, [pc, #164]	; (800bf4c <dhcp_discover+0x130>)
 800bea8:	5cd3      	ldrb	r3, [r2, r3]
 800beaa:	461a      	mov	r2, r3
 800beac:	f000 fc08 	bl	800c6c0 <dhcp_option_byte>
 800beb0:	4603      	mov	r3, r0
 800beb2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800beb4:	7ffb      	ldrb	r3, [r7, #31]
 800beb6:	3301      	adds	r3, #1
 800beb8:	77fb      	strb	r3, [r7, #31]
 800beba:	7ffb      	ldrb	r3, [r7, #31]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d9ed      	bls.n	800be9c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bec0:	8938      	ldrh	r0, [r7, #8]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	33f0      	adds	r3, #240	; 0xf0
 800bec6:	693a      	ldr	r2, [r7, #16]
 800bec8:	4619      	mov	r1, r3
 800beca:	f001 f90b 	bl	800d0e4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800bece:	4b20      	ldr	r3, [pc, #128]	; (800bf50 <dhcp_discover+0x134>)
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	4b20      	ldr	r3, [pc, #128]	; (800bf54 <dhcp_discover+0x138>)
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	2343      	movs	r3, #67	; 0x43
 800bedc:	4a1e      	ldr	r2, [pc, #120]	; (800bf58 <dhcp_discover+0x13c>)
 800bede:	6939      	ldr	r1, [r7, #16]
 800bee0:	f7ff f87a 	bl	800afd8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800bee4:	6938      	ldr	r0, [r7, #16]
 800bee6:	f7f9 f903 	bl	80050f0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	799b      	ldrb	r3, [r3, #6]
 800beee:	2bff      	cmp	r3, #255	; 0xff
 800bef0:	d005      	beq.n	800befe <dhcp_discover+0xe2>
    dhcp->tries++;
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	799b      	ldrb	r3, [r3, #6]
 800bef6:	3301      	adds	r3, #1
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	799b      	ldrb	r3, [r3, #6]
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	d80d      	bhi.n	800bf22 <dhcp_discover+0x106>
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	799b      	ldrb	r3, [r3, #6]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	4093      	lsls	r3, r2
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	461a      	mov	r2, r3
 800bf14:	0152      	lsls	r2, r2, #5
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	0092      	lsls	r2, r2, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	00db      	lsls	r3, r3, #3
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	e001      	b.n	800bf26 <dhcp_discover+0x10a>
 800bf22:	f64e 2360 	movw	r3, #60000	; 0xea60
 800bf26:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bf28:	897b      	ldrh	r3, [r7, #10]
 800bf2a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bf2e:	4a0b      	ldr	r2, [pc, #44]	; (800bf5c <dhcp_discover+0x140>)
 800bf30:	fb82 1203 	smull	r1, r2, r2, r3
 800bf34:	1152      	asrs	r2, r2, #5
 800bf36:	17db      	asrs	r3, r3, #31
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bf40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3720      	adds	r7, #32
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20000014 	.word	0x20000014
 800bf50:	20000110 	.word	0x20000110
 800bf54:	08013704 	.word	0x08013704
 800bf58:	08013708 	.word	0x08013708
 800bf5c:	10624dd3 	.word	0x10624dd3

0800bf60 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b088      	sub	sp, #32
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d107      	bne.n	800bf7e <dhcp_bind+0x1e>
 800bf6e:	4b64      	ldr	r3, [pc, #400]	; (800c100 <dhcp_bind+0x1a0>)
 800bf70:	f240 4215 	movw	r2, #1045	; 0x415
 800bf74:	4963      	ldr	r1, [pc, #396]	; (800c104 <dhcp_bind+0x1a4>)
 800bf76:	4864      	ldr	r0, [pc, #400]	; (800c108 <dhcp_bind+0x1a8>)
 800bf78:	f003 fd5c 	bl	800fa34 <iprintf>
 800bf7c:	e0bc      	b.n	800c0f8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d107      	bne.n	800bf9a <dhcp_bind+0x3a>
 800bf8a:	4b5d      	ldr	r3, [pc, #372]	; (800c100 <dhcp_bind+0x1a0>)
 800bf8c:	f240 4217 	movw	r2, #1047	; 0x417
 800bf90:	495e      	ldr	r1, [pc, #376]	; (800c10c <dhcp_bind+0x1ac>)
 800bf92:	485d      	ldr	r0, [pc, #372]	; (800c108 <dhcp_bind+0x1a8>)
 800bf94:	f003 fd4e 	bl	800fa34 <iprintf>
 800bf98:	e0ae      	b.n	800c0f8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa8:	d019      	beq.n	800bfde <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfae:	331e      	adds	r3, #30
 800bfb0:	4a57      	ldr	r2, [pc, #348]	; (800c110 <dhcp_bind+0x1b0>)
 800bfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb6:	095b      	lsrs	r3, r3, #5
 800bfb8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc0:	d302      	bcc.n	800bfc8 <dhcp_bind+0x68>
      timeout = 0xffff;
 800bfc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfc6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	8a9b      	ldrh	r3, [r3, #20]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d102      	bne.n	800bfde <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe6:	d01d      	beq.n	800c024 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfec:	331e      	adds	r3, #30
 800bfee:	4a48      	ldr	r2, [pc, #288]	; (800c110 <dhcp_bind+0x1b0>)
 800bff0:	fba2 2303 	umull	r2, r3, r2, r3
 800bff4:	095b      	lsrs	r3, r3, #5
 800bff6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bffe:	d302      	bcc.n	800c006 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800c000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c004:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	b29a      	uxth	r2, r3
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	895b      	ldrh	r3, [r3, #10]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d102      	bne.n	800c01c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	2201      	movs	r2, #1
 800c01a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	895a      	ldrh	r2, [r3, #10]
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02c:	d01d      	beq.n	800c06a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c032:	331e      	adds	r3, #30
 800c034:	4a36      	ldr	r2, [pc, #216]	; (800c110 <dhcp_bind+0x1b0>)
 800c036:	fba2 2303 	umull	r2, r3, r2, r3
 800c03a:	095b      	lsrs	r3, r3, #5
 800c03c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c044:	d302      	bcc.n	800c04c <dhcp_bind+0xec>
      timeout = 0xffff;
 800c046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c04a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	b29a      	uxth	r2, r3
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	899b      	ldrh	r3, [r3, #12]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d102      	bne.n	800c062 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	2201      	movs	r2, #1
 800c060:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	899a      	ldrh	r2, [r3, #12]
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	895a      	ldrh	r2, [r3, #10]
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	899b      	ldrh	r3, [r3, #12]
 800c072:	429a      	cmp	r2, r3
 800c074:	d306      	bcc.n	800c084 <dhcp_bind+0x124>
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	899b      	ldrh	r3, [r3, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d002      	beq.n	800c084 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	2200      	movs	r2, #0
 800c082:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	79db      	ldrb	r3, [r3, #7]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d003      	beq.n	800c094 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	6a1b      	ldr	r3, [r3, #32]
 800c090:	613b      	str	r3, [r7, #16]
 800c092:	e014      	b.n	800c0be <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	331c      	adds	r3, #28
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800c09c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	db02      	blt.n	800c0aa <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800c0a4:	23ff      	movs	r3, #255	; 0xff
 800c0a6:	613b      	str	r3, [r7, #16]
 800c0a8:	e009      	b.n	800c0be <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800c0aa:	7dfb      	ldrb	r3, [r7, #23]
 800c0ac:	2bbf      	cmp	r3, #191	; 0xbf
 800c0ae:	d903      	bls.n	800c0b8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800c0b0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800c0b4:	613b      	str	r3, [r7, #16]
 800c0b6:	e002      	b.n	800c0be <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800c0b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0bc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d108      	bne.n	800c0dc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	69da      	ldr	r2, [r3, #28]
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c0da:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800c0dc:	210a      	movs	r1, #10
 800c0de:	69b8      	ldr	r0, [r7, #24]
 800c0e0:	f000 faa0 	bl	800c624 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800c0e4:	69bb      	ldr	r3, [r7, #24]
 800c0e6:	f103 011c 	add.w	r1, r3, #28
 800c0ea:	f107 030c 	add.w	r3, r7, #12
 800c0ee:	f107 0210 	add.w	r2, r7, #16
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7f8 fb88 	bl	8004808 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800c0f8:	3720      	adds	r7, #32
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	08012ba8 	.word	0x08012ba8
 800c104:	08012d08 	.word	0x08012d08
 800c108:	08012c08 	.word	0x08012c08
 800c10c:	08012d24 	.word	0x08012d24
 800c110:	88888889 	.word	0x88888889

0800c114 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b08a      	sub	sp, #40	; 0x28
 800c118:	af02      	add	r7, sp, #8
 800c11a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c120:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800c122:	2105      	movs	r1, #5
 800c124:	69b8      	ldr	r0, [r7, #24]
 800c126:	f000 fa7d 	bl	800c624 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c12a:	f107 030c 	add.w	r3, r7, #12
 800c12e:	2203      	movs	r2, #3
 800c130:	69b9      	ldr	r1, [r7, #24]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 ff00 	bl	800cf38 <dhcp_create_msg>
 800c138:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d04e      	beq.n	800c1de <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c146:	89b8      	ldrh	r0, [r7, #12]
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c14e:	2302      	movs	r3, #2
 800c150:	2239      	movs	r2, #57	; 0x39
 800c152:	f000 fa81 	bl	800c658 <dhcp_option>
 800c156:	4603      	mov	r3, r0
 800c158:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c15a:	89b8      	ldrh	r0, [r7, #12]
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c166:	461a      	mov	r2, r3
 800c168:	f000 fad0 	bl	800c70c <dhcp_option_short>
 800c16c:	4603      	mov	r3, r0
 800c16e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c170:	89b8      	ldrh	r0, [r7, #12]
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c178:	2303      	movs	r3, #3
 800c17a:	2237      	movs	r2, #55	; 0x37
 800c17c:	f000 fa6c 	bl	800c658 <dhcp_option>
 800c180:	4603      	mov	r3, r0
 800c182:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c184:	2300      	movs	r3, #0
 800c186:	77bb      	strb	r3, [r7, #30]
 800c188:	e00e      	b.n	800c1a8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c18a:	89b8      	ldrh	r0, [r7, #12]
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c192:	7fbb      	ldrb	r3, [r7, #30]
 800c194:	4a2a      	ldr	r2, [pc, #168]	; (800c240 <dhcp_renew+0x12c>)
 800c196:	5cd3      	ldrb	r3, [r2, r3]
 800c198:	461a      	mov	r2, r3
 800c19a:	f000 fa91 	bl	800c6c0 <dhcp_option_byte>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c1a2:	7fbb      	ldrb	r3, [r7, #30]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	77bb      	strb	r3, [r7, #30]
 800c1a8:	7fbb      	ldrb	r3, [r7, #30]
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d9ed      	bls.n	800c18a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c1ae:	89b8      	ldrh	r0, [r7, #12]
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	33f0      	adds	r3, #240	; 0xf0
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	f000 ff94 	bl	800d0e4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c1bc:	4b21      	ldr	r3, [pc, #132]	; (800c244 <dhcp_renew+0x130>)
 800c1be:	6818      	ldr	r0, [r3, #0]
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	f103 0218 	add.w	r2, r3, #24
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	2343      	movs	r3, #67	; 0x43
 800c1cc:	6979      	ldr	r1, [r7, #20]
 800c1ce:	f7fe fe8f 	bl	800aef0 <udp_sendto_if>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c1d6:	6978      	ldr	r0, [r7, #20]
 800c1d8:	f7f8 ff8a 	bl	80050f0 <pbuf_free>
 800c1dc:	e001      	b.n	800c1e2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c1de:	23ff      	movs	r3, #255	; 0xff
 800c1e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	799b      	ldrb	r3, [r3, #6]
 800c1e6:	2bff      	cmp	r3, #255	; 0xff
 800c1e8:	d005      	beq.n	800c1f6 <dhcp_renew+0xe2>
    dhcp->tries++;
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	799b      	ldrb	r3, [r3, #6]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	799b      	ldrb	r3, [r3, #6]
 800c1fa:	2b09      	cmp	r3, #9
 800c1fc:	d80a      	bhi.n	800c214 <dhcp_renew+0x100>
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	799b      	ldrb	r3, [r3, #6]
 800c202:	b29b      	uxth	r3, r3
 800c204:	461a      	mov	r2, r3
 800c206:	0152      	lsls	r2, r2, #5
 800c208:	1ad2      	subs	r2, r2, r3
 800c20a:	0092      	lsls	r2, r2, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	011b      	lsls	r3, r3, #4
 800c210:	b29b      	uxth	r3, r3
 800c212:	e001      	b.n	800c218 <dhcp_renew+0x104>
 800c214:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c218:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c21a:	89fb      	ldrh	r3, [r7, #14]
 800c21c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c220:	4a09      	ldr	r2, [pc, #36]	; (800c248 <dhcp_renew+0x134>)
 800c222:	fb82 1203 	smull	r1, r2, r2, r3
 800c226:	1152      	asrs	r2, r2, #5
 800c228:	17db      	asrs	r3, r3, #31
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c232:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3720      	adds	r7, #32
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20000014 	.word	0x20000014
 800c244:	20000110 	.word	0x20000110
 800c248:	10624dd3 	.word	0x10624dd3

0800c24c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08a      	sub	sp, #40	; 0x28
 800c250:	af02      	add	r7, sp, #8
 800c252:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c258:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800c25a:	2104      	movs	r1, #4
 800c25c:	69b8      	ldr	r0, [r7, #24]
 800c25e:	f000 f9e1 	bl	800c624 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c262:	f107 030c 	add.w	r3, r7, #12
 800c266:	2203      	movs	r2, #3
 800c268:	69b9      	ldr	r1, [r7, #24]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fe64 	bl	800cf38 <dhcp_create_msg>
 800c270:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d04c      	beq.n	800c312 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c27e:	89b8      	ldrh	r0, [r7, #12]
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c286:	2302      	movs	r3, #2
 800c288:	2239      	movs	r2, #57	; 0x39
 800c28a:	f000 f9e5 	bl	800c658 <dhcp_option>
 800c28e:	4603      	mov	r3, r0
 800c290:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c292:	89b8      	ldrh	r0, [r7, #12]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c29e:	461a      	mov	r2, r3
 800c2a0:	f000 fa34 	bl	800c70c <dhcp_option_short>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c2a8:	89b8      	ldrh	r0, [r7, #12]
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	2237      	movs	r2, #55	; 0x37
 800c2b4:	f000 f9d0 	bl	800c658 <dhcp_option>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c2bc:	2300      	movs	r3, #0
 800c2be:	77bb      	strb	r3, [r7, #30]
 800c2c0:	e00e      	b.n	800c2e0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c2c2:	89b8      	ldrh	r0, [r7, #12]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c2ca:	7fbb      	ldrb	r3, [r7, #30]
 800c2cc:	4a29      	ldr	r2, [pc, #164]	; (800c374 <dhcp_rebind+0x128>)
 800c2ce:	5cd3      	ldrb	r3, [r2, r3]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	f000 f9f5 	bl	800c6c0 <dhcp_option_byte>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c2da:	7fbb      	ldrb	r3, [r7, #30]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	77bb      	strb	r3, [r7, #30]
 800c2e0:	7fbb      	ldrb	r3, [r7, #30]
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d9ed      	bls.n	800c2c2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c2e6:	89b8      	ldrh	r0, [r7, #12]
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	33f0      	adds	r3, #240	; 0xf0
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	f000 fef8 	bl	800d0e4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c2f4:	4b20      	ldr	r3, [pc, #128]	; (800c378 <dhcp_rebind+0x12c>)
 800c2f6:	6818      	ldr	r0, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	2343      	movs	r3, #67	; 0x43
 800c2fe:	4a1f      	ldr	r2, [pc, #124]	; (800c37c <dhcp_rebind+0x130>)
 800c300:	6979      	ldr	r1, [r7, #20]
 800c302:	f7fe fdf5 	bl	800aef0 <udp_sendto_if>
 800c306:	4603      	mov	r3, r0
 800c308:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c30a:	6978      	ldr	r0, [r7, #20]
 800c30c:	f7f8 fef0 	bl	80050f0 <pbuf_free>
 800c310:	e001      	b.n	800c316 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c312:	23ff      	movs	r3, #255	; 0xff
 800c314:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	799b      	ldrb	r3, [r3, #6]
 800c31a:	2bff      	cmp	r3, #255	; 0xff
 800c31c:	d005      	beq.n	800c32a <dhcp_rebind+0xde>
    dhcp->tries++;
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	799b      	ldrb	r3, [r3, #6]
 800c322:	3301      	adds	r3, #1
 800c324:	b2da      	uxtb	r2, r3
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	799b      	ldrb	r3, [r3, #6]
 800c32e:	2b09      	cmp	r3, #9
 800c330:	d80a      	bhi.n	800c348 <dhcp_rebind+0xfc>
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	799b      	ldrb	r3, [r3, #6]
 800c336:	b29b      	uxth	r3, r3
 800c338:	461a      	mov	r2, r3
 800c33a:	0152      	lsls	r2, r2, #5
 800c33c:	1ad2      	subs	r2, r2, r3
 800c33e:	0092      	lsls	r2, r2, #2
 800c340:	4413      	add	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	b29b      	uxth	r3, r3
 800c346:	e001      	b.n	800c34c <dhcp_rebind+0x100>
 800c348:	f242 7310 	movw	r3, #10000	; 0x2710
 800c34c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c34e:	89fb      	ldrh	r3, [r7, #14]
 800c350:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c354:	4a0a      	ldr	r2, [pc, #40]	; (800c380 <dhcp_rebind+0x134>)
 800c356:	fb82 1203 	smull	r1, r2, r2, r3
 800c35a:	1152      	asrs	r2, r2, #5
 800c35c:	17db      	asrs	r3, r3, #31
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	b29a      	uxth	r2, r3
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c366:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3720      	adds	r7, #32
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000014 	.word	0x20000014
 800c378:	20000110 	.word	0x20000110
 800c37c:	08013708 	.word	0x08013708
 800c380:	10624dd3 	.word	0x10624dd3

0800c384 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800c384:	b5b0      	push	{r4, r5, r7, lr}
 800c386:	b08a      	sub	sp, #40	; 0x28
 800c388:	af02      	add	r7, sp, #8
 800c38a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c390:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800c392:	2103      	movs	r1, #3
 800c394:	69b8      	ldr	r0, [r7, #24]
 800c396:	f000 f945 	bl	800c624 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c39a:	f107 030c 	add.w	r3, r7, #12
 800c39e:	2203      	movs	r2, #3
 800c3a0:	69b9      	ldr	r1, [r7, #24]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fdc8 	bl	800cf38 <dhcp_create_msg>
 800c3a8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d066      	beq.n	800c47e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c3b6:	89b8      	ldrh	r0, [r7, #12]
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c3be:	2302      	movs	r3, #2
 800c3c0:	2239      	movs	r2, #57	; 0x39
 800c3c2:	f000 f949 	bl	800c658 <dhcp_option>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800c3ca:	89b8      	ldrh	r0, [r7, #12]
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	33f0      	adds	r3, #240	; 0xf0
 800c3d0:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	f000 f999 	bl	800c70c <dhcp_option_short>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c3de:	89b8      	ldrh	r0, [r7, #12]
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c3e6:	2304      	movs	r3, #4
 800c3e8:	2232      	movs	r2, #50	; 0x32
 800c3ea:	f000 f935 	bl	800c658 <dhcp_option>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c3f2:	89bc      	ldrh	r4, [r7, #12]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7f7 fbd3 	bl	8003baa <lwip_htonl>
 800c404:	4603      	mov	r3, r0
 800c406:	461a      	mov	r2, r3
 800c408:	4629      	mov	r1, r5
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 f9b0 	bl	800c770 <dhcp_option_long>
 800c410:	4603      	mov	r3, r0
 800c412:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c414:	89b8      	ldrh	r0, [r7, #12]
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c41c:	2303      	movs	r3, #3
 800c41e:	2237      	movs	r2, #55	; 0x37
 800c420:	f000 f91a 	bl	800c658 <dhcp_option>
 800c424:	4603      	mov	r3, r0
 800c426:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c428:	2300      	movs	r3, #0
 800c42a:	77bb      	strb	r3, [r7, #30]
 800c42c:	e00e      	b.n	800c44c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c42e:	89b8      	ldrh	r0, [r7, #12]
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c436:	7fbb      	ldrb	r3, [r7, #30]
 800c438:	4a29      	ldr	r2, [pc, #164]	; (800c4e0 <dhcp_reboot+0x15c>)
 800c43a:	5cd3      	ldrb	r3, [r2, r3]
 800c43c:	461a      	mov	r2, r3
 800c43e:	f000 f93f 	bl	800c6c0 <dhcp_option_byte>
 800c442:	4603      	mov	r3, r0
 800c444:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c446:	7fbb      	ldrb	r3, [r7, #30]
 800c448:	3301      	adds	r3, #1
 800c44a:	77bb      	strb	r3, [r7, #30]
 800c44c:	7fbb      	ldrb	r3, [r7, #30]
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d9ed      	bls.n	800c42e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c452:	89b8      	ldrh	r0, [r7, #12]
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	33f0      	adds	r3, #240	; 0xf0
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	4619      	mov	r1, r3
 800c45c:	f000 fe42 	bl	800d0e4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c460:	4b20      	ldr	r3, [pc, #128]	; (800c4e4 <dhcp_reboot+0x160>)
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	2343      	movs	r3, #67	; 0x43
 800c46a:	4a1f      	ldr	r2, [pc, #124]	; (800c4e8 <dhcp_reboot+0x164>)
 800c46c:	6979      	ldr	r1, [r7, #20]
 800c46e:	f7fe fd3f 	bl	800aef0 <udp_sendto_if>
 800c472:	4603      	mov	r3, r0
 800c474:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c476:	6978      	ldr	r0, [r7, #20]
 800c478:	f7f8 fe3a 	bl	80050f0 <pbuf_free>
 800c47c:	e001      	b.n	800c482 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c47e:	23ff      	movs	r3, #255	; 0xff
 800c480:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	799b      	ldrb	r3, [r3, #6]
 800c486:	2bff      	cmp	r3, #255	; 0xff
 800c488:	d005      	beq.n	800c496 <dhcp_reboot+0x112>
    dhcp->tries++;
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	799b      	ldrb	r3, [r3, #6]
 800c48e:	3301      	adds	r3, #1
 800c490:	b2da      	uxtb	r2, r3
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	799b      	ldrb	r3, [r3, #6]
 800c49a:	2b09      	cmp	r3, #9
 800c49c:	d80a      	bhi.n	800c4b4 <dhcp_reboot+0x130>
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	799b      	ldrb	r3, [r3, #6]
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	0152      	lsls	r2, r2, #5
 800c4a8:	1ad2      	subs	r2, r2, r3
 800c4aa:	0092      	lsls	r2, r2, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	e001      	b.n	800c4b8 <dhcp_reboot+0x134>
 800c4b4:	f242 7310 	movw	r3, #10000	; 0x2710
 800c4b8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c4ba:	89fb      	ldrh	r3, [r7, #14]
 800c4bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c4c0:	4a0a      	ldr	r2, [pc, #40]	; (800c4ec <dhcp_reboot+0x168>)
 800c4c2:	fb82 1203 	smull	r1, r2, r2, r3
 800c4c6:	1152      	asrs	r2, r2, #5
 800c4c8:	17db      	asrs	r3, r3, #31
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	b29a      	uxth	r2, r3
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c4d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3720      	adds	r7, #32
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20000014 	.word	0x20000014
 800c4e4:	20000110 	.word	0x20000110
 800c4e8:	08013708 	.word	0x08013708
 800c4ec:	10624dd3 	.word	0x10624dd3

0800c4f0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800c4f0:	b5b0      	push	{r4, r5, r7, lr}
 800c4f2:	b08a      	sub	sp, #40	; 0x28
 800c4f4:	af02      	add	r7, sp, #8
 800c4f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	2b00      	cmp	r3, #0
 800c502:	f000 8084 	beq.w	800c60e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	795b      	ldrb	r3, [r3, #5]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 8081 	beq.w	800c612 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	699b      	ldr	r3, [r3, #24]
 800c514:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	2200      	movs	r2, #0
 800c51a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	2200      	movs	r2, #0
 800c520:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	2200      	movs	r2, #0
 800c526:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	2200      	movs	r2, #0
 800c52c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	2200      	movs	r2, #0
 800c532:	631a      	str	r2, [r3, #48]	; 0x30
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	62da      	str	r2, [r3, #44]	; 0x2c
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	2200      	movs	r2, #0
 800c548:	829a      	strh	r2, [r3, #20]
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	8a9a      	ldrh	r2, [r3, #20]
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	825a      	strh	r2, [r3, #18]
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	8a5a      	ldrh	r2, [r3, #18]
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	821a      	strh	r2, [r3, #16]
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	8a1a      	ldrh	r2, [r3, #16]
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 fdec 	bl	800d140 <dhcp_supplied_address>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d03b      	beq.n	800c5e6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800c56e:	f107 030e 	add.w	r3, r7, #14
 800c572:	2207      	movs	r2, #7
 800c574:	69f9      	ldr	r1, [r7, #28]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fcde 	bl	800cf38 <dhcp_create_msg>
 800c57c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d030      	beq.n	800c5e6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800c58a:	89f8      	ldrh	r0, [r7, #14]
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c592:	2304      	movs	r3, #4
 800c594:	2236      	movs	r2, #54	; 0x36
 800c596:	f000 f85f 	bl	800c658 <dhcp_option>
 800c59a:	4603      	mov	r3, r0
 800c59c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800c59e:	89fc      	ldrh	r4, [r7, #14]
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7f7 fafe 	bl	8003baa <lwip_htonl>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f000 f8db 	bl	800c770 <dhcp_option_long>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c5be:	89f8      	ldrh	r0, [r7, #14]
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	33f0      	adds	r3, #240	; 0xf0
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	f000 fd8c 	bl	800d0e4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c5cc:	4b13      	ldr	r3, [pc, #76]	; (800c61c <dhcp_release_and_stop+0x12c>)
 800c5ce:	6818      	ldr	r0, [r3, #0]
 800c5d0:	f107 0210 	add.w	r2, r7, #16
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	2343      	movs	r3, #67	; 0x43
 800c5da:	69b9      	ldr	r1, [r7, #24]
 800c5dc:	f7fe fc88 	bl	800aef0 <udp_sendto_if>
      pbuf_free(p_out);
 800c5e0:	69b8      	ldr	r0, [r7, #24]
 800c5e2:	f7f8 fd85 	bl	80050f0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c5e6:	4b0e      	ldr	r3, [pc, #56]	; (800c620 <dhcp_release_and_stop+0x130>)
 800c5e8:	4a0d      	ldr	r2, [pc, #52]	; (800c620 <dhcp_release_and_stop+0x130>)
 800c5ea:	490d      	ldr	r1, [pc, #52]	; (800c620 <dhcp_release_and_stop+0x130>)
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7f8 f90b 	bl	8004808 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	69f8      	ldr	r0, [r7, #28]
 800c5f6:	f000 f815 	bl	800c624 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	791b      	ldrb	r3, [r3, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d008      	beq.n	800c614 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c602:	f7fe ffc1 	bl	800b588 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	2200      	movs	r2, #0
 800c60a:	711a      	strb	r2, [r3, #4]
 800c60c:	e002      	b.n	800c614 <dhcp_release_and_stop+0x124>
    return;
 800c60e:	bf00      	nop
 800c610:	e000      	b.n	800c614 <dhcp_release_and_stop+0x124>
    return;
 800c612:	bf00      	nop
  }
}
 800c614:	3720      	adds	r7, #32
 800c616:	46bd      	mov	sp, r7
 800c618:	bdb0      	pop	{r4, r5, r7, pc}
 800c61a:	bf00      	nop
 800c61c:	20000110 	.word	0x20000110
 800c620:	08013704 	.word	0x08013704

0800c624 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	795b      	ldrb	r3, [r3, #5]
 800c634:	78fa      	ldrb	r2, [r7, #3]
 800c636:	429a      	cmp	r2, r3
 800c638:	d008      	beq.n	800c64c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	78fa      	ldrb	r2, [r7, #3]
 800c63e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	811a      	strh	r2, [r3, #8]
  }
}
 800c64c:	bf00      	nop
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6039      	str	r1, [r7, #0]
 800c660:	4611      	mov	r1, r2
 800c662:	461a      	mov	r2, r3
 800c664:	4603      	mov	r3, r0
 800c666:	80fb      	strh	r3, [r7, #6]
 800c668:	460b      	mov	r3, r1
 800c66a:	717b      	strb	r3, [r7, #5]
 800c66c:	4613      	mov	r3, r2
 800c66e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c670:	88fa      	ldrh	r2, [r7, #6]
 800c672:	793b      	ldrb	r3, [r7, #4]
 800c674:	4413      	add	r3, r2
 800c676:	3302      	adds	r3, #2
 800c678:	2b44      	cmp	r3, #68	; 0x44
 800c67a:	d906      	bls.n	800c68a <dhcp_option+0x32>
 800c67c:	4b0d      	ldr	r3, [pc, #52]	; (800c6b4 <dhcp_option+0x5c>)
 800c67e:	f240 529a 	movw	r2, #1434	; 0x59a
 800c682:	490d      	ldr	r1, [pc, #52]	; (800c6b8 <dhcp_option+0x60>)
 800c684:	480d      	ldr	r0, [pc, #52]	; (800c6bc <dhcp_option+0x64>)
 800c686:	f003 f9d5 	bl	800fa34 <iprintf>
  options[options_out_len++] = option_type;
 800c68a:	88fb      	ldrh	r3, [r7, #6]
 800c68c:	1c5a      	adds	r2, r3, #1
 800c68e:	80fa      	strh	r2, [r7, #6]
 800c690:	461a      	mov	r2, r3
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	4413      	add	r3, r2
 800c696:	797a      	ldrb	r2, [r7, #5]
 800c698:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800c69a:	88fb      	ldrh	r3, [r7, #6]
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	80fa      	strh	r2, [r7, #6]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	793a      	ldrb	r2, [r7, #4]
 800c6a8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c6aa:	88fb      	ldrh	r3, [r7, #6]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	08012ba8 	.word	0x08012ba8
 800c6b8:	08012d3c 	.word	0x08012d3c
 800c6bc:	08012c08 	.word	0x08012c08

0800c6c0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	6039      	str	r1, [r7, #0]
 800c6ca:	80fb      	strh	r3, [r7, #6]
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c6d0:	88fb      	ldrh	r3, [r7, #6]
 800c6d2:	2b43      	cmp	r3, #67	; 0x43
 800c6d4:	d906      	bls.n	800c6e4 <dhcp_option_byte+0x24>
 800c6d6:	4b0a      	ldr	r3, [pc, #40]	; (800c700 <dhcp_option_byte+0x40>)
 800c6d8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800c6dc:	4909      	ldr	r1, [pc, #36]	; (800c704 <dhcp_option_byte+0x44>)
 800c6de:	480a      	ldr	r0, [pc, #40]	; (800c708 <dhcp_option_byte+0x48>)
 800c6e0:	f003 f9a8 	bl	800fa34 <iprintf>
  options[options_out_len++] = value;
 800c6e4:	88fb      	ldrh	r3, [r7, #6]
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	80fa      	strh	r2, [r7, #6]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	797a      	ldrb	r2, [r7, #5]
 800c6f2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c6f4:	88fb      	ldrh	r3, [r7, #6]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	08012ba8 	.word	0x08012ba8
 800c704:	08012d80 	.word	0x08012d80
 800c708:	08012c08 	.word	0x08012c08

0800c70c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	6039      	str	r1, [r7, #0]
 800c716:	80fb      	strh	r3, [r7, #6]
 800c718:	4613      	mov	r3, r2
 800c71a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c71c:	88fb      	ldrh	r3, [r7, #6]
 800c71e:	3302      	adds	r3, #2
 800c720:	2b44      	cmp	r3, #68	; 0x44
 800c722:	d906      	bls.n	800c732 <dhcp_option_short+0x26>
 800c724:	4b0f      	ldr	r3, [pc, #60]	; (800c764 <dhcp_option_short+0x58>)
 800c726:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800c72a:	490f      	ldr	r1, [pc, #60]	; (800c768 <dhcp_option_short+0x5c>)
 800c72c:	480f      	ldr	r0, [pc, #60]	; (800c76c <dhcp_option_short+0x60>)
 800c72e:	f003 f981 	bl	800fa34 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c732:	88bb      	ldrh	r3, [r7, #4]
 800c734:	0a1b      	lsrs	r3, r3, #8
 800c736:	b29a      	uxth	r2, r3
 800c738:	88fb      	ldrh	r3, [r7, #6]
 800c73a:	1c59      	adds	r1, r3, #1
 800c73c:	80f9      	strh	r1, [r7, #6]
 800c73e:	4619      	mov	r1, r3
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	440b      	add	r3, r1
 800c744:	b2d2      	uxtb	r2, r2
 800c746:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800c748:	88fb      	ldrh	r3, [r7, #6]
 800c74a:	1c5a      	adds	r2, r3, #1
 800c74c:	80fa      	strh	r2, [r7, #6]
 800c74e:	461a      	mov	r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	4413      	add	r3, r2
 800c754:	88ba      	ldrh	r2, [r7, #4]
 800c756:	b2d2      	uxtb	r2, r2
 800c758:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c75a:	88fb      	ldrh	r3, [r7, #6]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	08012ba8 	.word	0x08012ba8
 800c768:	08012db8 	.word	0x08012db8
 800c76c:	08012c08 	.word	0x08012c08

0800c770 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	4603      	mov	r3, r0
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
 800c77c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800c77e:	89fb      	ldrh	r3, [r7, #14]
 800c780:	3304      	adds	r3, #4
 800c782:	2b44      	cmp	r3, #68	; 0x44
 800c784:	d906      	bls.n	800c794 <dhcp_option_long+0x24>
 800c786:	4b19      	ldr	r3, [pc, #100]	; (800c7ec <dhcp_option_long+0x7c>)
 800c788:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800c78c:	4918      	ldr	r1, [pc, #96]	; (800c7f0 <dhcp_option_long+0x80>)
 800c78e:	4819      	ldr	r0, [pc, #100]	; (800c7f4 <dhcp_option_long+0x84>)
 800c790:	f003 f950 	bl	800fa34 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	0e1a      	lsrs	r2, r3, #24
 800c798:	89fb      	ldrh	r3, [r7, #14]
 800c79a:	1c59      	adds	r1, r3, #1
 800c79c:	81f9      	strh	r1, [r7, #14]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	440b      	add	r3, r1
 800c7a4:	b2d2      	uxtb	r2, r2
 800c7a6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	0c1a      	lsrs	r2, r3, #16
 800c7ac:	89fb      	ldrh	r3, [r7, #14]
 800c7ae:	1c59      	adds	r1, r3, #1
 800c7b0:	81f9      	strh	r1, [r7, #14]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	440b      	add	r3, r1
 800c7b8:	b2d2      	uxtb	r2, r2
 800c7ba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	0a1a      	lsrs	r2, r3, #8
 800c7c0:	89fb      	ldrh	r3, [r7, #14]
 800c7c2:	1c59      	adds	r1, r3, #1
 800c7c4:	81f9      	strh	r1, [r7, #14]
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	440b      	add	r3, r1
 800c7cc:	b2d2      	uxtb	r2, r2
 800c7ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800c7d0:	89fb      	ldrh	r3, [r7, #14]
 800c7d2:	1c5a      	adds	r2, r3, #1
 800c7d4:	81fa      	strh	r2, [r7, #14]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	4413      	add	r3, r2
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	b2d2      	uxtb	r2, r2
 800c7e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c7e2:	89fb      	ldrh	r3, [r7, #14]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3710      	adds	r7, #16
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	08012ba8 	.word	0x08012ba8
 800c7f0:	08012df4 	.word	0x08012df4
 800c7f4:	08012c08 	.word	0x08012c08

0800c7f8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b090      	sub	sp, #64	; 0x40
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800c80a:	2208      	movs	r2, #8
 800c80c:	2100      	movs	r1, #0
 800c80e:	48be      	ldr	r0, [pc, #760]	; (800cb08 <dhcp_parse_reply+0x310>)
 800c810:	f003 f908 	bl	800fa24 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	895b      	ldrh	r3, [r3, #10]
 800c818:	2b2b      	cmp	r3, #43	; 0x2b
 800c81a:	d802      	bhi.n	800c822 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800c81c:	f06f 0301 	mvn.w	r3, #1
 800c820:	e2a8      	b.n	800cd74 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800c828:	23f0      	movs	r3, #240	; 0xf0
 800c82a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	891b      	ldrh	r3, [r3, #8]
 800c830:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c836:	e00c      	b.n	800c852 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800c838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83a:	895b      	ldrh	r3, [r3, #10]
 800c83c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800c842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c844:	895b      	ldrh	r3, [r3, #10]
 800c846:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800c84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c854:	2b00      	cmp	r3, #0
 800c856:	d004      	beq.n	800c862 <dhcp_parse_reply+0x6a>
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	895b      	ldrh	r3, [r3, #10]
 800c85c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c85e:	429a      	cmp	r2, r3
 800c860:	d2ea      	bcs.n	800c838 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800c862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c864:	2b00      	cmp	r3, #0
 800c866:	d102      	bne.n	800c86e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800c868:	f06f 0301 	mvn.w	r3, #1
 800c86c:	e282      	b.n	800cd74 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800c86e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c870:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800c872:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c874:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800c876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800c87c:	e23a      	b.n	800ccf4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800c87e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c882:	4413      	add	r3, r2
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800c88e:	f04f 33ff 	mov.w	r3, #4294967295
 800c892:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800c894:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c896:	3302      	adds	r3, #2
 800c898:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800c89a:	8bfa      	ldrh	r2, [r7, #30]
 800c89c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d202      	bcs.n	800c8a8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800c8a2:	f06f 0301 	mvn.w	r3, #1
 800c8a6:	e265      	b.n	800cd74 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800c8a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ae:	8952      	ldrh	r2, [r2, #10]
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	da07      	bge.n	800c8c4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800c8b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c8ba:	4413      	add	r3, r2
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8c2:	e00b      	b.n	800c8dc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d004      	beq.n	800c8d6 <dhcp_parse_reply+0xde>
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	e000      	b.n	800c8d8 <dhcp_parse_reply+0xe0>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800c8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800c8e4:	7dfb      	ldrb	r3, [r7, #23]
 800c8e6:	2b3b      	cmp	r3, #59	; 0x3b
 800c8e8:	f200 812d 	bhi.w	800cb46 <dhcp_parse_reply+0x34e>
 800c8ec:	a201      	add	r2, pc, #4	; (adr r2, 800c8f4 <dhcp_parse_reply+0xfc>)
 800c8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f2:	bf00      	nop
 800c8f4:	0800c9e5 	.word	0x0800c9e5
 800c8f8:	0800c9f5 	.word	0x0800c9f5
 800c8fc:	0800cb47 	.word	0x0800cb47
 800c900:	0800ca17 	.word	0x0800ca17
 800c904:	0800cb47 	.word	0x0800cb47
 800c908:	0800cb47 	.word	0x0800cb47
 800c90c:	0800cb47 	.word	0x0800cb47
 800c910:	0800cb47 	.word	0x0800cb47
 800c914:	0800cb47 	.word	0x0800cb47
 800c918:	0800cb47 	.word	0x0800cb47
 800c91c:	0800cb47 	.word	0x0800cb47
 800c920:	0800cb47 	.word	0x0800cb47
 800c924:	0800cb47 	.word	0x0800cb47
 800c928:	0800cb47 	.word	0x0800cb47
 800c92c:	0800cb47 	.word	0x0800cb47
 800c930:	0800cb47 	.word	0x0800cb47
 800c934:	0800cb47 	.word	0x0800cb47
 800c938:	0800cb47 	.word	0x0800cb47
 800c93c:	0800cb47 	.word	0x0800cb47
 800c940:	0800cb47 	.word	0x0800cb47
 800c944:	0800cb47 	.word	0x0800cb47
 800c948:	0800cb47 	.word	0x0800cb47
 800c94c:	0800cb47 	.word	0x0800cb47
 800c950:	0800cb47 	.word	0x0800cb47
 800c954:	0800cb47 	.word	0x0800cb47
 800c958:	0800cb47 	.word	0x0800cb47
 800c95c:	0800cb47 	.word	0x0800cb47
 800c960:	0800cb47 	.word	0x0800cb47
 800c964:	0800cb47 	.word	0x0800cb47
 800c968:	0800cb47 	.word	0x0800cb47
 800c96c:	0800cb47 	.word	0x0800cb47
 800c970:	0800cb47 	.word	0x0800cb47
 800c974:	0800cb47 	.word	0x0800cb47
 800c978:	0800cb47 	.word	0x0800cb47
 800c97c:	0800cb47 	.word	0x0800cb47
 800c980:	0800cb47 	.word	0x0800cb47
 800c984:	0800cb47 	.word	0x0800cb47
 800c988:	0800cb47 	.word	0x0800cb47
 800c98c:	0800cb47 	.word	0x0800cb47
 800c990:	0800cb47 	.word	0x0800cb47
 800c994:	0800cb47 	.word	0x0800cb47
 800c998:	0800cb47 	.word	0x0800cb47
 800c99c:	0800cb47 	.word	0x0800cb47
 800c9a0:	0800cb47 	.word	0x0800cb47
 800c9a4:	0800cb47 	.word	0x0800cb47
 800c9a8:	0800cb47 	.word	0x0800cb47
 800c9ac:	0800cb47 	.word	0x0800cb47
 800c9b0:	0800cb47 	.word	0x0800cb47
 800c9b4:	0800cb47 	.word	0x0800cb47
 800c9b8:	0800cb47 	.word	0x0800cb47
 800c9bc:	0800cb47 	.word	0x0800cb47
 800c9c0:	0800ca43 	.word	0x0800ca43
 800c9c4:	0800ca65 	.word	0x0800ca65
 800c9c8:	0800caa1 	.word	0x0800caa1
 800c9cc:	0800cac3 	.word	0x0800cac3
 800c9d0:	0800cb47 	.word	0x0800cb47
 800c9d4:	0800cb47 	.word	0x0800cb47
 800c9d8:	0800cb47 	.word	0x0800cb47
 800c9dc:	0800cae5 	.word	0x0800cae5
 800c9e0:	0800cb25 	.word	0x0800cb25
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800c9f2:	e0ac      	b.n	800cb4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9f8:	2b04      	cmp	r3, #4
 800c9fa:	d009      	beq.n	800ca10 <dhcp_parse_reply+0x218>
 800c9fc:	4b43      	ldr	r3, [pc, #268]	; (800cb0c <dhcp_parse_reply+0x314>)
 800c9fe:	f240 622e 	movw	r2, #1582	; 0x62e
 800ca02:	4943      	ldr	r1, [pc, #268]	; (800cb10 <dhcp_parse_reply+0x318>)
 800ca04:	4843      	ldr	r0, [pc, #268]	; (800cb14 <dhcp_parse_reply+0x31c>)
 800ca06:	f003 f815 	bl	800fa34 <iprintf>
 800ca0a:	f06f 0305 	mvn.w	r3, #5
 800ca0e:	e1b1      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800ca10:	2306      	movs	r3, #6
 800ca12:	623b      	str	r3, [r7, #32]
        break;
 800ca14:	e09b      	b.n	800cb4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800ca16:	2304      	movs	r3, #4
 800ca18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800ca1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ca20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d209      	bcs.n	800ca3c <dhcp_parse_reply+0x244>
 800ca28:	4b38      	ldr	r3, [pc, #224]	; (800cb0c <dhcp_parse_reply+0x314>)
 800ca2a:	f240 6233 	movw	r2, #1587	; 0x633
 800ca2e:	493a      	ldr	r1, [pc, #232]	; (800cb18 <dhcp_parse_reply+0x320>)
 800ca30:	4838      	ldr	r0, [pc, #224]	; (800cb14 <dhcp_parse_reply+0x31c>)
 800ca32:	f002 ffff 	bl	800fa34 <iprintf>
 800ca36:	f06f 0305 	mvn.w	r3, #5
 800ca3a:	e19b      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800ca3c:	2307      	movs	r3, #7
 800ca3e:	623b      	str	r3, [r7, #32]
        break;
 800ca40:	e085      	b.n	800cb4e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ca42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca46:	2b04      	cmp	r3, #4
 800ca48:	d009      	beq.n	800ca5e <dhcp_parse_reply+0x266>
 800ca4a:	4b30      	ldr	r3, [pc, #192]	; (800cb0c <dhcp_parse_reply+0x314>)
 800ca4c:	f240 6241 	movw	r2, #1601	; 0x641
 800ca50:	492f      	ldr	r1, [pc, #188]	; (800cb10 <dhcp_parse_reply+0x318>)
 800ca52:	4830      	ldr	r0, [pc, #192]	; (800cb14 <dhcp_parse_reply+0x31c>)
 800ca54:	f002 ffee 	bl	800fa34 <iprintf>
 800ca58:	f06f 0305 	mvn.w	r3, #5
 800ca5c:	e18a      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	623b      	str	r3, [r7, #32]
        break;
 800ca62:	e074      	b.n	800cb4e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ca64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d009      	beq.n	800ca80 <dhcp_parse_reply+0x288>
 800ca6c:	4b27      	ldr	r3, [pc, #156]	; (800cb0c <dhcp_parse_reply+0x314>)
 800ca6e:	f240 624f 	movw	r2, #1615	; 0x64f
 800ca72:	492a      	ldr	r1, [pc, #168]	; (800cb1c <dhcp_parse_reply+0x324>)
 800ca74:	4827      	ldr	r0, [pc, #156]	; (800cb14 <dhcp_parse_reply+0x31c>)
 800ca76:	f002 ffdd 	bl	800fa34 <iprintf>
 800ca7a:	f06f 0305 	mvn.w	r3, #5
 800ca7e:	e179      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ca80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ca82:	2bf0      	cmp	r3, #240	; 0xf0
 800ca84:	d009      	beq.n	800ca9a <dhcp_parse_reply+0x2a2>
 800ca86:	4b21      	ldr	r3, [pc, #132]	; (800cb0c <dhcp_parse_reply+0x314>)
 800ca88:	f240 6251 	movw	r2, #1617	; 0x651
 800ca8c:	4924      	ldr	r1, [pc, #144]	; (800cb20 <dhcp_parse_reply+0x328>)
 800ca8e:	4821      	ldr	r0, [pc, #132]	; (800cb14 <dhcp_parse_reply+0x31c>)
 800ca90:	f002 ffd0 	bl	800fa34 <iprintf>
 800ca94:	f06f 0305 	mvn.w	r3, #5
 800ca98:	e16c      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	623b      	str	r3, [r7, #32]
        break;
 800ca9e:	e056      	b.n	800cb4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800caa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d009      	beq.n	800cabc <dhcp_parse_reply+0x2c4>
 800caa8:	4b18      	ldr	r3, [pc, #96]	; (800cb0c <dhcp_parse_reply+0x314>)
 800caaa:	f240 6255 	movw	r2, #1621	; 0x655
 800caae:	491b      	ldr	r1, [pc, #108]	; (800cb1c <dhcp_parse_reply+0x324>)
 800cab0:	4818      	ldr	r0, [pc, #96]	; (800cb14 <dhcp_parse_reply+0x31c>)
 800cab2:	f002 ffbf 	bl	800fa34 <iprintf>
 800cab6:	f06f 0305 	mvn.w	r3, #5
 800caba:	e15b      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800cabc:	2301      	movs	r3, #1
 800cabe:	623b      	str	r3, [r7, #32]
        break;
 800cac0:	e045      	b.n	800cb4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac6:	2b04      	cmp	r3, #4
 800cac8:	d009      	beq.n	800cade <dhcp_parse_reply+0x2e6>
 800caca:	4b10      	ldr	r3, [pc, #64]	; (800cb0c <dhcp_parse_reply+0x314>)
 800cacc:	f240 6259 	movw	r2, #1625	; 0x659
 800cad0:	490f      	ldr	r1, [pc, #60]	; (800cb10 <dhcp_parse_reply+0x318>)
 800cad2:	4810      	ldr	r0, [pc, #64]	; (800cb14 <dhcp_parse_reply+0x31c>)
 800cad4:	f002 ffae 	bl	800fa34 <iprintf>
 800cad8:	f06f 0305 	mvn.w	r3, #5
 800cadc:	e14a      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800cade:	2302      	movs	r3, #2
 800cae0:	623b      	str	r3, [r7, #32]
        break;
 800cae2:	e034      	b.n	800cb4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae8:	2b04      	cmp	r3, #4
 800caea:	d009      	beq.n	800cb00 <dhcp_parse_reply+0x308>
 800caec:	4b07      	ldr	r3, [pc, #28]	; (800cb0c <dhcp_parse_reply+0x314>)
 800caee:	f240 625d 	movw	r2, #1629	; 0x65d
 800caf2:	4907      	ldr	r1, [pc, #28]	; (800cb10 <dhcp_parse_reply+0x318>)
 800caf4:	4807      	ldr	r0, [pc, #28]	; (800cb14 <dhcp_parse_reply+0x31c>)
 800caf6:	f002 ff9d 	bl	800fa34 <iprintf>
 800cafa:	f06f 0305 	mvn.w	r3, #5
 800cafe:	e139      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800cb00:	2304      	movs	r3, #4
 800cb02:	623b      	str	r3, [r7, #32]
        break;
 800cb04:	e023      	b.n	800cb4e <dhcp_parse_reply+0x356>
 800cb06:	bf00      	nop
 800cb08:	20006544 	.word	0x20006544
 800cb0c:	08012ba8 	.word	0x08012ba8
 800cb10:	08012e30 	.word	0x08012e30
 800cb14:	08012c08 	.word	0x08012c08
 800cb18:	08012e3c 	.word	0x08012e3c
 800cb1c:	08012e50 	.word	0x08012e50
 800cb20:	08012e5c 	.word	0x08012e5c
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb28:	2b04      	cmp	r3, #4
 800cb2a:	d009      	beq.n	800cb40 <dhcp_parse_reply+0x348>
 800cb2c:	4b93      	ldr	r3, [pc, #588]	; (800cd7c <dhcp_parse_reply+0x584>)
 800cb2e:	f240 6261 	movw	r2, #1633	; 0x661
 800cb32:	4993      	ldr	r1, [pc, #588]	; (800cd80 <dhcp_parse_reply+0x588>)
 800cb34:	4893      	ldr	r0, [pc, #588]	; (800cd84 <dhcp_parse_reply+0x58c>)
 800cb36:	f002 ff7d 	bl	800fa34 <iprintf>
 800cb3a:	f06f 0305 	mvn.w	r3, #5
 800cb3e:	e119      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800cb40:	2305      	movs	r3, #5
 800cb42:	623b      	str	r3, [r7, #32]
        break;
 800cb44:	e003      	b.n	800cb4e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800cb4c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800cb4e:	7dfb      	ldrb	r3, [r7, #23]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d103      	bne.n	800cb5c <dhcp_parse_reply+0x364>
      offset++;
 800cb54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cb56:	3301      	adds	r3, #1
 800cb58:	877b      	strh	r3, [r7, #58]	; 0x3a
 800cb5a:	e0a1      	b.n	800cca0 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800cb5c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cb5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb62:	4413      	add	r3, r2
 800cb64:	3302      	adds	r3, #2
 800cb66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb6a:	db02      	blt.n	800cb72 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800cb6c:	f06f 0301 	mvn.w	r3, #1
 800cb70:	e100      	b.n	800cd74 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800cb72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cb7a:	4413      	add	r3, r2
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	3302      	adds	r3, #2
 800cb80:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800cb82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 808a 	beq.w	800cca0 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800cb90:	6a3b      	ldr	r3, [r7, #32]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	db02      	blt.n	800cb9c <dhcp_parse_reply+0x3a4>
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	2b07      	cmp	r3, #7
 800cb9a:	dd06      	ble.n	800cbaa <dhcp_parse_reply+0x3b2>
 800cb9c:	4b77      	ldr	r3, [pc, #476]	; (800cd7c <dhcp_parse_reply+0x584>)
 800cb9e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800cba2:	4979      	ldr	r1, [pc, #484]	; (800cd88 <dhcp_parse_reply+0x590>)
 800cba4:	4877      	ldr	r0, [pc, #476]	; (800cd84 <dhcp_parse_reply+0x58c>)
 800cba6:	f002 ff45 	bl	800fa34 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800cbaa:	4a78      	ldr	r2, [pc, #480]	; (800cd8c <dhcp_parse_reply+0x594>)
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	4413      	add	r3, r2
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d174      	bne.n	800cca0 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800cbb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbba:	2b04      	cmp	r3, #4
 800cbbc:	bf28      	it	cs
 800cbbe:	2304      	movcs	r3, #4
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800cbc4:	8bfb      	ldrh	r3, [r7, #30]
 800cbc6:	8aba      	ldrh	r2, [r7, #20]
 800cbc8:	f107 0108 	add.w	r1, r7, #8
 800cbcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbce:	f7f8 fc89 	bl	80054e4 <pbuf_copy_partial>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	8abb      	ldrh	r3, [r7, #20]
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d002      	beq.n	800cbe2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800cbdc:	f06f 0301 	mvn.w	r3, #1
 800cbe0:	e0c8      	b.n	800cd74 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800cbe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbe6:	2b04      	cmp	r3, #4
 800cbe8:	d933      	bls.n	800cc52 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800cbea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cbee:	f003 0303 	and.w	r3, r3, #3
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d009      	beq.n	800cc0c <dhcp_parse_reply+0x414>
 800cbf8:	4b60      	ldr	r3, [pc, #384]	; (800cd7c <dhcp_parse_reply+0x584>)
 800cbfa:	f240 6281 	movw	r2, #1665	; 0x681
 800cbfe:	4964      	ldr	r1, [pc, #400]	; (800cd90 <dhcp_parse_reply+0x598>)
 800cc00:	4860      	ldr	r0, [pc, #384]	; (800cd84 <dhcp_parse_reply+0x58c>)
 800cc02:	f002 ff17 	bl	800fa34 <iprintf>
 800cc06:	f06f 0305 	mvn.w	r3, #5
 800cc0a:	e0b3      	b.n	800cd74 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800cc0c:	4a5f      	ldr	r2, [pc, #380]	; (800cd8c <dhcp_parse_reply+0x594>)
 800cc0e:	6a3b      	ldr	r3, [r7, #32]
 800cc10:	4413      	add	r3, r2
 800cc12:	2201      	movs	r2, #1
 800cc14:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7f6 ffc6 	bl	8003baa <lwip_htonl>
 800cc1e:	4601      	mov	r1, r0
 800cc20:	4a5c      	ldr	r2, [pc, #368]	; (800cd94 <dhcp_parse_reply+0x59c>)
 800cc22:	6a3b      	ldr	r3, [r7, #32]
 800cc24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800cc28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc2c:	3b04      	subs	r3, #4
 800cc2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800cc32:	8bfb      	ldrh	r3, [r7, #30]
 800cc34:	3304      	adds	r3, #4
 800cc36:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800cc38:	8a7a      	ldrh	r2, [r7, #18]
 800cc3a:	8bfb      	ldrh	r3, [r7, #30]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d202      	bcs.n	800cc46 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800cc40:	f06f 0301 	mvn.w	r3, #1
 800cc44:	e096      	b.n	800cd74 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800cc46:	8a7b      	ldrh	r3, [r7, #18]
 800cc48:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800cc50:	e79e      	b.n	800cb90 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800cc52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc56:	2b04      	cmp	r3, #4
 800cc58:	d106      	bne.n	800cc68 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7f6 ffa4 	bl	8003baa <lwip_htonl>
 800cc62:	4603      	mov	r3, r0
 800cc64:	60bb      	str	r3, [r7, #8]
 800cc66:	e011      	b.n	800cc8c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800cc68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d009      	beq.n	800cc84 <dhcp_parse_reply+0x48c>
 800cc70:	4b42      	ldr	r3, [pc, #264]	; (800cd7c <dhcp_parse_reply+0x584>)
 800cc72:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800cc76:	4948      	ldr	r1, [pc, #288]	; (800cd98 <dhcp_parse_reply+0x5a0>)
 800cc78:	4842      	ldr	r0, [pc, #264]	; (800cd84 <dhcp_parse_reply+0x58c>)
 800cc7a:	f002 fedb 	bl	800fa34 <iprintf>
 800cc7e:	f06f 0305 	mvn.w	r3, #5
 800cc82:	e077      	b.n	800cd74 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800cc84:	f107 0308 	add.w	r3, r7, #8
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800cc8c:	4a3f      	ldr	r2, [pc, #252]	; (800cd8c <dhcp_parse_reply+0x594>)
 800cc8e:	6a3b      	ldr	r3, [r7, #32]
 800cc90:	4413      	add	r3, r2
 800cc92:	2201      	movs	r2, #1
 800cc94:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	493e      	ldr	r1, [pc, #248]	; (800cd94 <dhcp_parse_reply+0x59c>)
 800cc9a:	6a3b      	ldr	r3, [r7, #32]
 800cc9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800cca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca2:	895b      	ldrh	r3, [r3, #10]
 800cca4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d324      	bcc.n	800ccf4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	895b      	ldrh	r3, [r3, #10]
 800ccae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb6:	895b      	ldrh	r3, [r3, #10]
 800ccb8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800ccbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ccc0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d213      	bcs.n	800ccee <dhcp_parse_reply+0x4f6>
        q = q->next;
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800cccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d109      	bne.n	800cce6 <dhcp_parse_reply+0x4ee>
 800ccd2:	4b2a      	ldr	r3, [pc, #168]	; (800cd7c <dhcp_parse_reply+0x584>)
 800ccd4:	f240 629d 	movw	r2, #1693	; 0x69d
 800ccd8:	4930      	ldr	r1, [pc, #192]	; (800cd9c <dhcp_parse_reply+0x5a4>)
 800ccda:	482a      	ldr	r0, [pc, #168]	; (800cd84 <dhcp_parse_reply+0x58c>)
 800ccdc:	f002 feaa 	bl	800fa34 <iprintf>
 800cce0:	f06f 0305 	mvn.w	r3, #5
 800cce4:	e046      	b.n	800cd74 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccec:	e002      	b.n	800ccf4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800ccee:	f06f 0301 	mvn.w	r3, #1
 800ccf2:	e03f      	b.n	800cd74 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <dhcp_parse_reply+0x518>
 800ccfa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ccfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d206      	bcs.n	800cd10 <dhcp_parse_reply+0x518>
 800cd02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd06:	4413      	add	r3, r2
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2bff      	cmp	r3, #255	; 0xff
 800cd0c:	f47f adb7 	bne.w	800c87e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800cd10:	4b1e      	ldr	r3, [pc, #120]	; (800cd8c <dhcp_parse_reply+0x594>)
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d018      	beq.n	800cd4a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800cd18:	4b1e      	ldr	r3, [pc, #120]	; (800cd94 <dhcp_parse_reply+0x59c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800cd1e:	4b1b      	ldr	r3, [pc, #108]	; (800cd8c <dhcp_parse_reply+0x594>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d102      	bne.n	800cd30 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd2e:	e00c      	b.n	800cd4a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d102      	bne.n	800cd3c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800cd36:	2301      	movs	r3, #1
 800cd38:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd3a:	e006      	b.n	800cd4a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	d103      	bne.n	800cd4a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800cd42:	2301      	movs	r3, #1
 800cd44:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800cd46:	2301      	movs	r3, #1
 800cd48:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d006      	beq.n	800cd5e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800cd54:	236c      	movs	r3, #108	; 0x6c
 800cd56:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800cd58:	23ec      	movs	r3, #236	; 0xec
 800cd5a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800cd5c:	e569      	b.n	800c832 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d006      	beq.n	800cd72 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800cd64:	2300      	movs	r3, #0
 800cd66:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800cd68:	232c      	movs	r3, #44	; 0x2c
 800cd6a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800cd6c:	236c      	movs	r3, #108	; 0x6c
 800cd6e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800cd70:	e55f      	b.n	800c832 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3740      	adds	r7, #64	; 0x40
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	08012ba8 	.word	0x08012ba8
 800cd80:	08012e30 	.word	0x08012e30
 800cd84:	08012c08 	.word	0x08012c08
 800cd88:	08012e74 	.word	0x08012e74
 800cd8c:	20006544 	.word	0x20006544
 800cd90:	08012e88 	.word	0x08012e88
 800cd94:	2000654c 	.word	0x2000654c
 800cd98:	08012ea0 	.word	0x08012ea0
 800cd9c:	08012eb4 	.word	0x08012eb4

0800cda0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08a      	sub	sp, #40	; 0x28
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800cdae:	4b5f      	ldr	r3, [pc, #380]	; (800cf2c <dhcp_recv+0x18c>)
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f000 809d 	beq.w	800cf02 <dhcp_recv+0x162>
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	791b      	ldrb	r3, [r3, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f000 8098 	beq.w	800cf02 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	895b      	ldrh	r3, [r3, #10]
 800cdd6:	2b2b      	cmp	r3, #43	; 0x2b
 800cdd8:	f240 8095 	bls.w	800cf06 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	f040 8092 	bne.w	800cf0a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cde6:	2300      	movs	r3, #0
 800cde8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdec:	e012      	b.n	800ce14 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800cdee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf2:	6a3a      	ldr	r2, [r7, #32]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800cdfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdfe:	69b9      	ldr	r1, [r7, #24]
 800ce00:	440b      	add	r3, r1
 800ce02:	7f1b      	ldrb	r3, [r3, #28]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	f040 8082 	bne.w	800cf0e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ce0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce0e:	3301      	adds	r3, #1
 800ce10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d203      	bcs.n	800ce2a <dhcp_recv+0x8a>
 800ce22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce26:	2b05      	cmp	r3, #5
 800ce28:	d9e1      	bls.n	800cdee <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7f6 febb 	bl	8003baa <lwip_htonl>
 800ce34:	4602      	mov	r2, r0
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d169      	bne.n	800cf12 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800ce3e:	69f9      	ldr	r1, [r7, #28]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff fcd9 	bl	800c7f8 <dhcp_parse_reply>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d164      	bne.n	800cf16 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800ce4c:	4b38      	ldr	r3, [pc, #224]	; (800cf30 <dhcp_recv+0x190>)
 800ce4e:	785b      	ldrb	r3, [r3, #1]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d062      	beq.n	800cf1a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800ce5a:	4b36      	ldr	r3, [pc, #216]	; (800cf34 <dhcp_recv+0x194>)
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800ce60:	7cfb      	ldrb	r3, [r7, #19]
 800ce62:	2b05      	cmp	r3, #5
 800ce64:	d12a      	bne.n	800cebc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	795b      	ldrb	r3, [r3, #5]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d112      	bne.n	800ce94 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800ce6e:	6979      	ldr	r1, [r7, #20]
 800ce70:	6a38      	ldr	r0, [r7, #32]
 800ce72:	f7fe fe53 	bl	800bb1c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ce7c:	f003 0308 	and.w	r3, r3, #8
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800ce84:	6a38      	ldr	r0, [r7, #32]
 800ce86:	f7fe fbc3 	bl	800b610 <dhcp_check>
 800ce8a:	e047      	b.n	800cf1c <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800ce8c:	6a38      	ldr	r0, [r7, #32]
 800ce8e:	f7ff f867 	bl	800bf60 <dhcp_bind>
 800ce92:	e043      	b.n	800cf1c <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	795b      	ldrb	r3, [r3, #5]
 800ce98:	2b03      	cmp	r3, #3
 800ce9a:	d007      	beq.n	800ceac <dhcp_recv+0x10c>
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	795b      	ldrb	r3, [r3, #5]
 800cea0:	2b04      	cmp	r3, #4
 800cea2:	d003      	beq.n	800ceac <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800cea8:	2b05      	cmp	r3, #5
 800ceaa:	d137      	bne.n	800cf1c <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 800ceac:	6979      	ldr	r1, [r7, #20]
 800ceae:	6a38      	ldr	r0, [r7, #32]
 800ceb0:	f7fe fe34 	bl	800bb1c <dhcp_handle_ack>
      dhcp_bind(netif);
 800ceb4:	6a38      	ldr	r0, [r7, #32]
 800ceb6:	f7ff f853 	bl	800bf60 <dhcp_bind>
 800ceba:	e02f      	b.n	800cf1c <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800cebc:	7cfb      	ldrb	r3, [r7, #19]
 800cebe:	2b06      	cmp	r3, #6
 800cec0:	d113      	bne.n	800ceea <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800cec6:	2b03      	cmp	r3, #3
 800cec8:	d00b      	beq.n	800cee2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	795b      	ldrb	r3, [r3, #5]
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d007      	beq.n	800cee2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ced6:	2b04      	cmp	r3, #4
 800ced8:	d003      	beq.n	800cee2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	795b      	ldrb	r3, [r3, #5]
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d103      	bne.n	800ceea <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800cee2:	6a38      	ldr	r0, [r7, #32]
 800cee4:	f7fe fb7a 	bl	800b5dc <dhcp_handle_nak>
 800cee8:	e018      	b.n	800cf1c <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800ceea:	7cfb      	ldrb	r3, [r7, #19]
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d108      	bne.n	800cf02 <dhcp_recv+0x162>
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	795b      	ldrb	r3, [r3, #5]
 800cef4:	2b06      	cmp	r3, #6
 800cef6:	d104      	bne.n	800cf02 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800cef8:	6979      	ldr	r1, [r7, #20]
 800cefa:	6a38      	ldr	r0, [r7, #32]
 800cefc:	f7fe fbbc 	bl	800b678 <dhcp_handle_offer>
 800cf00:	e00c      	b.n	800cf1c <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 800cf02:	bf00      	nop
 800cf04:	e00a      	b.n	800cf1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800cf06:	bf00      	nop
 800cf08:	e008      	b.n	800cf1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800cf0a:	bf00      	nop
 800cf0c:	e006      	b.n	800cf1c <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 800cf0e:	bf00      	nop
 800cf10:	e004      	b.n	800cf1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800cf12:	bf00      	nop
 800cf14:	e002      	b.n	800cf1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800cf16:	bf00      	nop
 800cf18:	e000      	b.n	800cf1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800cf1a:	bf00      	nop
  pbuf_free(p);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7f8 f8e7 	bl	80050f0 <pbuf_free>
}
 800cf22:	bf00      	nop
 800cf24:	3728      	adds	r7, #40	; 0x28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	20003404 	.word	0x20003404
 800cf30:	20006544 	.word	0x20006544
 800cf34:	2000654c 	.word	0x2000654c

0800cf38 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	603b      	str	r3, [r7, #0]
 800cf44:	4613      	mov	r3, r2
 800cf46:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d108      	bne.n	800cf60 <dhcp_create_msg+0x28>
 800cf4e:	4b5f      	ldr	r3, [pc, #380]	; (800d0cc <dhcp_create_msg+0x194>)
 800cf50:	f240 7269 	movw	r2, #1897	; 0x769
 800cf54:	495e      	ldr	r1, [pc, #376]	; (800d0d0 <dhcp_create_msg+0x198>)
 800cf56:	485f      	ldr	r0, [pc, #380]	; (800d0d4 <dhcp_create_msg+0x19c>)
 800cf58:	f002 fd6c 	bl	800fa34 <iprintf>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	e0b1      	b.n	800d0c4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d108      	bne.n	800cf78 <dhcp_create_msg+0x40>
 800cf66:	4b59      	ldr	r3, [pc, #356]	; (800d0cc <dhcp_create_msg+0x194>)
 800cf68:	f240 726a 	movw	r2, #1898	; 0x76a
 800cf6c:	495a      	ldr	r1, [pc, #360]	; (800d0d8 <dhcp_create_msg+0x1a0>)
 800cf6e:	4859      	ldr	r0, [pc, #356]	; (800d0d4 <dhcp_create_msg+0x19c>)
 800cf70:	f002 fd60 	bl	800fa34 <iprintf>
 800cf74:	2300      	movs	r3, #0
 800cf76:	e0a5      	b.n	800d0c4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800cf78:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf7c:	f44f 719a 	mov.w	r1, #308	; 0x134
 800cf80:	2036      	movs	r0, #54	; 0x36
 800cf82:	f7f7 fdd5 	bl	8004b30 <pbuf_alloc>
 800cf86:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d101      	bne.n	800cf92 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e098      	b.n	800d0c4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	895b      	ldrh	r3, [r3, #10]
 800cf96:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800cf9a:	d206      	bcs.n	800cfaa <dhcp_create_msg+0x72>
 800cf9c:	4b4b      	ldr	r3, [pc, #300]	; (800d0cc <dhcp_create_msg+0x194>)
 800cf9e:	f240 7272 	movw	r2, #1906	; 0x772
 800cfa2:	494e      	ldr	r1, [pc, #312]	; (800d0dc <dhcp_create_msg+0x1a4>)
 800cfa4:	484b      	ldr	r0, [pc, #300]	; (800d0d4 <dhcp_create_msg+0x19c>)
 800cfa6:	f002 fd45 	bl	800fa34 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	2b03      	cmp	r3, #3
 800cfae:	d103      	bne.n	800cfb8 <dhcp_create_msg+0x80>
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	795b      	ldrb	r3, [r3, #5]
 800cfb4:	2b03      	cmp	r3, #3
 800cfb6:	d10d      	bne.n	800cfd4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	799b      	ldrb	r3, [r3, #6]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d105      	bne.n	800cfcc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800cfc0:	f002 fd50 	bl	800fa64 <rand>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	4b45      	ldr	r3, [pc, #276]	; (800d0e0 <dhcp_create_msg+0x1a8>)
 800cfca:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800cfcc:	4b44      	ldr	r3, [pc, #272]	; (800d0e0 <dhcp_create_msg+0x1a8>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800cfda:	f44f 729a 	mov.w	r2, #308	; 0x134
 800cfde:	2100      	movs	r1, #0
 800cfe0:	6978      	ldr	r0, [r7, #20]
 800cfe2:	f002 fd1f 	bl	800fa24 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	2201      	movs	r2, #1
 800cff0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4618      	mov	r0, r3
 800d002:	f7f6 fdd2 	bl	8003baa <lwip_htonl>
 800d006:	4602      	mov	r2, r0
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	2b08      	cmp	r3, #8
 800d010:	d010      	beq.n	800d034 <dhcp_create_msg+0xfc>
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	2b04      	cmp	r3, #4
 800d016:	d00d      	beq.n	800d034 <dhcp_create_msg+0xfc>
 800d018:	79fb      	ldrb	r3, [r7, #7]
 800d01a:	2b07      	cmp	r3, #7
 800d01c:	d00a      	beq.n	800d034 <dhcp_create_msg+0xfc>
 800d01e:	79fb      	ldrb	r3, [r7, #7]
 800d020:	2b03      	cmp	r3, #3
 800d022:	d10c      	bne.n	800d03e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800d028:	2b05      	cmp	r3, #5
 800d02a:	d003      	beq.n	800d034 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	795b      	ldrb	r3, [r3, #5]
 800d030:	2b04      	cmp	r3, #4
 800d032:	d104      	bne.n	800d03e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3304      	adds	r3, #4
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d03e:	2300      	movs	r3, #0
 800d040:	83fb      	strh	r3, [r7, #30]
 800d042:	e00c      	b.n	800d05e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800d044:	8bfa      	ldrh	r2, [r7, #30]
 800d046:	8bfb      	ldrh	r3, [r7, #30]
 800d048:	68f9      	ldr	r1, [r7, #12]
 800d04a:	440a      	add	r2, r1
 800d04c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800d050:	697a      	ldr	r2, [r7, #20]
 800d052:	4413      	add	r3, r2
 800d054:	460a      	mov	r2, r1
 800d056:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d058:	8bfb      	ldrh	r3, [r7, #30]
 800d05a:	3301      	adds	r3, #1
 800d05c:	83fb      	strh	r3, [r7, #30]
 800d05e:	8bfb      	ldrh	r3, [r7, #30]
 800d060:	2b05      	cmp	r3, #5
 800d062:	d9ef      	bls.n	800d044 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	2200      	movs	r2, #0
 800d068:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d06c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800d070:	2200      	movs	r2, #0
 800d072:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800d076:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800d07a:	2200      	movs	r2, #0
 800d07c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800d080:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800d084:	2200      	movs	r2, #0
 800d086:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d08a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d094:	2301      	movs	r3, #1
 800d096:	2235      	movs	r2, #53	; 0x35
 800d098:	2000      	movs	r0, #0
 800d09a:	f7ff fadd 	bl	800c658 <dhcp_option>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d0a8:	79fa      	ldrb	r2, [r7, #7]
 800d0aa:	8a7b      	ldrh	r3, [r7, #18]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7ff fb07 	bl	800c6c0 <dhcp_option_byte>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	8a7a      	ldrh	r2, [r7, #18]
 800d0c0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800d0c2:	69bb      	ldr	r3, [r7, #24]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3720      	adds	r7, #32
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	08012ba8 	.word	0x08012ba8
 800d0d0:	08012ec8 	.word	0x08012ec8
 800d0d4:	08012c08 	.word	0x08012c08
 800d0d8:	08012ee8 	.word	0x08012ee8
 800d0dc:	08012f08 	.word	0x08012f08
 800d0e0:	20000118 	.word	0x20000118

0800d0e4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800d0f2:	89fb      	ldrh	r3, [r7, #14]
 800d0f4:	1c5a      	adds	r2, r3, #1
 800d0f6:	81fa      	strh	r2, [r7, #14]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	22ff      	movs	r2, #255	; 0xff
 800d100:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d102:	e007      	b.n	800d114 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800d104:	89fb      	ldrh	r3, [r7, #14]
 800d106:	1c5a      	adds	r2, r3, #1
 800d108:	81fa      	strh	r2, [r7, #14]
 800d10a:	461a      	mov	r2, r3
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	4413      	add	r3, r2
 800d110:	2200      	movs	r2, #0
 800d112:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d114:	89fb      	ldrh	r3, [r7, #14]
 800d116:	2b43      	cmp	r3, #67	; 0x43
 800d118:	d904      	bls.n	800d124 <dhcp_option_trailer+0x40>
 800d11a:	89fb      	ldrh	r3, [r7, #14]
 800d11c:	f003 0303 	and.w	r3, r3, #3
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <dhcp_option_trailer+0x46>
 800d124:	89fb      	ldrh	r3, [r7, #14]
 800d126:	2b43      	cmp	r3, #67	; 0x43
 800d128:	d9ec      	bls.n	800d104 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d12a:	89fb      	ldrh	r3, [r7, #14]
 800d12c:	33f0      	adds	r3, #240	; 0xf0
 800d12e:	b29b      	uxth	r3, r3
 800d130:	4619      	mov	r1, r3
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7f7 fe56 	bl	8004de4 <pbuf_realloc>
}
 800d138:	bf00      	nop
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d017      	beq.n	800d17e <dhcp_supplied_address+0x3e>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d152:	2b00      	cmp	r3, #0
 800d154:	d013      	beq.n	800d17e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	795b      	ldrb	r3, [r3, #5]
 800d160:	2b0a      	cmp	r3, #10
 800d162:	d007      	beq.n	800d174 <dhcp_supplied_address+0x34>
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	795b      	ldrb	r3, [r3, #5]
 800d168:	2b05      	cmp	r3, #5
 800d16a:	d003      	beq.n	800d174 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d170:	2b04      	cmp	r3, #4
 800d172:	d101      	bne.n	800d178 <dhcp_supplied_address+0x38>
 800d174:	2301      	movs	r3, #1
 800d176:	e000      	b.n	800d17a <dhcp_supplied_address+0x3a>
 800d178:	2300      	movs	r3, #0
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	e000      	b.n	800d180 <dhcp_supplied_address+0x40>
  }
  return 0;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3714      	adds	r7, #20
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d194:	4915      	ldr	r1, [pc, #84]	; (800d1ec <etharp_free_entry+0x60>)
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	4613      	mov	r3, r2
 800d19a:	005b      	lsls	r3, r3, #1
 800d19c:	4413      	add	r3, r2
 800d19e:	00db      	lsls	r3, r3, #3
 800d1a0:	440b      	add	r3, r1
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d013      	beq.n	800d1d0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d1a8:	4910      	ldr	r1, [pc, #64]	; (800d1ec <etharp_free_entry+0x60>)
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	005b      	lsls	r3, r3, #1
 800d1b0:	4413      	add	r3, r2
 800d1b2:	00db      	lsls	r3, r3, #3
 800d1b4:	440b      	add	r3, r1
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7f7 ff99 	bl	80050f0 <pbuf_free>
    arp_table[i].q = NULL;
 800d1be:	490b      	ldr	r1, [pc, #44]	; (800d1ec <etharp_free_entry+0x60>)
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	005b      	lsls	r3, r3, #1
 800d1c6:	4413      	add	r3, r2
 800d1c8:	00db      	lsls	r3, r3, #3
 800d1ca:	440b      	add	r3, r1
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d1d0:	4906      	ldr	r1, [pc, #24]	; (800d1ec <etharp_free_entry+0x60>)
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	005b      	lsls	r3, r3, #1
 800d1d8:	4413      	add	r3, r2
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	440b      	add	r3, r1
 800d1de:	3314      	adds	r3, #20
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d1e4:	bf00      	nop
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	2000011c 	.word	0x2000011c

0800d1f0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	607b      	str	r3, [r7, #4]
 800d1fa:	e096      	b.n	800d32a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d1fc:	494f      	ldr	r1, [pc, #316]	; (800d33c <etharp_tmr+0x14c>)
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	4613      	mov	r3, r2
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	4413      	add	r3, r2
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	440b      	add	r3, r1
 800d20a:	3314      	adds	r3, #20
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d210:	78fb      	ldrb	r3, [r7, #3]
 800d212:	2b00      	cmp	r3, #0
 800d214:	f000 8086 	beq.w	800d324 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d218:	4948      	ldr	r1, [pc, #288]	; (800d33c <etharp_tmr+0x14c>)
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	4613      	mov	r3, r2
 800d21e:	005b      	lsls	r3, r3, #1
 800d220:	4413      	add	r3, r2
 800d222:	00db      	lsls	r3, r3, #3
 800d224:	440b      	add	r3, r1
 800d226:	3312      	adds	r3, #18
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	3301      	adds	r3, #1
 800d22c:	b298      	uxth	r0, r3
 800d22e:	4943      	ldr	r1, [pc, #268]	; (800d33c <etharp_tmr+0x14c>)
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	4613      	mov	r3, r2
 800d234:	005b      	lsls	r3, r3, #1
 800d236:	4413      	add	r3, r2
 800d238:	00db      	lsls	r3, r3, #3
 800d23a:	440b      	add	r3, r1
 800d23c:	3312      	adds	r3, #18
 800d23e:	4602      	mov	r2, r0
 800d240:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d242:	493e      	ldr	r1, [pc, #248]	; (800d33c <etharp_tmr+0x14c>)
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	4613      	mov	r3, r2
 800d248:	005b      	lsls	r3, r3, #1
 800d24a:	4413      	add	r3, r2
 800d24c:	00db      	lsls	r3, r3, #3
 800d24e:	440b      	add	r3, r1
 800d250:	3312      	adds	r3, #18
 800d252:	881b      	ldrh	r3, [r3, #0]
 800d254:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d258:	d215      	bcs.n	800d286 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d25a:	4938      	ldr	r1, [pc, #224]	; (800d33c <etharp_tmr+0x14c>)
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	4613      	mov	r3, r2
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	4413      	add	r3, r2
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	440b      	add	r3, r1
 800d268:	3314      	adds	r3, #20
 800d26a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d10e      	bne.n	800d28e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d270:	4932      	ldr	r1, [pc, #200]	; (800d33c <etharp_tmr+0x14c>)
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	4613      	mov	r3, r2
 800d276:	005b      	lsls	r3, r3, #1
 800d278:	4413      	add	r3, r2
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	440b      	add	r3, r1
 800d27e:	3312      	adds	r3, #18
 800d280:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d282:	2b04      	cmp	r3, #4
 800d284:	d903      	bls.n	800d28e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff ff80 	bl	800d18c <etharp_free_entry>
 800d28c:	e04a      	b.n	800d324 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d28e:	492b      	ldr	r1, [pc, #172]	; (800d33c <etharp_tmr+0x14c>)
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	4613      	mov	r3, r2
 800d294:	005b      	lsls	r3, r3, #1
 800d296:	4413      	add	r3, r2
 800d298:	00db      	lsls	r3, r3, #3
 800d29a:	440b      	add	r3, r1
 800d29c:	3314      	adds	r3, #20
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	d10a      	bne.n	800d2ba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d2a4:	4925      	ldr	r1, [pc, #148]	; (800d33c <etharp_tmr+0x14c>)
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	4413      	add	r3, r2
 800d2ae:	00db      	lsls	r3, r3, #3
 800d2b0:	440b      	add	r3, r1
 800d2b2:	3314      	adds	r3, #20
 800d2b4:	2204      	movs	r2, #4
 800d2b6:	701a      	strb	r2, [r3, #0]
 800d2b8:	e034      	b.n	800d324 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d2ba:	4920      	ldr	r1, [pc, #128]	; (800d33c <etharp_tmr+0x14c>)
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	005b      	lsls	r3, r3, #1
 800d2c2:	4413      	add	r3, r2
 800d2c4:	00db      	lsls	r3, r3, #3
 800d2c6:	440b      	add	r3, r1
 800d2c8:	3314      	adds	r3, #20
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	d10a      	bne.n	800d2e6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d2d0:	491a      	ldr	r1, [pc, #104]	; (800d33c <etharp_tmr+0x14c>)
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	005b      	lsls	r3, r3, #1
 800d2d8:	4413      	add	r3, r2
 800d2da:	00db      	lsls	r3, r3, #3
 800d2dc:	440b      	add	r3, r1
 800d2de:	3314      	adds	r3, #20
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	701a      	strb	r2, [r3, #0]
 800d2e4:	e01e      	b.n	800d324 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d2e6:	4915      	ldr	r1, [pc, #84]	; (800d33c <etharp_tmr+0x14c>)
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	005b      	lsls	r3, r3, #1
 800d2ee:	4413      	add	r3, r2
 800d2f0:	00db      	lsls	r3, r3, #3
 800d2f2:	440b      	add	r3, r1
 800d2f4:	3314      	adds	r3, #20
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d113      	bne.n	800d324 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d2fc:	490f      	ldr	r1, [pc, #60]	; (800d33c <etharp_tmr+0x14c>)
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	4613      	mov	r3, r2
 800d302:	005b      	lsls	r3, r3, #1
 800d304:	4413      	add	r3, r2
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	440b      	add	r3, r1
 800d30a:	3308      	adds	r3, #8
 800d30c:	6818      	ldr	r0, [r3, #0]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	4613      	mov	r3, r2
 800d312:	005b      	lsls	r3, r3, #1
 800d314:	4413      	add	r3, r2
 800d316:	00db      	lsls	r3, r3, #3
 800d318:	4a08      	ldr	r2, [pc, #32]	; (800d33c <etharp_tmr+0x14c>)
 800d31a:	4413      	add	r3, r2
 800d31c:	3304      	adds	r3, #4
 800d31e:	4619      	mov	r1, r3
 800d320:	f000 fe72 	bl	800e008 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	3301      	adds	r3, #1
 800d328:	607b      	str	r3, [r7, #4]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b09      	cmp	r3, #9
 800d32e:	f77f af65 	ble.w	800d1fc <etharp_tmr+0xc>
      }
    }
  }
}
 800d332:	bf00      	nop
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	2000011c 	.word	0x2000011c

0800d340 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08a      	sub	sp, #40	; 0x28
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	460b      	mov	r3, r1
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d34e:	230a      	movs	r3, #10
 800d350:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d352:	230a      	movs	r3, #10
 800d354:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d356:	230a      	movs	r3, #10
 800d358:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d35e:	230a      	movs	r3, #10
 800d360:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	83bb      	strh	r3, [r7, #28]
 800d366:	2300      	movs	r3, #0
 800d368:	837b      	strh	r3, [r7, #26]
 800d36a:	2300      	movs	r3, #0
 800d36c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d36e:	2300      	movs	r3, #0
 800d370:	843b      	strh	r3, [r7, #32]
 800d372:	e0ae      	b.n	800d4d2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d374:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d378:	49a6      	ldr	r1, [pc, #664]	; (800d614 <etharp_find_entry+0x2d4>)
 800d37a:	4613      	mov	r3, r2
 800d37c:	005b      	lsls	r3, r3, #1
 800d37e:	4413      	add	r3, r2
 800d380:	00db      	lsls	r3, r3, #3
 800d382:	440b      	add	r3, r1
 800d384:	3314      	adds	r3, #20
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d38a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d38e:	2b0a      	cmp	r3, #10
 800d390:	d105      	bne.n	800d39e <etharp_find_entry+0x5e>
 800d392:	7dfb      	ldrb	r3, [r7, #23]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d102      	bne.n	800d39e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d398:	8c3b      	ldrh	r3, [r7, #32]
 800d39a:	847b      	strh	r3, [r7, #34]	; 0x22
 800d39c:	e095      	b.n	800d4ca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 8092 	beq.w	800d4ca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d3a6:	7dfb      	ldrb	r3, [r7, #23]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d009      	beq.n	800d3c0 <etharp_find_entry+0x80>
 800d3ac:	7dfb      	ldrb	r3, [r7, #23]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d806      	bhi.n	800d3c0 <etharp_find_entry+0x80>
 800d3b2:	4b99      	ldr	r3, [pc, #612]	; (800d618 <etharp_find_entry+0x2d8>)
 800d3b4:	f44f 7292 	mov.w	r2, #292	; 0x124
 800d3b8:	4998      	ldr	r1, [pc, #608]	; (800d61c <etharp_find_entry+0x2dc>)
 800d3ba:	4899      	ldr	r0, [pc, #612]	; (800d620 <etharp_find_entry+0x2e0>)
 800d3bc:	f002 fb3a 	bl	800fa34 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d020      	beq.n	800d408 <etharp_find_entry+0xc8>
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6819      	ldr	r1, [r3, #0]
 800d3ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d3ce:	4891      	ldr	r0, [pc, #580]	; (800d614 <etharp_find_entry+0x2d4>)
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	005b      	lsls	r3, r3, #1
 800d3d4:	4413      	add	r3, r2
 800d3d6:	00db      	lsls	r3, r3, #3
 800d3d8:	4403      	add	r3, r0
 800d3da:	3304      	adds	r3, #4
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4299      	cmp	r1, r3
 800d3e0:	d112      	bne.n	800d408 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00c      	beq.n	800d402 <etharp_find_entry+0xc2>
 800d3e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d3ec:	4989      	ldr	r1, [pc, #548]	; (800d614 <etharp_find_entry+0x2d4>)
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	005b      	lsls	r3, r3, #1
 800d3f2:	4413      	add	r3, r2
 800d3f4:	00db      	lsls	r3, r3, #3
 800d3f6:	440b      	add	r3, r1
 800d3f8:	3308      	adds	r3, #8
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d102      	bne.n	800d408 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d402:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d406:	e100      	b.n	800d60a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d408:	7dfb      	ldrb	r3, [r7, #23]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d140      	bne.n	800d490 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d40e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d412:	4980      	ldr	r1, [pc, #512]	; (800d614 <etharp_find_entry+0x2d4>)
 800d414:	4613      	mov	r3, r2
 800d416:	005b      	lsls	r3, r3, #1
 800d418:	4413      	add	r3, r2
 800d41a:	00db      	lsls	r3, r3, #3
 800d41c:	440b      	add	r3, r1
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d01a      	beq.n	800d45a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d424:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d428:	497a      	ldr	r1, [pc, #488]	; (800d614 <etharp_find_entry+0x2d4>)
 800d42a:	4613      	mov	r3, r2
 800d42c:	005b      	lsls	r3, r3, #1
 800d42e:	4413      	add	r3, r2
 800d430:	00db      	lsls	r3, r3, #3
 800d432:	440b      	add	r3, r1
 800d434:	3312      	adds	r3, #18
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	8bba      	ldrh	r2, [r7, #28]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d845      	bhi.n	800d4ca <etharp_find_entry+0x18a>
            old_queue = i;
 800d43e:	8c3b      	ldrh	r3, [r7, #32]
 800d440:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d442:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d446:	4973      	ldr	r1, [pc, #460]	; (800d614 <etharp_find_entry+0x2d4>)
 800d448:	4613      	mov	r3, r2
 800d44a:	005b      	lsls	r3, r3, #1
 800d44c:	4413      	add	r3, r2
 800d44e:	00db      	lsls	r3, r3, #3
 800d450:	440b      	add	r3, r1
 800d452:	3312      	adds	r3, #18
 800d454:	881b      	ldrh	r3, [r3, #0]
 800d456:	83bb      	strh	r3, [r7, #28]
 800d458:	e037      	b.n	800d4ca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d45a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d45e:	496d      	ldr	r1, [pc, #436]	; (800d614 <etharp_find_entry+0x2d4>)
 800d460:	4613      	mov	r3, r2
 800d462:	005b      	lsls	r3, r3, #1
 800d464:	4413      	add	r3, r2
 800d466:	00db      	lsls	r3, r3, #3
 800d468:	440b      	add	r3, r1
 800d46a:	3312      	adds	r3, #18
 800d46c:	881b      	ldrh	r3, [r3, #0]
 800d46e:	8b7a      	ldrh	r2, [r7, #26]
 800d470:	429a      	cmp	r2, r3
 800d472:	d82a      	bhi.n	800d4ca <etharp_find_entry+0x18a>
            old_pending = i;
 800d474:	8c3b      	ldrh	r3, [r7, #32]
 800d476:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d478:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d47c:	4965      	ldr	r1, [pc, #404]	; (800d614 <etharp_find_entry+0x2d4>)
 800d47e:	4613      	mov	r3, r2
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4413      	add	r3, r2
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	440b      	add	r3, r1
 800d488:	3312      	adds	r3, #18
 800d48a:	881b      	ldrh	r3, [r3, #0]
 800d48c:	837b      	strh	r3, [r7, #26]
 800d48e:	e01c      	b.n	800d4ca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d490:	7dfb      	ldrb	r3, [r7, #23]
 800d492:	2b01      	cmp	r3, #1
 800d494:	d919      	bls.n	800d4ca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d496:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d49a:	495e      	ldr	r1, [pc, #376]	; (800d614 <etharp_find_entry+0x2d4>)
 800d49c:	4613      	mov	r3, r2
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	4413      	add	r3, r2
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	440b      	add	r3, r1
 800d4a6:	3312      	adds	r3, #18
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	8b3a      	ldrh	r2, [r7, #24]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d80c      	bhi.n	800d4ca <etharp_find_entry+0x18a>
            old_stable = i;
 800d4b0:	8c3b      	ldrh	r3, [r7, #32]
 800d4b2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d4b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4b8:	4956      	ldr	r1, [pc, #344]	; (800d614 <etharp_find_entry+0x2d4>)
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	4413      	add	r3, r2
 800d4c0:	00db      	lsls	r3, r3, #3
 800d4c2:	440b      	add	r3, r1
 800d4c4:	3312      	adds	r3, #18
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d4ca:	8c3b      	ldrh	r3, [r7, #32]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	843b      	strh	r3, [r7, #32]
 800d4d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d4d6:	2b09      	cmp	r3, #9
 800d4d8:	f77f af4c 	ble.w	800d374 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d4dc:	7afb      	ldrb	r3, [r7, #11]
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d108      	bne.n	800d4f8 <etharp_find_entry+0x1b8>
 800d4e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d4ea:	2b0a      	cmp	r3, #10
 800d4ec:	d107      	bne.n	800d4fe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d4ee:	7afb      	ldrb	r3, [r7, #11]
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d102      	bne.n	800d4fe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4fc:	e085      	b.n	800d60a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d4fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d502:	2b09      	cmp	r3, #9
 800d504:	dc02      	bgt.n	800d50c <etharp_find_entry+0x1cc>
    i = empty;
 800d506:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d508:	843b      	strh	r3, [r7, #32]
 800d50a:	e039      	b.n	800d580 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d50c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d510:	2b09      	cmp	r3, #9
 800d512:	dc14      	bgt.n	800d53e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d516:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d51c:	493d      	ldr	r1, [pc, #244]	; (800d614 <etharp_find_entry+0x2d4>)
 800d51e:	4613      	mov	r3, r2
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	4413      	add	r3, r2
 800d524:	00db      	lsls	r3, r3, #3
 800d526:	440b      	add	r3, r1
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d018      	beq.n	800d560 <etharp_find_entry+0x220>
 800d52e:	4b3a      	ldr	r3, [pc, #232]	; (800d618 <etharp_find_entry+0x2d8>)
 800d530:	f240 126d 	movw	r2, #365	; 0x16d
 800d534:	493b      	ldr	r1, [pc, #236]	; (800d624 <etharp_find_entry+0x2e4>)
 800d536:	483a      	ldr	r0, [pc, #232]	; (800d620 <etharp_find_entry+0x2e0>)
 800d538:	f002 fa7c 	bl	800fa34 <iprintf>
 800d53c:	e010      	b.n	800d560 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d53e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d542:	2b09      	cmp	r3, #9
 800d544:	dc02      	bgt.n	800d54c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d548:	843b      	strh	r3, [r7, #32]
 800d54a:	e009      	b.n	800d560 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d54c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d550:	2b09      	cmp	r3, #9
 800d552:	dc02      	bgt.n	800d55a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d554:	8bfb      	ldrh	r3, [r7, #30]
 800d556:	843b      	strh	r3, [r7, #32]
 800d558:	e002      	b.n	800d560 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d55a:	f04f 33ff 	mov.w	r3, #4294967295
 800d55e:	e054      	b.n	800d60a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d560:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d564:	2b09      	cmp	r3, #9
 800d566:	dd06      	ble.n	800d576 <etharp_find_entry+0x236>
 800d568:	4b2b      	ldr	r3, [pc, #172]	; (800d618 <etharp_find_entry+0x2d8>)
 800d56a:	f240 127f 	movw	r2, #383	; 0x17f
 800d56e:	492e      	ldr	r1, [pc, #184]	; (800d628 <etharp_find_entry+0x2e8>)
 800d570:	482b      	ldr	r0, [pc, #172]	; (800d620 <etharp_find_entry+0x2e0>)
 800d572:	f002 fa5f 	bl	800fa34 <iprintf>
    etharp_free_entry(i);
 800d576:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7ff fe06 	bl	800d18c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d580:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d584:	2b09      	cmp	r3, #9
 800d586:	dd06      	ble.n	800d596 <etharp_find_entry+0x256>
 800d588:	4b23      	ldr	r3, [pc, #140]	; (800d618 <etharp_find_entry+0x2d8>)
 800d58a:	f240 1283 	movw	r2, #387	; 0x183
 800d58e:	4926      	ldr	r1, [pc, #152]	; (800d628 <etharp_find_entry+0x2e8>)
 800d590:	4823      	ldr	r0, [pc, #140]	; (800d620 <etharp_find_entry+0x2e0>)
 800d592:	f002 fa4f 	bl	800fa34 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d596:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d59a:	491e      	ldr	r1, [pc, #120]	; (800d614 <etharp_find_entry+0x2d4>)
 800d59c:	4613      	mov	r3, r2
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	4413      	add	r3, r2
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	440b      	add	r3, r1
 800d5a6:	3314      	adds	r3, #20
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d006      	beq.n	800d5bc <etharp_find_entry+0x27c>
 800d5ae:	4b1a      	ldr	r3, [pc, #104]	; (800d618 <etharp_find_entry+0x2d8>)
 800d5b0:	f240 1285 	movw	r2, #389	; 0x185
 800d5b4:	491d      	ldr	r1, [pc, #116]	; (800d62c <etharp_find_entry+0x2ec>)
 800d5b6:	481a      	ldr	r0, [pc, #104]	; (800d620 <etharp_find_entry+0x2e0>)
 800d5b8:	f002 fa3c 	bl	800fa34 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00b      	beq.n	800d5da <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d5c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6819      	ldr	r1, [r3, #0]
 800d5ca:	4812      	ldr	r0, [pc, #72]	; (800d614 <etharp_find_entry+0x2d4>)
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	005b      	lsls	r3, r3, #1
 800d5d0:	4413      	add	r3, r2
 800d5d2:	00db      	lsls	r3, r3, #3
 800d5d4:	4403      	add	r3, r0
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d5da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5de:	490d      	ldr	r1, [pc, #52]	; (800d614 <etharp_find_entry+0x2d4>)
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	005b      	lsls	r3, r3, #1
 800d5e4:	4413      	add	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	440b      	add	r3, r1
 800d5ea:	3312      	adds	r3, #18
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d5f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5f4:	4907      	ldr	r1, [pc, #28]	; (800d614 <etharp_find_entry+0x2d4>)
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	4413      	add	r3, r2
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	440b      	add	r3, r1
 800d600:	3308      	adds	r3, #8
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d606:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3728      	adds	r7, #40	; 0x28
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	2000011c 	.word	0x2000011c
 800d618:	08012f48 	.word	0x08012f48
 800d61c:	08012f80 	.word	0x08012f80
 800d620:	08012fc0 	.word	0x08012fc0
 800d624:	08012fe8 	.word	0x08012fe8
 800d628:	08013000 	.word	0x08013000
 800d62c:	08013014 	.word	0x08013014

0800d630 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b088      	sub	sp, #32
 800d634:	af02      	add	r7, sp, #8
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
 800d63c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d644:	2b06      	cmp	r3, #6
 800d646:	d006      	beq.n	800d656 <etharp_update_arp_entry+0x26>
 800d648:	4b48      	ldr	r3, [pc, #288]	; (800d76c <etharp_update_arp_entry+0x13c>)
 800d64a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d64e:	4948      	ldr	r1, [pc, #288]	; (800d770 <etharp_update_arp_entry+0x140>)
 800d650:	4848      	ldr	r0, [pc, #288]	; (800d774 <etharp_update_arp_entry+0x144>)
 800d652:	f002 f9ef 	bl	800fa34 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d012      	beq.n	800d682 <etharp_update_arp_entry+0x52>
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00e      	beq.n	800d682 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68f9      	ldr	r1, [r7, #12]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f001 f91e 	bl	800e8ac <ip4_addr_isbroadcast_u32>
 800d670:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d672:	2b00      	cmp	r3, #0
 800d674:	d105      	bne.n	800d682 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d67e:	2be0      	cmp	r3, #224	; 0xe0
 800d680:	d102      	bne.n	800d688 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d682:	f06f 030f 	mvn.w	r3, #15
 800d686:	e06c      	b.n	800d762 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	4619      	mov	r1, r3
 800d68e:	68b8      	ldr	r0, [r7, #8]
 800d690:	f7ff fe56 	bl	800d340 <etharp_find_entry>
 800d694:	4603      	mov	r3, r0
 800d696:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d698:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	da02      	bge.n	800d6a6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d6a0:	8afb      	ldrh	r3, [r7, #22]
 800d6a2:	b25b      	sxtb	r3, r3
 800d6a4:	e05d      	b.n	800d762 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d6a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d6aa:	4933      	ldr	r1, [pc, #204]	; (800d778 <etharp_update_arp_entry+0x148>)
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	005b      	lsls	r3, r3, #1
 800d6b0:	4413      	add	r3, r2
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	440b      	add	r3, r1
 800d6b6:	3314      	adds	r3, #20
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d6bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d6c0:	492d      	ldr	r1, [pc, #180]	; (800d778 <etharp_update_arp_entry+0x148>)
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	005b      	lsls	r3, r3, #1
 800d6c6:	4413      	add	r3, r2
 800d6c8:	00db      	lsls	r3, r3, #3
 800d6ca:	440b      	add	r3, r1
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d6d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	4413      	add	r3, r2
 800d6dc:	00db      	lsls	r3, r3, #3
 800d6de:	3308      	adds	r3, #8
 800d6e0:	4a25      	ldr	r2, [pc, #148]	; (800d778 <etharp_update_arp_entry+0x148>)
 800d6e2:	4413      	add	r3, r2
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	2206      	movs	r2, #6
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f002 f98f 	bl	800fa0e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d6f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d6f4:	4920      	ldr	r1, [pc, #128]	; (800d778 <etharp_update_arp_entry+0x148>)
 800d6f6:	4613      	mov	r3, r2
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	4413      	add	r3, r2
 800d6fc:	00db      	lsls	r3, r3, #3
 800d6fe:	440b      	add	r3, r1
 800d700:	3312      	adds	r3, #18
 800d702:	2200      	movs	r2, #0
 800d704:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d70a:	491b      	ldr	r1, [pc, #108]	; (800d778 <etharp_update_arp_entry+0x148>)
 800d70c:	4613      	mov	r3, r2
 800d70e:	005b      	lsls	r3, r3, #1
 800d710:	4413      	add	r3, r2
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	440b      	add	r3, r1
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d021      	beq.n	800d760 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d71c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d720:	4915      	ldr	r1, [pc, #84]	; (800d778 <etharp_update_arp_entry+0x148>)
 800d722:	4613      	mov	r3, r2
 800d724:	005b      	lsls	r3, r3, #1
 800d726:	4413      	add	r3, r2
 800d728:	00db      	lsls	r3, r3, #3
 800d72a:	440b      	add	r3, r1
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d730:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d734:	4910      	ldr	r1, [pc, #64]	; (800d778 <etharp_update_arp_entry+0x148>)
 800d736:	4613      	mov	r3, r2
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	4413      	add	r3, r2
 800d73c:	00db      	lsls	r3, r3, #3
 800d73e:	440b      	add	r3, r1
 800d740:	2200      	movs	r2, #0
 800d742:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800d74a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6939      	ldr	r1, [r7, #16]
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f001 ffad 	bl	800f6b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d75a:	6938      	ldr	r0, [r7, #16]
 800d75c:	f7f7 fcc8 	bl	80050f0 <pbuf_free>
  }
  return ERR_OK;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	3718      	adds	r7, #24
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	08012f48 	.word	0x08012f48
 800d770:	08013040 	.word	0x08013040
 800d774:	08012fc0 	.word	0x08012fc0
 800d778:	2000011c 	.word	0x2000011c

0800d77c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d784:	2300      	movs	r3, #0
 800d786:	60fb      	str	r3, [r7, #12]
 800d788:	e01e      	b.n	800d7c8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d78a:	4913      	ldr	r1, [pc, #76]	; (800d7d8 <etharp_cleanup_netif+0x5c>)
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	4613      	mov	r3, r2
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	4413      	add	r3, r2
 800d794:	00db      	lsls	r3, r3, #3
 800d796:	440b      	add	r3, r1
 800d798:	3314      	adds	r3, #20
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d79e:	7afb      	ldrb	r3, [r7, #11]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00e      	beq.n	800d7c2 <etharp_cleanup_netif+0x46>
 800d7a4:	490c      	ldr	r1, [pc, #48]	; (800d7d8 <etharp_cleanup_netif+0x5c>)
 800d7a6:	68fa      	ldr	r2, [r7, #12]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	4413      	add	r3, r2
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	440b      	add	r3, r1
 800d7b2:	3308      	adds	r3, #8
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d102      	bne.n	800d7c2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f7ff fce5 	bl	800d18c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	60fb      	str	r3, [r7, #12]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2b09      	cmp	r3, #9
 800d7cc:	dddd      	ble.n	800d78a <etharp_cleanup_netif+0xe>
    }
  }
}
 800d7ce:	bf00      	nop
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	2000011c 	.word	0x2000011c

0800d7dc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d7dc:	b5b0      	push	{r4, r5, r7, lr}
 800d7de:	b08a      	sub	sp, #40	; 0x28
 800d7e0:	af04      	add	r7, sp, #16
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d107      	bne.n	800d7fc <etharp_input+0x20>
 800d7ec:	4b3f      	ldr	r3, [pc, #252]	; (800d8ec <etharp_input+0x110>)
 800d7ee:	f240 228a 	movw	r2, #650	; 0x28a
 800d7f2:	493f      	ldr	r1, [pc, #252]	; (800d8f0 <etharp_input+0x114>)
 800d7f4:	483f      	ldr	r0, [pc, #252]	; (800d8f4 <etharp_input+0x118>)
 800d7f6:	f002 f91d 	bl	800fa34 <iprintf>
 800d7fa:	e074      	b.n	800d8e6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	b29b      	uxth	r3, r3
 800d808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d80c:	d10c      	bne.n	800d828 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d812:	2b06      	cmp	r3, #6
 800d814:	d108      	bne.n	800d828 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d81a:	2b04      	cmp	r3, #4
 800d81c:	d104      	bne.n	800d828 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	885b      	ldrh	r3, [r3, #2]
 800d822:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d824:	2b08      	cmp	r3, #8
 800d826:	d003      	beq.n	800d830 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7f7 fc61 	bl	80050f0 <pbuf_free>
    return;
 800d82e:	e05a      	b.n	800d8e6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	330e      	adds	r3, #14
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	3318      	adds	r3, #24
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	3304      	adds	r3, #4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <etharp_input+0x74>
    for_us = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	75fb      	strb	r3, [r7, #23]
 800d84e:	e009      	b.n	800d864 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d850:	68ba      	ldr	r2, [r7, #8]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	3304      	adds	r3, #4
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	429a      	cmp	r2, r3
 800d85a:	bf0c      	ite	eq
 800d85c:	2301      	moveq	r3, #1
 800d85e:	2300      	movne	r3, #0
 800d860:	b2db      	uxtb	r3, r3
 800d862:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	f103 0208 	add.w	r2, r3, #8
 800d86a:	7dfb      	ldrb	r3, [r7, #23]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <etharp_input+0x98>
 800d870:	2301      	movs	r3, #1
 800d872:	e000      	b.n	800d876 <etharp_input+0x9a>
 800d874:	2302      	movs	r3, #2
 800d876:	f107 010c 	add.w	r1, r7, #12
 800d87a:	6838      	ldr	r0, [r7, #0]
 800d87c:	f7ff fed8 	bl	800d630 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	88db      	ldrh	r3, [r3, #6]
 800d884:	b29b      	uxth	r3, r3
 800d886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d88a:	d003      	beq.n	800d894 <etharp_input+0xb8>
 800d88c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d890:	d01e      	beq.n	800d8d0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d892:	e025      	b.n	800d8e0 <etharp_input+0x104>
      if (for_us) {
 800d894:	7dfb      	ldrb	r3, [r7, #23]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d021      	beq.n	800d8de <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d8b0:	693a      	ldr	r2, [r7, #16]
 800d8b2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d8b4:	2102      	movs	r1, #2
 800d8b6:	9103      	str	r1, [sp, #12]
 800d8b8:	f107 010c 	add.w	r1, r7, #12
 800d8bc:	9102      	str	r1, [sp, #8]
 800d8be:	9201      	str	r2, [sp, #4]
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	462b      	mov	r3, r5
 800d8c4:	4622      	mov	r2, r4
 800d8c6:	4601      	mov	r1, r0
 800d8c8:	6838      	ldr	r0, [r7, #0]
 800d8ca:	f000 faef 	bl	800deac <etharp_raw>
      break;
 800d8ce:	e006      	b.n	800d8de <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800d8d0:	f107 030c 	add.w	r3, r7, #12
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	6838      	ldr	r0, [r7, #0]
 800d8d8:	f7fe f9fe 	bl	800bcd8 <dhcp_arp_reply>
      break;
 800d8dc:	e000      	b.n	800d8e0 <etharp_input+0x104>
      break;
 800d8de:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7f7 fc05 	bl	80050f0 <pbuf_free>
}
 800d8e6:	3718      	adds	r7, #24
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bdb0      	pop	{r4, r5, r7, pc}
 800d8ec:	08012f48 	.word	0x08012f48
 800d8f0:	08013098 	.word	0x08013098
 800d8f4:	08012fc0 	.word	0x08012fc0

0800d8f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af02      	add	r7, sp, #8
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	4613      	mov	r3, r2
 800d904:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d906:	79fa      	ldrb	r2, [r7, #7]
 800d908:	4944      	ldr	r1, [pc, #272]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d90a:	4613      	mov	r3, r2
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	4413      	add	r3, r2
 800d910:	00db      	lsls	r3, r3, #3
 800d912:	440b      	add	r3, r1
 800d914:	3314      	adds	r3, #20
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d806      	bhi.n	800d92a <etharp_output_to_arp_index+0x32>
 800d91c:	4b40      	ldr	r3, [pc, #256]	; (800da20 <etharp_output_to_arp_index+0x128>)
 800d91e:	f240 22ef 	movw	r2, #751	; 0x2ef
 800d922:	4940      	ldr	r1, [pc, #256]	; (800da24 <etharp_output_to_arp_index+0x12c>)
 800d924:	4840      	ldr	r0, [pc, #256]	; (800da28 <etharp_output_to_arp_index+0x130>)
 800d926:	f002 f885 	bl	800fa34 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d92a:	79fa      	ldrb	r2, [r7, #7]
 800d92c:	493b      	ldr	r1, [pc, #236]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d92e:	4613      	mov	r3, r2
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	4413      	add	r3, r2
 800d934:	00db      	lsls	r3, r3, #3
 800d936:	440b      	add	r3, r1
 800d938:	3314      	adds	r3, #20
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	2b02      	cmp	r3, #2
 800d93e:	d153      	bne.n	800d9e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d940:	79fa      	ldrb	r2, [r7, #7]
 800d942:	4936      	ldr	r1, [pc, #216]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d944:	4613      	mov	r3, r2
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	4413      	add	r3, r2
 800d94a:	00db      	lsls	r3, r3, #3
 800d94c:	440b      	add	r3, r1
 800d94e:	3312      	adds	r3, #18
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d956:	d919      	bls.n	800d98c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d958:	79fa      	ldrb	r2, [r7, #7]
 800d95a:	4613      	mov	r3, r2
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	4413      	add	r3, r2
 800d960:	00db      	lsls	r3, r3, #3
 800d962:	4a2e      	ldr	r2, [pc, #184]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d964:	4413      	add	r3, r2
 800d966:	3304      	adds	r3, #4
 800d968:	4619      	mov	r1, r3
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	f000 fb4c 	bl	800e008 <etharp_request>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d138      	bne.n	800d9e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d976:	79fa      	ldrb	r2, [r7, #7]
 800d978:	4928      	ldr	r1, [pc, #160]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d97a:	4613      	mov	r3, r2
 800d97c:	005b      	lsls	r3, r3, #1
 800d97e:	4413      	add	r3, r2
 800d980:	00db      	lsls	r3, r3, #3
 800d982:	440b      	add	r3, r1
 800d984:	3314      	adds	r3, #20
 800d986:	2203      	movs	r2, #3
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	e02d      	b.n	800d9e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d98c:	79fa      	ldrb	r2, [r7, #7]
 800d98e:	4923      	ldr	r1, [pc, #140]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d990:	4613      	mov	r3, r2
 800d992:	005b      	lsls	r3, r3, #1
 800d994:	4413      	add	r3, r2
 800d996:	00db      	lsls	r3, r3, #3
 800d998:	440b      	add	r3, r1
 800d99a:	3312      	adds	r3, #18
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d9a2:	d321      	bcc.n	800d9e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d9a4:	79fa      	ldrb	r2, [r7, #7]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	005b      	lsls	r3, r3, #1
 800d9aa:	4413      	add	r3, r2
 800d9ac:	00db      	lsls	r3, r3, #3
 800d9ae:	4a1b      	ldr	r2, [pc, #108]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d9b0:	4413      	add	r3, r2
 800d9b2:	1d19      	adds	r1, r3, #4
 800d9b4:	79fa      	ldrb	r2, [r7, #7]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	005b      	lsls	r3, r3, #1
 800d9ba:	4413      	add	r3, r2
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	3308      	adds	r3, #8
 800d9c0:	4a16      	ldr	r2, [pc, #88]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d9c2:	4413      	add	r3, r2
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f000 fafb 	bl	800dfc4 <etharp_request_dst>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d109      	bne.n	800d9e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d9d4:	79fa      	ldrb	r2, [r7, #7]
 800d9d6:	4911      	ldr	r1, [pc, #68]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d9d8:	4613      	mov	r3, r2
 800d9da:	005b      	lsls	r3, r3, #1
 800d9dc:	4413      	add	r3, r2
 800d9de:	00db      	lsls	r3, r3, #3
 800d9e0:	440b      	add	r3, r1
 800d9e2:	3314      	adds	r3, #20
 800d9e4:	2203      	movs	r2, #3
 800d9e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800d9ee:	79fa      	ldrb	r2, [r7, #7]
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	005b      	lsls	r3, r3, #1
 800d9f4:	4413      	add	r3, r2
 800d9f6:	00db      	lsls	r3, r3, #3
 800d9f8:	3308      	adds	r3, #8
 800d9fa:	4a08      	ldr	r2, [pc, #32]	; (800da1c <etharp_output_to_arp_index+0x124>)
 800d9fc:	4413      	add	r3, r2
 800d9fe:	1d1a      	adds	r2, r3, #4
 800da00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	4613      	mov	r3, r2
 800da08:	460a      	mov	r2, r1
 800da0a:	68b9      	ldr	r1, [r7, #8]
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f001 fe51 	bl	800f6b4 <ethernet_output>
 800da12:	4603      	mov	r3, r0
}
 800da14:	4618      	mov	r0, r3
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	2000011c 	.word	0x2000011c
 800da20:	08012f48 	.word	0x08012f48
 800da24:	080130b8 	.word	0x080130b8
 800da28:	08012fc0 	.word	0x08012fc0

0800da2c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b08a      	sub	sp, #40	; 0x28
 800da30:	af02      	add	r7, sp, #8
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d106      	bne.n	800da50 <etharp_output+0x24>
 800da42:	4b73      	ldr	r3, [pc, #460]	; (800dc10 <etharp_output+0x1e4>)
 800da44:	f240 321e 	movw	r2, #798	; 0x31e
 800da48:	4972      	ldr	r1, [pc, #456]	; (800dc14 <etharp_output+0x1e8>)
 800da4a:	4873      	ldr	r0, [pc, #460]	; (800dc18 <etharp_output+0x1ec>)
 800da4c:	f001 fff2 	bl	800fa34 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <etharp_output+0x38>
 800da56:	4b6e      	ldr	r3, [pc, #440]	; (800dc10 <etharp_output+0x1e4>)
 800da58:	f240 321f 	movw	r2, #799	; 0x31f
 800da5c:	496f      	ldr	r1, [pc, #444]	; (800dc1c <etharp_output+0x1f0>)
 800da5e:	486e      	ldr	r0, [pc, #440]	; (800dc18 <etharp_output+0x1ec>)
 800da60:	f001 ffe8 	bl	800fa34 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d106      	bne.n	800da78 <etharp_output+0x4c>
 800da6a:	4b69      	ldr	r3, [pc, #420]	; (800dc10 <etharp_output+0x1e4>)
 800da6c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800da70:	496b      	ldr	r1, [pc, #428]	; (800dc20 <etharp_output+0x1f4>)
 800da72:	4869      	ldr	r0, [pc, #420]	; (800dc18 <etharp_output+0x1ec>)
 800da74:	f001 ffde 	bl	800fa34 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68f9      	ldr	r1, [r7, #12]
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 ff14 	bl	800e8ac <ip4_addr_isbroadcast_u32>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800da8a:	4b66      	ldr	r3, [pc, #408]	; (800dc24 <etharp_output+0x1f8>)
 800da8c:	61fb      	str	r3, [r7, #28]
 800da8e:	e0af      	b.n	800dbf0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da98:	2be0      	cmp	r3, #224	; 0xe0
 800da9a:	d118      	bne.n	800dace <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800da9c:	2301      	movs	r3, #1
 800da9e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800daa0:	2300      	movs	r3, #0
 800daa2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800daa4:	235e      	movs	r3, #94	; 0x5e
 800daa6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	3301      	adds	r3, #1
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dab2:	b2db      	uxtb	r3, r3
 800dab4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	3302      	adds	r3, #2
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3303      	adds	r3, #3
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dac6:	f107 0310 	add.w	r3, r7, #16
 800daca:	61fb      	str	r3, [r7, #28]
 800dacc:	e090      	b.n	800dbf0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3304      	adds	r3, #4
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	405a      	eors	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3308      	adds	r3, #8
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4013      	ands	r3, r2
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d012      	beq.n	800db0c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800daec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d00b      	beq.n	800db0c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	330c      	adds	r3, #12
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d003      	beq.n	800db06 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	330c      	adds	r3, #12
 800db02:	61bb      	str	r3, [r7, #24]
 800db04:	e002      	b.n	800db0c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800db06:	f06f 0303 	mvn.w	r3, #3
 800db0a:	e07d      	b.n	800dc08 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800db0c:	4b46      	ldr	r3, [pc, #280]	; (800dc28 <etharp_output+0x1fc>)
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	4619      	mov	r1, r3
 800db12:	4a46      	ldr	r2, [pc, #280]	; (800dc2c <etharp_output+0x200>)
 800db14:	460b      	mov	r3, r1
 800db16:	005b      	lsls	r3, r3, #1
 800db18:	440b      	add	r3, r1
 800db1a:	00db      	lsls	r3, r3, #3
 800db1c:	4413      	add	r3, r2
 800db1e:	3314      	adds	r3, #20
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d925      	bls.n	800db72 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800db26:	4b40      	ldr	r3, [pc, #256]	; (800dc28 <etharp_output+0x1fc>)
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	4619      	mov	r1, r3
 800db2c:	4a3f      	ldr	r2, [pc, #252]	; (800dc2c <etharp_output+0x200>)
 800db2e:	460b      	mov	r3, r1
 800db30:	005b      	lsls	r3, r3, #1
 800db32:	440b      	add	r3, r1
 800db34:	00db      	lsls	r3, r3, #3
 800db36:	4413      	add	r3, r2
 800db38:	3308      	adds	r3, #8
 800db3a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800db3c:	68fa      	ldr	r2, [r7, #12]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d117      	bne.n	800db72 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	4b38      	ldr	r3, [pc, #224]	; (800dc28 <etharp_output+0x1fc>)
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	4618      	mov	r0, r3
 800db4c:	4937      	ldr	r1, [pc, #220]	; (800dc2c <etharp_output+0x200>)
 800db4e:	4603      	mov	r3, r0
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	4403      	add	r3, r0
 800db54:	00db      	lsls	r3, r3, #3
 800db56:	440b      	add	r3, r1
 800db58:	3304      	adds	r3, #4
 800db5a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d108      	bne.n	800db72 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800db60:	4b31      	ldr	r3, [pc, #196]	; (800dc28 <etharp_output+0x1fc>)
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	461a      	mov	r2, r3
 800db66:	68b9      	ldr	r1, [r7, #8]
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f7ff fec5 	bl	800d8f8 <etharp_output_to_arp_index>
 800db6e:	4603      	mov	r3, r0
 800db70:	e04a      	b.n	800dc08 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800db72:	2300      	movs	r3, #0
 800db74:	75fb      	strb	r3, [r7, #23]
 800db76:	e031      	b.n	800dbdc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800db78:	7dfa      	ldrb	r2, [r7, #23]
 800db7a:	492c      	ldr	r1, [pc, #176]	; (800dc2c <etharp_output+0x200>)
 800db7c:	4613      	mov	r3, r2
 800db7e:	005b      	lsls	r3, r3, #1
 800db80:	4413      	add	r3, r2
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	440b      	add	r3, r1
 800db86:	3314      	adds	r3, #20
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d923      	bls.n	800dbd6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800db8e:	7dfa      	ldrb	r2, [r7, #23]
 800db90:	4926      	ldr	r1, [pc, #152]	; (800dc2c <etharp_output+0x200>)
 800db92:	4613      	mov	r3, r2
 800db94:	005b      	lsls	r3, r3, #1
 800db96:	4413      	add	r3, r2
 800db98:	00db      	lsls	r3, r3, #3
 800db9a:	440b      	add	r3, r1
 800db9c:	3308      	adds	r3, #8
 800db9e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d117      	bne.n	800dbd6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800dba6:	69bb      	ldr	r3, [r7, #24]
 800dba8:	6819      	ldr	r1, [r3, #0]
 800dbaa:	7dfa      	ldrb	r2, [r7, #23]
 800dbac:	481f      	ldr	r0, [pc, #124]	; (800dc2c <etharp_output+0x200>)
 800dbae:	4613      	mov	r3, r2
 800dbb0:	005b      	lsls	r3, r3, #1
 800dbb2:	4413      	add	r3, r2
 800dbb4:	00db      	lsls	r3, r3, #3
 800dbb6:	4403      	add	r3, r0
 800dbb8:	3304      	adds	r3, #4
 800dbba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800dbbc:	4299      	cmp	r1, r3
 800dbbe:	d10a      	bne.n	800dbd6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800dbc0:	4a19      	ldr	r2, [pc, #100]	; (800dc28 <etharp_output+0x1fc>)
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
 800dbc4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dbc6:	7dfb      	ldrb	r3, [r7, #23]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	68b9      	ldr	r1, [r7, #8]
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7ff fe93 	bl	800d8f8 <etharp_output_to_arp_index>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	e018      	b.n	800dc08 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	75fb      	strb	r3, [r7, #23]
 800dbdc:	7dfb      	ldrb	r3, [r7, #23]
 800dbde:	2b09      	cmp	r3, #9
 800dbe0:	d9ca      	bls.n	800db78 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	69b9      	ldr	r1, [r7, #24]
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 f822 	bl	800dc30 <etharp_query>
 800dbec:	4603      	mov	r3, r0
 800dbee:	e00b      	b.n	800dc08 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800dbf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbfa:	9300      	str	r3, [sp, #0]
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	68b9      	ldr	r1, [r7, #8]
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f001 fd57 	bl	800f6b4 <ethernet_output>
 800dc06:	4603      	mov	r3, r0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3720      	adds	r7, #32
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	08012f48 	.word	0x08012f48
 800dc14:	08013098 	.word	0x08013098
 800dc18:	08012fc0 	.word	0x08012fc0
 800dc1c:	080130e8 	.word	0x080130e8
 800dc20:	08013088 	.word	0x08013088
 800dc24:	0801370c 	.word	0x0801370c
 800dc28:	2000020c 	.word	0x2000020c
 800dc2c:	2000011c 	.word	0x2000011c

0800dc30 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b08c      	sub	sp, #48	; 0x30
 800dc34:	af02      	add	r7, sp, #8
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	60b9      	str	r1, [r7, #8]
 800dc3a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	332a      	adds	r3, #42	; 0x2a
 800dc40:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800dc42:	23ff      	movs	r3, #255	; 0xff
 800dc44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	68f9      	ldr	r1, [r7, #12]
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 fe2a 	bl	800e8ac <ip4_addr_isbroadcast_u32>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10c      	bne.n	800dc78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dc66:	2be0      	cmp	r3, #224	; 0xe0
 800dc68:	d006      	beq.n	800dc78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d003      	beq.n	800dc78 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d102      	bne.n	800dc7e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dc78:	f06f 030f 	mvn.w	r3, #15
 800dc7c:	e102      	b.n	800de84 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	2101      	movs	r1, #1
 800dc82:	68b8      	ldr	r0, [r7, #8]
 800dc84:	f7ff fb5c 	bl	800d340 <etharp_find_entry>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800dc8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	da02      	bge.n	800dc9a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800dc94:	8a7b      	ldrh	r3, [r7, #18]
 800dc96:	b25b      	sxtb	r3, r3
 800dc98:	e0f4      	b.n	800de84 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800dc9a:	8a7b      	ldrh	r3, [r7, #18]
 800dc9c:	2b7e      	cmp	r3, #126	; 0x7e
 800dc9e:	d906      	bls.n	800dcae <etharp_query+0x7e>
 800dca0:	4b7a      	ldr	r3, [pc, #488]	; (800de8c <etharp_query+0x25c>)
 800dca2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800dca6:	497a      	ldr	r1, [pc, #488]	; (800de90 <etharp_query+0x260>)
 800dca8:	487a      	ldr	r0, [pc, #488]	; (800de94 <etharp_query+0x264>)
 800dcaa:	f001 fec3 	bl	800fa34 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800dcae:	8a7b      	ldrh	r3, [r7, #18]
 800dcb0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dcb2:	7c7a      	ldrb	r2, [r7, #17]
 800dcb4:	4978      	ldr	r1, [pc, #480]	; (800de98 <etharp_query+0x268>)
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	4413      	add	r3, r2
 800dcbc:	00db      	lsls	r3, r3, #3
 800dcbe:	440b      	add	r3, r1
 800dcc0:	3314      	adds	r3, #20
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d115      	bne.n	800dcf4 <etharp_query+0xc4>
    is_new_entry = 1;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dccc:	7c7a      	ldrb	r2, [r7, #17]
 800dcce:	4972      	ldr	r1, [pc, #456]	; (800de98 <etharp_query+0x268>)
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	005b      	lsls	r3, r3, #1
 800dcd4:	4413      	add	r3, r2
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	440b      	add	r3, r1
 800dcda:	3314      	adds	r3, #20
 800dcdc:	2201      	movs	r2, #1
 800dcde:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dce0:	7c7a      	ldrb	r2, [r7, #17]
 800dce2:	496d      	ldr	r1, [pc, #436]	; (800de98 <etharp_query+0x268>)
 800dce4:	4613      	mov	r3, r2
 800dce6:	005b      	lsls	r3, r3, #1
 800dce8:	4413      	add	r3, r2
 800dcea:	00db      	lsls	r3, r3, #3
 800dcec:	440b      	add	r3, r1
 800dcee:	3308      	adds	r3, #8
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dcf4:	7c7a      	ldrb	r2, [r7, #17]
 800dcf6:	4968      	ldr	r1, [pc, #416]	; (800de98 <etharp_query+0x268>)
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	4413      	add	r3, r2
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	440b      	add	r3, r1
 800dd02:	3314      	adds	r3, #20
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d011      	beq.n	800dd2e <etharp_query+0xfe>
 800dd0a:	7c7a      	ldrb	r2, [r7, #17]
 800dd0c:	4962      	ldr	r1, [pc, #392]	; (800de98 <etharp_query+0x268>)
 800dd0e:	4613      	mov	r3, r2
 800dd10:	005b      	lsls	r3, r3, #1
 800dd12:	4413      	add	r3, r2
 800dd14:	00db      	lsls	r3, r3, #3
 800dd16:	440b      	add	r3, r1
 800dd18:	3314      	adds	r3, #20
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d806      	bhi.n	800dd2e <etharp_query+0xfe>
 800dd20:	4b5a      	ldr	r3, [pc, #360]	; (800de8c <etharp_query+0x25c>)
 800dd22:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dd26:	495d      	ldr	r1, [pc, #372]	; (800de9c <etharp_query+0x26c>)
 800dd28:	485a      	ldr	r0, [pc, #360]	; (800de94 <etharp_query+0x264>)
 800dd2a:	f001 fe83 	bl	800fa34 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dd2e:	6a3b      	ldr	r3, [r7, #32]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d102      	bne.n	800dd3a <etharp_query+0x10a>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10c      	bne.n	800dd54 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800dd3a:	68b9      	ldr	r1, [r7, #8]
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f000 f963 	bl	800e008 <etharp_request>
 800dd42:	4603      	mov	r3, r0
 800dd44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d102      	bne.n	800dd54 <etharp_query+0x124>
      return result;
 800dd4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dd52:	e097      	b.n	800de84 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d106      	bne.n	800dd68 <etharp_query+0x138>
 800dd5a:	4b4c      	ldr	r3, [pc, #304]	; (800de8c <etharp_query+0x25c>)
 800dd5c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800dd60:	494f      	ldr	r1, [pc, #316]	; (800dea0 <etharp_query+0x270>)
 800dd62:	484c      	ldr	r0, [pc, #304]	; (800de94 <etharp_query+0x264>)
 800dd64:	f001 fe66 	bl	800fa34 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800dd68:	7c7a      	ldrb	r2, [r7, #17]
 800dd6a:	494b      	ldr	r1, [pc, #300]	; (800de98 <etharp_query+0x268>)
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	4413      	add	r3, r2
 800dd72:	00db      	lsls	r3, r3, #3
 800dd74:	440b      	add	r3, r1
 800dd76:	3314      	adds	r3, #20
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d918      	bls.n	800ddb0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800dd7e:	4a49      	ldr	r2, [pc, #292]	; (800dea4 <etharp_query+0x274>)
 800dd80:	7c7b      	ldrb	r3, [r7, #17]
 800dd82:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800dd84:	7c7a      	ldrb	r2, [r7, #17]
 800dd86:	4613      	mov	r3, r2
 800dd88:	005b      	lsls	r3, r3, #1
 800dd8a:	4413      	add	r3, r2
 800dd8c:	00db      	lsls	r3, r3, #3
 800dd8e:	3308      	adds	r3, #8
 800dd90:	4a41      	ldr	r2, [pc, #260]	; (800de98 <etharp_query+0x268>)
 800dd92:	4413      	add	r3, r2
 800dd94:	1d1a      	adds	r2, r3, #4
 800dd96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	6879      	ldr	r1, [r7, #4]
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f001 fc86 	bl	800f6b4 <ethernet_output>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddae:	e067      	b.n	800de80 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ddb0:	7c7a      	ldrb	r2, [r7, #17]
 800ddb2:	4939      	ldr	r1, [pc, #228]	; (800de98 <etharp_query+0x268>)
 800ddb4:	4613      	mov	r3, r2
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	4413      	add	r3, r2
 800ddba:	00db      	lsls	r3, r3, #3
 800ddbc:	440b      	add	r3, r1
 800ddbe:	3314      	adds	r3, #20
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d15c      	bne.n	800de80 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ddce:	e01c      	b.n	800de0a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	895a      	ldrh	r2, [r3, #10]
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	891b      	ldrh	r3, [r3, #8]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d10a      	bne.n	800ddf2 <etharp_query+0x1c2>
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d006      	beq.n	800ddf2 <etharp_query+0x1c2>
 800dde4:	4b29      	ldr	r3, [pc, #164]	; (800de8c <etharp_query+0x25c>)
 800dde6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ddea:	492f      	ldr	r1, [pc, #188]	; (800dea8 <etharp_query+0x278>)
 800ddec:	4829      	ldr	r0, [pc, #164]	; (800de94 <etharp_query+0x264>)
 800ddee:	f001 fe21 	bl	800fa34 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	7b1b      	ldrb	r3, [r3, #12]
 800ddf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d002      	beq.n	800de04 <etharp_query+0x1d4>
        copy_needed = 1;
 800ddfe:	2301      	movs	r3, #1
 800de00:	61bb      	str	r3, [r7, #24]
        break;
 800de02:	e005      	b.n	800de10 <etharp_query+0x1e0>
      }
      p = p->next;
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	61fb      	str	r3, [r7, #28]
    while (p) {
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1df      	bne.n	800ddd0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d007      	beq.n	800de26 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	f44f 7120 	mov.w	r1, #640	; 0x280
 800de1c:	200e      	movs	r0, #14
 800de1e:	f7f7 fbd3 	bl	80055c8 <pbuf_clone>
 800de22:	61f8      	str	r0, [r7, #28]
 800de24:	e004      	b.n	800de30 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800de2a:	69f8      	ldr	r0, [r7, #28]
 800de2c:	f7f7 fa00 	bl	8005230 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d021      	beq.n	800de7a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800de36:	7c7a      	ldrb	r2, [r7, #17]
 800de38:	4917      	ldr	r1, [pc, #92]	; (800de98 <etharp_query+0x268>)
 800de3a:	4613      	mov	r3, r2
 800de3c:	005b      	lsls	r3, r3, #1
 800de3e:	4413      	add	r3, r2
 800de40:	00db      	lsls	r3, r3, #3
 800de42:	440b      	add	r3, r1
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00a      	beq.n	800de60 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800de4a:	7c7a      	ldrb	r2, [r7, #17]
 800de4c:	4912      	ldr	r1, [pc, #72]	; (800de98 <etharp_query+0x268>)
 800de4e:	4613      	mov	r3, r2
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	4413      	add	r3, r2
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	440b      	add	r3, r1
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7f7 f948 	bl	80050f0 <pbuf_free>
      }
      arp_table[i].q = p;
 800de60:	7c7a      	ldrb	r2, [r7, #17]
 800de62:	490d      	ldr	r1, [pc, #52]	; (800de98 <etharp_query+0x268>)
 800de64:	4613      	mov	r3, r2
 800de66:	005b      	lsls	r3, r3, #1
 800de68:	4413      	add	r3, r2
 800de6a:	00db      	lsls	r3, r3, #3
 800de6c:	440b      	add	r3, r1
 800de6e:	69fa      	ldr	r2, [r7, #28]
 800de70:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800de72:	2300      	movs	r3, #0
 800de74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de78:	e002      	b.n	800de80 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800de7a:	23ff      	movs	r3, #255	; 0xff
 800de7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800de80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800de84:	4618      	mov	r0, r3
 800de86:	3728      	adds	r7, #40	; 0x28
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	08012f48 	.word	0x08012f48
 800de90:	080130f4 	.word	0x080130f4
 800de94:	08012fc0 	.word	0x08012fc0
 800de98:	2000011c 	.word	0x2000011c
 800de9c:	08013104 	.word	0x08013104
 800dea0:	080130e8 	.word	0x080130e8
 800dea4:	2000020c 	.word	0x2000020c
 800dea8:	0801312c 	.word	0x0801312c

0800deac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b08a      	sub	sp, #40	; 0x28
 800deb0:	af02      	add	r7, sp, #8
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800deba:	2300      	movs	r3, #0
 800debc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d106      	bne.n	800ded2 <etharp_raw+0x26>
 800dec4:	4b3a      	ldr	r3, [pc, #232]	; (800dfb0 <etharp_raw+0x104>)
 800dec6:	f240 4257 	movw	r2, #1111	; 0x457
 800deca:	493a      	ldr	r1, [pc, #232]	; (800dfb4 <etharp_raw+0x108>)
 800decc:	483a      	ldr	r0, [pc, #232]	; (800dfb8 <etharp_raw+0x10c>)
 800dece:	f001 fdb1 	bl	800fa34 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ded2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ded6:	211c      	movs	r1, #28
 800ded8:	200e      	movs	r0, #14
 800deda:	f7f6 fe29 	bl	8004b30 <pbuf_alloc>
 800dede:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d102      	bne.n	800deec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800dee6:	f04f 33ff 	mov.w	r3, #4294967295
 800deea:	e05d      	b.n	800dfa8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	895b      	ldrh	r3, [r3, #10]
 800def0:	2b1b      	cmp	r3, #27
 800def2:	d806      	bhi.n	800df02 <etharp_raw+0x56>
 800def4:	4b2e      	ldr	r3, [pc, #184]	; (800dfb0 <etharp_raw+0x104>)
 800def6:	f240 4263 	movw	r2, #1123	; 0x463
 800defa:	4930      	ldr	r1, [pc, #192]	; (800dfbc <etharp_raw+0x110>)
 800defc:	482e      	ldr	r0, [pc, #184]	; (800dfb8 <etharp_raw+0x10c>)
 800defe:	f001 fd99 	bl	800fa34 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800df08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7f5 fe38 	bl	8003b80 <lwip_htons>
 800df10:	4603      	mov	r3, r0
 800df12:	461a      	mov	r2, r3
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df1e:	2b06      	cmp	r3, #6
 800df20:	d006      	beq.n	800df30 <etharp_raw+0x84>
 800df22:	4b23      	ldr	r3, [pc, #140]	; (800dfb0 <etharp_raw+0x104>)
 800df24:	f240 426a 	movw	r2, #1130	; 0x46a
 800df28:	4925      	ldr	r1, [pc, #148]	; (800dfc0 <etharp_raw+0x114>)
 800df2a:	4823      	ldr	r0, [pc, #140]	; (800dfb8 <etharp_raw+0x10c>)
 800df2c:	f001 fd82 	bl	800fa34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	3308      	adds	r3, #8
 800df34:	2206      	movs	r2, #6
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	4618      	mov	r0, r3
 800df3a:	f001 fd68 	bl	800fa0e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	3312      	adds	r3, #18
 800df42:	2206      	movs	r2, #6
 800df44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df46:	4618      	mov	r0, r3
 800df48:	f001 fd61 	bl	800fa0e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	330e      	adds	r3, #14
 800df50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df52:	6812      	ldr	r2, [r2, #0]
 800df54:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	3318      	adds	r3, #24
 800df5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df5c:	6812      	ldr	r2, [r2, #0]
 800df5e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	2200      	movs	r2, #0
 800df64:	701a      	strb	r2, [r3, #0]
 800df66:	2200      	movs	r2, #0
 800df68:	f042 0201 	orr.w	r2, r2, #1
 800df6c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	2200      	movs	r2, #0
 800df72:	f042 0208 	orr.w	r2, r2, #8
 800df76:	709a      	strb	r2, [r3, #2]
 800df78:	2200      	movs	r2, #0
 800df7a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	2206      	movs	r2, #6
 800df80:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	2204      	movs	r2, #4
 800df86:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800df88:	f640 0306 	movw	r3, #2054	; 0x806
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	68ba      	ldr	r2, [r7, #8]
 800df92:	69b9      	ldr	r1, [r7, #24]
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f001 fb8d 	bl	800f6b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800df9a:	69b8      	ldr	r0, [r7, #24]
 800df9c:	f7f7 f8a8 	bl	80050f0 <pbuf_free>
  p = NULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800dfa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3720      	adds	r7, #32
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	08012f48 	.word	0x08012f48
 800dfb4:	08013098 	.word	0x08013098
 800dfb8:	08012fc0 	.word	0x08012fc0
 800dfbc:	08013148 	.word	0x08013148
 800dfc0:	0801317c 	.word	0x0801317c

0800dfc4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b088      	sub	sp, #32
 800dfc8:	af04      	add	r7, sp, #16
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	9203      	str	r2, [sp, #12]
 800dfe4:	68ba      	ldr	r2, [r7, #8]
 800dfe6:	9202      	str	r2, [sp, #8]
 800dfe8:	4a06      	ldr	r2, [pc, #24]	; (800e004 <etharp_request_dst+0x40>)
 800dfea:	9201      	str	r2, [sp, #4]
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	4603      	mov	r3, r0
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f7ff ff5a 	bl	800deac <etharp_raw>
 800dff8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	08013714 	.word	0x08013714

0800e008 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e012:	4a05      	ldr	r2, [pc, #20]	; (800e028 <etharp_request+0x20>)
 800e014:	6839      	ldr	r1, [r7, #0]
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f7ff ffd4 	bl	800dfc4 <etharp_request_dst>
 800e01c:	4603      	mov	r3, r0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	0801370c 	.word	0x0801370c

0800e02c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08e      	sub	sp, #56	; 0x38
 800e030:	af04      	add	r7, sp, #16
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e036:	4b79      	ldr	r3, [pc, #484]	; (800e21c <icmp_input+0x1f0>)
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	f003 030f 	and.w	r3, r3, #15
 800e044:	b2db      	uxtb	r3, r3
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e04c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e04e:	2b13      	cmp	r3, #19
 800e050:	f240 80cd 	bls.w	800e1ee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	895b      	ldrh	r3, [r3, #10]
 800e058:	2b03      	cmp	r3, #3
 800e05a:	f240 80ca 	bls.w	800e1f2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e068:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f000 80b7 	beq.w	800e1e0 <icmp_input+0x1b4>
 800e072:	2b08      	cmp	r3, #8
 800e074:	f040 80b7 	bne.w	800e1e6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e078:	4b69      	ldr	r3, [pc, #420]	; (800e220 <icmp_input+0x1f4>)
 800e07a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e07c:	4b67      	ldr	r3, [pc, #412]	; (800e21c <icmp_input+0x1f0>)
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e084:	2be0      	cmp	r3, #224	; 0xe0
 800e086:	f000 80bb 	beq.w	800e200 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e08a:	4b64      	ldr	r3, [pc, #400]	; (800e21c <icmp_input+0x1f0>)
 800e08c:	695a      	ldr	r2, [r3, #20]
 800e08e:	4b63      	ldr	r3, [pc, #396]	; (800e21c <icmp_input+0x1f0>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4619      	mov	r1, r3
 800e094:	4610      	mov	r0, r2
 800e096:	f000 fc09 	bl	800e8ac <ip4_addr_isbroadcast_u32>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f040 80b1 	bne.w	800e204 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	891b      	ldrh	r3, [r3, #8]
 800e0a6:	2b07      	cmp	r3, #7
 800e0a8:	f240 80a5 	bls.w	800e1f6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e0ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0ae:	330e      	adds	r3, #14
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7f6 ff86 	bl	8004fc4 <pbuf_add_header>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d04b      	beq.n	800e156 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	891a      	ldrh	r2, [r3, #8]
 800e0c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0c4:	4413      	add	r3, r2
 800e0c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	891b      	ldrh	r3, [r3, #8]
 800e0cc:	8b7a      	ldrh	r2, [r7, #26]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	f0c0 809a 	bcc.w	800e208 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e0d4:	8b7b      	ldrh	r3, [r7, #26]
 800e0d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0da:	4619      	mov	r1, r3
 800e0dc:	200e      	movs	r0, #14
 800e0de:	f7f6 fd27 	bl	8004b30 <pbuf_alloc>
 800e0e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f000 8090 	beq.w	800e20c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	895b      	ldrh	r3, [r3, #10]
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0f4:	3308      	adds	r3, #8
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d203      	bcs.n	800e102 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e0fa:	6978      	ldr	r0, [r7, #20]
 800e0fc:	f7f6 fff8 	bl	80050f0 <pbuf_free>
          goto icmperr;
 800e100:	e085      	b.n	800e20e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e10a:	4618      	mov	r0, r3
 800e10c:	f001 fc7f 	bl	800fa0e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e112:	4619      	mov	r1, r3
 800e114:	6978      	ldr	r0, [r7, #20]
 800e116:	f7f6 ff65 	bl	8004fe4 <pbuf_remove_header>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d009      	beq.n	800e134 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e120:	4b40      	ldr	r3, [pc, #256]	; (800e224 <icmp_input+0x1f8>)
 800e122:	22b6      	movs	r2, #182	; 0xb6
 800e124:	4940      	ldr	r1, [pc, #256]	; (800e228 <icmp_input+0x1fc>)
 800e126:	4841      	ldr	r0, [pc, #260]	; (800e22c <icmp_input+0x200>)
 800e128:	f001 fc84 	bl	800fa34 <iprintf>
          pbuf_free(r);
 800e12c:	6978      	ldr	r0, [r7, #20]
 800e12e:	f7f6 ffdf 	bl	80050f0 <pbuf_free>
          goto icmperr;
 800e132:	e06c      	b.n	800e20e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e134:	6879      	ldr	r1, [r7, #4]
 800e136:	6978      	ldr	r0, [r7, #20]
 800e138:	f7f7 f902 	bl	8005340 <pbuf_copy>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d003      	beq.n	800e14a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e142:	6978      	ldr	r0, [r7, #20]
 800e144:	f7f6 ffd4 	bl	80050f0 <pbuf_free>
          goto icmperr;
 800e148:	e061      	b.n	800e20e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7f6 ffd0 	bl	80050f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	607b      	str	r3, [r7, #4]
 800e154:	e00f      	b.n	800e176 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e158:	330e      	adds	r3, #14
 800e15a:	4619      	mov	r1, r3
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7f6 ff41 	bl	8004fe4 <pbuf_remove_header>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d006      	beq.n	800e176 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e168:	4b2e      	ldr	r3, [pc, #184]	; (800e224 <icmp_input+0x1f8>)
 800e16a:	22c7      	movs	r2, #199	; 0xc7
 800e16c:	4930      	ldr	r1, [pc, #192]	; (800e230 <icmp_input+0x204>)
 800e16e:	482f      	ldr	r0, [pc, #188]	; (800e22c <icmp_input+0x200>)
 800e170:	f001 fc60 	bl	800fa34 <iprintf>
          goto icmperr;
 800e174:	e04b      	b.n	800e20e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e17c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e17e:	4619      	mov	r1, r3
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7f6 ff1f 	bl	8004fc4 <pbuf_add_header>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d12b      	bne.n	800e1e4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e19a:	4b20      	ldr	r3, [pc, #128]	; (800e21c <icmp_input+0x1f0>)
 800e19c:	691a      	ldr	r2, [r3, #16]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	709a      	strb	r2, [r3, #2]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	22ff      	movs	r2, #255	; 0xff
 800e1b6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	729a      	strb	r2, [r3, #10]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	9302      	str	r3, [sp, #8]
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	23ff      	movs	r3, #255	; 0xff
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	69f9      	ldr	r1, [r7, #28]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 fa91 	bl	800e6fc <ip4_output_if>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e1de:	e001      	b.n	800e1e4 <icmp_input+0x1b8>
      break;
 800e1e0:	bf00      	nop
 800e1e2:	e000      	b.n	800e1e6 <icmp_input+0x1ba>
      break;
 800e1e4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7f6 ff82 	bl	80050f0 <pbuf_free>
  return;
 800e1ec:	e013      	b.n	800e216 <icmp_input+0x1ea>
    goto lenerr;
 800e1ee:	bf00      	nop
 800e1f0:	e002      	b.n	800e1f8 <icmp_input+0x1cc>
    goto lenerr;
 800e1f2:	bf00      	nop
 800e1f4:	e000      	b.n	800e1f8 <icmp_input+0x1cc>
        goto lenerr;
 800e1f6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7f6 ff79 	bl	80050f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e1fe:	e00a      	b.n	800e216 <icmp_input+0x1ea>
        goto icmperr;
 800e200:	bf00      	nop
 800e202:	e004      	b.n	800e20e <icmp_input+0x1e2>
        goto icmperr;
 800e204:	bf00      	nop
 800e206:	e002      	b.n	800e20e <icmp_input+0x1e2>
          goto icmperr;
 800e208:	bf00      	nop
 800e20a:	e000      	b.n	800e20e <icmp_input+0x1e2>
          goto icmperr;
 800e20c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7f6 ff6e 	bl	80050f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e214:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e216:	3728      	adds	r7, #40	; 0x28
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	20003404 	.word	0x20003404
 800e220:	20003418 	.word	0x20003418
 800e224:	080131c0 	.word	0x080131c0
 800e228:	080131f8 	.word	0x080131f8
 800e22c:	08013230 	.word	0x08013230
 800e230:	08013258 	.word	0x08013258

0800e234 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	460b      	mov	r3, r1
 800e23e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	461a      	mov	r2, r3
 800e244:	2103      	movs	r1, #3
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 f814 	bl	800e274 <icmp_send_response>
}
 800e24c:	bf00      	nop
 800e24e:	3708      	adds	r7, #8
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	460b      	mov	r3, r1
 800e25e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e260:	78fb      	ldrb	r3, [r7, #3]
 800e262:	461a      	mov	r2, r3
 800e264:	210b      	movs	r1, #11
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 f804 	bl	800e274 <icmp_send_response>
}
 800e26c:	bf00      	nop
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b08c      	sub	sp, #48	; 0x30
 800e278:	af04      	add	r7, sp, #16
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	460b      	mov	r3, r1
 800e27e:	70fb      	strb	r3, [r7, #3]
 800e280:	4613      	mov	r3, r2
 800e282:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e284:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e288:	2124      	movs	r1, #36	; 0x24
 800e28a:	2022      	movs	r0, #34	; 0x22
 800e28c:	f7f6 fc50 	bl	8004b30 <pbuf_alloc>
 800e290:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d04c      	beq.n	800e332 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	895b      	ldrh	r3, [r3, #10]
 800e29c:	2b23      	cmp	r3, #35	; 0x23
 800e29e:	d806      	bhi.n	800e2ae <icmp_send_response+0x3a>
 800e2a0:	4b26      	ldr	r3, [pc, #152]	; (800e33c <icmp_send_response+0xc8>)
 800e2a2:	f240 1269 	movw	r2, #361	; 0x169
 800e2a6:	4926      	ldr	r1, [pc, #152]	; (800e340 <icmp_send_response+0xcc>)
 800e2a8:	4826      	ldr	r0, [pc, #152]	; (800e344 <icmp_send_response+0xd0>)
 800e2aa:	f001 fbc3 	bl	800fa34 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	78fa      	ldrb	r2, [r7, #3]
 800e2be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	78ba      	ldrb	r2, [r7, #2]
 800e2c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	711a      	strb	r2, [r3, #4]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	719a      	strb	r2, [r3, #6]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	f103 0008 	add.w	r0, r3, #8
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	221c      	movs	r2, #28
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	f001 fb90 	bl	800fa0e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e2f4:	f107 030c 	add.w	r3, r7, #12
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f000 f825 	bl	800e348 <ip4_route>
 800e2fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d011      	beq.n	800e32a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	2200      	movs	r2, #0
 800e30a:	709a      	strb	r2, [r3, #2]
 800e30c:	2200      	movs	r2, #0
 800e30e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e310:	f107 020c 	add.w	r2, r7, #12
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	9302      	str	r3, [sp, #8]
 800e318:	2301      	movs	r3, #1
 800e31a:	9301      	str	r3, [sp, #4]
 800e31c:	2300      	movs	r3, #0
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	23ff      	movs	r3, #255	; 0xff
 800e322:	2100      	movs	r1, #0
 800e324:	69f8      	ldr	r0, [r7, #28]
 800e326:	f000 f9e9 	bl	800e6fc <ip4_output_if>
  }
  pbuf_free(q);
 800e32a:	69f8      	ldr	r0, [r7, #28]
 800e32c:	f7f6 fee0 	bl	80050f0 <pbuf_free>
 800e330:	e000      	b.n	800e334 <icmp_send_response+0xc0>
    return;
 800e332:	bf00      	nop
}
 800e334:	3720      	adds	r7, #32
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	080131c0 	.word	0x080131c0
 800e340:	0801328c 	.word	0x0801328c
 800e344:	08013230 	.word	0x08013230

0800e348 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e350:	4b33      	ldr	r3, [pc, #204]	; (800e420 <ip4_route+0xd8>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	60fb      	str	r3, [r7, #12]
 800e356:	e036      	b.n	800e3c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e35e:	f003 0301 	and.w	r3, r3, #1
 800e362:	b2db      	uxtb	r3, r3
 800e364:	2b00      	cmp	r3, #0
 800e366:	d02b      	beq.n	800e3c0 <ip4_route+0x78>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e36e:	089b      	lsrs	r3, r3, #2
 800e370:	f003 0301 	and.w	r3, r3, #1
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d022      	beq.n	800e3c0 <ip4_route+0x78>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	3304      	adds	r3, #4
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d01d      	beq.n	800e3c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	3304      	adds	r3, #4
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	405a      	eors	r2, r3
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	3308      	adds	r3, #8
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4013      	ands	r3, r2
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d101      	bne.n	800e3a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	e038      	b.n	800e412 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e3a6:	f003 0302 	and.w	r3, r3, #2
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d108      	bne.n	800e3c0 <ip4_route+0x78>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	330c      	adds	r3, #12
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d101      	bne.n	800e3c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	e028      	b.n	800e412 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	60fb      	str	r3, [r7, #12]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1c5      	bne.n	800e358 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e3cc:	4b15      	ldr	r3, [pc, #84]	; (800e424 <ip4_route+0xdc>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d01a      	beq.n	800e40a <ip4_route+0xc2>
 800e3d4:	4b13      	ldr	r3, [pc, #76]	; (800e424 <ip4_route+0xdc>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d012      	beq.n	800e40a <ip4_route+0xc2>
 800e3e4:	4b0f      	ldr	r3, [pc, #60]	; (800e424 <ip4_route+0xdc>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e3ec:	f003 0304 	and.w	r3, r3, #4
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00a      	beq.n	800e40a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e3f4:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <ip4_route+0xdc>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d004      	beq.n	800e40a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	b2db      	uxtb	r3, r3
 800e406:	2b7f      	cmp	r3, #127	; 0x7f
 800e408:	d101      	bne.n	800e40e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e40a:	2300      	movs	r3, #0
 800e40c:	e001      	b.n	800e412 <ip4_route+0xca>
  }

  return netif_default;
 800e40e:	4b05      	ldr	r3, [pc, #20]	; (800e424 <ip4_route+0xdc>)
 800e410:	681b      	ldr	r3, [r3, #0]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3714      	adds	r7, #20
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr
 800e41e:	bf00      	nop
 800e420:	20006518 	.word	0x20006518
 800e424:	2000651c 	.word	0x2000651c

0800e428 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e436:	f003 0301 	and.w	r3, r3, #1
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d016      	beq.n	800e46e <ip4_input_accept+0x46>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	3304      	adds	r3, #4
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d011      	beq.n	800e46e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e44a:	4b0b      	ldr	r3, [pc, #44]	; (800e478 <ip4_input_accept+0x50>)
 800e44c:	695a      	ldr	r2, [r3, #20]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	3304      	adds	r3, #4
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	429a      	cmp	r2, r3
 800e456:	d008      	beq.n	800e46a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e458:	4b07      	ldr	r3, [pc, #28]	; (800e478 <ip4_input_accept+0x50>)
 800e45a:	695b      	ldr	r3, [r3, #20]
 800e45c:	6879      	ldr	r1, [r7, #4]
 800e45e:	4618      	mov	r0, r3
 800e460:	f000 fa24 	bl	800e8ac <ip4_addr_isbroadcast_u32>
 800e464:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e466:	2b00      	cmp	r3, #0
 800e468:	d001      	beq.n	800e46e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e46a:	2301      	movs	r3, #1
 800e46c:	e000      	b.n	800e470 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e46e:	2300      	movs	r3, #0
}
 800e470:	4618      	mov	r0, r3
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20003404 	.word	0x20003404

0800e47c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800e486:	2301      	movs	r3, #1
 800e488:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	091b      	lsrs	r3, r3, #4
 800e496:	b2db      	uxtb	r3, r3
 800e498:	2b04      	cmp	r3, #4
 800e49a:	d004      	beq.n	800e4a6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f7f6 fe27 	bl	80050f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	e121      	b.n	800e6ea <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	f003 030f 	and.w	r3, r3, #15
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	885b      	ldrh	r3, [r3, #2]
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7f5 fb5f 	bl	8003b80 <lwip_htons>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	891b      	ldrh	r3, [r3, #8]
 800e4ca:	8a3a      	ldrh	r2, [r7, #16]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d204      	bcs.n	800e4da <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800e4d0:	8a3b      	ldrh	r3, [r7, #16]
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f7f6 fc85 	bl	8004de4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	895b      	ldrh	r3, [r3, #10]
 800e4de:	8a7a      	ldrh	r2, [r7, #18]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d807      	bhi.n	800e4f4 <ip4_input+0x78>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	891b      	ldrh	r3, [r3, #8]
 800e4e8:	8a3a      	ldrh	r2, [r7, #16]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d802      	bhi.n	800e4f4 <ip4_input+0x78>
 800e4ee:	8a7b      	ldrh	r3, [r7, #18]
 800e4f0:	2b13      	cmp	r3, #19
 800e4f2:	d804      	bhi.n	800e4fe <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f7f6 fdfb 	bl	80050f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	e0f5      	b.n	800e6ea <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	691b      	ldr	r3, [r3, #16]
 800e502:	4a7c      	ldr	r2, [pc, #496]	; (800e6f4 <ip4_input+0x278>)
 800e504:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e506:	69fb      	ldr	r3, [r7, #28]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	4a7a      	ldr	r2, [pc, #488]	; (800e6f4 <ip4_input+0x278>)
 800e50c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e50e:	4b79      	ldr	r3, [pc, #484]	; (800e6f4 <ip4_input+0x278>)
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e516:	2be0      	cmp	r3, #224	; 0xe0
 800e518:	d112      	bne.n	800e540 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e520:	f003 0301 	and.w	r3, r3, #1
 800e524:	b2db      	uxtb	r3, r3
 800e526:	2b00      	cmp	r3, #0
 800e528:	d007      	beq.n	800e53a <ip4_input+0xbe>
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	3304      	adds	r3, #4
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d002      	beq.n	800e53a <ip4_input+0xbe>
      netif = inp;
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	61bb      	str	r3, [r7, #24]
 800e538:	e02a      	b.n	800e590 <ip4_input+0x114>
    } else {
      netif = NULL;
 800e53a:	2300      	movs	r3, #0
 800e53c:	61bb      	str	r3, [r7, #24]
 800e53e:	e027      	b.n	800e590 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e540:	6838      	ldr	r0, [r7, #0]
 800e542:	f7ff ff71 	bl	800e428 <ip4_input_accept>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <ip4_input+0xd6>
      netif = inp;
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	61bb      	str	r3, [r7, #24]
 800e550:	e01e      	b.n	800e590 <ip4_input+0x114>
    } else {
      netif = NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e556:	4b67      	ldr	r3, [pc, #412]	; (800e6f4 <ip4_input+0x278>)
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b7f      	cmp	r3, #127	; 0x7f
 800e55e:	d017      	beq.n	800e590 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e560:	4b65      	ldr	r3, [pc, #404]	; (800e6f8 <ip4_input+0x27c>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	61bb      	str	r3, [r7, #24]
 800e566:	e00e      	b.n	800e586 <ip4_input+0x10a>
          if (netif == inp) {
 800e568:	69ba      	ldr	r2, [r7, #24]
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d006      	beq.n	800e57e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e570:	69b8      	ldr	r0, [r7, #24]
 800e572:	f7ff ff59 	bl	800e428 <ip4_input_accept>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d108      	bne.n	800e58e <ip4_input+0x112>
 800e57c:	e000      	b.n	800e580 <ip4_input+0x104>
            continue;
 800e57e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	61bb      	str	r3, [r7, #24]
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d1ed      	bne.n	800e568 <ip4_input+0xec>
 800e58c:	e000      	b.n	800e590 <ip4_input+0x114>
            break;
 800e58e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d111      	bne.n	800e5ba <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	7a5b      	ldrb	r3, [r3, #9]
 800e59a:	2b11      	cmp	r3, #17
 800e59c:	d10d      	bne.n	800e5ba <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800e59e:	8a7b      	ldrh	r3, [r7, #18]
 800e5a0:	69fa      	ldr	r2, [r7, #28]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	885b      	ldrh	r3, [r3, #2]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800e5b0:	d103      	bne.n	800e5ba <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d017      	beq.n	800e5f0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800e5c0:	4b4c      	ldr	r3, [pc, #304]	; (800e6f4 <ip4_input+0x278>)
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d013      	beq.n	800e5f0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e5c8:	4b4a      	ldr	r3, [pc, #296]	; (800e6f4 <ip4_input+0x278>)
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f000 f96c 	bl	800e8ac <ip4_addr_isbroadcast_u32>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d105      	bne.n	800e5e6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e5da:	4b46      	ldr	r3, [pc, #280]	; (800e6f4 <ip4_input+0x278>)
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e5e2:	2be0      	cmp	r3, #224	; 0xe0
 800e5e4:	d104      	bne.n	800e5f0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7f6 fd82 	bl	80050f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	e07c      	b.n	800e6ea <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d104      	bne.n	800e600 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7f6 fd7a 	bl	80050f0 <pbuf_free>
    return ERR_OK;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	e074      	b.n	800e6ea <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	88db      	ldrh	r3, [r3, #6]
 800e604:	b29b      	uxth	r3, r3
 800e606:	461a      	mov	r2, r3
 800e608:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e60c:	4013      	ands	r3, r2
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d00b      	beq.n	800e62a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 fc90 	bl	800ef38 <ip4_reass>
 800e618:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d101      	bne.n	800e624 <ip4_input+0x1a8>
      return ERR_OK;
 800e620:	2300      	movs	r3, #0
 800e622:	e062      	b.n	800e6ea <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e62a:	4a32      	ldr	r2, [pc, #200]	; (800e6f4 <ip4_input+0x278>)
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e630:	4a30      	ldr	r2, [pc, #192]	; (800e6f4 <ip4_input+0x278>)
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e636:	4a2f      	ldr	r2, [pc, #188]	; (800e6f4 <ip4_input+0x278>)
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	f003 030f 	and.w	r3, r3, #15
 800e644:	b2db      	uxtb	r3, r3
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	4b29      	ldr	r3, [pc, #164]	; (800e6f4 <ip4_input+0x278>)
 800e64e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e650:	8a7b      	ldrh	r3, [r7, #18]
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7f6 fcc5 	bl	8004fe4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	7a5b      	ldrb	r3, [r3, #9]
 800e65e:	2b06      	cmp	r3, #6
 800e660:	d009      	beq.n	800e676 <ip4_input+0x1fa>
 800e662:	2b11      	cmp	r3, #17
 800e664:	d002      	beq.n	800e66c <ip4_input+0x1f0>
 800e666:	2b01      	cmp	r3, #1
 800e668:	d00a      	beq.n	800e680 <ip4_input+0x204>
 800e66a:	e00e      	b.n	800e68a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7fc fb2a 	bl	800acc8 <udp_input>
        break;
 800e674:	e026      	b.n	800e6c4 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e676:	6839      	ldr	r1, [r7, #0]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7f8 fb65 	bl	8006d48 <tcp_input>
        break;
 800e67e:	e021      	b.n	800e6c4 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e680:	6839      	ldr	r1, [r7, #0]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7ff fcd2 	bl	800e02c <icmp_input>
        break;
 800e688:	e01c      	b.n	800e6c4 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e68a:	4b1a      	ldr	r3, [pc, #104]	; (800e6f4 <ip4_input+0x278>)
 800e68c:	695b      	ldr	r3, [r3, #20]
 800e68e:	69b9      	ldr	r1, [r7, #24]
 800e690:	4618      	mov	r0, r3
 800e692:	f000 f90b 	bl	800e8ac <ip4_addr_isbroadcast_u32>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10f      	bne.n	800e6bc <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e69c:	4b15      	ldr	r3, [pc, #84]	; (800e6f4 <ip4_input+0x278>)
 800e69e:	695b      	ldr	r3, [r3, #20]
 800e6a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e6a4:	2be0      	cmp	r3, #224	; 0xe0
 800e6a6:	d009      	beq.n	800e6bc <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e6a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7f6 fd0b 	bl	80050ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e6b4:	2102      	movs	r1, #2
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7ff fdbc 	bl	800e234 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7f6 fd17 	bl	80050f0 <pbuf_free>
        break;
 800e6c2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e6c4:	4b0b      	ldr	r3, [pc, #44]	; (800e6f4 <ip4_input+0x278>)
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e6ca:	4b0a      	ldr	r3, [pc, #40]	; (800e6f4 <ip4_input+0x278>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e6d0:	4b08      	ldr	r3, [pc, #32]	; (800e6f4 <ip4_input+0x278>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e6d6:	4b07      	ldr	r3, [pc, #28]	; (800e6f4 <ip4_input+0x278>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e6dc:	4b05      	ldr	r3, [pc, #20]	; (800e6f4 <ip4_input+0x278>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e6e2:	4b04      	ldr	r3, [pc, #16]	; (800e6f4 <ip4_input+0x278>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e6e8:	2300      	movs	r3, #0
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20003404 	.word	0x20003404
 800e6f8:	20006518 	.word	0x20006518

0800e6fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08a      	sub	sp, #40	; 0x28
 800e700:	af04      	add	r7, sp, #16
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	60b9      	str	r1, [r7, #8]
 800e706:	607a      	str	r2, [r7, #4]
 800e708:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d009      	beq.n	800e728 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d003      	beq.n	800e722 <ip4_output_if+0x26>
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d102      	bne.n	800e728 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e724:	3304      	adds	r3, #4
 800e726:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e728:	78fa      	ldrb	r2, [r7, #3]
 800e72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72c:	9302      	str	r3, [sp, #8]
 800e72e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e732:	9301      	str	r3, [sp, #4]
 800e734:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e738:	9300      	str	r3, [sp, #0]
 800e73a:	4613      	mov	r3, r2
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	6979      	ldr	r1, [r7, #20]
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f000 f805 	bl	800e750 <ip4_output_if_src>
 800e746:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b088      	sub	sp, #32
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
 800e75c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	7b9b      	ldrb	r3, [r3, #14]
 800e762:	2b01      	cmp	r3, #1
 800e764:	d006      	beq.n	800e774 <ip4_output_if_src+0x24>
 800e766:	4b4b      	ldr	r3, [pc, #300]	; (800e894 <ip4_output_if_src+0x144>)
 800e768:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e76c:	494a      	ldr	r1, [pc, #296]	; (800e898 <ip4_output_if_src+0x148>)
 800e76e:	484b      	ldr	r0, [pc, #300]	; (800e89c <ip4_output_if_src+0x14c>)
 800e770:	f001 f960 	bl	800fa34 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d060      	beq.n	800e83c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e77a:	2314      	movs	r3, #20
 800e77c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e77e:	2114      	movs	r1, #20
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f7f6 fc1f 	bl	8004fc4 <pbuf_add_header>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e78c:	f06f 0301 	mvn.w	r3, #1
 800e790:	e07c      	b.n	800e88c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	895b      	ldrh	r3, [r3, #10]
 800e79c:	2b13      	cmp	r3, #19
 800e79e:	d806      	bhi.n	800e7ae <ip4_output_if_src+0x5e>
 800e7a0:	4b3c      	ldr	r3, [pc, #240]	; (800e894 <ip4_output_if_src+0x144>)
 800e7a2:	f240 3289 	movw	r2, #905	; 0x389
 800e7a6:	493e      	ldr	r1, [pc, #248]	; (800e8a0 <ip4_output_if_src+0x150>)
 800e7a8:	483c      	ldr	r0, [pc, #240]	; (800e89c <ip4_output_if_src+0x14c>)
 800e7aa:	f001 f943 	bl	800fa34 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	78fa      	ldrb	r2, [r7, #3]
 800e7b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e7ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e7c4:	8b7b      	ldrh	r3, [r7, #26]
 800e7c6:	089b      	lsrs	r3, r3, #2
 800e7c8:	b29b      	uxth	r3, r3
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d0:	b2da      	uxtb	r2, r3
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e7dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	891b      	ldrh	r3, [r3, #8]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7f5 f9cc 	bl	8003b80 <lwip_htons>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	719a      	strb	r2, [r3, #6]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e7fa:	4b2a      	ldr	r3, [pc, #168]	; (800e8a4 <ip4_output_if_src+0x154>)
 800e7fc:	881b      	ldrh	r3, [r3, #0]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7f5 f9be 	bl	8003b80 <lwip_htons>
 800e804:	4603      	mov	r3, r0
 800e806:	461a      	mov	r2, r3
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e80c:	4b25      	ldr	r3, [pc, #148]	; (800e8a4 <ip4_output_if_src+0x154>)
 800e80e:	881b      	ldrh	r3, [r3, #0]
 800e810:	3301      	adds	r3, #1
 800e812:	b29a      	uxth	r2, r3
 800e814:	4b23      	ldr	r3, [pc, #140]	; (800e8a4 <ip4_output_if_src+0x154>)
 800e816:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d104      	bne.n	800e828 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e81e:	4b22      	ldr	r3, [pc, #136]	; (800e8a8 <ip4_output_if_src+0x158>)
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	60da      	str	r2, [r3, #12]
 800e826:	e003      	b.n	800e830 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	2200      	movs	r2, #0
 800e834:	729a      	strb	r2, [r3, #10]
 800e836:	2200      	movs	r2, #0
 800e838:	72da      	strb	r2, [r3, #11]
 800e83a:	e00f      	b.n	800e85c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	895b      	ldrh	r3, [r3, #10]
 800e840:	2b13      	cmp	r3, #19
 800e842:	d802      	bhi.n	800e84a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e844:	f06f 0301 	mvn.w	r3, #1
 800e848:	e020      	b.n	800e88c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	691b      	ldr	r3, [r3, #16]
 800e854:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e856:	f107 0314 	add.w	r3, r7, #20
 800e85a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00c      	beq.n	800e87e <ip4_output_if_src+0x12e>
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	891a      	ldrh	r2, [r3, #8]
 800e868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d906      	bls.n	800e87e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 fd4b 	bl	800f310 <ip4_frag>
 800e87a:	4603      	mov	r3, r0
 800e87c:	e006      	b.n	800e88c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	695b      	ldr	r3, [r3, #20]
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	68f9      	ldr	r1, [r7, #12]
 800e886:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e888:	4798      	blx	r3
 800e88a:	4603      	mov	r3, r0
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3720      	adds	r7, #32
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	080132b8 	.word	0x080132b8
 800e898:	080132ec 	.word	0x080132ec
 800e89c:	080132f8 	.word	0x080132f8
 800e8a0:	08013320 	.word	0x08013320
 800e8a4:	2000020e 	.word	0x2000020e
 800e8a8:	08013704 	.word	0x08013704

0800e8ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c0:	d002      	beq.n	800e8c8 <ip4_addr_isbroadcast_u32+0x1c>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d101      	bne.n	800e8cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	e02a      	b.n	800e922 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e8d2:	f003 0302 	and.w	r3, r3, #2
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d101      	bne.n	800e8de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	e021      	b.n	800e922 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d101      	bne.n	800e8ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	e019      	b.n	800e922 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e8ee:	68fa      	ldr	r2, [r7, #12]
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	405a      	eors	r2, r3
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	3308      	adds	r3, #8
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4013      	ands	r3, r2
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10d      	bne.n	800e920 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	3308      	adds	r3, #8
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	43da      	mvns	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	3308      	adds	r3, #8
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e918:	429a      	cmp	r2, r3
 800e91a:	d101      	bne.n	800e920 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e91c:	2301      	movs	r3, #1
 800e91e:	e000      	b.n	800e922 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e920:	2300      	movs	r3, #0
  }
}
 800e922:	4618      	mov	r0, r3
 800e924:	3714      	adds	r7, #20
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
	...

0800e930 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e936:	2300      	movs	r3, #0
 800e938:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e93a:	4b12      	ldr	r3, [pc, #72]	; (800e984 <ip_reass_tmr+0x54>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e940:	e018      	b.n	800e974 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	7fdb      	ldrb	r3, [r3, #31]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00b      	beq.n	800e962 <ip_reass_tmr+0x32>
      r->timer--;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	7fdb      	ldrb	r3, [r3, #31]
 800e94e:	3b01      	subs	r3, #1
 800e950:	b2da      	uxtb	r2, r3
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	60fb      	str	r3, [r7, #12]
 800e960:	e008      	b.n	800e974 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e96c:	68b9      	ldr	r1, [r7, #8]
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 f80a 	bl	800e988 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1e3      	bne.n	800e942 <ip_reass_tmr+0x12>
    }
  }
}
 800e97a:	bf00      	nop
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}
 800e982:	bf00      	nop
 800e984:	20000210 	.word	0x20000210

0800e988 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d105      	bne.n	800e9aa <ip_reass_free_complete_datagram+0x22>
 800e99e:	4b45      	ldr	r3, [pc, #276]	; (800eab4 <ip_reass_free_complete_datagram+0x12c>)
 800e9a0:	22ab      	movs	r2, #171	; 0xab
 800e9a2:	4945      	ldr	r1, [pc, #276]	; (800eab8 <ip_reass_free_complete_datagram+0x130>)
 800e9a4:	4845      	ldr	r0, [pc, #276]	; (800eabc <ip_reass_free_complete_datagram+0x134>)
 800e9a6:	f001 f845 	bl	800fa34 <iprintf>
  if (prev != NULL) {
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00a      	beq.n	800e9c6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d005      	beq.n	800e9c6 <ip_reass_free_complete_datagram+0x3e>
 800e9ba:	4b3e      	ldr	r3, [pc, #248]	; (800eab4 <ip_reass_free_complete_datagram+0x12c>)
 800e9bc:	22ad      	movs	r2, #173	; 0xad
 800e9be:	4940      	ldr	r1, [pc, #256]	; (800eac0 <ip_reass_free_complete_datagram+0x138>)
 800e9c0:	483e      	ldr	r0, [pc, #248]	; (800eabc <ip_reass_free_complete_datagram+0x134>)
 800e9c2:	f001 f837 	bl	800fa34 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	889b      	ldrh	r3, [r3, #4]
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d12a      	bne.n	800ea2e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	6858      	ldr	r0, [r3, #4]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	3308      	adds	r3, #8
 800e9ee:	2214      	movs	r2, #20
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	f001 f80c 	bl	800fa0e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e9f6:	2101      	movs	r1, #1
 800e9f8:	69b8      	ldr	r0, [r7, #24]
 800e9fa:	f7ff fc2b 	bl	800e254 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e9fe:	69b8      	ldr	r0, [r7, #24]
 800ea00:	f7f6 fbfe 	bl	8005200 <pbuf_clen>
 800ea04:	4603      	mov	r3, r0
 800ea06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ea08:	8bfa      	ldrh	r2, [r7, #30]
 800ea0a:	8a7b      	ldrh	r3, [r7, #18]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea12:	db05      	blt.n	800ea20 <ip_reass_free_complete_datagram+0x98>
 800ea14:	4b27      	ldr	r3, [pc, #156]	; (800eab4 <ip_reass_free_complete_datagram+0x12c>)
 800ea16:	22bc      	movs	r2, #188	; 0xbc
 800ea18:	492a      	ldr	r1, [pc, #168]	; (800eac4 <ip_reass_free_complete_datagram+0x13c>)
 800ea1a:	4828      	ldr	r0, [pc, #160]	; (800eabc <ip_reass_free_complete_datagram+0x134>)
 800ea1c:	f001 f80a 	bl	800fa34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ea20:	8bfa      	ldrh	r2, [r7, #30]
 800ea22:	8a7b      	ldrh	r3, [r7, #18]
 800ea24:	4413      	add	r3, r2
 800ea26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ea28:	69b8      	ldr	r0, [r7, #24]
 800ea2a:	f7f6 fb61 	bl	80050f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ea34:	e01f      	b.n	800ea76 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f7f6 fbda 	bl	8005200 <pbuf_clen>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ea50:	8bfa      	ldrh	r2, [r7, #30]
 800ea52:	8a7b      	ldrh	r3, [r7, #18]
 800ea54:	4413      	add	r3, r2
 800ea56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea5a:	db05      	blt.n	800ea68 <ip_reass_free_complete_datagram+0xe0>
 800ea5c:	4b15      	ldr	r3, [pc, #84]	; (800eab4 <ip_reass_free_complete_datagram+0x12c>)
 800ea5e:	22cc      	movs	r2, #204	; 0xcc
 800ea60:	4918      	ldr	r1, [pc, #96]	; (800eac4 <ip_reass_free_complete_datagram+0x13c>)
 800ea62:	4816      	ldr	r0, [pc, #88]	; (800eabc <ip_reass_free_complete_datagram+0x134>)
 800ea64:	f000 ffe6 	bl	800fa34 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ea68:	8bfa      	ldrh	r2, [r7, #30]
 800ea6a:	8a7b      	ldrh	r3, [r7, #18]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f7f6 fb3d 	bl	80050f0 <pbuf_free>
  while (p != NULL) {
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d1dc      	bne.n	800ea36 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ea7c:	6839      	ldr	r1, [r7, #0]
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 f8c2 	bl	800ec08 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ea84:	4b10      	ldr	r3, [pc, #64]	; (800eac8 <ip_reass_free_complete_datagram+0x140>)
 800ea86:	881b      	ldrh	r3, [r3, #0]
 800ea88:	8bfa      	ldrh	r2, [r7, #30]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d905      	bls.n	800ea9a <ip_reass_free_complete_datagram+0x112>
 800ea8e:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <ip_reass_free_complete_datagram+0x12c>)
 800ea90:	22d2      	movs	r2, #210	; 0xd2
 800ea92:	490e      	ldr	r1, [pc, #56]	; (800eacc <ip_reass_free_complete_datagram+0x144>)
 800ea94:	4809      	ldr	r0, [pc, #36]	; (800eabc <ip_reass_free_complete_datagram+0x134>)
 800ea96:	f000 ffcd 	bl	800fa34 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ea9a:	4b0b      	ldr	r3, [pc, #44]	; (800eac8 <ip_reass_free_complete_datagram+0x140>)
 800ea9c:	881a      	ldrh	r2, [r3, #0]
 800ea9e:	8bfb      	ldrh	r3, [r7, #30]
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	4b08      	ldr	r3, [pc, #32]	; (800eac8 <ip_reass_free_complete_datagram+0x140>)
 800eaa6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800eaa8:	8bfb      	ldrh	r3, [r7, #30]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3720      	adds	r7, #32
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	08013350 	.word	0x08013350
 800eab8:	0801338c 	.word	0x0801338c
 800eabc:	08013398 	.word	0x08013398
 800eac0:	080133c0 	.word	0x080133c0
 800eac4:	080133d4 	.word	0x080133d4
 800eac8:	20000214 	.word	0x20000214
 800eacc:	080133f4 	.word	0x080133f4

0800ead0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b08a      	sub	sp, #40	; 0x28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800eada:	2300      	movs	r3, #0
 800eadc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800eade:	2300      	movs	r3, #0
 800eae0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800eaea:	2300      	movs	r3, #0
 800eaec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800eaee:	4b28      	ldr	r3, [pc, #160]	; (800eb90 <ip_reass_remove_oldest_datagram+0xc0>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800eaf4:	e030      	b.n	800eb58 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf8:	695a      	ldr	r2, [r3, #20]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d10c      	bne.n	800eb1c <ip_reass_remove_oldest_datagram+0x4c>
 800eb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb04:	699a      	ldr	r2, [r3, #24]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	691b      	ldr	r3, [r3, #16]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d106      	bne.n	800eb1c <ip_reass_remove_oldest_datagram+0x4c>
 800eb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb10:	899a      	ldrh	r2, [r3, #12]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	889b      	ldrh	r3, [r3, #4]
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d014      	beq.n	800eb46 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800eb22:	6a3b      	ldr	r3, [r7, #32]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d104      	bne.n	800eb32 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	61bb      	str	r3, [r7, #24]
 800eb30:	e009      	b.n	800eb46 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800eb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb34:	7fda      	ldrb	r2, [r3, #31]
 800eb36:	6a3b      	ldr	r3, [r7, #32]
 800eb38:	7fdb      	ldrb	r3, [r3, #31]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d803      	bhi.n	800eb46 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800eb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb40:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800eb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb50:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800eb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800eb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1cb      	bne.n	800eaf6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800eb5e:	6a3b      	ldr	r3, [r7, #32]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d008      	beq.n	800eb76 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800eb64:	69b9      	ldr	r1, [r7, #24]
 800eb66:	6a38      	ldr	r0, [r7, #32]
 800eb68:	f7ff ff0e 	bl	800e988 <ip_reass_free_complete_datagram>
 800eb6c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	4413      	add	r3, r2
 800eb74:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	da02      	bge.n	800eb84 <ip_reass_remove_oldest_datagram+0xb4>
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	dcac      	bgt.n	800eade <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800eb84:	697b      	ldr	r3, [r7, #20]
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3728      	adds	r7, #40	; 0x28
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20000210 	.word	0x20000210

0800eb94 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800eb9e:	2004      	movs	r0, #4
 800eba0:	f7f5 fc44 	bl	800442c <memp_malloc>
 800eba4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d110      	bne.n	800ebce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ebac:	6839      	ldr	r1, [r7, #0]
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f7ff ff8e 	bl	800ead0 <ip_reass_remove_oldest_datagram>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	dc03      	bgt.n	800ebc4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ebbc:	2004      	movs	r0, #4
 800ebbe:	f7f5 fc35 	bl	800442c <memp_malloc>
 800ebc2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d101      	bne.n	800ebce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e016      	b.n	800ebfc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ebce:	2220      	movs	r2, #32
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f000 ff26 	bl	800fa24 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	220f      	movs	r2, #15
 800ebdc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ebde:	4b09      	ldr	r3, [pc, #36]	; (800ec04 <ip_reass_enqueue_new_datagram+0x70>)
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ebe6:	4a07      	ldr	r2, [pc, #28]	; (800ec04 <ip_reass_enqueue_new_datagram+0x70>)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	3308      	adds	r3, #8
 800ebf0:	2214      	movs	r2, #20
 800ebf2:	6879      	ldr	r1, [r7, #4]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f000 ff0a 	bl	800fa0e <memcpy>
  return ipr;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20000210 	.word	0x20000210

0800ec08 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ec12:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <ip_reass_dequeue_datagram+0x4c>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d104      	bne.n	800ec26 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a0c      	ldr	r2, [pc, #48]	; (800ec54 <ip_reass_dequeue_datagram+0x4c>)
 800ec22:	6013      	str	r3, [r2, #0]
 800ec24:	e00d      	b.n	800ec42 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d106      	bne.n	800ec3a <ip_reass_dequeue_datagram+0x32>
 800ec2c:	4b0a      	ldr	r3, [pc, #40]	; (800ec58 <ip_reass_dequeue_datagram+0x50>)
 800ec2e:	f240 1245 	movw	r2, #325	; 0x145
 800ec32:	490a      	ldr	r1, [pc, #40]	; (800ec5c <ip_reass_dequeue_datagram+0x54>)
 800ec34:	480a      	ldr	r0, [pc, #40]	; (800ec60 <ip_reass_dequeue_datagram+0x58>)
 800ec36:	f000 fefd 	bl	800fa34 <iprintf>
    prev->next = ipr->next;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ec42:	6879      	ldr	r1, [r7, #4]
 800ec44:	2004      	movs	r0, #4
 800ec46:	f7f5 fc3d 	bl	80044c4 <memp_free>
}
 800ec4a:	bf00      	nop
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	20000210 	.word	0x20000210
 800ec58:	08013350 	.word	0x08013350
 800ec5c:	08013418 	.word	0x08013418
 800ec60:	08013398 	.word	0x08013398

0800ec64 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b08c      	sub	sp, #48	; 0x30
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ec70:	2300      	movs	r3, #0
 800ec72:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ec74:	2301      	movs	r3, #1
 800ec76:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	885b      	ldrh	r3, [r3, #2]
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7f4 ff7b 	bl	8003b80 <lwip_htons>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	f003 030f 	and.w	r3, r3, #15
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ec9c:	7e7b      	ldrb	r3, [r7, #25]
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	8b7a      	ldrh	r2, [r7, #26]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d202      	bcs.n	800ecac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eca6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecaa:	e135      	b.n	800ef18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ecac:	7e7b      	ldrb	r3, [r7, #25]
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	8b7a      	ldrh	r2, [r7, #26]
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	88db      	ldrh	r3, [r3, #6]
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7f4 ff5f 	bl	8003b80 <lwip_htons>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	00db      	lsls	r3, r3, #3
 800eccc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ecd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	701a      	strb	r2, [r3, #0]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	705a      	strb	r2, [r3, #1]
 800ecde:	2200      	movs	r2, #0
 800ece0:	709a      	strb	r2, [r3, #2]
 800ece2:	2200      	movs	r2, #0
 800ece4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	8afa      	ldrh	r2, [r7, #22]
 800ecea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ecec:	8afa      	ldrh	r2, [r7, #22]
 800ecee:	8b7b      	ldrh	r3, [r7, #26]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ecf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfa:	88db      	ldrh	r3, [r3, #6]
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	8afa      	ldrh	r2, [r7, #22]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d902      	bls.n	800ed0a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ed04:	f04f 33ff 	mov.w	r3, #4294967295
 800ed08:	e106      	b.n	800ef18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ed10:	e068      	b.n	800ede4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ed12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1a:	889b      	ldrh	r3, [r3, #4]
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	889b      	ldrh	r3, [r3, #4]
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d235      	bcs.n	800ed94 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ed28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed2c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ed2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d020      	beq.n	800ed76 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ed34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed36:	889b      	ldrh	r3, [r3, #4]
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	88db      	ldrh	r3, [r3, #6]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d307      	bcc.n	800ed54 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed46:	88db      	ldrh	r3, [r3, #6]
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	889b      	ldrh	r3, [r3, #4]
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d902      	bls.n	800ed5a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ed54:	f04f 33ff 	mov.w	r3, #4294967295
 800ed58:	e0de      	b.n	800ef18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ed5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ed60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed62:	88db      	ldrh	r3, [r3, #6]
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed68:	889b      	ldrh	r3, [r3, #4]
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d03d      	beq.n	800edec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ed74:	e03a      	b.n	800edec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ed76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed78:	88db      	ldrh	r3, [r3, #6]
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	889b      	ldrh	r3, [r3, #4]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d902      	bls.n	800ed8c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ed86:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8a:	e0c5      	b.n	800ef18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	68ba      	ldr	r2, [r7, #8]
 800ed90:	605a      	str	r2, [r3, #4]
      break;
 800ed92:	e02b      	b.n	800edec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed96:	889b      	ldrh	r3, [r3, #4]
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	889b      	ldrh	r3, [r3, #4]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d102      	bne.n	800edaa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800eda4:	f04f 33ff 	mov.w	r3, #4294967295
 800eda8:	e0b6      	b.n	800ef18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edac:	889b      	ldrh	r3, [r3, #4]
 800edae:	b29a      	uxth	r2, r3
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	88db      	ldrh	r3, [r3, #6]
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d202      	bcs.n	800edc0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800edba:	f04f 33ff 	mov.w	r3, #4294967295
 800edbe:	e0ab      	b.n	800ef18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d009      	beq.n	800edda <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800edc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc8:	88db      	ldrh	r3, [r3, #6]
 800edca:	b29a      	uxth	r2, r3
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	889b      	ldrh	r3, [r3, #4]
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d001      	beq.n	800edda <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800edd6:	2300      	movs	r3, #0
 800edd8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ede4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d193      	bne.n	800ed12 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800edea:	e000      	b.n	800edee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800edec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d12d      	bne.n	800ee50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d01c      	beq.n	800ee34 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfc:	88db      	ldrh	r3, [r3, #6]
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee02:	889b      	ldrh	r3, [r3, #4]
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d906      	bls.n	800ee18 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ee0a:	4b45      	ldr	r3, [pc, #276]	; (800ef20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ee0c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ee10:	4944      	ldr	r1, [pc, #272]	; (800ef24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ee12:	4845      	ldr	r0, [pc, #276]	; (800ef28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ee14:	f000 fe0e 	bl	800fa34 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	68ba      	ldr	r2, [r7, #8]
 800ee1c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	88db      	ldrh	r3, [r3, #6]
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee26:	889b      	ldrh	r3, [r3, #4]
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d010      	beq.n	800ee50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	623b      	str	r3, [r7, #32]
 800ee32:	e00d      	b.n	800ee50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d006      	beq.n	800ee4a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ee3c:	4b38      	ldr	r3, [pc, #224]	; (800ef20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ee3e:	f240 12bf 	movw	r2, #447	; 0x1bf
 800ee42:	493a      	ldr	r1, [pc, #232]	; (800ef2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ee44:	4838      	ldr	r0, [pc, #224]	; (800ef28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ee46:	f000 fdf5 	bl	800fa34 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	68ba      	ldr	r2, [r7, #8]
 800ee4e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d105      	bne.n	800ee62 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	7f9b      	ldrb	r3, [r3, #30]
 800ee5a:	f003 0301 	and.w	r3, r3, #1
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d059      	beq.n	800ef16 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ee62:	6a3b      	ldr	r3, [r7, #32]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d04f      	beq.n	800ef08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d006      	beq.n	800ee7e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	889b      	ldrh	r3, [r3, #4]
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d002      	beq.n	800ee84 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	623b      	str	r3, [r7, #32]
 800ee82:	e041      	b.n	800ef08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ee84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee86:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ee88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ee8e:	e012      	b.n	800eeb6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ee90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ee96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee98:	88db      	ldrh	r3, [r3, #6]
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	889b      	ldrh	r3, [r3, #4]
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d002      	beq.n	800eeac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	623b      	str	r3, [r7, #32]
            break;
 800eeaa:	e007      	b.n	800eebc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800eeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800eeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d1e9      	bne.n	800ee90 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800eebc:	6a3b      	ldr	r3, [r7, #32]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d022      	beq.n	800ef08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d106      	bne.n	800eed8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800eeca:	4b15      	ldr	r3, [pc, #84]	; (800ef20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eecc:	f240 12df 	movw	r2, #479	; 0x1df
 800eed0:	4917      	ldr	r1, [pc, #92]	; (800ef30 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800eed2:	4815      	ldr	r0, [pc, #84]	; (800ef28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eed4:	f000 fdae 	bl	800fa34 <iprintf>
          LWIP_ASSERT("sanity check",
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d106      	bne.n	800eef2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800eee4:	4b0e      	ldr	r3, [pc, #56]	; (800ef20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eee6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800eeea:	4911      	ldr	r1, [pc, #68]	; (800ef30 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800eeec:	480e      	ldr	r0, [pc, #56]	; (800ef28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800eeee:	f000 fda1 	bl	800fa34 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d006      	beq.n	800ef08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800eefa:	4b09      	ldr	r3, [pc, #36]	; (800ef20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800eefc:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ef00:	490c      	ldr	r1, [pc, #48]	; (800ef34 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ef02:	4809      	ldr	r0, [pc, #36]	; (800ef28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ef04:	f000 fd96 	bl	800fa34 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ef08:	6a3b      	ldr	r3, [r7, #32]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	bf14      	ite	ne
 800ef0e:	2301      	movne	r3, #1
 800ef10:	2300      	moveq	r3, #0
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	e000      	b.n	800ef18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ef16:	2300      	movs	r3, #0
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3730      	adds	r7, #48	; 0x30
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	08013350 	.word	0x08013350
 800ef24:	08013434 	.word	0x08013434
 800ef28:	08013398 	.word	0x08013398
 800ef2c:	08013454 	.word	0x08013454
 800ef30:	0801348c 	.word	0x0801348c
 800ef34:	0801349c 	.word	0x0801349c

0800ef38 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b08e      	sub	sp, #56	; 0x38
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	f003 030f 	and.w	r3, r3, #15
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	2b14      	cmp	r3, #20
 800ef56:	f040 8167 	bne.w	800f228 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ef5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5c:	88db      	ldrh	r3, [r3, #6]
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7f4 fe0d 	bl	8003b80 <lwip_htons>
 800ef66:	4603      	mov	r3, r0
 800ef68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	00db      	lsls	r3, r3, #3
 800ef70:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef74:	885b      	ldrh	r3, [r3, #2]
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7f4 fe01 	bl	8003b80 <lwip_htons>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ef82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	f003 030f 	and.w	r3, r3, #15
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ef92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	f0c0 8146 	bcc.w	800f22c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800efa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800efa8:	1ad3      	subs	r3, r2, r3
 800efaa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7f6 f927 	bl	8005200 <pbuf_clen>
 800efb2:	4603      	mov	r3, r0
 800efb4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800efb6:	4ba3      	ldr	r3, [pc, #652]	; (800f244 <ip4_reass+0x30c>)
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	461a      	mov	r2, r3
 800efbc:	8c3b      	ldrh	r3, [r7, #32]
 800efbe:	4413      	add	r3, r2
 800efc0:	2b0a      	cmp	r3, #10
 800efc2:	dd10      	ble.n	800efe6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800efc4:	8c3b      	ldrh	r3, [r7, #32]
 800efc6:	4619      	mov	r1, r3
 800efc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efca:	f7ff fd81 	bl	800ead0 <ip_reass_remove_oldest_datagram>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f000 812d 	beq.w	800f230 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800efd6:	4b9b      	ldr	r3, [pc, #620]	; (800f244 <ip4_reass+0x30c>)
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	461a      	mov	r2, r3
 800efdc:	8c3b      	ldrh	r3, [r7, #32]
 800efde:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800efe0:	2b0a      	cmp	r3, #10
 800efe2:	f300 8125 	bgt.w	800f230 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800efe6:	4b98      	ldr	r3, [pc, #608]	; (800f248 <ip4_reass+0x310>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	633b      	str	r3, [r7, #48]	; 0x30
 800efec:	e015      	b.n	800f01a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800efee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff0:	695a      	ldr	r2, [r3, #20]
 800eff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d10c      	bne.n	800f014 <ip4_reass+0xdc>
 800effa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effc:	699a      	ldr	r2, [r3, #24]
 800effe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	429a      	cmp	r2, r3
 800f004:	d106      	bne.n	800f014 <ip4_reass+0xdc>
 800f006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f008:	899a      	ldrh	r2, [r3, #12]
 800f00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00c:	889b      	ldrh	r3, [r3, #4]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	429a      	cmp	r2, r3
 800f012:	d006      	beq.n	800f022 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	633b      	str	r3, [r7, #48]	; 0x30
 800f01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1e6      	bne.n	800efee <ip4_reass+0xb6>
 800f020:	e000      	b.n	800f024 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f022:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	2b00      	cmp	r3, #0
 800f028:	d109      	bne.n	800f03e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f02a:	8c3b      	ldrh	r3, [r7, #32]
 800f02c:	4619      	mov	r1, r3
 800f02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f030:	f7ff fdb0 	bl	800eb94 <ip_reass_enqueue_new_datagram>
 800f034:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d11c      	bne.n	800f076 <ip4_reass+0x13e>
      goto nullreturn;
 800f03c:	e0f9      	b.n	800f232 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	88db      	ldrh	r3, [r3, #6]
 800f042:	b29b      	uxth	r3, r3
 800f044:	4618      	mov	r0, r3
 800f046:	f7f4 fd9b 	bl	8003b80 <lwip_htons>
 800f04a:	4603      	mov	r3, r0
 800f04c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f050:	2b00      	cmp	r3, #0
 800f052:	d110      	bne.n	800f076 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f056:	89db      	ldrh	r3, [r3, #14]
 800f058:	4618      	mov	r0, r3
 800f05a:	f7f4 fd91 	bl	8003b80 <lwip_htons>
 800f05e:	4603      	mov	r3, r0
 800f060:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f064:	2b00      	cmp	r3, #0
 800f066:	d006      	beq.n	800f076 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06a:	3308      	adds	r3, #8
 800f06c:	2214      	movs	r2, #20
 800f06e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f070:	4618      	mov	r0, r3
 800f072:	f000 fccc 	bl	800fa0e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f078:	88db      	ldrh	r3, [r3, #6]
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	f003 0320 	and.w	r3, r3, #32
 800f080:	2b00      	cmp	r3, #0
 800f082:	bf0c      	ite	eq
 800f084:	2301      	moveq	r3, #1
 800f086:	2300      	movne	r3, #0
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d00e      	beq.n	800f0b0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f092:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f096:	4413      	add	r3, r2
 800f098:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f09a:	8b7a      	ldrh	r2, [r7, #26]
 800f09c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	f0c0 80a0 	bcc.w	800f1e4 <ip4_reass+0x2ac>
 800f0a4:	8b7b      	ldrh	r3, [r7, #26]
 800f0a6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	f200 809a 	bhi.w	800f1e4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f0b0:	69fa      	ldr	r2, [r7, #28]
 800f0b2:	6879      	ldr	r1, [r7, #4]
 800f0b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0b6:	f7ff fdd5 	bl	800ec64 <ip_reass_chain_frag_into_datagram_and_validate>
 800f0ba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0c2:	f000 8091 	beq.w	800f1e8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f0c6:	4b5f      	ldr	r3, [pc, #380]	; (800f244 <ip4_reass+0x30c>)
 800f0c8:	881a      	ldrh	r2, [r3, #0]
 800f0ca:	8c3b      	ldrh	r3, [r7, #32]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	4b5c      	ldr	r3, [pc, #368]	; (800f244 <ip4_reass+0x30c>)
 800f0d2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00d      	beq.n	800f0f6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f0da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f0dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0de:	4413      	add	r3, r2
 800f0e0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e4:	8a7a      	ldrh	r2, [r7, #18]
 800f0e6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ea:	7f9b      	ldrb	r3, [r3, #30]
 800f0ec:	f043 0301 	orr.w	r3, r3, #1
 800f0f0:	b2da      	uxtb	r2, r3
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d171      	bne.n	800f1e0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fe:	8b9b      	ldrh	r3, [r3, #28]
 800f100:	3314      	adds	r3, #20
 800f102:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f118:	3308      	adds	r3, #8
 800f11a:	2214      	movs	r2, #20
 800f11c:	4619      	mov	r1, r3
 800f11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f120:	f000 fc75 	bl	800fa0e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f124:	8a3b      	ldrh	r3, [r7, #16]
 800f126:	4618      	mov	r0, r3
 800f128:	f7f4 fd2a 	bl	8003b80 <lwip_htons>
 800f12c:	4603      	mov	r3, r0
 800f12e:	461a      	mov	r2, r3
 800f130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f132:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f136:	2200      	movs	r2, #0
 800f138:	719a      	strb	r2, [r3, #6]
 800f13a:	2200      	movs	r2, #0
 800f13c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f140:	2200      	movs	r2, #0
 800f142:	729a      	strb	r2, [r3, #10]
 800f144:	2200      	movs	r2, #0
 800f146:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f14e:	e00d      	b.n	800f16c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f156:	2114      	movs	r1, #20
 800f158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f15a:	f7f5 ff43 	bl	8004fe4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f15e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7f6 f887 	bl	8005274 <pbuf_cat>
      r = iprh->next_pbuf;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1ee      	bne.n	800f150 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f172:	4b35      	ldr	r3, [pc, #212]	; (800f248 <ip4_reass+0x310>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f178:	429a      	cmp	r2, r3
 800f17a:	d102      	bne.n	800f182 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f17c:	2300      	movs	r3, #0
 800f17e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f180:	e010      	b.n	800f1a4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f182:	4b31      	ldr	r3, [pc, #196]	; (800f248 <ip4_reass+0x310>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f188:	e007      	b.n	800f19a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f190:	429a      	cmp	r2, r3
 800f192:	d006      	beq.n	800f1a2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1f4      	bne.n	800f18a <ip4_reass+0x252>
 800f1a0:	e000      	b.n	800f1a4 <ip4_reass+0x26c>
          break;
 800f1a2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f1a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1a8:	f7ff fd2e 	bl	800ec08 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f7f6 f827 	bl	8005200 <pbuf_clen>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f1b6:	4b23      	ldr	r3, [pc, #140]	; (800f244 <ip4_reass+0x30c>)
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	8c3a      	ldrh	r2, [r7, #32]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d906      	bls.n	800f1ce <ip4_reass+0x296>
 800f1c0:	4b22      	ldr	r3, [pc, #136]	; (800f24c <ip4_reass+0x314>)
 800f1c2:	f240 229b 	movw	r2, #667	; 0x29b
 800f1c6:	4922      	ldr	r1, [pc, #136]	; (800f250 <ip4_reass+0x318>)
 800f1c8:	4822      	ldr	r0, [pc, #136]	; (800f254 <ip4_reass+0x31c>)
 800f1ca:	f000 fc33 	bl	800fa34 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f1ce:	4b1d      	ldr	r3, [pc, #116]	; (800f244 <ip4_reass+0x30c>)
 800f1d0:	881a      	ldrh	r2, [r3, #0]
 800f1d2:	8c3b      	ldrh	r3, [r7, #32]
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	4b1a      	ldr	r3, [pc, #104]	; (800f244 <ip4_reass+0x30c>)
 800f1da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	e02c      	b.n	800f23a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	e02a      	b.n	800f23a <ip4_reass+0x302>

nullreturn_ipr:
 800f1e4:	bf00      	nop
 800f1e6:	e000      	b.n	800f1ea <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f1e8:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d106      	bne.n	800f1fe <ip4_reass+0x2c6>
 800f1f0:	4b16      	ldr	r3, [pc, #88]	; (800f24c <ip4_reass+0x314>)
 800f1f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f1f6:	4918      	ldr	r1, [pc, #96]	; (800f258 <ip4_reass+0x320>)
 800f1f8:	4816      	ldr	r0, [pc, #88]	; (800f254 <ip4_reass+0x31c>)
 800f1fa:	f000 fc1b 	bl	800fa34 <iprintf>
  if (ipr->p == NULL) {
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d114      	bne.n	800f230 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f206:	4b10      	ldr	r3, [pc, #64]	; (800f248 <ip4_reass+0x310>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d006      	beq.n	800f21e <ip4_reass+0x2e6>
 800f210:	4b0e      	ldr	r3, [pc, #56]	; (800f24c <ip4_reass+0x314>)
 800f212:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f216:	4911      	ldr	r1, [pc, #68]	; (800f25c <ip4_reass+0x324>)
 800f218:	480e      	ldr	r0, [pc, #56]	; (800f254 <ip4_reass+0x31c>)
 800f21a:	f000 fc0b 	bl	800fa34 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f21e:	2100      	movs	r1, #0
 800f220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f222:	f7ff fcf1 	bl	800ec08 <ip_reass_dequeue_datagram>
 800f226:	e004      	b.n	800f232 <ip4_reass+0x2fa>
    goto nullreturn;
 800f228:	bf00      	nop
 800f22a:	e002      	b.n	800f232 <ip4_reass+0x2fa>
    goto nullreturn;
 800f22c:	bf00      	nop
 800f22e:	e000      	b.n	800f232 <ip4_reass+0x2fa>
  }

nullreturn:
 800f230:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7f5 ff5c 	bl	80050f0 <pbuf_free>
  return NULL;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3738      	adds	r7, #56	; 0x38
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	20000214 	.word	0x20000214
 800f248:	20000210 	.word	0x20000210
 800f24c:	08013350 	.word	0x08013350
 800f250:	080134c0 	.word	0x080134c0
 800f254:	08013398 	.word	0x08013398
 800f258:	080134dc 	.word	0x080134dc
 800f25c:	080134e8 	.word	0x080134e8

0800f260 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f264:	2005      	movs	r0, #5
 800f266:	f7f5 f8e1 	bl	800442c <memp_malloc>
 800f26a:	4603      	mov	r3, r0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d106      	bne.n	800f28c <ip_frag_free_pbuf_custom_ref+0x1c>
 800f27e:	4b07      	ldr	r3, [pc, #28]	; (800f29c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f280:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f284:	4906      	ldr	r1, [pc, #24]	; (800f2a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f286:	4807      	ldr	r0, [pc, #28]	; (800f2a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f288:	f000 fbd4 	bl	800fa34 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	2005      	movs	r0, #5
 800f290:	f7f5 f918 	bl	80044c4 <memp_free>
}
 800f294:	bf00      	nop
 800f296:	3708      	adds	r7, #8
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	08013350 	.word	0x08013350
 800f2a0:	08013508 	.word	0x08013508
 800f2a4:	08013398 	.word	0x08013398

0800f2a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d106      	bne.n	800f2c8 <ipfrag_free_pbuf_custom+0x20>
 800f2ba:	4b11      	ldr	r3, [pc, #68]	; (800f300 <ipfrag_free_pbuf_custom+0x58>)
 800f2bc:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f2c0:	4910      	ldr	r1, [pc, #64]	; (800f304 <ipfrag_free_pbuf_custom+0x5c>)
 800f2c2:	4811      	ldr	r0, [pc, #68]	; (800f308 <ipfrag_free_pbuf_custom+0x60>)
 800f2c4:	f000 fbb6 	bl	800fa34 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d006      	beq.n	800f2de <ipfrag_free_pbuf_custom+0x36>
 800f2d0:	4b0b      	ldr	r3, [pc, #44]	; (800f300 <ipfrag_free_pbuf_custom+0x58>)
 800f2d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f2d6:	490d      	ldr	r1, [pc, #52]	; (800f30c <ipfrag_free_pbuf_custom+0x64>)
 800f2d8:	480b      	ldr	r0, [pc, #44]	; (800f308 <ipfrag_free_pbuf_custom+0x60>)
 800f2da:	f000 fbab 	bl	800fa34 <iprintf>
  if (pcr->original != NULL) {
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	695b      	ldr	r3, [r3, #20]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d004      	beq.n	800f2f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	695b      	ldr	r3, [r3, #20]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7f5 ff00 	bl	80050f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f2f0:	68f8      	ldr	r0, [r7, #12]
 800f2f2:	f7ff ffbd 	bl	800f270 <ip_frag_free_pbuf_custom_ref>
}
 800f2f6:	bf00      	nop
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	08013350 	.word	0x08013350
 800f304:	08013514 	.word	0x08013514
 800f308:	08013398 	.word	0x08013398
 800f30c:	08013520 	.word	0x08013520

0800f310 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b094      	sub	sp, #80	; 0x50
 800f314:	af02      	add	r7, sp, #8
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f31c:	2300      	movs	r3, #0
 800f31e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f326:	3b14      	subs	r3, #20
 800f328:	2b00      	cmp	r3, #0
 800f32a:	da00      	bge.n	800f32e <ip4_frag+0x1e>
 800f32c:	3307      	adds	r3, #7
 800f32e:	10db      	asrs	r3, r3, #3
 800f330:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f332:	2314      	movs	r3, #20
 800f334:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f33e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	f003 030f 	and.w	r3, r3, #15
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	2b14      	cmp	r3, #20
 800f350:	d002      	beq.n	800f358 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f352:	f06f 0305 	mvn.w	r3, #5
 800f356:	e10f      	b.n	800f578 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	895b      	ldrh	r3, [r3, #10]
 800f35c:	2b13      	cmp	r3, #19
 800f35e:	d809      	bhi.n	800f374 <ip4_frag+0x64>
 800f360:	4b87      	ldr	r3, [pc, #540]	; (800f580 <ip4_frag+0x270>)
 800f362:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f366:	4987      	ldr	r1, [pc, #540]	; (800f584 <ip4_frag+0x274>)
 800f368:	4887      	ldr	r0, [pc, #540]	; (800f588 <ip4_frag+0x278>)
 800f36a:	f000 fb63 	bl	800fa34 <iprintf>
 800f36e:	f06f 0305 	mvn.w	r3, #5
 800f372:	e101      	b.n	800f578 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f376:	88db      	ldrh	r3, [r3, #6]
 800f378:	b29b      	uxth	r3, r3
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7f4 fc00 	bl	8003b80 <lwip_htons>
 800f380:	4603      	mov	r3, r0
 800f382:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f384:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f386:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f38a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f38e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f394:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	891b      	ldrh	r3, [r3, #8]
 800f39a:	3b14      	subs	r3, #20
 800f39c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f3a0:	e0e0      	b.n	800f564 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f3a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f3a4:	00db      	lsls	r3, r3, #3
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	bf28      	it	cs
 800f3b0:	4613      	movcs	r3, r2
 800f3b2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f3b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3b8:	2114      	movs	r1, #20
 800f3ba:	200e      	movs	r0, #14
 800f3bc:	f7f5 fbb8 	bl	8004b30 <pbuf_alloc>
 800f3c0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f000 80d4 	beq.w	800f572 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3cc:	895b      	ldrh	r3, [r3, #10]
 800f3ce:	2b13      	cmp	r3, #19
 800f3d0:	d806      	bhi.n	800f3e0 <ip4_frag+0xd0>
 800f3d2:	4b6b      	ldr	r3, [pc, #428]	; (800f580 <ip4_frag+0x270>)
 800f3d4:	f240 3225 	movw	r2, #805	; 0x325
 800f3d8:	496c      	ldr	r1, [pc, #432]	; (800f58c <ip4_frag+0x27c>)
 800f3da:	486b      	ldr	r0, [pc, #428]	; (800f588 <ip4_frag+0x278>)
 800f3dc:	f000 fb2a 	bl	800fa34 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	2214      	movs	r2, #20
 800f3e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f000 fb10 	bl	800fa0e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f3f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f3f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f3fa:	e064      	b.n	800f4c6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	895a      	ldrh	r2, [r3, #10]
 800f400:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f402:	1ad3      	subs	r3, r2, r3
 800f404:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	895b      	ldrh	r3, [r3, #10]
 800f40a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d906      	bls.n	800f41e <ip4_frag+0x10e>
 800f410:	4b5b      	ldr	r3, [pc, #364]	; (800f580 <ip4_frag+0x270>)
 800f412:	f240 322d 	movw	r2, #813	; 0x32d
 800f416:	495e      	ldr	r1, [pc, #376]	; (800f590 <ip4_frag+0x280>)
 800f418:	485b      	ldr	r0, [pc, #364]	; (800f588 <ip4_frag+0x278>)
 800f41a:	f000 fb0b 	bl	800fa34 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f41e:	8bfa      	ldrh	r2, [r7, #30]
 800f420:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f424:	4293      	cmp	r3, r2
 800f426:	bf28      	it	cs
 800f428:	4613      	movcs	r3, r2
 800f42a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f42e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f432:	2b00      	cmp	r3, #0
 800f434:	d105      	bne.n	800f442 <ip4_frag+0x132>
        poff = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	60fb      	str	r3, [r7, #12]
        continue;
 800f440:	e041      	b.n	800f4c6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f442:	f7ff ff0d 	bl	800f260 <ip_frag_alloc_pbuf_custom_ref>
 800f446:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d103      	bne.n	800f456 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f44e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f450:	f7f5 fe4e 	bl	80050f0 <pbuf_free>
        goto memerr;
 800f454:	e08e      	b.n	800f574 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f456:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f45c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f45e:	4413      	add	r3, r2
 800f460:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f464:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f468:	9201      	str	r2, [sp, #4]
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	4603      	mov	r3, r0
 800f46e:	2241      	movs	r2, #65	; 0x41
 800f470:	2000      	movs	r0, #0
 800f472:	f7f5 fc83 	bl	8004d7c <pbuf_alloced_custom>
 800f476:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d106      	bne.n	800f48c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f47e:	69b8      	ldr	r0, [r7, #24]
 800f480:	f7ff fef6 	bl	800f270 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f486:	f7f5 fe33 	bl	80050f0 <pbuf_free>
        goto memerr;
 800f48a:	e073      	b.n	800f574 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f7f5 fecf 	bl	8005230 <pbuf_ref>
      pcr->original = p;
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	68fa      	ldr	r2, [r7, #12]
 800f496:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	4a3e      	ldr	r2, [pc, #248]	; (800f594 <ip4_frag+0x284>)
 800f49c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f49e:	6979      	ldr	r1, [r7, #20]
 800f4a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4a2:	f7f5 fee7 	bl	8005274 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f4a6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f4aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f4b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d004      	beq.n	800f4c6 <ip4_frag+0x1b6>
        poff = 0;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f4c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d196      	bne.n	800f3fc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f4ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f4d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f4d4:	4413      	add	r3, r2
 800f4d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f4d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4e0:	3b14      	subs	r3, #20
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	bfd4      	ite	le
 800f4e6:	2301      	movle	r3, #1
 800f4e8:	2300      	movgt	r3, #0
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f4ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f4f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f4f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f4f8:	6a3b      	ldr	r3, [r7, #32]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d002      	beq.n	800f504 <ip4_frag+0x1f4>
 800f4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f500:	2b00      	cmp	r3, #0
 800f502:	d003      	beq.n	800f50c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f504:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f50a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f50c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f4 fb36 	bl	8003b80 <lwip_htons>
 800f514:	4603      	mov	r3, r0
 800f516:	461a      	mov	r2, r3
 800f518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f51c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f51e:	3314      	adds	r3, #20
 800f520:	b29b      	uxth	r3, r3
 800f522:	4618      	mov	r0, r3
 800f524:	f7f4 fb2c 	bl	8003b80 <lwip_htons>
 800f528:	4603      	mov	r3, r0
 800f52a:	461a      	mov	r2, r3
 800f52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	2200      	movs	r2, #0
 800f534:	729a      	strb	r2, [r3, #10]
 800f536:	2200      	movs	r2, #0
 800f538:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	695b      	ldr	r3, [r3, #20]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f542:	68b8      	ldr	r0, [r7, #8]
 800f544:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f548:	f7f5 fdd2 	bl	80050f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f54c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f550:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f558:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f55c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f55e:	4413      	add	r3, r2
 800f560:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f564:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f47f af1a 	bne.w	800f3a2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f56e:	2300      	movs	r3, #0
 800f570:	e002      	b.n	800f578 <ip4_frag+0x268>
      goto memerr;
 800f572:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f574:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3748      	adds	r7, #72	; 0x48
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	08013350 	.word	0x08013350
 800f584:	0801352c 	.word	0x0801352c
 800f588:	08013398 	.word	0x08013398
 800f58c:	08013548 	.word	0x08013548
 800f590:	08013568 	.word	0x08013568
 800f594:	0800f2a9 	.word	0x0800f2a9

0800f598 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f5a2:	230e      	movs	r3, #14
 800f5a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	895b      	ldrh	r3, [r3, #10]
 800f5aa:	2b0e      	cmp	r3, #14
 800f5ac:	d96e      	bls.n	800f68c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	7bdb      	ldrb	r3, [r3, #15]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d106      	bne.n	800f5c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f5bc:	3301      	adds	r3, #1
 800f5be:	b2da      	uxtb	r2, r3
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	7b1a      	ldrb	r2, [r3, #12]
 800f5ce:	7b5b      	ldrb	r3, [r3, #13]
 800f5d0:	021b      	lsls	r3, r3, #8
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d023      	beq.n	800f62a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d10f      	bne.n	800f60a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	785b      	ldrb	r3, [r3, #1]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d11b      	bne.n	800f62a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f5f6:	2b5e      	cmp	r3, #94	; 0x5e
 800f5f8:	d117      	bne.n	800f62a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	7b5b      	ldrb	r3, [r3, #13]
 800f5fe:	f043 0310 	orr.w	r3, r3, #16
 800f602:	b2da      	uxtb	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	735a      	strb	r2, [r3, #13]
 800f608:	e00f      	b.n	800f62a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	2206      	movs	r2, #6
 800f60e:	4928      	ldr	r1, [pc, #160]	; (800f6b0 <ethernet_input+0x118>)
 800f610:	4618      	mov	r0, r3
 800f612:	f000 f9ed 	bl	800f9f0 <memcmp>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d106      	bne.n	800f62a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	7b5b      	ldrb	r3, [r3, #13]
 800f620:	f043 0308 	orr.w	r3, r3, #8
 800f624:	b2da      	uxtb	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f62a:	89fb      	ldrh	r3, [r7, #14]
 800f62c:	2b08      	cmp	r3, #8
 800f62e:	d003      	beq.n	800f638 <ethernet_input+0xa0>
 800f630:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f634:	d014      	beq.n	800f660 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f636:	e032      	b.n	800f69e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f63e:	f003 0308 	and.w	r3, r3, #8
 800f642:	2b00      	cmp	r3, #0
 800f644:	d024      	beq.n	800f690 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f646:	8afb      	ldrh	r3, [r7, #22]
 800f648:	4619      	mov	r1, r3
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7f5 fcca 	bl	8004fe4 <pbuf_remove_header>
 800f650:	4603      	mov	r3, r0
 800f652:	2b00      	cmp	r3, #0
 800f654:	d11e      	bne.n	800f694 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7fe ff0f 	bl	800e47c <ip4_input>
      break;
 800f65e:	e013      	b.n	800f688 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f666:	f003 0308 	and.w	r3, r3, #8
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d014      	beq.n	800f698 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f66e:	8afb      	ldrh	r3, [r7, #22]
 800f670:	4619      	mov	r1, r3
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7f5 fcb6 	bl	8004fe4 <pbuf_remove_header>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d10e      	bne.n	800f69c <ethernet_input+0x104>
        etharp_input(p, netif);
 800f67e:	6839      	ldr	r1, [r7, #0]
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f7fe f8ab 	bl	800d7dc <etharp_input>
      break;
 800f686:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f688:	2300      	movs	r3, #0
 800f68a:	e00c      	b.n	800f6a6 <ethernet_input+0x10e>
    goto free_and_return;
 800f68c:	bf00      	nop
 800f68e:	e006      	b.n	800f69e <ethernet_input+0x106>
        goto free_and_return;
 800f690:	bf00      	nop
 800f692:	e004      	b.n	800f69e <ethernet_input+0x106>
        goto free_and_return;
 800f694:	bf00      	nop
 800f696:	e002      	b.n	800f69e <ethernet_input+0x106>
        goto free_and_return;
 800f698:	bf00      	nop
 800f69a:	e000      	b.n	800f69e <ethernet_input+0x106>
        goto free_and_return;
 800f69c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7f5 fd26 	bl	80050f0 <pbuf_free>
  return ERR_OK;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3718      	adds	r7, #24
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	0801370c 	.word	0x0801370c

0800f6b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b086      	sub	sp, #24
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
 800f6c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f6c2:	8c3b      	ldrh	r3, [r7, #32]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7f4 fa5b 	bl	8003b80 <lwip_htons>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f6ce:	210e      	movs	r1, #14
 800f6d0:	68b8      	ldr	r0, [r7, #8]
 800f6d2:	f7f5 fc77 	bl	8004fc4 <pbuf_add_header>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d125      	bne.n	800f728 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	8afa      	ldrh	r2, [r7, #22]
 800f6e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	2206      	movs	r2, #6
 800f6ec:	6839      	ldr	r1, [r7, #0]
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f000 f98d 	bl	800fa0e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	3306      	adds	r3, #6
 800f6f8:	2206      	movs	r2, #6
 800f6fa:	6879      	ldr	r1, [r7, #4]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f000 f986 	bl	800fa0e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f708:	2b06      	cmp	r3, #6
 800f70a:	d006      	beq.n	800f71a <ethernet_output+0x66>
 800f70c:	4b0a      	ldr	r3, [pc, #40]	; (800f738 <ethernet_output+0x84>)
 800f70e:	f240 1233 	movw	r2, #307	; 0x133
 800f712:	490a      	ldr	r1, [pc, #40]	; (800f73c <ethernet_output+0x88>)
 800f714:	480a      	ldr	r0, [pc, #40]	; (800f740 <ethernet_output+0x8c>)
 800f716:	f000 f98d 	bl	800fa34 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	699b      	ldr	r3, [r3, #24]
 800f71e:	68b9      	ldr	r1, [r7, #8]
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	4798      	blx	r3
 800f724:	4603      	mov	r3, r0
 800f726:	e002      	b.n	800f72e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f728:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f72a:	f06f 0301 	mvn.w	r3, #1
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3718      	adds	r7, #24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
 800f736:	bf00      	nop
 800f738:	08013578 	.word	0x08013578
 800f73c:	080135b0 	.word	0x080135b0
 800f740:	080135e4 	.word	0x080135e4

0800f744 <I2C_Init>:
static uint8_t   I2C_Mode;

//static uint8_t  i2cState = I2C_STATE_IDLE;
//*******************************************************************************************
//*******************************************************************************************
void I2C_Init(I2C_TypeDef *i2c){
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
//			GPIOB->CRH |= GPIO_CRH_MODE10_1 | GPIO_CRH_MODE11_1 |
//						  GPIO_CRH_CNF10    | GPIO_CRH_CNF11;
//		}
	//------------------------------
	//Инициализация I2C.
	i2c->CR2  &= ~I2C_CR2_FREQ;   //
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	605a      	str	r2, [r3, #4]
	i2c->CR2  |=  45; //36;//I2C_CR2_VALUE;  //APB1 = 36MHz
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	f043 022d 	orr.w	r2, r3, #45	; 0x2d
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	605a      	str	r2, [r3, #4]
	i2c->CCR  &= ~I2C_CCR_CCR;    //
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	69db      	ldr	r3, [r3, #28]
 800f768:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f76c:	f023 030f 	bic.w	r3, r3, #15
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	61d3      	str	r3, [r2, #28]

	//i2c->CCR   =  120;//100кГц
	i2c->CCR   =  30; //400кГц  45;//I2C_CCR_VALUE;  //(36MHz/I2C_BAUD_RATE/2)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	221e      	movs	r2, #30
 800f778:	61da      	str	r2, [r3, #28]

	i2c->CCR  |=  I2C_CCR_FS;     //1 - режим FastMode(400kHz), 0 - режим STANDART(100kHz).
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	69db      	ldr	r3, [r3, #28]
 800f77e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	61da      	str	r2, [r3, #28]
	i2c->TRISE =  12;//37;//I2C_TRISE_VALUE;//(1mcs/(1/36MHz)+1)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	220c      	movs	r2, #12
 800f78a:	621a      	str	r2, [r3, #32]
	i2c->CR1  |=  I2C_CR1_PE;     //Включение модуля I2C1.
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f043 0201 	orr.w	r2, r3, #1
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 255; i++){__NOP();};
 800f798:	2300      	movs	r3, #0
 800f79a:	73fb      	strb	r3, [r7, #15]
 800f79c:	e003      	b.n	800f7a6 <I2C_Init+0x62>
 800f79e:	bf00      	nop
 800f7a0:	7bfb      	ldrb	r3, [r7, #15]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	73fb      	strb	r3, [r7, #15]
 800f7a6:	7bfb      	ldrb	r3, [r7, #15]
 800f7a8:	2bff      	cmp	r3, #255	; 0xff
 800f7aa:	d1f8      	bne.n	800f79e <I2C_Init+0x5a>
}
 800f7ac:	bf00      	nop
 800f7ae:	3714      	adds	r7, #20
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <I2C_StartAndSendDeviceAddr>:
//**********************************************************
uint8_t I2C_StartAndSendDeviceAddr(I2C_TypeDef *i2c, uint8_t deviceAddr){
 800f7b8:	b480      	push	{r7}
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	70fb      	strb	r3, [r7, #3]

	uint32_t wait = 0;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	60fb      	str	r3, [r7, #12]
	//---------------------
	//Ждем освобождения шины. - не отлажено!!!
	while(i2c->SR2 & I2C_SR2_BUSY)
 800f7c8:	e00d      	b.n	800f7e6 <I2C_StartAndSendDeviceAddr+0x2e>
		{
			if(++wait >= I2C_WAIT)
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	60fb      	str	r3, [r7, #12]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2bfe      	cmp	r3, #254	; 0xfe
 800f7d4:	d907      	bls.n	800f7e6 <I2C_StartAndSendDeviceAddr+0x2e>
			{
				i2c->CR1 |=	I2C_CR1_SWRST;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	601a      	str	r2, [r3, #0]
				return 1;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e045      	b.n	800f872 <I2C_StartAndSendDeviceAddr+0xba>
	while(i2c->SR2 & I2C_SR2_BUSY)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	699b      	ldr	r3, [r3, #24]
 800f7ea:	f003 0302 	and.w	r3, r3, #2
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1eb      	bne.n	800f7ca <I2C_StartAndSendDeviceAddr+0x12>
			}
		}
	wait = 0;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	60fb      	str	r3, [r7, #12]
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	601a      	str	r2, [r3, #0]
	while(!(i2c->SR1 & I2C_SR1_SB))//Ожидание формирования Start condition.
 800f802:	e00d      	b.n	800f820 <I2C_StartAndSendDeviceAddr+0x68>
		{
			if(++wait >= I2C_WAIT)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	3301      	adds	r3, #1
 800f808:	60fb      	str	r3, [r7, #12]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2bfe      	cmp	r3, #254	; 0xfe
 800f80e:	d907      	bls.n	800f820 <I2C_StartAndSendDeviceAddr+0x68>
				{
					i2c->CR1 |=	I2C_CR1_SWRST;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	601a      	str	r2, [r3, #0]
					return 1;
 800f81c:	2301      	movs	r3, #1
 800f81e:	e028      	b.n	800f872 <I2C_StartAndSendDeviceAddr+0xba>
	while(!(i2c->SR1 & I2C_SR1_SB))//Ожидание формирования Start condition.
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	695b      	ldr	r3, [r3, #20]
 800f824:	f003 0301 	and.w	r3, r3, #1
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d0eb      	beq.n	800f804 <I2C_StartAndSendDeviceAddr+0x4c>
				}
		}
	wait = 0;
 800f82c:	2300      	movs	r3, #0
 800f82e:	60fb      	str	r3, [r7, #12]
	(void)i2c->SR1;				    //Для сброса флага SB необходимо прочитать SR1
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	695b      	ldr	r3, [r3, #20]
	//Передаем адрес slave.
	i2c->DR = deviceAddr;
 800f834:	78fa      	ldrb	r2, [r7, #3]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	611a      	str	r2, [r3, #16]
	while(!(i2c->SR1 & I2C_SR1_ADDR))//Ожидаем окончания передачи адреса и
 800f83a:	e00d      	b.n	800f858 <I2C_StartAndSendDeviceAddr+0xa0>
		{
			if(++wait >= I2C_WAIT)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	3301      	adds	r3, #1
 800f840:	60fb      	str	r3, [r7, #12]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2bfe      	cmp	r3, #254	; 0xfe
 800f846:	d907      	bls.n	800f858 <I2C_StartAndSendDeviceAddr+0xa0>
				{
					i2c->CR1 |=	I2C_CR1_SWRST;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	601a      	str	r2, [r3, #0]
					return 1;
 800f854:	2301      	movs	r3, #1
 800f856:	e00c      	b.n	800f872 <I2C_StartAndSendDeviceAddr+0xba>
	while(!(i2c->SR1 & I2C_SR1_ADDR))//Ожидаем окончания передачи адреса и
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	f003 0302 	and.w	r3, r3, #2
 800f860:	2b00      	cmp	r3, #0
 800f862:	d0eb      	beq.n	800f83c <I2C_StartAndSendDeviceAddr+0x84>
				}
		}
	wait = 0;
 800f864:	2300      	movs	r3, #0
 800f866:	60fb      	str	r3, [r7, #12]
	(void)i2c->SR1;				      //сбрасываем бит ADDR (чтением SR1 и SR2):
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	695b      	ldr	r3, [r3, #20]
	(void)i2c->SR2;				      //
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	699b      	ldr	r3, [r3, #24]

	return 0;
 800f870:	2300      	movs	r3, #0
}
 800f872:	4618      	mov	r0, r3
 800f874:	3714      	adds	r7, #20
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <I2C_Stop>:
			*(pBuf + len - 1) = i2c->DR;		//считали принятый байт.
			i2c->CR1 |= I2C_CR1_STOP;           //Формируем Stop
		}
}
//**********************************************************
void I2C_Stop(I2C_TypeDef *i2c){
 800f87e:	b480      	push	{r7}
 800f880:	b083      	sub	sp, #12
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]

	while((i2c->SR1 & I2C_SR1_BTF));//Ждем окончания передачи
 800f886:	bf00      	nop
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	695b      	ldr	r3, [r3, #20]
 800f88c:	f003 0304 	and.w	r3, r3, #4
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1f9      	bne.n	800f888 <I2C_Stop+0xa>
	i2c->CR1 |= I2C_CR1_STOP;		 //Формируем Stop
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	601a      	str	r2, [r3, #0]
}
 800f8a0:	bf00      	nop
 800f8a2:	370c      	adds	r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <I2C_Int_Handler>:
	//Формирование Start condition.
	i2c->CR1 |= I2C_CR1_START;
}
//*******************************************************************************************
//*******************************************************************************************
static void I2C_Int_Handler(I2C_TypeDef *i2c, uint8_t slaveAddr){
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	70fb      	strb	r3, [r7, #3]

	volatile uint32_t sr1 = i2c->SR1;//Чтениех этих регистров сбрасывает флаги событий I2C.
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	695b      	ldr	r3, [r3, #20]
 800f8bc:	60fb      	str	r3, [r7, #12]
	//volatile uint32_t sr2 = i2c->SR2;
	//---------------------
	//Start condition generated. Clear: read SR1, write to DR
	if(sr1 & I2C_SR1_SB)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f003 0301 	and.w	r3, r3, #1
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d008      	beq.n	800f8da <I2C_Int_Handler+0x2e>
		{
		  i2c->DR = I2C_ADDRESS(slaveAddr, I2C_Mode);
 800f8c8:	78fb      	ldrb	r3, [r7, #3]
 800f8ca:	005b      	lsls	r3, r3, #1
 800f8cc:	4a27      	ldr	r2, [pc, #156]	; (800f96c <I2C_Int_Handler+0xc0>)
 800f8ce:	7812      	ldrb	r2, [r2, #0]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	611a      	str	r2, [r3, #16]
		  return;
 800f8d8:	e042      	b.n	800f960 <I2C_Int_Handler+0xb4>
		}
	//Address sent. Clear: read SR1, read SR2
	else if(sr1 & I2C_SR1_ADDR)
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f003 0302 	and.w	r3, r3, #2
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d010      	beq.n	800f906 <I2C_Int_Handler+0x5a>
	   {
	      if(I2C_Mode == I2C_MODE_WRITE)
 800f8e4:	4b21      	ldr	r3, [pc, #132]	; (800f96c <I2C_Int_Handler+0xc0>)
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d136      	bne.n	800f95a <I2C_Int_Handler+0xae>
			  {
	    	  	  i2c->DR = I2C_pBuf[0];
 800f8ec:	4b20      	ldr	r3, [pc, #128]	; (800f970 <I2C_Int_Handler+0xc4>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	611a      	str	r2, [r3, #16]
	    	  	  I2C_TxCnt++;
 800f8f8:	4b1e      	ldr	r3, [pc, #120]	; (800f974 <I2C_Int_Handler+0xc8>)
 800f8fa:	881b      	ldrh	r3, [r3, #0]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	4b1c      	ldr	r3, [pc, #112]	; (800f974 <I2C_Int_Handler+0xc8>)
 800f902:	801a      	strh	r2, [r3, #0]
//						// не дописано! не использовать
//						I2C_NUMB->DR = (uint8_t)AddrReg;            // First byte
//						AddrReg>>=8;
//					 }
//			  }
	      return;
 800f904:	e029      	b.n	800f95a <I2C_Int_Handler+0xae>
//	else if(sr1 & I2C_SR1_AF)
//		{
//			I2C_TxCnt++;
//		}
	//Data Register Empty (transmitters).
	else if(sr1 & I2C_SR1_TXE)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d01f      	beq.n	800f950 <I2C_Int_Handler+0xa4>
		{
			i2c->DR = I2C_pBuf[I2C_TxCnt];
 800f910:	4b17      	ldr	r3, [pc, #92]	; (800f970 <I2C_Int_Handler+0xc4>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	4a17      	ldr	r2, [pc, #92]	; (800f974 <I2C_Int_Handler+0xc8>)
 800f916:	8812      	ldrh	r2, [r2, #0]
 800f918:	4413      	add	r3, r2
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	461a      	mov	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	611a      	str	r2, [r3, #16]
			I2C_TxCnt++;
 800f922:	4b14      	ldr	r3, [pc, #80]	; (800f974 <I2C_Int_Handler+0xc8>)
 800f924:	881b      	ldrh	r3, [r3, #0]
 800f926:	3301      	adds	r3, #1
 800f928:	b29a      	uxth	r2, r3
 800f92a:	4b12      	ldr	r3, [pc, #72]	; (800f974 <I2C_Int_Handler+0xc8>)
 800f92c:	801a      	strh	r2, [r3, #0]
			if(I2C_TxCnt >= I2C_TxSize)
 800f92e:	4b12      	ldr	r3, [pc, #72]	; (800f978 <I2C_Int_Handler+0xcc>)
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	b29a      	uxth	r2, r3
 800f934:	4b0f      	ldr	r3, [pc, #60]	; (800f974 <I2C_Int_Handler+0xc8>)
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d810      	bhi.n	800f95e <I2C_Int_Handler+0xb2>
				{
					I2C_TxCnt = 0;
 800f93c:	4b0d      	ldr	r3, [pc, #52]	; (800f974 <I2C_Int_Handler+0xc8>)
 800f93e:	2200      	movs	r2, #0
 800f940:	801a      	strh	r2, [r3, #0]
					i2c->CR1 |= I2C_CR1_STOP;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	601a      	str	r2, [r3, #0]
				}
			return;
 800f94e:	e006      	b.n	800f95e <I2C_Int_Handler+0xb2>
		}
	//Byte Transfer Finished.
	else if(sr1 & I2C_SR1_BTF)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f003 0304 	and.w	r3, r3, #4
 800f956:	2b00      	cmp	r3, #0
 800f958:	e002      	b.n	800f960 <I2C_Int_Handler+0xb4>
	      return;
 800f95a:	bf00      	nop
 800f95c:	e000      	b.n	800f960 <I2C_Int_Handler+0xb4>
			return;
 800f95e:	bf00      	nop
//	if(sr1 & I2C_SR1_TXE)
//		{
//			if(TxCounter < I2C_TxSize) i2c->DR   = I2C_pBuf[TxCounter++];
//			else		               i2c->CR1 |= I2C_CR1_STOP;
//		}
}
 800f960:	3714      	adds	r7, #20
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop
 800f96c:	20000221 	.word	0x20000221
 800f970:	2000021c 	.word	0x2000021c
 800f974:	20000216 	.word	0x20000216
 800f978:	20000220 	.word	0x20000220

0800f97c <I2C1_EV_IRQHandler>:
//*******************************************************************************************
//*******************************************************************************************
//Прерывание I2C1.
void I2C1_EV_IRQHandler(void){
 800f97c:	b480      	push	{r7}
 800f97e:	af00      	add	r7, sp, #0

//	I2C_handler(I2C1, addr);
}
 800f980:	bf00      	nop
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr
	...

0800f98c <I2C2_EV_IRQHandler>:
//**********************************************************
//Прерывание I2C2.
void I2C2_EV_IRQHandler(void){
 800f98c:	b580      	push	{r7, lr}
 800f98e:	af00      	add	r7, sp, #0

	I2C_Int_Handler(I2C2, I2C_SlaveAddr);
 800f990:	4b03      	ldr	r3, [pc, #12]	; (800f9a0 <I2C2_EV_IRQHandler+0x14>)
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	4619      	mov	r1, r3
 800f996:	4803      	ldr	r0, [pc, #12]	; (800f9a4 <I2C2_EV_IRQHandler+0x18>)
 800f998:	f7ff ff88 	bl	800f8ac <I2C_Int_Handler>
//	LedPA7_Toggel();
}
 800f99c:	bf00      	nop
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	20000218 	.word	0x20000218
 800f9a4:	40005800 	.word	0x40005800

0800f9a8 <__libc_init_array>:
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	4e0d      	ldr	r6, [pc, #52]	; (800f9e0 <__libc_init_array+0x38>)
 800f9ac:	4c0d      	ldr	r4, [pc, #52]	; (800f9e4 <__libc_init_array+0x3c>)
 800f9ae:	1ba4      	subs	r4, r4, r6
 800f9b0:	10a4      	asrs	r4, r4, #2
 800f9b2:	2500      	movs	r5, #0
 800f9b4:	42a5      	cmp	r5, r4
 800f9b6:	d109      	bne.n	800f9cc <__libc_init_array+0x24>
 800f9b8:	4e0b      	ldr	r6, [pc, #44]	; (800f9e8 <__libc_init_array+0x40>)
 800f9ba:	4c0c      	ldr	r4, [pc, #48]	; (800f9ec <__libc_init_array+0x44>)
 800f9bc:	f000 ff5a 	bl	8010874 <_init>
 800f9c0:	1ba4      	subs	r4, r4, r6
 800f9c2:	10a4      	asrs	r4, r4, #2
 800f9c4:	2500      	movs	r5, #0
 800f9c6:	42a5      	cmp	r5, r4
 800f9c8:	d105      	bne.n	800f9d6 <__libc_init_array+0x2e>
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}
 800f9cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f9d0:	4798      	blx	r3
 800f9d2:	3501      	adds	r5, #1
 800f9d4:	e7ee      	b.n	800f9b4 <__libc_init_array+0xc>
 800f9d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f9da:	4798      	blx	r3
 800f9dc:	3501      	adds	r5, #1
 800f9de:	e7f2      	b.n	800f9c6 <__libc_init_array+0x1e>
 800f9e0:	080137bc 	.word	0x080137bc
 800f9e4:	080137bc 	.word	0x080137bc
 800f9e8:	080137bc 	.word	0x080137bc
 800f9ec:	080137c0 	.word	0x080137c0

0800f9f0 <memcmp>:
 800f9f0:	b530      	push	{r4, r5, lr}
 800f9f2:	2400      	movs	r4, #0
 800f9f4:	42a2      	cmp	r2, r4
 800f9f6:	d101      	bne.n	800f9fc <memcmp+0xc>
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	e007      	b.n	800fa0c <memcmp+0x1c>
 800f9fc:	5d03      	ldrb	r3, [r0, r4]
 800f9fe:	3401      	adds	r4, #1
 800fa00:	190d      	adds	r5, r1, r4
 800fa02:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800fa06:	42ab      	cmp	r3, r5
 800fa08:	d0f4      	beq.n	800f9f4 <memcmp+0x4>
 800fa0a:	1b58      	subs	r0, r3, r5
 800fa0c:	bd30      	pop	{r4, r5, pc}

0800fa0e <memcpy>:
 800fa0e:	b510      	push	{r4, lr}
 800fa10:	1e43      	subs	r3, r0, #1
 800fa12:	440a      	add	r2, r1
 800fa14:	4291      	cmp	r1, r2
 800fa16:	d100      	bne.n	800fa1a <memcpy+0xc>
 800fa18:	bd10      	pop	{r4, pc}
 800fa1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa22:	e7f7      	b.n	800fa14 <memcpy+0x6>

0800fa24 <memset>:
 800fa24:	4402      	add	r2, r0
 800fa26:	4603      	mov	r3, r0
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d100      	bne.n	800fa2e <memset+0xa>
 800fa2c:	4770      	bx	lr
 800fa2e:	f803 1b01 	strb.w	r1, [r3], #1
 800fa32:	e7f9      	b.n	800fa28 <memset+0x4>

0800fa34 <iprintf>:
 800fa34:	b40f      	push	{r0, r1, r2, r3}
 800fa36:	4b0a      	ldr	r3, [pc, #40]	; (800fa60 <iprintf+0x2c>)
 800fa38:	b513      	push	{r0, r1, r4, lr}
 800fa3a:	681c      	ldr	r4, [r3, #0]
 800fa3c:	b124      	cbz	r4, 800fa48 <iprintf+0x14>
 800fa3e:	69a3      	ldr	r3, [r4, #24]
 800fa40:	b913      	cbnz	r3, 800fa48 <iprintf+0x14>
 800fa42:	4620      	mov	r0, r4
 800fa44:	f000 f882 	bl	800fb4c <__sinit>
 800fa48:	ab05      	add	r3, sp, #20
 800fa4a:	9a04      	ldr	r2, [sp, #16]
 800fa4c:	68a1      	ldr	r1, [r4, #8]
 800fa4e:	9301      	str	r3, [sp, #4]
 800fa50:	4620      	mov	r0, r4
 800fa52:	f000 f9df 	bl	800fe14 <_vfiprintf_r>
 800fa56:	b002      	add	sp, #8
 800fa58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa5c:	b004      	add	sp, #16
 800fa5e:	4770      	bx	lr
 800fa60:	20000018 	.word	0x20000018

0800fa64 <rand>:
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	4b13      	ldr	r3, [pc, #76]	; (800fab4 <rand+0x50>)
 800fa68:	681c      	ldr	r4, [r3, #0]
 800fa6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fa6c:	b97b      	cbnz	r3, 800fa8e <rand+0x2a>
 800fa6e:	2018      	movs	r0, #24
 800fa70:	f000 f8f6 	bl	800fc60 <malloc>
 800fa74:	4a10      	ldr	r2, [pc, #64]	; (800fab8 <rand+0x54>)
 800fa76:	4b11      	ldr	r3, [pc, #68]	; (800fabc <rand+0x58>)
 800fa78:	63a0      	str	r0, [r4, #56]	; 0x38
 800fa7a:	e9c0 2300 	strd	r2, r3, [r0]
 800fa7e:	4b10      	ldr	r3, [pc, #64]	; (800fac0 <rand+0x5c>)
 800fa80:	6083      	str	r3, [r0, #8]
 800fa82:	230b      	movs	r3, #11
 800fa84:	8183      	strh	r3, [r0, #12]
 800fa86:	2201      	movs	r2, #1
 800fa88:	2300      	movs	r3, #0
 800fa8a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fa8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fa90:	480c      	ldr	r0, [pc, #48]	; (800fac4 <rand+0x60>)
 800fa92:	690a      	ldr	r2, [r1, #16]
 800fa94:	694b      	ldr	r3, [r1, #20]
 800fa96:	4c0c      	ldr	r4, [pc, #48]	; (800fac8 <rand+0x64>)
 800fa98:	4350      	muls	r0, r2
 800fa9a:	fb04 0003 	mla	r0, r4, r3, r0
 800fa9e:	fba2 2304 	umull	r2, r3, r2, r4
 800faa2:	4403      	add	r3, r0
 800faa4:	1c54      	adds	r4, r2, #1
 800faa6:	f143 0500 	adc.w	r5, r3, #0
 800faaa:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800faae:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	20000018 	.word	0x20000018
 800fab8:	abcd330e 	.word	0xabcd330e
 800fabc:	e66d1234 	.word	0xe66d1234
 800fac0:	0005deec 	.word	0x0005deec
 800fac4:	5851f42d 	.word	0x5851f42d
 800fac8:	4c957f2d 	.word	0x4c957f2d

0800facc <std>:
 800facc:	2300      	movs	r3, #0
 800face:	b510      	push	{r4, lr}
 800fad0:	4604      	mov	r4, r0
 800fad2:	e9c0 3300 	strd	r3, r3, [r0]
 800fad6:	6083      	str	r3, [r0, #8]
 800fad8:	8181      	strh	r1, [r0, #12]
 800fada:	6643      	str	r3, [r0, #100]	; 0x64
 800fadc:	81c2      	strh	r2, [r0, #14]
 800fade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fae2:	6183      	str	r3, [r0, #24]
 800fae4:	4619      	mov	r1, r3
 800fae6:	2208      	movs	r2, #8
 800fae8:	305c      	adds	r0, #92	; 0x5c
 800faea:	f7ff ff9b 	bl	800fa24 <memset>
 800faee:	4b05      	ldr	r3, [pc, #20]	; (800fb04 <std+0x38>)
 800faf0:	6263      	str	r3, [r4, #36]	; 0x24
 800faf2:	4b05      	ldr	r3, [pc, #20]	; (800fb08 <std+0x3c>)
 800faf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800faf6:	4b05      	ldr	r3, [pc, #20]	; (800fb0c <std+0x40>)
 800faf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fafa:	4b05      	ldr	r3, [pc, #20]	; (800fb10 <std+0x44>)
 800fafc:	6224      	str	r4, [r4, #32]
 800fafe:	6323      	str	r3, [r4, #48]	; 0x30
 800fb00:	bd10      	pop	{r4, pc}
 800fb02:	bf00      	nop
 800fb04:	08010371 	.word	0x08010371
 800fb08:	08010393 	.word	0x08010393
 800fb0c:	080103cb 	.word	0x080103cb
 800fb10:	080103ef 	.word	0x080103ef

0800fb14 <_cleanup_r>:
 800fb14:	4901      	ldr	r1, [pc, #4]	; (800fb1c <_cleanup_r+0x8>)
 800fb16:	f000 b885 	b.w	800fc24 <_fwalk_reent>
 800fb1a:	bf00      	nop
 800fb1c:	080106c9 	.word	0x080106c9

0800fb20 <__sfmoreglue>:
 800fb20:	b570      	push	{r4, r5, r6, lr}
 800fb22:	1e4a      	subs	r2, r1, #1
 800fb24:	2568      	movs	r5, #104	; 0x68
 800fb26:	4355      	muls	r5, r2
 800fb28:	460e      	mov	r6, r1
 800fb2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fb2e:	f000 f8ed 	bl	800fd0c <_malloc_r>
 800fb32:	4604      	mov	r4, r0
 800fb34:	b140      	cbz	r0, 800fb48 <__sfmoreglue+0x28>
 800fb36:	2100      	movs	r1, #0
 800fb38:	e9c0 1600 	strd	r1, r6, [r0]
 800fb3c:	300c      	adds	r0, #12
 800fb3e:	60a0      	str	r0, [r4, #8]
 800fb40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fb44:	f7ff ff6e 	bl	800fa24 <memset>
 800fb48:	4620      	mov	r0, r4
 800fb4a:	bd70      	pop	{r4, r5, r6, pc}

0800fb4c <__sinit>:
 800fb4c:	6983      	ldr	r3, [r0, #24]
 800fb4e:	b510      	push	{r4, lr}
 800fb50:	4604      	mov	r4, r0
 800fb52:	bb33      	cbnz	r3, 800fba2 <__sinit+0x56>
 800fb54:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fb58:	6503      	str	r3, [r0, #80]	; 0x50
 800fb5a:	4b12      	ldr	r3, [pc, #72]	; (800fba4 <__sinit+0x58>)
 800fb5c:	4a12      	ldr	r2, [pc, #72]	; (800fba8 <__sinit+0x5c>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	6282      	str	r2, [r0, #40]	; 0x28
 800fb62:	4298      	cmp	r0, r3
 800fb64:	bf04      	itt	eq
 800fb66:	2301      	moveq	r3, #1
 800fb68:	6183      	streq	r3, [r0, #24]
 800fb6a:	f000 f81f 	bl	800fbac <__sfp>
 800fb6e:	6060      	str	r0, [r4, #4]
 800fb70:	4620      	mov	r0, r4
 800fb72:	f000 f81b 	bl	800fbac <__sfp>
 800fb76:	60a0      	str	r0, [r4, #8]
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f000 f817 	bl	800fbac <__sfp>
 800fb7e:	2200      	movs	r2, #0
 800fb80:	60e0      	str	r0, [r4, #12]
 800fb82:	2104      	movs	r1, #4
 800fb84:	6860      	ldr	r0, [r4, #4]
 800fb86:	f7ff ffa1 	bl	800facc <std>
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	2109      	movs	r1, #9
 800fb8e:	68a0      	ldr	r0, [r4, #8]
 800fb90:	f7ff ff9c 	bl	800facc <std>
 800fb94:	2202      	movs	r2, #2
 800fb96:	2112      	movs	r1, #18
 800fb98:	68e0      	ldr	r0, [r4, #12]
 800fb9a:	f7ff ff97 	bl	800facc <std>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	61a3      	str	r3, [r4, #24]
 800fba2:	bd10      	pop	{r4, pc}
 800fba4:	0801371c 	.word	0x0801371c
 800fba8:	0800fb15 	.word	0x0800fb15

0800fbac <__sfp>:
 800fbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbae:	4b1b      	ldr	r3, [pc, #108]	; (800fc1c <__sfp+0x70>)
 800fbb0:	681e      	ldr	r6, [r3, #0]
 800fbb2:	69b3      	ldr	r3, [r6, #24]
 800fbb4:	4607      	mov	r7, r0
 800fbb6:	b913      	cbnz	r3, 800fbbe <__sfp+0x12>
 800fbb8:	4630      	mov	r0, r6
 800fbba:	f7ff ffc7 	bl	800fb4c <__sinit>
 800fbbe:	3648      	adds	r6, #72	; 0x48
 800fbc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fbc4:	3b01      	subs	r3, #1
 800fbc6:	d503      	bpl.n	800fbd0 <__sfp+0x24>
 800fbc8:	6833      	ldr	r3, [r6, #0]
 800fbca:	b133      	cbz	r3, 800fbda <__sfp+0x2e>
 800fbcc:	6836      	ldr	r6, [r6, #0]
 800fbce:	e7f7      	b.n	800fbc0 <__sfp+0x14>
 800fbd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fbd4:	b16d      	cbz	r5, 800fbf2 <__sfp+0x46>
 800fbd6:	3468      	adds	r4, #104	; 0x68
 800fbd8:	e7f4      	b.n	800fbc4 <__sfp+0x18>
 800fbda:	2104      	movs	r1, #4
 800fbdc:	4638      	mov	r0, r7
 800fbde:	f7ff ff9f 	bl	800fb20 <__sfmoreglue>
 800fbe2:	6030      	str	r0, [r6, #0]
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d1f1      	bne.n	800fbcc <__sfp+0x20>
 800fbe8:	230c      	movs	r3, #12
 800fbea:	603b      	str	r3, [r7, #0]
 800fbec:	4604      	mov	r4, r0
 800fbee:	4620      	mov	r0, r4
 800fbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbf2:	4b0b      	ldr	r3, [pc, #44]	; (800fc20 <__sfp+0x74>)
 800fbf4:	6665      	str	r5, [r4, #100]	; 0x64
 800fbf6:	e9c4 5500 	strd	r5, r5, [r4]
 800fbfa:	60a5      	str	r5, [r4, #8]
 800fbfc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fc00:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fc04:	2208      	movs	r2, #8
 800fc06:	4629      	mov	r1, r5
 800fc08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fc0c:	f7ff ff0a 	bl	800fa24 <memset>
 800fc10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fc14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fc18:	e7e9      	b.n	800fbee <__sfp+0x42>
 800fc1a:	bf00      	nop
 800fc1c:	0801371c 	.word	0x0801371c
 800fc20:	ffff0001 	.word	0xffff0001

0800fc24 <_fwalk_reent>:
 800fc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc28:	4680      	mov	r8, r0
 800fc2a:	4689      	mov	r9, r1
 800fc2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fc30:	2600      	movs	r6, #0
 800fc32:	b914      	cbnz	r4, 800fc3a <_fwalk_reent+0x16>
 800fc34:	4630      	mov	r0, r6
 800fc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc3a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fc3e:	3f01      	subs	r7, #1
 800fc40:	d501      	bpl.n	800fc46 <_fwalk_reent+0x22>
 800fc42:	6824      	ldr	r4, [r4, #0]
 800fc44:	e7f5      	b.n	800fc32 <_fwalk_reent+0xe>
 800fc46:	89ab      	ldrh	r3, [r5, #12]
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d907      	bls.n	800fc5c <_fwalk_reent+0x38>
 800fc4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc50:	3301      	adds	r3, #1
 800fc52:	d003      	beq.n	800fc5c <_fwalk_reent+0x38>
 800fc54:	4629      	mov	r1, r5
 800fc56:	4640      	mov	r0, r8
 800fc58:	47c8      	blx	r9
 800fc5a:	4306      	orrs	r6, r0
 800fc5c:	3568      	adds	r5, #104	; 0x68
 800fc5e:	e7ee      	b.n	800fc3e <_fwalk_reent+0x1a>

0800fc60 <malloc>:
 800fc60:	4b02      	ldr	r3, [pc, #8]	; (800fc6c <malloc+0xc>)
 800fc62:	4601      	mov	r1, r0
 800fc64:	6818      	ldr	r0, [r3, #0]
 800fc66:	f000 b851 	b.w	800fd0c <_malloc_r>
 800fc6a:	bf00      	nop
 800fc6c:	20000018 	.word	0x20000018

0800fc70 <_free_r>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	4605      	mov	r5, r0
 800fc74:	2900      	cmp	r1, #0
 800fc76:	d045      	beq.n	800fd04 <_free_r+0x94>
 800fc78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc7c:	1f0c      	subs	r4, r1, #4
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	bfb8      	it	lt
 800fc82:	18e4      	addlt	r4, r4, r3
 800fc84:	f000 fdc0 	bl	8010808 <__malloc_lock>
 800fc88:	4a1f      	ldr	r2, [pc, #124]	; (800fd08 <_free_r+0x98>)
 800fc8a:	6813      	ldr	r3, [r2, #0]
 800fc8c:	4610      	mov	r0, r2
 800fc8e:	b933      	cbnz	r3, 800fc9e <_free_r+0x2e>
 800fc90:	6063      	str	r3, [r4, #4]
 800fc92:	6014      	str	r4, [r2, #0]
 800fc94:	4628      	mov	r0, r5
 800fc96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc9a:	f000 bdb6 	b.w	801080a <__malloc_unlock>
 800fc9e:	42a3      	cmp	r3, r4
 800fca0:	d90c      	bls.n	800fcbc <_free_r+0x4c>
 800fca2:	6821      	ldr	r1, [r4, #0]
 800fca4:	1862      	adds	r2, r4, r1
 800fca6:	4293      	cmp	r3, r2
 800fca8:	bf04      	itt	eq
 800fcaa:	681a      	ldreq	r2, [r3, #0]
 800fcac:	685b      	ldreq	r3, [r3, #4]
 800fcae:	6063      	str	r3, [r4, #4]
 800fcb0:	bf04      	itt	eq
 800fcb2:	1852      	addeq	r2, r2, r1
 800fcb4:	6022      	streq	r2, [r4, #0]
 800fcb6:	6004      	str	r4, [r0, #0]
 800fcb8:	e7ec      	b.n	800fc94 <_free_r+0x24>
 800fcba:	4613      	mov	r3, r2
 800fcbc:	685a      	ldr	r2, [r3, #4]
 800fcbe:	b10a      	cbz	r2, 800fcc4 <_free_r+0x54>
 800fcc0:	42a2      	cmp	r2, r4
 800fcc2:	d9fa      	bls.n	800fcba <_free_r+0x4a>
 800fcc4:	6819      	ldr	r1, [r3, #0]
 800fcc6:	1858      	adds	r0, r3, r1
 800fcc8:	42a0      	cmp	r0, r4
 800fcca:	d10b      	bne.n	800fce4 <_free_r+0x74>
 800fccc:	6820      	ldr	r0, [r4, #0]
 800fcce:	4401      	add	r1, r0
 800fcd0:	1858      	adds	r0, r3, r1
 800fcd2:	4282      	cmp	r2, r0
 800fcd4:	6019      	str	r1, [r3, #0]
 800fcd6:	d1dd      	bne.n	800fc94 <_free_r+0x24>
 800fcd8:	6810      	ldr	r0, [r2, #0]
 800fcda:	6852      	ldr	r2, [r2, #4]
 800fcdc:	605a      	str	r2, [r3, #4]
 800fcde:	4401      	add	r1, r0
 800fce0:	6019      	str	r1, [r3, #0]
 800fce2:	e7d7      	b.n	800fc94 <_free_r+0x24>
 800fce4:	d902      	bls.n	800fcec <_free_r+0x7c>
 800fce6:	230c      	movs	r3, #12
 800fce8:	602b      	str	r3, [r5, #0]
 800fcea:	e7d3      	b.n	800fc94 <_free_r+0x24>
 800fcec:	6820      	ldr	r0, [r4, #0]
 800fcee:	1821      	adds	r1, r4, r0
 800fcf0:	428a      	cmp	r2, r1
 800fcf2:	bf04      	itt	eq
 800fcf4:	6811      	ldreq	r1, [r2, #0]
 800fcf6:	6852      	ldreq	r2, [r2, #4]
 800fcf8:	6062      	str	r2, [r4, #4]
 800fcfa:	bf04      	itt	eq
 800fcfc:	1809      	addeq	r1, r1, r0
 800fcfe:	6021      	streq	r1, [r4, #0]
 800fd00:	605c      	str	r4, [r3, #4]
 800fd02:	e7c7      	b.n	800fc94 <_free_r+0x24>
 800fd04:	bd38      	pop	{r3, r4, r5, pc}
 800fd06:	bf00      	nop
 800fd08:	20000224 	.word	0x20000224

0800fd0c <_malloc_r>:
 800fd0c:	b570      	push	{r4, r5, r6, lr}
 800fd0e:	1ccd      	adds	r5, r1, #3
 800fd10:	f025 0503 	bic.w	r5, r5, #3
 800fd14:	3508      	adds	r5, #8
 800fd16:	2d0c      	cmp	r5, #12
 800fd18:	bf38      	it	cc
 800fd1a:	250c      	movcc	r5, #12
 800fd1c:	2d00      	cmp	r5, #0
 800fd1e:	4606      	mov	r6, r0
 800fd20:	db01      	blt.n	800fd26 <_malloc_r+0x1a>
 800fd22:	42a9      	cmp	r1, r5
 800fd24:	d903      	bls.n	800fd2e <_malloc_r+0x22>
 800fd26:	230c      	movs	r3, #12
 800fd28:	6033      	str	r3, [r6, #0]
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	bd70      	pop	{r4, r5, r6, pc}
 800fd2e:	f000 fd6b 	bl	8010808 <__malloc_lock>
 800fd32:	4a21      	ldr	r2, [pc, #132]	; (800fdb8 <_malloc_r+0xac>)
 800fd34:	6814      	ldr	r4, [r2, #0]
 800fd36:	4621      	mov	r1, r4
 800fd38:	b991      	cbnz	r1, 800fd60 <_malloc_r+0x54>
 800fd3a:	4c20      	ldr	r4, [pc, #128]	; (800fdbc <_malloc_r+0xb0>)
 800fd3c:	6823      	ldr	r3, [r4, #0]
 800fd3e:	b91b      	cbnz	r3, 800fd48 <_malloc_r+0x3c>
 800fd40:	4630      	mov	r0, r6
 800fd42:	f000 fb05 	bl	8010350 <_sbrk_r>
 800fd46:	6020      	str	r0, [r4, #0]
 800fd48:	4629      	mov	r1, r5
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	f000 fb00 	bl	8010350 <_sbrk_r>
 800fd50:	1c43      	adds	r3, r0, #1
 800fd52:	d124      	bne.n	800fd9e <_malloc_r+0x92>
 800fd54:	230c      	movs	r3, #12
 800fd56:	6033      	str	r3, [r6, #0]
 800fd58:	4630      	mov	r0, r6
 800fd5a:	f000 fd56 	bl	801080a <__malloc_unlock>
 800fd5e:	e7e4      	b.n	800fd2a <_malloc_r+0x1e>
 800fd60:	680b      	ldr	r3, [r1, #0]
 800fd62:	1b5b      	subs	r3, r3, r5
 800fd64:	d418      	bmi.n	800fd98 <_malloc_r+0x8c>
 800fd66:	2b0b      	cmp	r3, #11
 800fd68:	d90f      	bls.n	800fd8a <_malloc_r+0x7e>
 800fd6a:	600b      	str	r3, [r1, #0]
 800fd6c:	50cd      	str	r5, [r1, r3]
 800fd6e:	18cc      	adds	r4, r1, r3
 800fd70:	4630      	mov	r0, r6
 800fd72:	f000 fd4a 	bl	801080a <__malloc_unlock>
 800fd76:	f104 000b 	add.w	r0, r4, #11
 800fd7a:	1d23      	adds	r3, r4, #4
 800fd7c:	f020 0007 	bic.w	r0, r0, #7
 800fd80:	1ac3      	subs	r3, r0, r3
 800fd82:	d0d3      	beq.n	800fd2c <_malloc_r+0x20>
 800fd84:	425a      	negs	r2, r3
 800fd86:	50e2      	str	r2, [r4, r3]
 800fd88:	e7d0      	b.n	800fd2c <_malloc_r+0x20>
 800fd8a:	428c      	cmp	r4, r1
 800fd8c:	684b      	ldr	r3, [r1, #4]
 800fd8e:	bf16      	itet	ne
 800fd90:	6063      	strne	r3, [r4, #4]
 800fd92:	6013      	streq	r3, [r2, #0]
 800fd94:	460c      	movne	r4, r1
 800fd96:	e7eb      	b.n	800fd70 <_malloc_r+0x64>
 800fd98:	460c      	mov	r4, r1
 800fd9a:	6849      	ldr	r1, [r1, #4]
 800fd9c:	e7cc      	b.n	800fd38 <_malloc_r+0x2c>
 800fd9e:	1cc4      	adds	r4, r0, #3
 800fda0:	f024 0403 	bic.w	r4, r4, #3
 800fda4:	42a0      	cmp	r0, r4
 800fda6:	d005      	beq.n	800fdb4 <_malloc_r+0xa8>
 800fda8:	1a21      	subs	r1, r4, r0
 800fdaa:	4630      	mov	r0, r6
 800fdac:	f000 fad0 	bl	8010350 <_sbrk_r>
 800fdb0:	3001      	adds	r0, #1
 800fdb2:	d0cf      	beq.n	800fd54 <_malloc_r+0x48>
 800fdb4:	6025      	str	r5, [r4, #0]
 800fdb6:	e7db      	b.n	800fd70 <_malloc_r+0x64>
 800fdb8:	20000224 	.word	0x20000224
 800fdbc:	20000228 	.word	0x20000228

0800fdc0 <__sfputc_r>:
 800fdc0:	6893      	ldr	r3, [r2, #8]
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	b410      	push	{r4}
 800fdc8:	6093      	str	r3, [r2, #8]
 800fdca:	da08      	bge.n	800fdde <__sfputc_r+0x1e>
 800fdcc:	6994      	ldr	r4, [r2, #24]
 800fdce:	42a3      	cmp	r3, r4
 800fdd0:	db01      	blt.n	800fdd6 <__sfputc_r+0x16>
 800fdd2:	290a      	cmp	r1, #10
 800fdd4:	d103      	bne.n	800fdde <__sfputc_r+0x1e>
 800fdd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdda:	f000 bb0d 	b.w	80103f8 <__swbuf_r>
 800fdde:	6813      	ldr	r3, [r2, #0]
 800fde0:	1c58      	adds	r0, r3, #1
 800fde2:	6010      	str	r0, [r2, #0]
 800fde4:	7019      	strb	r1, [r3, #0]
 800fde6:	4608      	mov	r0, r1
 800fde8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdec:	4770      	bx	lr

0800fdee <__sfputs_r>:
 800fdee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf0:	4606      	mov	r6, r0
 800fdf2:	460f      	mov	r7, r1
 800fdf4:	4614      	mov	r4, r2
 800fdf6:	18d5      	adds	r5, r2, r3
 800fdf8:	42ac      	cmp	r4, r5
 800fdfa:	d101      	bne.n	800fe00 <__sfputs_r+0x12>
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	e007      	b.n	800fe10 <__sfputs_r+0x22>
 800fe00:	463a      	mov	r2, r7
 800fe02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe06:	4630      	mov	r0, r6
 800fe08:	f7ff ffda 	bl	800fdc0 <__sfputc_r>
 800fe0c:	1c43      	adds	r3, r0, #1
 800fe0e:	d1f3      	bne.n	800fdf8 <__sfputs_r+0xa>
 800fe10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe14 <_vfiprintf_r>:
 800fe14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe18:	460c      	mov	r4, r1
 800fe1a:	b09d      	sub	sp, #116	; 0x74
 800fe1c:	4617      	mov	r7, r2
 800fe1e:	461d      	mov	r5, r3
 800fe20:	4606      	mov	r6, r0
 800fe22:	b118      	cbz	r0, 800fe2c <_vfiprintf_r+0x18>
 800fe24:	6983      	ldr	r3, [r0, #24]
 800fe26:	b90b      	cbnz	r3, 800fe2c <_vfiprintf_r+0x18>
 800fe28:	f7ff fe90 	bl	800fb4c <__sinit>
 800fe2c:	4b7c      	ldr	r3, [pc, #496]	; (8010020 <_vfiprintf_r+0x20c>)
 800fe2e:	429c      	cmp	r4, r3
 800fe30:	d158      	bne.n	800fee4 <_vfiprintf_r+0xd0>
 800fe32:	6874      	ldr	r4, [r6, #4]
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	0718      	lsls	r0, r3, #28
 800fe38:	d55e      	bpl.n	800fef8 <_vfiprintf_r+0xe4>
 800fe3a:	6923      	ldr	r3, [r4, #16]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d05b      	beq.n	800fef8 <_vfiprintf_r+0xe4>
 800fe40:	2300      	movs	r3, #0
 800fe42:	9309      	str	r3, [sp, #36]	; 0x24
 800fe44:	2320      	movs	r3, #32
 800fe46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe4a:	2330      	movs	r3, #48	; 0x30
 800fe4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe50:	9503      	str	r5, [sp, #12]
 800fe52:	f04f 0b01 	mov.w	fp, #1
 800fe56:	46b8      	mov	r8, r7
 800fe58:	4645      	mov	r5, r8
 800fe5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fe5e:	b10b      	cbz	r3, 800fe64 <_vfiprintf_r+0x50>
 800fe60:	2b25      	cmp	r3, #37	; 0x25
 800fe62:	d154      	bne.n	800ff0e <_vfiprintf_r+0xfa>
 800fe64:	ebb8 0a07 	subs.w	sl, r8, r7
 800fe68:	d00b      	beq.n	800fe82 <_vfiprintf_r+0x6e>
 800fe6a:	4653      	mov	r3, sl
 800fe6c:	463a      	mov	r2, r7
 800fe6e:	4621      	mov	r1, r4
 800fe70:	4630      	mov	r0, r6
 800fe72:	f7ff ffbc 	bl	800fdee <__sfputs_r>
 800fe76:	3001      	adds	r0, #1
 800fe78:	f000 80c2 	beq.w	8010000 <_vfiprintf_r+0x1ec>
 800fe7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe7e:	4453      	add	r3, sl
 800fe80:	9309      	str	r3, [sp, #36]	; 0x24
 800fe82:	f898 3000 	ldrb.w	r3, [r8]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	f000 80ba 	beq.w	8010000 <_vfiprintf_r+0x1ec>
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe96:	9304      	str	r3, [sp, #16]
 800fe98:	9307      	str	r3, [sp, #28]
 800fe9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe9e:	931a      	str	r3, [sp, #104]	; 0x68
 800fea0:	46a8      	mov	r8, r5
 800fea2:	2205      	movs	r2, #5
 800fea4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800fea8:	485e      	ldr	r0, [pc, #376]	; (8010024 <_vfiprintf_r+0x210>)
 800feaa:	f7f0 f9a1 	bl	80001f0 <memchr>
 800feae:	9b04      	ldr	r3, [sp, #16]
 800feb0:	bb78      	cbnz	r0, 800ff12 <_vfiprintf_r+0xfe>
 800feb2:	06d9      	lsls	r1, r3, #27
 800feb4:	bf44      	itt	mi
 800feb6:	2220      	movmi	r2, #32
 800feb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800febc:	071a      	lsls	r2, r3, #28
 800febe:	bf44      	itt	mi
 800fec0:	222b      	movmi	r2, #43	; 0x2b
 800fec2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fec6:	782a      	ldrb	r2, [r5, #0]
 800fec8:	2a2a      	cmp	r2, #42	; 0x2a
 800feca:	d02a      	beq.n	800ff22 <_vfiprintf_r+0x10e>
 800fecc:	9a07      	ldr	r2, [sp, #28]
 800fece:	46a8      	mov	r8, r5
 800fed0:	2000      	movs	r0, #0
 800fed2:	250a      	movs	r5, #10
 800fed4:	4641      	mov	r1, r8
 800fed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feda:	3b30      	subs	r3, #48	; 0x30
 800fedc:	2b09      	cmp	r3, #9
 800fede:	d969      	bls.n	800ffb4 <_vfiprintf_r+0x1a0>
 800fee0:	b360      	cbz	r0, 800ff3c <_vfiprintf_r+0x128>
 800fee2:	e024      	b.n	800ff2e <_vfiprintf_r+0x11a>
 800fee4:	4b50      	ldr	r3, [pc, #320]	; (8010028 <_vfiprintf_r+0x214>)
 800fee6:	429c      	cmp	r4, r3
 800fee8:	d101      	bne.n	800feee <_vfiprintf_r+0xda>
 800feea:	68b4      	ldr	r4, [r6, #8]
 800feec:	e7a2      	b.n	800fe34 <_vfiprintf_r+0x20>
 800feee:	4b4f      	ldr	r3, [pc, #316]	; (801002c <_vfiprintf_r+0x218>)
 800fef0:	429c      	cmp	r4, r3
 800fef2:	bf08      	it	eq
 800fef4:	68f4      	ldreq	r4, [r6, #12]
 800fef6:	e79d      	b.n	800fe34 <_vfiprintf_r+0x20>
 800fef8:	4621      	mov	r1, r4
 800fefa:	4630      	mov	r0, r6
 800fefc:	f000 fae0 	bl	80104c0 <__swsetup_r>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d09d      	beq.n	800fe40 <_vfiprintf_r+0x2c>
 800ff04:	f04f 30ff 	mov.w	r0, #4294967295
 800ff08:	b01d      	add	sp, #116	; 0x74
 800ff0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0e:	46a8      	mov	r8, r5
 800ff10:	e7a2      	b.n	800fe58 <_vfiprintf_r+0x44>
 800ff12:	4a44      	ldr	r2, [pc, #272]	; (8010024 <_vfiprintf_r+0x210>)
 800ff14:	1a80      	subs	r0, r0, r2
 800ff16:	fa0b f000 	lsl.w	r0, fp, r0
 800ff1a:	4318      	orrs	r0, r3
 800ff1c:	9004      	str	r0, [sp, #16]
 800ff1e:	4645      	mov	r5, r8
 800ff20:	e7be      	b.n	800fea0 <_vfiprintf_r+0x8c>
 800ff22:	9a03      	ldr	r2, [sp, #12]
 800ff24:	1d11      	adds	r1, r2, #4
 800ff26:	6812      	ldr	r2, [r2, #0]
 800ff28:	9103      	str	r1, [sp, #12]
 800ff2a:	2a00      	cmp	r2, #0
 800ff2c:	db01      	blt.n	800ff32 <_vfiprintf_r+0x11e>
 800ff2e:	9207      	str	r2, [sp, #28]
 800ff30:	e004      	b.n	800ff3c <_vfiprintf_r+0x128>
 800ff32:	4252      	negs	r2, r2
 800ff34:	f043 0302 	orr.w	r3, r3, #2
 800ff38:	9207      	str	r2, [sp, #28]
 800ff3a:	9304      	str	r3, [sp, #16]
 800ff3c:	f898 3000 	ldrb.w	r3, [r8]
 800ff40:	2b2e      	cmp	r3, #46	; 0x2e
 800ff42:	d10e      	bne.n	800ff62 <_vfiprintf_r+0x14e>
 800ff44:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ff48:	2b2a      	cmp	r3, #42	; 0x2a
 800ff4a:	d138      	bne.n	800ffbe <_vfiprintf_r+0x1aa>
 800ff4c:	9b03      	ldr	r3, [sp, #12]
 800ff4e:	1d1a      	adds	r2, r3, #4
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	9203      	str	r2, [sp, #12]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	bfb8      	it	lt
 800ff58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff5c:	f108 0802 	add.w	r8, r8, #2
 800ff60:	9305      	str	r3, [sp, #20]
 800ff62:	4d33      	ldr	r5, [pc, #204]	; (8010030 <_vfiprintf_r+0x21c>)
 800ff64:	f898 1000 	ldrb.w	r1, [r8]
 800ff68:	2203      	movs	r2, #3
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	f7f0 f940 	bl	80001f0 <memchr>
 800ff70:	b140      	cbz	r0, 800ff84 <_vfiprintf_r+0x170>
 800ff72:	2340      	movs	r3, #64	; 0x40
 800ff74:	1b40      	subs	r0, r0, r5
 800ff76:	fa03 f000 	lsl.w	r0, r3, r0
 800ff7a:	9b04      	ldr	r3, [sp, #16]
 800ff7c:	4303      	orrs	r3, r0
 800ff7e:	f108 0801 	add.w	r8, r8, #1
 800ff82:	9304      	str	r3, [sp, #16]
 800ff84:	f898 1000 	ldrb.w	r1, [r8]
 800ff88:	482a      	ldr	r0, [pc, #168]	; (8010034 <_vfiprintf_r+0x220>)
 800ff8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff8e:	2206      	movs	r2, #6
 800ff90:	f108 0701 	add.w	r7, r8, #1
 800ff94:	f7f0 f92c 	bl	80001f0 <memchr>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d037      	beq.n	801000c <_vfiprintf_r+0x1f8>
 800ff9c:	4b26      	ldr	r3, [pc, #152]	; (8010038 <_vfiprintf_r+0x224>)
 800ff9e:	bb1b      	cbnz	r3, 800ffe8 <_vfiprintf_r+0x1d4>
 800ffa0:	9b03      	ldr	r3, [sp, #12]
 800ffa2:	3307      	adds	r3, #7
 800ffa4:	f023 0307 	bic.w	r3, r3, #7
 800ffa8:	3308      	adds	r3, #8
 800ffaa:	9303      	str	r3, [sp, #12]
 800ffac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffae:	444b      	add	r3, r9
 800ffb0:	9309      	str	r3, [sp, #36]	; 0x24
 800ffb2:	e750      	b.n	800fe56 <_vfiprintf_r+0x42>
 800ffb4:	fb05 3202 	mla	r2, r5, r2, r3
 800ffb8:	2001      	movs	r0, #1
 800ffba:	4688      	mov	r8, r1
 800ffbc:	e78a      	b.n	800fed4 <_vfiprintf_r+0xc0>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	f108 0801 	add.w	r8, r8, #1
 800ffc4:	9305      	str	r3, [sp, #20]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	250a      	movs	r5, #10
 800ffca:	4640      	mov	r0, r8
 800ffcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffd0:	3a30      	subs	r2, #48	; 0x30
 800ffd2:	2a09      	cmp	r2, #9
 800ffd4:	d903      	bls.n	800ffde <_vfiprintf_r+0x1ca>
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d0c3      	beq.n	800ff62 <_vfiprintf_r+0x14e>
 800ffda:	9105      	str	r1, [sp, #20]
 800ffdc:	e7c1      	b.n	800ff62 <_vfiprintf_r+0x14e>
 800ffde:	fb05 2101 	mla	r1, r5, r1, r2
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	4680      	mov	r8, r0
 800ffe6:	e7f0      	b.n	800ffca <_vfiprintf_r+0x1b6>
 800ffe8:	ab03      	add	r3, sp, #12
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	4622      	mov	r2, r4
 800ffee:	4b13      	ldr	r3, [pc, #76]	; (801003c <_vfiprintf_r+0x228>)
 800fff0:	a904      	add	r1, sp, #16
 800fff2:	4630      	mov	r0, r6
 800fff4:	f3af 8000 	nop.w
 800fff8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fffc:	4681      	mov	r9, r0
 800fffe:	d1d5      	bne.n	800ffac <_vfiprintf_r+0x198>
 8010000:	89a3      	ldrh	r3, [r4, #12]
 8010002:	065b      	lsls	r3, r3, #25
 8010004:	f53f af7e 	bmi.w	800ff04 <_vfiprintf_r+0xf0>
 8010008:	9809      	ldr	r0, [sp, #36]	; 0x24
 801000a:	e77d      	b.n	800ff08 <_vfiprintf_r+0xf4>
 801000c:	ab03      	add	r3, sp, #12
 801000e:	9300      	str	r3, [sp, #0]
 8010010:	4622      	mov	r2, r4
 8010012:	4b0a      	ldr	r3, [pc, #40]	; (801003c <_vfiprintf_r+0x228>)
 8010014:	a904      	add	r1, sp, #16
 8010016:	4630      	mov	r0, r6
 8010018:	f000 f888 	bl	801012c <_printf_i>
 801001c:	e7ec      	b.n	800fff8 <_vfiprintf_r+0x1e4>
 801001e:	bf00      	nop
 8010020:	08013740 	.word	0x08013740
 8010024:	08013780 	.word	0x08013780
 8010028:	08013760 	.word	0x08013760
 801002c:	08013720 	.word	0x08013720
 8010030:	08013786 	.word	0x08013786
 8010034:	0801378a 	.word	0x0801378a
 8010038:	00000000 	.word	0x00000000
 801003c:	0800fdef 	.word	0x0800fdef

08010040 <_printf_common>:
 8010040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010044:	4691      	mov	r9, r2
 8010046:	461f      	mov	r7, r3
 8010048:	688a      	ldr	r2, [r1, #8]
 801004a:	690b      	ldr	r3, [r1, #16]
 801004c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010050:	4293      	cmp	r3, r2
 8010052:	bfb8      	it	lt
 8010054:	4613      	movlt	r3, r2
 8010056:	f8c9 3000 	str.w	r3, [r9]
 801005a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801005e:	4606      	mov	r6, r0
 8010060:	460c      	mov	r4, r1
 8010062:	b112      	cbz	r2, 801006a <_printf_common+0x2a>
 8010064:	3301      	adds	r3, #1
 8010066:	f8c9 3000 	str.w	r3, [r9]
 801006a:	6823      	ldr	r3, [r4, #0]
 801006c:	0699      	lsls	r1, r3, #26
 801006e:	bf42      	ittt	mi
 8010070:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010074:	3302      	addmi	r3, #2
 8010076:	f8c9 3000 	strmi.w	r3, [r9]
 801007a:	6825      	ldr	r5, [r4, #0]
 801007c:	f015 0506 	ands.w	r5, r5, #6
 8010080:	d107      	bne.n	8010092 <_printf_common+0x52>
 8010082:	f104 0a19 	add.w	sl, r4, #25
 8010086:	68e3      	ldr	r3, [r4, #12]
 8010088:	f8d9 2000 	ldr.w	r2, [r9]
 801008c:	1a9b      	subs	r3, r3, r2
 801008e:	42ab      	cmp	r3, r5
 8010090:	dc28      	bgt.n	80100e4 <_printf_common+0xa4>
 8010092:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010096:	6822      	ldr	r2, [r4, #0]
 8010098:	3300      	adds	r3, #0
 801009a:	bf18      	it	ne
 801009c:	2301      	movne	r3, #1
 801009e:	0692      	lsls	r2, r2, #26
 80100a0:	d42d      	bmi.n	80100fe <_printf_common+0xbe>
 80100a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100a6:	4639      	mov	r1, r7
 80100a8:	4630      	mov	r0, r6
 80100aa:	47c0      	blx	r8
 80100ac:	3001      	adds	r0, #1
 80100ae:	d020      	beq.n	80100f2 <_printf_common+0xb2>
 80100b0:	6823      	ldr	r3, [r4, #0]
 80100b2:	68e5      	ldr	r5, [r4, #12]
 80100b4:	f8d9 2000 	ldr.w	r2, [r9]
 80100b8:	f003 0306 	and.w	r3, r3, #6
 80100bc:	2b04      	cmp	r3, #4
 80100be:	bf08      	it	eq
 80100c0:	1aad      	subeq	r5, r5, r2
 80100c2:	68a3      	ldr	r3, [r4, #8]
 80100c4:	6922      	ldr	r2, [r4, #16]
 80100c6:	bf0c      	ite	eq
 80100c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100cc:	2500      	movne	r5, #0
 80100ce:	4293      	cmp	r3, r2
 80100d0:	bfc4      	itt	gt
 80100d2:	1a9b      	subgt	r3, r3, r2
 80100d4:	18ed      	addgt	r5, r5, r3
 80100d6:	f04f 0900 	mov.w	r9, #0
 80100da:	341a      	adds	r4, #26
 80100dc:	454d      	cmp	r5, r9
 80100de:	d11a      	bne.n	8010116 <_printf_common+0xd6>
 80100e0:	2000      	movs	r0, #0
 80100e2:	e008      	b.n	80100f6 <_printf_common+0xb6>
 80100e4:	2301      	movs	r3, #1
 80100e6:	4652      	mov	r2, sl
 80100e8:	4639      	mov	r1, r7
 80100ea:	4630      	mov	r0, r6
 80100ec:	47c0      	blx	r8
 80100ee:	3001      	adds	r0, #1
 80100f0:	d103      	bne.n	80100fa <_printf_common+0xba>
 80100f2:	f04f 30ff 	mov.w	r0, #4294967295
 80100f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100fa:	3501      	adds	r5, #1
 80100fc:	e7c3      	b.n	8010086 <_printf_common+0x46>
 80100fe:	18e1      	adds	r1, r4, r3
 8010100:	1c5a      	adds	r2, r3, #1
 8010102:	2030      	movs	r0, #48	; 0x30
 8010104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010108:	4422      	add	r2, r4
 801010a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801010e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010112:	3302      	adds	r3, #2
 8010114:	e7c5      	b.n	80100a2 <_printf_common+0x62>
 8010116:	2301      	movs	r3, #1
 8010118:	4622      	mov	r2, r4
 801011a:	4639      	mov	r1, r7
 801011c:	4630      	mov	r0, r6
 801011e:	47c0      	blx	r8
 8010120:	3001      	adds	r0, #1
 8010122:	d0e6      	beq.n	80100f2 <_printf_common+0xb2>
 8010124:	f109 0901 	add.w	r9, r9, #1
 8010128:	e7d8      	b.n	80100dc <_printf_common+0x9c>
	...

0801012c <_printf_i>:
 801012c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010130:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010134:	460c      	mov	r4, r1
 8010136:	7e09      	ldrb	r1, [r1, #24]
 8010138:	b085      	sub	sp, #20
 801013a:	296e      	cmp	r1, #110	; 0x6e
 801013c:	4617      	mov	r7, r2
 801013e:	4606      	mov	r6, r0
 8010140:	4698      	mov	r8, r3
 8010142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010144:	f000 80b3 	beq.w	80102ae <_printf_i+0x182>
 8010148:	d822      	bhi.n	8010190 <_printf_i+0x64>
 801014a:	2963      	cmp	r1, #99	; 0x63
 801014c:	d036      	beq.n	80101bc <_printf_i+0x90>
 801014e:	d80a      	bhi.n	8010166 <_printf_i+0x3a>
 8010150:	2900      	cmp	r1, #0
 8010152:	f000 80b9 	beq.w	80102c8 <_printf_i+0x19c>
 8010156:	2958      	cmp	r1, #88	; 0x58
 8010158:	f000 8083 	beq.w	8010262 <_printf_i+0x136>
 801015c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010160:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010164:	e032      	b.n	80101cc <_printf_i+0xa0>
 8010166:	2964      	cmp	r1, #100	; 0x64
 8010168:	d001      	beq.n	801016e <_printf_i+0x42>
 801016a:	2969      	cmp	r1, #105	; 0x69
 801016c:	d1f6      	bne.n	801015c <_printf_i+0x30>
 801016e:	6820      	ldr	r0, [r4, #0]
 8010170:	6813      	ldr	r3, [r2, #0]
 8010172:	0605      	lsls	r5, r0, #24
 8010174:	f103 0104 	add.w	r1, r3, #4
 8010178:	d52a      	bpl.n	80101d0 <_printf_i+0xa4>
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	6011      	str	r1, [r2, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	da03      	bge.n	801018a <_printf_i+0x5e>
 8010182:	222d      	movs	r2, #45	; 0x2d
 8010184:	425b      	negs	r3, r3
 8010186:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801018a:	486f      	ldr	r0, [pc, #444]	; (8010348 <_printf_i+0x21c>)
 801018c:	220a      	movs	r2, #10
 801018e:	e039      	b.n	8010204 <_printf_i+0xd8>
 8010190:	2973      	cmp	r1, #115	; 0x73
 8010192:	f000 809d 	beq.w	80102d0 <_printf_i+0x1a4>
 8010196:	d808      	bhi.n	80101aa <_printf_i+0x7e>
 8010198:	296f      	cmp	r1, #111	; 0x6f
 801019a:	d020      	beq.n	80101de <_printf_i+0xb2>
 801019c:	2970      	cmp	r1, #112	; 0x70
 801019e:	d1dd      	bne.n	801015c <_printf_i+0x30>
 80101a0:	6823      	ldr	r3, [r4, #0]
 80101a2:	f043 0320 	orr.w	r3, r3, #32
 80101a6:	6023      	str	r3, [r4, #0]
 80101a8:	e003      	b.n	80101b2 <_printf_i+0x86>
 80101aa:	2975      	cmp	r1, #117	; 0x75
 80101ac:	d017      	beq.n	80101de <_printf_i+0xb2>
 80101ae:	2978      	cmp	r1, #120	; 0x78
 80101b0:	d1d4      	bne.n	801015c <_printf_i+0x30>
 80101b2:	2378      	movs	r3, #120	; 0x78
 80101b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80101b8:	4864      	ldr	r0, [pc, #400]	; (801034c <_printf_i+0x220>)
 80101ba:	e055      	b.n	8010268 <_printf_i+0x13c>
 80101bc:	6813      	ldr	r3, [r2, #0]
 80101be:	1d19      	adds	r1, r3, #4
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	6011      	str	r1, [r2, #0]
 80101c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101cc:	2301      	movs	r3, #1
 80101ce:	e08c      	b.n	80102ea <_printf_i+0x1be>
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	6011      	str	r1, [r2, #0]
 80101d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80101d8:	bf18      	it	ne
 80101da:	b21b      	sxthne	r3, r3
 80101dc:	e7cf      	b.n	801017e <_printf_i+0x52>
 80101de:	6813      	ldr	r3, [r2, #0]
 80101e0:	6825      	ldr	r5, [r4, #0]
 80101e2:	1d18      	adds	r0, r3, #4
 80101e4:	6010      	str	r0, [r2, #0]
 80101e6:	0628      	lsls	r0, r5, #24
 80101e8:	d501      	bpl.n	80101ee <_printf_i+0xc2>
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	e002      	b.n	80101f4 <_printf_i+0xc8>
 80101ee:	0668      	lsls	r0, r5, #25
 80101f0:	d5fb      	bpl.n	80101ea <_printf_i+0xbe>
 80101f2:	881b      	ldrh	r3, [r3, #0]
 80101f4:	4854      	ldr	r0, [pc, #336]	; (8010348 <_printf_i+0x21c>)
 80101f6:	296f      	cmp	r1, #111	; 0x6f
 80101f8:	bf14      	ite	ne
 80101fa:	220a      	movne	r2, #10
 80101fc:	2208      	moveq	r2, #8
 80101fe:	2100      	movs	r1, #0
 8010200:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010204:	6865      	ldr	r5, [r4, #4]
 8010206:	60a5      	str	r5, [r4, #8]
 8010208:	2d00      	cmp	r5, #0
 801020a:	f2c0 8095 	blt.w	8010338 <_printf_i+0x20c>
 801020e:	6821      	ldr	r1, [r4, #0]
 8010210:	f021 0104 	bic.w	r1, r1, #4
 8010214:	6021      	str	r1, [r4, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d13d      	bne.n	8010296 <_printf_i+0x16a>
 801021a:	2d00      	cmp	r5, #0
 801021c:	f040 808e 	bne.w	801033c <_printf_i+0x210>
 8010220:	4665      	mov	r5, ip
 8010222:	2a08      	cmp	r2, #8
 8010224:	d10b      	bne.n	801023e <_printf_i+0x112>
 8010226:	6823      	ldr	r3, [r4, #0]
 8010228:	07db      	lsls	r3, r3, #31
 801022a:	d508      	bpl.n	801023e <_printf_i+0x112>
 801022c:	6923      	ldr	r3, [r4, #16]
 801022e:	6862      	ldr	r2, [r4, #4]
 8010230:	429a      	cmp	r2, r3
 8010232:	bfde      	ittt	le
 8010234:	2330      	movle	r3, #48	; 0x30
 8010236:	f805 3c01 	strble.w	r3, [r5, #-1]
 801023a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801023e:	ebac 0305 	sub.w	r3, ip, r5
 8010242:	6123      	str	r3, [r4, #16]
 8010244:	f8cd 8000 	str.w	r8, [sp]
 8010248:	463b      	mov	r3, r7
 801024a:	aa03      	add	r2, sp, #12
 801024c:	4621      	mov	r1, r4
 801024e:	4630      	mov	r0, r6
 8010250:	f7ff fef6 	bl	8010040 <_printf_common>
 8010254:	3001      	adds	r0, #1
 8010256:	d14d      	bne.n	80102f4 <_printf_i+0x1c8>
 8010258:	f04f 30ff 	mov.w	r0, #4294967295
 801025c:	b005      	add	sp, #20
 801025e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010262:	4839      	ldr	r0, [pc, #228]	; (8010348 <_printf_i+0x21c>)
 8010264:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010268:	6813      	ldr	r3, [r2, #0]
 801026a:	6821      	ldr	r1, [r4, #0]
 801026c:	1d1d      	adds	r5, r3, #4
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	6015      	str	r5, [r2, #0]
 8010272:	060a      	lsls	r2, r1, #24
 8010274:	d50b      	bpl.n	801028e <_printf_i+0x162>
 8010276:	07ca      	lsls	r2, r1, #31
 8010278:	bf44      	itt	mi
 801027a:	f041 0120 	orrmi.w	r1, r1, #32
 801027e:	6021      	strmi	r1, [r4, #0]
 8010280:	b91b      	cbnz	r3, 801028a <_printf_i+0x15e>
 8010282:	6822      	ldr	r2, [r4, #0]
 8010284:	f022 0220 	bic.w	r2, r2, #32
 8010288:	6022      	str	r2, [r4, #0]
 801028a:	2210      	movs	r2, #16
 801028c:	e7b7      	b.n	80101fe <_printf_i+0xd2>
 801028e:	064d      	lsls	r5, r1, #25
 8010290:	bf48      	it	mi
 8010292:	b29b      	uxthmi	r3, r3
 8010294:	e7ef      	b.n	8010276 <_printf_i+0x14a>
 8010296:	4665      	mov	r5, ip
 8010298:	fbb3 f1f2 	udiv	r1, r3, r2
 801029c:	fb02 3311 	mls	r3, r2, r1, r3
 80102a0:	5cc3      	ldrb	r3, [r0, r3]
 80102a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80102a6:	460b      	mov	r3, r1
 80102a8:	2900      	cmp	r1, #0
 80102aa:	d1f5      	bne.n	8010298 <_printf_i+0x16c>
 80102ac:	e7b9      	b.n	8010222 <_printf_i+0xf6>
 80102ae:	6813      	ldr	r3, [r2, #0]
 80102b0:	6825      	ldr	r5, [r4, #0]
 80102b2:	6961      	ldr	r1, [r4, #20]
 80102b4:	1d18      	adds	r0, r3, #4
 80102b6:	6010      	str	r0, [r2, #0]
 80102b8:	0628      	lsls	r0, r5, #24
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	d501      	bpl.n	80102c2 <_printf_i+0x196>
 80102be:	6019      	str	r1, [r3, #0]
 80102c0:	e002      	b.n	80102c8 <_printf_i+0x19c>
 80102c2:	066a      	lsls	r2, r5, #25
 80102c4:	d5fb      	bpl.n	80102be <_printf_i+0x192>
 80102c6:	8019      	strh	r1, [r3, #0]
 80102c8:	2300      	movs	r3, #0
 80102ca:	6123      	str	r3, [r4, #16]
 80102cc:	4665      	mov	r5, ip
 80102ce:	e7b9      	b.n	8010244 <_printf_i+0x118>
 80102d0:	6813      	ldr	r3, [r2, #0]
 80102d2:	1d19      	adds	r1, r3, #4
 80102d4:	6011      	str	r1, [r2, #0]
 80102d6:	681d      	ldr	r5, [r3, #0]
 80102d8:	6862      	ldr	r2, [r4, #4]
 80102da:	2100      	movs	r1, #0
 80102dc:	4628      	mov	r0, r5
 80102de:	f7ef ff87 	bl	80001f0 <memchr>
 80102e2:	b108      	cbz	r0, 80102e8 <_printf_i+0x1bc>
 80102e4:	1b40      	subs	r0, r0, r5
 80102e6:	6060      	str	r0, [r4, #4]
 80102e8:	6863      	ldr	r3, [r4, #4]
 80102ea:	6123      	str	r3, [r4, #16]
 80102ec:	2300      	movs	r3, #0
 80102ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102f2:	e7a7      	b.n	8010244 <_printf_i+0x118>
 80102f4:	6923      	ldr	r3, [r4, #16]
 80102f6:	462a      	mov	r2, r5
 80102f8:	4639      	mov	r1, r7
 80102fa:	4630      	mov	r0, r6
 80102fc:	47c0      	blx	r8
 80102fe:	3001      	adds	r0, #1
 8010300:	d0aa      	beq.n	8010258 <_printf_i+0x12c>
 8010302:	6823      	ldr	r3, [r4, #0]
 8010304:	079b      	lsls	r3, r3, #30
 8010306:	d413      	bmi.n	8010330 <_printf_i+0x204>
 8010308:	68e0      	ldr	r0, [r4, #12]
 801030a:	9b03      	ldr	r3, [sp, #12]
 801030c:	4298      	cmp	r0, r3
 801030e:	bfb8      	it	lt
 8010310:	4618      	movlt	r0, r3
 8010312:	e7a3      	b.n	801025c <_printf_i+0x130>
 8010314:	2301      	movs	r3, #1
 8010316:	464a      	mov	r2, r9
 8010318:	4639      	mov	r1, r7
 801031a:	4630      	mov	r0, r6
 801031c:	47c0      	blx	r8
 801031e:	3001      	adds	r0, #1
 8010320:	d09a      	beq.n	8010258 <_printf_i+0x12c>
 8010322:	3501      	adds	r5, #1
 8010324:	68e3      	ldr	r3, [r4, #12]
 8010326:	9a03      	ldr	r2, [sp, #12]
 8010328:	1a9b      	subs	r3, r3, r2
 801032a:	42ab      	cmp	r3, r5
 801032c:	dcf2      	bgt.n	8010314 <_printf_i+0x1e8>
 801032e:	e7eb      	b.n	8010308 <_printf_i+0x1dc>
 8010330:	2500      	movs	r5, #0
 8010332:	f104 0919 	add.w	r9, r4, #25
 8010336:	e7f5      	b.n	8010324 <_printf_i+0x1f8>
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1ac      	bne.n	8010296 <_printf_i+0x16a>
 801033c:	7803      	ldrb	r3, [r0, #0]
 801033e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010342:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010346:	e76c      	b.n	8010222 <_printf_i+0xf6>
 8010348:	08013791 	.word	0x08013791
 801034c:	080137a2 	.word	0x080137a2

08010350 <_sbrk_r>:
 8010350:	b538      	push	{r3, r4, r5, lr}
 8010352:	4c06      	ldr	r4, [pc, #24]	; (801036c <_sbrk_r+0x1c>)
 8010354:	2300      	movs	r3, #0
 8010356:	4605      	mov	r5, r0
 8010358:	4608      	mov	r0, r1
 801035a:	6023      	str	r3, [r4, #0]
 801035c:	f7f0 fcdc 	bl	8000d18 <_sbrk>
 8010360:	1c43      	adds	r3, r0, #1
 8010362:	d102      	bne.n	801036a <_sbrk_r+0x1a>
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	b103      	cbz	r3, 801036a <_sbrk_r+0x1a>
 8010368:	602b      	str	r3, [r5, #0]
 801036a:	bd38      	pop	{r3, r4, r5, pc}
 801036c:	2000656c 	.word	0x2000656c

08010370 <__sread>:
 8010370:	b510      	push	{r4, lr}
 8010372:	460c      	mov	r4, r1
 8010374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010378:	f000 fa48 	bl	801080c <_read_r>
 801037c:	2800      	cmp	r0, #0
 801037e:	bfab      	itete	ge
 8010380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010382:	89a3      	ldrhlt	r3, [r4, #12]
 8010384:	181b      	addge	r3, r3, r0
 8010386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801038a:	bfac      	ite	ge
 801038c:	6563      	strge	r3, [r4, #84]	; 0x54
 801038e:	81a3      	strhlt	r3, [r4, #12]
 8010390:	bd10      	pop	{r4, pc}

08010392 <__swrite>:
 8010392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010396:	461f      	mov	r7, r3
 8010398:	898b      	ldrh	r3, [r1, #12]
 801039a:	05db      	lsls	r3, r3, #23
 801039c:	4605      	mov	r5, r0
 801039e:	460c      	mov	r4, r1
 80103a0:	4616      	mov	r6, r2
 80103a2:	d505      	bpl.n	80103b0 <__swrite+0x1e>
 80103a4:	2302      	movs	r3, #2
 80103a6:	2200      	movs	r2, #0
 80103a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103ac:	f000 f9b6 	bl	801071c <_lseek_r>
 80103b0:	89a3      	ldrh	r3, [r4, #12]
 80103b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103ba:	81a3      	strh	r3, [r4, #12]
 80103bc:	4632      	mov	r2, r6
 80103be:	463b      	mov	r3, r7
 80103c0:	4628      	mov	r0, r5
 80103c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103c6:	f000 b869 	b.w	801049c <_write_r>

080103ca <__sseek>:
 80103ca:	b510      	push	{r4, lr}
 80103cc:	460c      	mov	r4, r1
 80103ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103d2:	f000 f9a3 	bl	801071c <_lseek_r>
 80103d6:	1c43      	adds	r3, r0, #1
 80103d8:	89a3      	ldrh	r3, [r4, #12]
 80103da:	bf15      	itete	ne
 80103dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80103de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103e6:	81a3      	strheq	r3, [r4, #12]
 80103e8:	bf18      	it	ne
 80103ea:	81a3      	strhne	r3, [r4, #12]
 80103ec:	bd10      	pop	{r4, pc}

080103ee <__sclose>:
 80103ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f2:	f000 b8d3 	b.w	801059c <_close_r>
	...

080103f8 <__swbuf_r>:
 80103f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103fa:	460e      	mov	r6, r1
 80103fc:	4614      	mov	r4, r2
 80103fe:	4605      	mov	r5, r0
 8010400:	b118      	cbz	r0, 801040a <__swbuf_r+0x12>
 8010402:	6983      	ldr	r3, [r0, #24]
 8010404:	b90b      	cbnz	r3, 801040a <__swbuf_r+0x12>
 8010406:	f7ff fba1 	bl	800fb4c <__sinit>
 801040a:	4b21      	ldr	r3, [pc, #132]	; (8010490 <__swbuf_r+0x98>)
 801040c:	429c      	cmp	r4, r3
 801040e:	d12a      	bne.n	8010466 <__swbuf_r+0x6e>
 8010410:	686c      	ldr	r4, [r5, #4]
 8010412:	69a3      	ldr	r3, [r4, #24]
 8010414:	60a3      	str	r3, [r4, #8]
 8010416:	89a3      	ldrh	r3, [r4, #12]
 8010418:	071a      	lsls	r2, r3, #28
 801041a:	d52e      	bpl.n	801047a <__swbuf_r+0x82>
 801041c:	6923      	ldr	r3, [r4, #16]
 801041e:	b363      	cbz	r3, 801047a <__swbuf_r+0x82>
 8010420:	6923      	ldr	r3, [r4, #16]
 8010422:	6820      	ldr	r0, [r4, #0]
 8010424:	1ac0      	subs	r0, r0, r3
 8010426:	6963      	ldr	r3, [r4, #20]
 8010428:	b2f6      	uxtb	r6, r6
 801042a:	4283      	cmp	r3, r0
 801042c:	4637      	mov	r7, r6
 801042e:	dc04      	bgt.n	801043a <__swbuf_r+0x42>
 8010430:	4621      	mov	r1, r4
 8010432:	4628      	mov	r0, r5
 8010434:	f000 f948 	bl	80106c8 <_fflush_r>
 8010438:	bb28      	cbnz	r0, 8010486 <__swbuf_r+0x8e>
 801043a:	68a3      	ldr	r3, [r4, #8]
 801043c:	3b01      	subs	r3, #1
 801043e:	60a3      	str	r3, [r4, #8]
 8010440:	6823      	ldr	r3, [r4, #0]
 8010442:	1c5a      	adds	r2, r3, #1
 8010444:	6022      	str	r2, [r4, #0]
 8010446:	701e      	strb	r6, [r3, #0]
 8010448:	6963      	ldr	r3, [r4, #20]
 801044a:	3001      	adds	r0, #1
 801044c:	4283      	cmp	r3, r0
 801044e:	d004      	beq.n	801045a <__swbuf_r+0x62>
 8010450:	89a3      	ldrh	r3, [r4, #12]
 8010452:	07db      	lsls	r3, r3, #31
 8010454:	d519      	bpl.n	801048a <__swbuf_r+0x92>
 8010456:	2e0a      	cmp	r6, #10
 8010458:	d117      	bne.n	801048a <__swbuf_r+0x92>
 801045a:	4621      	mov	r1, r4
 801045c:	4628      	mov	r0, r5
 801045e:	f000 f933 	bl	80106c8 <_fflush_r>
 8010462:	b190      	cbz	r0, 801048a <__swbuf_r+0x92>
 8010464:	e00f      	b.n	8010486 <__swbuf_r+0x8e>
 8010466:	4b0b      	ldr	r3, [pc, #44]	; (8010494 <__swbuf_r+0x9c>)
 8010468:	429c      	cmp	r4, r3
 801046a:	d101      	bne.n	8010470 <__swbuf_r+0x78>
 801046c:	68ac      	ldr	r4, [r5, #8]
 801046e:	e7d0      	b.n	8010412 <__swbuf_r+0x1a>
 8010470:	4b09      	ldr	r3, [pc, #36]	; (8010498 <__swbuf_r+0xa0>)
 8010472:	429c      	cmp	r4, r3
 8010474:	bf08      	it	eq
 8010476:	68ec      	ldreq	r4, [r5, #12]
 8010478:	e7cb      	b.n	8010412 <__swbuf_r+0x1a>
 801047a:	4621      	mov	r1, r4
 801047c:	4628      	mov	r0, r5
 801047e:	f000 f81f 	bl	80104c0 <__swsetup_r>
 8010482:	2800      	cmp	r0, #0
 8010484:	d0cc      	beq.n	8010420 <__swbuf_r+0x28>
 8010486:	f04f 37ff 	mov.w	r7, #4294967295
 801048a:	4638      	mov	r0, r7
 801048c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801048e:	bf00      	nop
 8010490:	08013740 	.word	0x08013740
 8010494:	08013760 	.word	0x08013760
 8010498:	08013720 	.word	0x08013720

0801049c <_write_r>:
 801049c:	b538      	push	{r3, r4, r5, lr}
 801049e:	4c07      	ldr	r4, [pc, #28]	; (80104bc <_write_r+0x20>)
 80104a0:	4605      	mov	r5, r0
 80104a2:	4608      	mov	r0, r1
 80104a4:	4611      	mov	r1, r2
 80104a6:	2200      	movs	r2, #0
 80104a8:	6022      	str	r2, [r4, #0]
 80104aa:	461a      	mov	r2, r3
 80104ac:	f7f0 fbe3 	bl	8000c76 <_write>
 80104b0:	1c43      	adds	r3, r0, #1
 80104b2:	d102      	bne.n	80104ba <_write_r+0x1e>
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	b103      	cbz	r3, 80104ba <_write_r+0x1e>
 80104b8:	602b      	str	r3, [r5, #0]
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	2000656c 	.word	0x2000656c

080104c0 <__swsetup_r>:
 80104c0:	4b32      	ldr	r3, [pc, #200]	; (801058c <__swsetup_r+0xcc>)
 80104c2:	b570      	push	{r4, r5, r6, lr}
 80104c4:	681d      	ldr	r5, [r3, #0]
 80104c6:	4606      	mov	r6, r0
 80104c8:	460c      	mov	r4, r1
 80104ca:	b125      	cbz	r5, 80104d6 <__swsetup_r+0x16>
 80104cc:	69ab      	ldr	r3, [r5, #24]
 80104ce:	b913      	cbnz	r3, 80104d6 <__swsetup_r+0x16>
 80104d0:	4628      	mov	r0, r5
 80104d2:	f7ff fb3b 	bl	800fb4c <__sinit>
 80104d6:	4b2e      	ldr	r3, [pc, #184]	; (8010590 <__swsetup_r+0xd0>)
 80104d8:	429c      	cmp	r4, r3
 80104da:	d10f      	bne.n	80104fc <__swsetup_r+0x3c>
 80104dc:	686c      	ldr	r4, [r5, #4]
 80104de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	0715      	lsls	r5, r2, #28
 80104e6:	d42c      	bmi.n	8010542 <__swsetup_r+0x82>
 80104e8:	06d0      	lsls	r0, r2, #27
 80104ea:	d411      	bmi.n	8010510 <__swsetup_r+0x50>
 80104ec:	2209      	movs	r2, #9
 80104ee:	6032      	str	r2, [r6, #0]
 80104f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104f4:	81a3      	strh	r3, [r4, #12]
 80104f6:	f04f 30ff 	mov.w	r0, #4294967295
 80104fa:	e03e      	b.n	801057a <__swsetup_r+0xba>
 80104fc:	4b25      	ldr	r3, [pc, #148]	; (8010594 <__swsetup_r+0xd4>)
 80104fe:	429c      	cmp	r4, r3
 8010500:	d101      	bne.n	8010506 <__swsetup_r+0x46>
 8010502:	68ac      	ldr	r4, [r5, #8]
 8010504:	e7eb      	b.n	80104de <__swsetup_r+0x1e>
 8010506:	4b24      	ldr	r3, [pc, #144]	; (8010598 <__swsetup_r+0xd8>)
 8010508:	429c      	cmp	r4, r3
 801050a:	bf08      	it	eq
 801050c:	68ec      	ldreq	r4, [r5, #12]
 801050e:	e7e6      	b.n	80104de <__swsetup_r+0x1e>
 8010510:	0751      	lsls	r1, r2, #29
 8010512:	d512      	bpl.n	801053a <__swsetup_r+0x7a>
 8010514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010516:	b141      	cbz	r1, 801052a <__swsetup_r+0x6a>
 8010518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801051c:	4299      	cmp	r1, r3
 801051e:	d002      	beq.n	8010526 <__swsetup_r+0x66>
 8010520:	4630      	mov	r0, r6
 8010522:	f7ff fba5 	bl	800fc70 <_free_r>
 8010526:	2300      	movs	r3, #0
 8010528:	6363      	str	r3, [r4, #52]	; 0x34
 801052a:	89a3      	ldrh	r3, [r4, #12]
 801052c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010530:	81a3      	strh	r3, [r4, #12]
 8010532:	2300      	movs	r3, #0
 8010534:	6063      	str	r3, [r4, #4]
 8010536:	6923      	ldr	r3, [r4, #16]
 8010538:	6023      	str	r3, [r4, #0]
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	f043 0308 	orr.w	r3, r3, #8
 8010540:	81a3      	strh	r3, [r4, #12]
 8010542:	6923      	ldr	r3, [r4, #16]
 8010544:	b94b      	cbnz	r3, 801055a <__swsetup_r+0x9a>
 8010546:	89a3      	ldrh	r3, [r4, #12]
 8010548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801054c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010550:	d003      	beq.n	801055a <__swsetup_r+0x9a>
 8010552:	4621      	mov	r1, r4
 8010554:	4630      	mov	r0, r6
 8010556:	f000 f917 	bl	8010788 <__smakebuf_r>
 801055a:	89a2      	ldrh	r2, [r4, #12]
 801055c:	f012 0301 	ands.w	r3, r2, #1
 8010560:	d00c      	beq.n	801057c <__swsetup_r+0xbc>
 8010562:	2300      	movs	r3, #0
 8010564:	60a3      	str	r3, [r4, #8]
 8010566:	6963      	ldr	r3, [r4, #20]
 8010568:	425b      	negs	r3, r3
 801056a:	61a3      	str	r3, [r4, #24]
 801056c:	6923      	ldr	r3, [r4, #16]
 801056e:	b953      	cbnz	r3, 8010586 <__swsetup_r+0xc6>
 8010570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010574:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010578:	d1ba      	bne.n	80104f0 <__swsetup_r+0x30>
 801057a:	bd70      	pop	{r4, r5, r6, pc}
 801057c:	0792      	lsls	r2, r2, #30
 801057e:	bf58      	it	pl
 8010580:	6963      	ldrpl	r3, [r4, #20]
 8010582:	60a3      	str	r3, [r4, #8]
 8010584:	e7f2      	b.n	801056c <__swsetup_r+0xac>
 8010586:	2000      	movs	r0, #0
 8010588:	e7f7      	b.n	801057a <__swsetup_r+0xba>
 801058a:	bf00      	nop
 801058c:	20000018 	.word	0x20000018
 8010590:	08013740 	.word	0x08013740
 8010594:	08013760 	.word	0x08013760
 8010598:	08013720 	.word	0x08013720

0801059c <_close_r>:
 801059c:	b538      	push	{r3, r4, r5, lr}
 801059e:	4c06      	ldr	r4, [pc, #24]	; (80105b8 <_close_r+0x1c>)
 80105a0:	2300      	movs	r3, #0
 80105a2:	4605      	mov	r5, r0
 80105a4:	4608      	mov	r0, r1
 80105a6:	6023      	str	r3, [r4, #0]
 80105a8:	f7f0 fb81 	bl	8000cae <_close>
 80105ac:	1c43      	adds	r3, r0, #1
 80105ae:	d102      	bne.n	80105b6 <_close_r+0x1a>
 80105b0:	6823      	ldr	r3, [r4, #0]
 80105b2:	b103      	cbz	r3, 80105b6 <_close_r+0x1a>
 80105b4:	602b      	str	r3, [r5, #0]
 80105b6:	bd38      	pop	{r3, r4, r5, pc}
 80105b8:	2000656c 	.word	0x2000656c

080105bc <__sflush_r>:
 80105bc:	898a      	ldrh	r2, [r1, #12]
 80105be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c2:	4605      	mov	r5, r0
 80105c4:	0710      	lsls	r0, r2, #28
 80105c6:	460c      	mov	r4, r1
 80105c8:	d458      	bmi.n	801067c <__sflush_r+0xc0>
 80105ca:	684b      	ldr	r3, [r1, #4]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	dc05      	bgt.n	80105dc <__sflush_r+0x20>
 80105d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	dc02      	bgt.n	80105dc <__sflush_r+0x20>
 80105d6:	2000      	movs	r0, #0
 80105d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105de:	2e00      	cmp	r6, #0
 80105e0:	d0f9      	beq.n	80105d6 <__sflush_r+0x1a>
 80105e2:	2300      	movs	r3, #0
 80105e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105e8:	682f      	ldr	r7, [r5, #0]
 80105ea:	6a21      	ldr	r1, [r4, #32]
 80105ec:	602b      	str	r3, [r5, #0]
 80105ee:	d032      	beq.n	8010656 <__sflush_r+0x9a>
 80105f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105f2:	89a3      	ldrh	r3, [r4, #12]
 80105f4:	075a      	lsls	r2, r3, #29
 80105f6:	d505      	bpl.n	8010604 <__sflush_r+0x48>
 80105f8:	6863      	ldr	r3, [r4, #4]
 80105fa:	1ac0      	subs	r0, r0, r3
 80105fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105fe:	b10b      	cbz	r3, 8010604 <__sflush_r+0x48>
 8010600:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010602:	1ac0      	subs	r0, r0, r3
 8010604:	2300      	movs	r3, #0
 8010606:	4602      	mov	r2, r0
 8010608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801060a:	6a21      	ldr	r1, [r4, #32]
 801060c:	4628      	mov	r0, r5
 801060e:	47b0      	blx	r6
 8010610:	1c43      	adds	r3, r0, #1
 8010612:	89a3      	ldrh	r3, [r4, #12]
 8010614:	d106      	bne.n	8010624 <__sflush_r+0x68>
 8010616:	6829      	ldr	r1, [r5, #0]
 8010618:	291d      	cmp	r1, #29
 801061a:	d848      	bhi.n	80106ae <__sflush_r+0xf2>
 801061c:	4a29      	ldr	r2, [pc, #164]	; (80106c4 <__sflush_r+0x108>)
 801061e:	40ca      	lsrs	r2, r1
 8010620:	07d6      	lsls	r6, r2, #31
 8010622:	d544      	bpl.n	80106ae <__sflush_r+0xf2>
 8010624:	2200      	movs	r2, #0
 8010626:	6062      	str	r2, [r4, #4]
 8010628:	04d9      	lsls	r1, r3, #19
 801062a:	6922      	ldr	r2, [r4, #16]
 801062c:	6022      	str	r2, [r4, #0]
 801062e:	d504      	bpl.n	801063a <__sflush_r+0x7e>
 8010630:	1c42      	adds	r2, r0, #1
 8010632:	d101      	bne.n	8010638 <__sflush_r+0x7c>
 8010634:	682b      	ldr	r3, [r5, #0]
 8010636:	b903      	cbnz	r3, 801063a <__sflush_r+0x7e>
 8010638:	6560      	str	r0, [r4, #84]	; 0x54
 801063a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801063c:	602f      	str	r7, [r5, #0]
 801063e:	2900      	cmp	r1, #0
 8010640:	d0c9      	beq.n	80105d6 <__sflush_r+0x1a>
 8010642:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010646:	4299      	cmp	r1, r3
 8010648:	d002      	beq.n	8010650 <__sflush_r+0x94>
 801064a:	4628      	mov	r0, r5
 801064c:	f7ff fb10 	bl	800fc70 <_free_r>
 8010650:	2000      	movs	r0, #0
 8010652:	6360      	str	r0, [r4, #52]	; 0x34
 8010654:	e7c0      	b.n	80105d8 <__sflush_r+0x1c>
 8010656:	2301      	movs	r3, #1
 8010658:	4628      	mov	r0, r5
 801065a:	47b0      	blx	r6
 801065c:	1c41      	adds	r1, r0, #1
 801065e:	d1c8      	bne.n	80105f2 <__sflush_r+0x36>
 8010660:	682b      	ldr	r3, [r5, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d0c5      	beq.n	80105f2 <__sflush_r+0x36>
 8010666:	2b1d      	cmp	r3, #29
 8010668:	d001      	beq.n	801066e <__sflush_r+0xb2>
 801066a:	2b16      	cmp	r3, #22
 801066c:	d101      	bne.n	8010672 <__sflush_r+0xb6>
 801066e:	602f      	str	r7, [r5, #0]
 8010670:	e7b1      	b.n	80105d6 <__sflush_r+0x1a>
 8010672:	89a3      	ldrh	r3, [r4, #12]
 8010674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010678:	81a3      	strh	r3, [r4, #12]
 801067a:	e7ad      	b.n	80105d8 <__sflush_r+0x1c>
 801067c:	690f      	ldr	r7, [r1, #16]
 801067e:	2f00      	cmp	r7, #0
 8010680:	d0a9      	beq.n	80105d6 <__sflush_r+0x1a>
 8010682:	0793      	lsls	r3, r2, #30
 8010684:	680e      	ldr	r6, [r1, #0]
 8010686:	bf08      	it	eq
 8010688:	694b      	ldreq	r3, [r1, #20]
 801068a:	600f      	str	r7, [r1, #0]
 801068c:	bf18      	it	ne
 801068e:	2300      	movne	r3, #0
 8010690:	eba6 0807 	sub.w	r8, r6, r7
 8010694:	608b      	str	r3, [r1, #8]
 8010696:	f1b8 0f00 	cmp.w	r8, #0
 801069a:	dd9c      	ble.n	80105d6 <__sflush_r+0x1a>
 801069c:	4643      	mov	r3, r8
 801069e:	463a      	mov	r2, r7
 80106a0:	6a21      	ldr	r1, [r4, #32]
 80106a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106a4:	4628      	mov	r0, r5
 80106a6:	47b0      	blx	r6
 80106a8:	2800      	cmp	r0, #0
 80106aa:	dc06      	bgt.n	80106ba <__sflush_r+0xfe>
 80106ac:	89a3      	ldrh	r3, [r4, #12]
 80106ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106b2:	81a3      	strh	r3, [r4, #12]
 80106b4:	f04f 30ff 	mov.w	r0, #4294967295
 80106b8:	e78e      	b.n	80105d8 <__sflush_r+0x1c>
 80106ba:	4407      	add	r7, r0
 80106bc:	eba8 0800 	sub.w	r8, r8, r0
 80106c0:	e7e9      	b.n	8010696 <__sflush_r+0xda>
 80106c2:	bf00      	nop
 80106c4:	20400001 	.word	0x20400001

080106c8 <_fflush_r>:
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	690b      	ldr	r3, [r1, #16]
 80106cc:	4605      	mov	r5, r0
 80106ce:	460c      	mov	r4, r1
 80106d0:	b1db      	cbz	r3, 801070a <_fflush_r+0x42>
 80106d2:	b118      	cbz	r0, 80106dc <_fflush_r+0x14>
 80106d4:	6983      	ldr	r3, [r0, #24]
 80106d6:	b90b      	cbnz	r3, 80106dc <_fflush_r+0x14>
 80106d8:	f7ff fa38 	bl	800fb4c <__sinit>
 80106dc:	4b0c      	ldr	r3, [pc, #48]	; (8010710 <_fflush_r+0x48>)
 80106de:	429c      	cmp	r4, r3
 80106e0:	d109      	bne.n	80106f6 <_fflush_r+0x2e>
 80106e2:	686c      	ldr	r4, [r5, #4]
 80106e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106e8:	b17b      	cbz	r3, 801070a <_fflush_r+0x42>
 80106ea:	4621      	mov	r1, r4
 80106ec:	4628      	mov	r0, r5
 80106ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106f2:	f7ff bf63 	b.w	80105bc <__sflush_r>
 80106f6:	4b07      	ldr	r3, [pc, #28]	; (8010714 <_fflush_r+0x4c>)
 80106f8:	429c      	cmp	r4, r3
 80106fa:	d101      	bne.n	8010700 <_fflush_r+0x38>
 80106fc:	68ac      	ldr	r4, [r5, #8]
 80106fe:	e7f1      	b.n	80106e4 <_fflush_r+0x1c>
 8010700:	4b05      	ldr	r3, [pc, #20]	; (8010718 <_fflush_r+0x50>)
 8010702:	429c      	cmp	r4, r3
 8010704:	bf08      	it	eq
 8010706:	68ec      	ldreq	r4, [r5, #12]
 8010708:	e7ec      	b.n	80106e4 <_fflush_r+0x1c>
 801070a:	2000      	movs	r0, #0
 801070c:	bd38      	pop	{r3, r4, r5, pc}
 801070e:	bf00      	nop
 8010710:	08013740 	.word	0x08013740
 8010714:	08013760 	.word	0x08013760
 8010718:	08013720 	.word	0x08013720

0801071c <_lseek_r>:
 801071c:	b538      	push	{r3, r4, r5, lr}
 801071e:	4c07      	ldr	r4, [pc, #28]	; (801073c <_lseek_r+0x20>)
 8010720:	4605      	mov	r5, r0
 8010722:	4608      	mov	r0, r1
 8010724:	4611      	mov	r1, r2
 8010726:	2200      	movs	r2, #0
 8010728:	6022      	str	r2, [r4, #0]
 801072a:	461a      	mov	r2, r3
 801072c:	f7f0 fae6 	bl	8000cfc <_lseek>
 8010730:	1c43      	adds	r3, r0, #1
 8010732:	d102      	bne.n	801073a <_lseek_r+0x1e>
 8010734:	6823      	ldr	r3, [r4, #0]
 8010736:	b103      	cbz	r3, 801073a <_lseek_r+0x1e>
 8010738:	602b      	str	r3, [r5, #0]
 801073a:	bd38      	pop	{r3, r4, r5, pc}
 801073c:	2000656c 	.word	0x2000656c

08010740 <__swhatbuf_r>:
 8010740:	b570      	push	{r4, r5, r6, lr}
 8010742:	460e      	mov	r6, r1
 8010744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010748:	2900      	cmp	r1, #0
 801074a:	b096      	sub	sp, #88	; 0x58
 801074c:	4614      	mov	r4, r2
 801074e:	461d      	mov	r5, r3
 8010750:	da07      	bge.n	8010762 <__swhatbuf_r+0x22>
 8010752:	2300      	movs	r3, #0
 8010754:	602b      	str	r3, [r5, #0]
 8010756:	89b3      	ldrh	r3, [r6, #12]
 8010758:	061a      	lsls	r2, r3, #24
 801075a:	d410      	bmi.n	801077e <__swhatbuf_r+0x3e>
 801075c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010760:	e00e      	b.n	8010780 <__swhatbuf_r+0x40>
 8010762:	466a      	mov	r2, sp
 8010764:	f000 f864 	bl	8010830 <_fstat_r>
 8010768:	2800      	cmp	r0, #0
 801076a:	dbf2      	blt.n	8010752 <__swhatbuf_r+0x12>
 801076c:	9a01      	ldr	r2, [sp, #4]
 801076e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010772:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010776:	425a      	negs	r2, r3
 8010778:	415a      	adcs	r2, r3
 801077a:	602a      	str	r2, [r5, #0]
 801077c:	e7ee      	b.n	801075c <__swhatbuf_r+0x1c>
 801077e:	2340      	movs	r3, #64	; 0x40
 8010780:	2000      	movs	r0, #0
 8010782:	6023      	str	r3, [r4, #0]
 8010784:	b016      	add	sp, #88	; 0x58
 8010786:	bd70      	pop	{r4, r5, r6, pc}

08010788 <__smakebuf_r>:
 8010788:	898b      	ldrh	r3, [r1, #12]
 801078a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801078c:	079d      	lsls	r5, r3, #30
 801078e:	4606      	mov	r6, r0
 8010790:	460c      	mov	r4, r1
 8010792:	d507      	bpl.n	80107a4 <__smakebuf_r+0x1c>
 8010794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010798:	6023      	str	r3, [r4, #0]
 801079a:	6123      	str	r3, [r4, #16]
 801079c:	2301      	movs	r3, #1
 801079e:	6163      	str	r3, [r4, #20]
 80107a0:	b002      	add	sp, #8
 80107a2:	bd70      	pop	{r4, r5, r6, pc}
 80107a4:	ab01      	add	r3, sp, #4
 80107a6:	466a      	mov	r2, sp
 80107a8:	f7ff ffca 	bl	8010740 <__swhatbuf_r>
 80107ac:	9900      	ldr	r1, [sp, #0]
 80107ae:	4605      	mov	r5, r0
 80107b0:	4630      	mov	r0, r6
 80107b2:	f7ff faab 	bl	800fd0c <_malloc_r>
 80107b6:	b948      	cbnz	r0, 80107cc <__smakebuf_r+0x44>
 80107b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107bc:	059a      	lsls	r2, r3, #22
 80107be:	d4ef      	bmi.n	80107a0 <__smakebuf_r+0x18>
 80107c0:	f023 0303 	bic.w	r3, r3, #3
 80107c4:	f043 0302 	orr.w	r3, r3, #2
 80107c8:	81a3      	strh	r3, [r4, #12]
 80107ca:	e7e3      	b.n	8010794 <__smakebuf_r+0xc>
 80107cc:	4b0d      	ldr	r3, [pc, #52]	; (8010804 <__smakebuf_r+0x7c>)
 80107ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80107d0:	89a3      	ldrh	r3, [r4, #12]
 80107d2:	6020      	str	r0, [r4, #0]
 80107d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107d8:	81a3      	strh	r3, [r4, #12]
 80107da:	9b00      	ldr	r3, [sp, #0]
 80107dc:	6163      	str	r3, [r4, #20]
 80107de:	9b01      	ldr	r3, [sp, #4]
 80107e0:	6120      	str	r0, [r4, #16]
 80107e2:	b15b      	cbz	r3, 80107fc <__smakebuf_r+0x74>
 80107e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107e8:	4630      	mov	r0, r6
 80107ea:	f000 f833 	bl	8010854 <_isatty_r>
 80107ee:	b128      	cbz	r0, 80107fc <__smakebuf_r+0x74>
 80107f0:	89a3      	ldrh	r3, [r4, #12]
 80107f2:	f023 0303 	bic.w	r3, r3, #3
 80107f6:	f043 0301 	orr.w	r3, r3, #1
 80107fa:	81a3      	strh	r3, [r4, #12]
 80107fc:	89a3      	ldrh	r3, [r4, #12]
 80107fe:	431d      	orrs	r5, r3
 8010800:	81a5      	strh	r5, [r4, #12]
 8010802:	e7cd      	b.n	80107a0 <__smakebuf_r+0x18>
 8010804:	0800fb15 	.word	0x0800fb15

08010808 <__malloc_lock>:
 8010808:	4770      	bx	lr

0801080a <__malloc_unlock>:
 801080a:	4770      	bx	lr

0801080c <_read_r>:
 801080c:	b538      	push	{r3, r4, r5, lr}
 801080e:	4c07      	ldr	r4, [pc, #28]	; (801082c <_read_r+0x20>)
 8010810:	4605      	mov	r5, r0
 8010812:	4608      	mov	r0, r1
 8010814:	4611      	mov	r1, r2
 8010816:	2200      	movs	r2, #0
 8010818:	6022      	str	r2, [r4, #0]
 801081a:	461a      	mov	r2, r3
 801081c:	f7f0 fa0e 	bl	8000c3c <_read>
 8010820:	1c43      	adds	r3, r0, #1
 8010822:	d102      	bne.n	801082a <_read_r+0x1e>
 8010824:	6823      	ldr	r3, [r4, #0]
 8010826:	b103      	cbz	r3, 801082a <_read_r+0x1e>
 8010828:	602b      	str	r3, [r5, #0]
 801082a:	bd38      	pop	{r3, r4, r5, pc}
 801082c:	2000656c 	.word	0x2000656c

08010830 <_fstat_r>:
 8010830:	b538      	push	{r3, r4, r5, lr}
 8010832:	4c07      	ldr	r4, [pc, #28]	; (8010850 <_fstat_r+0x20>)
 8010834:	2300      	movs	r3, #0
 8010836:	4605      	mov	r5, r0
 8010838:	4608      	mov	r0, r1
 801083a:	4611      	mov	r1, r2
 801083c:	6023      	str	r3, [r4, #0]
 801083e:	f7f0 fa42 	bl	8000cc6 <_fstat>
 8010842:	1c43      	adds	r3, r0, #1
 8010844:	d102      	bne.n	801084c <_fstat_r+0x1c>
 8010846:	6823      	ldr	r3, [r4, #0]
 8010848:	b103      	cbz	r3, 801084c <_fstat_r+0x1c>
 801084a:	602b      	str	r3, [r5, #0]
 801084c:	bd38      	pop	{r3, r4, r5, pc}
 801084e:	bf00      	nop
 8010850:	2000656c 	.word	0x2000656c

08010854 <_isatty_r>:
 8010854:	b538      	push	{r3, r4, r5, lr}
 8010856:	4c06      	ldr	r4, [pc, #24]	; (8010870 <_isatty_r+0x1c>)
 8010858:	2300      	movs	r3, #0
 801085a:	4605      	mov	r5, r0
 801085c:	4608      	mov	r0, r1
 801085e:	6023      	str	r3, [r4, #0]
 8010860:	f7f0 fa41 	bl	8000ce6 <_isatty>
 8010864:	1c43      	adds	r3, r0, #1
 8010866:	d102      	bne.n	801086e <_isatty_r+0x1a>
 8010868:	6823      	ldr	r3, [r4, #0]
 801086a:	b103      	cbz	r3, 801086e <_isatty_r+0x1a>
 801086c:	602b      	str	r3, [r5, #0]
 801086e:	bd38      	pop	{r3, r4, r5, pc}
 8010870:	2000656c 	.word	0x2000656c

08010874 <_init>:
 8010874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010876:	bf00      	nop
 8010878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801087a:	bc08      	pop	{r3}
 801087c:	469e      	mov	lr, r3
 801087e:	4770      	bx	lr

08010880 <_fini>:
 8010880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010882:	bf00      	nop
 8010884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010886:	bc08      	pop	{r3}
 8010888:	469e      	mov	lr, r3
 801088a:	4770      	bx	lr
